{"repo":{"0":"using-system\/LightningPay","1":"drminnaar\/react-bitcoin-monitor","2":"lbryio\/lbrycrd","3":"ElementsProject\/lightning-charge","4":"kilimchoi\/cryptocurrency","5":"tip4commit\/tip4commit","6":"LarsHoldgaard\/bitcoin-wrapper","7":"mappum\/bitcoin-protocol","8":"HelloZeroNet\/zeronet.io","9":"renproject\/multichain","10":"livegnik\/BitCoin-v0.01-ALPHA","11":"doomhz\/coinnext_engine","12":"happyg1t\/bitcoin-analysis","13":"mmick66\/jswallet","14":"DissentDifference\/DarkWallet","15":"weex\/oscommerce-bitcoin","16":"stiggy87\/ZynqBTC","17":"palmall\/WebBitcoinEscrow","18":"dily3825002\/awesome-blockchain","19":"Coldcard\/firmware","20":"circulosmeos\/bitcoin-in-tiny-pieces","21":"shamoons\/Kapitalize","22":"Ayms\/bitcoin-wallets","23":"technologiespro\/paper-wallet-generator","24":"jdcloud-bds\/bds-btc","25":"scintill\/php-bitcoin-signature-routines","26":"gcash\/bchd","27":"SqueezerIO\/squeezer","28":"nayutaco\/ptarmigan","29":"bitcoinfullnode\/rokos-ok-bitcoin-fullnode","30":"indyjo\/bitwrk","31":"ipld\/go-ipld-btc","32":"Kamahl19\/react-native-wallet","33":"Unthinkingbit\/bitcointools","34":"prettymuchbryce\/hellobitcoin","35":"bitcoin333\/bitcoinbook","36":"BitcoinMafia\/SpareCoinsExt","37":"ACINQ\/phoenix","38":"gogogoutham\/bitcointalk-scraper","39":"Kimbatt\/btc-address-generator","40":"mappum\/webcoin","41":"martinus\/BitcoinUtxoVisualizer","42":"nopara73\/HiddenBitcoin","43":"ufasoft\/coin","44":"chibui191\/bitcoin_volatility_forecasting","45":"lamuguo\/bitcoin-java-miner","46":"pierce403\/keyhunter","47":"twostack\/dartsv","48":"pooler\/rollproxy","49":"jameslitton\/coinscope","50":"akx\/walletool","51":"LedgerHQ\/ledgerjs","52":"clapyohands\/cryptofaucet-node","53":"JTuwiner\/btcvol","54":"cryptocoinjs\/cryptocoin","55":"domob1812\/namecoin-core","56":"leeduckgo\/bitcoin_elementary_course_based_on_jupyterlab","57":"arcbit\/arcbit-android","58":"roslinpl\/bitcoin.it-promotional_graphics","59":"dawsbot\/satoshi-bitcoin","60":"lightningnetwork\/lnd","61":"interplanaria\/bitwork","62":"justinmoon\/digital-cash","63":"arcbtc\/LNURLVend","64":"PaulGregor\/Bitcoin-Keys-Generator","65":"keeshux\/basic-blockchain-programming","66":"richardgill\/BitcoinEmissions","67":"BlueWallet\/LndHub","68":"Cvar1984\/pemulungBTC","69":"TheDoctorAI\/AI-Trader","70":"21dotco\/two1-python","71":"btccom\/btcpool-ABANDONED","72":"bitcrystal\/bitcoinexchange","73":"dominictarr\/feedopensource","74":"glv2\/bruteforce-wallet","75":"ryancdotorg\/brainflayer","76":"ryanralph\/altcoin-address","77":"GlacierProtocol\/GlacierProtocol","78":"SF-Bitcoindevs\/bitcoinjslib-wallet","79":"coinorama\/coinorama","80":"ethers\/bitcoin-proof","81":"Bitcoinlightning\/Bitcoin-Lightning","82":"Bitcoin-sCrypt\/Bitcoin-sCrypt","83":"bitsofproof\/bop-bitcoin-client","84":"wobine\/blackboard101","85":"cloudhead\/nakamoto","86":"hippich\/Faucet","87":"samre12\/gym-cryptotrading","88":"ameijer\/bitcoin_wallet_recovery_tool","89":"kanhavishva\/BitCrack2","90":"rsxm\/bitrader","91":"chrisfranko\/bitcoin-webskin","92":"jonasschnelli\/dumb-block-explorer","93":"Kryptsy\/Crypto-Wallet","94":"jalder\/WHMCS-Bitcoin-Payment-Module","95":"jgarzik\/mcp","96":"blackout314\/bitcoin-trading-dca","97":"hylinux1024\/awesome-blockchain-articles","98":"AltCoinExchange\/ethatomicswap","99":"zonedoutspace\/BitWallet","100":"Bitcoinote\/Bitcoinote-GUI-Wallet","101":"planetceres\/bitcoin-nn","102":"zeroreserve\/ZeroReserve","103":"hsjoberg\/blixt-wallet","104":"barmstrong\/slack-tipbot","105":"norn\/bctip","106":"rodrigo-brito\/backtrader-binance-bot","107":"ZenGo-X\/mnemonic-recovery","108":"doublec\/bitcoin-pool","109":"bitcoin-computer\/bitcoin-computer-bitcore","110":"using-system\/LightningPay","111":"tip4commit\/tip4commit","112":"drminnaar\/react-bitcoin-monitor","113":"LarsHoldgaard\/bitcoin-wrapper","114":"mappum\/bitcoin-protocol","115":"lbryio\/lbrycrd","116":"kilimchoi\/cryptocurrency","117":"ElementsProject\/lightning-charge","118":"HelloZeroNet\/zeronet.io","119":"renproject\/multichain","120":"openblockchains\/programming-bitcoin-script","121":"lyndsysimon\/bip32utils","122":"fccoelho\/Curso_Blockchain","123":"anfederico\/cryptoview","124":"trezor\/trezor-hardware","125":"ashchan\/bitcoin-ethereum-cryptography","126":"bitpay\/foxtrot","127":"vog\/bitcoinproof","128":"organofcorti\/bitcoin-blockchain-data","129":"jonasschnelli\/bitcoincore-indexd","130":"openblockchains\/bitcoin-ponzi","131":"changelly\/api-changelly","132":"ivanbrugere\/Bitcoin-Transaction-Network-Extraction","133":"bitcoin-intro\/bitcoin-intro","134":"Ebookcoin\/ebookcoin","135":"adamkrellenstein\/unspendable","136":"cryptoapi\/Python-Django-Flask-Bitcoin-Payments","137":"benjamin-l-bc\/Smart-Bitcoin-Auto-Trading-Bot-based-on-Nerual-Networks","138":"Jumpsu\/klondike","139":"stacks-network\/pybitcoin","140":"badger-cash\/badger","141":"dan-da\/hd-wallet-addrs","142":"kendricktan\/misocoin","143":"bitcoinbrisbane\/BitPoker","144":"javgh\/greenaddress-pos-tools","145":"stequald\/bitcoin-sign-message","146":"Haseeb-Qureshi\/lets-build-a-blockchain","147":"goncalopp\/mexbtcapi","148":"minershive\/hiveos-asic","149":"xunxdd\/bitcoin-news-charts","150":"BUSEC\/TumbleBit","151":"FreekPaans\/bitcoin-multi-node-regtest","152":"bitcoin-resources\/bitcoin-resources.github.io","153":"phelix\/easywinbuilder","154":"geminipy\/geminipy","155":"mydicebot\/mydicebot.github.io","156":"GarageGames\/Bitcoin","157":"1234max\/multivendorbitcoinmart","158":"TheBlueMatt\/dnsseed","159":"paOol\/Bitcoin-Cash-RPC","160":"SufficientlySecure\/donations","161":"unwriter\/datapay","162":"bostonlink\/bitcoin-explorer","163":"trezor\/trezor.js","164":"svtrostov\/oclexplorer","165":"NicolasChoukroun\/BitcoinMaker","166":"bitcoincoltd\/bitexthai","167":"archienorman11\/thesis-bitcoin-clustering","168":"ticean\/magento-bitcoin","169":"keeshux\/basic-blockchain-programming","170":"interplanaria\/bitwork","171":"blockchain\/blockchain-wallet-v4-frontend","172":"arcbtc\/LNURLVend","173":"PaulGregor\/Bitcoin-Keys-Generator","174":"ryancdotorg\/brainflayer","175":"justinmoon\/digital-cash","176":"richardgill\/BitcoinEmissions","177":"BlueWallet\/LndHub","178":"Cvar1984\/pemulungBTC","179":"TheDoctorAI\/AI-Trader"},"language":{"0":"C#","1":"JavaScript","2":"C++","3":"JavaScript","4":null,"5":"Ruby","6":"JavaScript","7":"JavaScript","8":"HTML","9":"Go","10":"C++","11":"CoffeeScript","12":null,"13":"JavaScript","14":"Python","15":"PHP","16":"VHDL","17":"HTML","18":null,"19":"Python","20":"Python","21":"JavaScript","22":"JavaScript","23":"Vue","24":"C++","25":"PHP","26":"Go","27":"JavaScript","28":"C","29":null,"30":"Go","31":"Go","32":"JavaScript","33":"Python","34":"Go","35":"Python","36":"JavaScript","37":"C","38":"Python","39":"HTML","40":"JavaScript","41":"C++","42":"C#","43":"C++","44":"Jupyter Notebook","45":"Java","46":"Python","47":"Dart","48":"Python","49":"C++","50":"Python","51":"TypeScript","52":"JavaScript","53":"JavaScript","54":"JavaScript","55":"C++","56":"HTML","57":"Java","58":null,"59":"JavaScript","60":"Go","61":"JavaScript","62":"Python","63":"C","64":"Python","65":"C","66":null,"67":"JavaScript","68":"PHP","69":"Jupyter Notebook","70":"Python","71":"C++","72":"PHP","73":"JavaScript","74":"C","75":"C","76":"JavaScript","77":"Python","78":"CSS","79":"JavaScript","80":"JavaScript","81":"C++","82":"C++","83":"Java","84":"Python","85":"Rust","86":"Perl","87":"Python","88":"Java","89":"C++","90":"Python","91":"PHP","92":"PHP","93":"PHP","94":"PHP","95":"JavaScript","96":"JavaScript","97":null,"98":"JavaScript","99":"PHP","100":"C++","101":"Python","102":"C++","103":"TypeScript","104":"Ruby","105":"Python","106":"Python","107":"HTML","108":"C++","109":"JavaScript","110":"C#","111":"Ruby","112":"JavaScript","113":"JavaScript","114":"JavaScript","115":"C++","116":null,"117":"JavaScript","118":"HTML","119":"Go","120":"Ruby","121":"Python","122":"HTML","123":"Python","124":null,"125":null,"126":"JavaScript","127":"Python","128":"R","129":"C","130":null,"131":"JavaScript","132":"Python","133":null,"134":"JavaScript","135":"Python","136":"JavaScript","137":"Python","138":"Prolog","139":"Python","140":"JavaScript","141":"PHP","142":"Python","143":"C#","144":"Python","145":"Python","146":"Ruby","147":"Python","148":"Shell","149":"JavaScript","150":"C++","151":null,"152":"SCSS","153":"Shell","154":"Python","155":"JavaScript","156":"JavaScript","157":"PHP","158":"PHP","159":"JavaScript","160":"Java","161":"JavaScript","162":"Python","163":"JavaScript","164":"C","165":"Shell","166":"PHP","167":"Jupyter Notebook","168":"PHP","169":"C","170":"JavaScript","171":"TypeScript","172":"C","173":"Python","174":"C","175":"Python","176":null,"177":"JavaScript","178":"PHP","179":"Jupyter Notebook"},"readme_contents":{"0":"# LightningPay\nBitcoin Lightning Network Payment .NET library\n\n## Features\n\n- [x] Get balance ([Documentation](documentation\/client.md#get-wallet-balance))\n- [x] Create an invoice ([Documentation](documentation\/client.md#create-an-invoice))\n- [x] Check payment ([Documentation](documentation\/client.md#check-invoice-payment))\n- [x] Pay an invoice ([Documentation](documentation\/client.md#pay))\n\n## Packages\n\n- `LightningPay.Abstractions` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.Abstractions.svg)](https:\/\/www.nuget.org\/packages\/LightningPay.Abstractions) : Interfaces and model used by `LightningPay` \n- `LightningPay` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.svg)](https:\/\/www.nuget.org\/packages\/LightningPay) : Core library with all Lightning clients\n- `LightningPay.DependencyInjection` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.DependencyInjection.svg)](https:\/\/www.nuget.org\/packages\/LightningPay.DependencyInjection) : Extension methods for .NET DI\n\nSee [Which package to use ?](documentation\/packages.md) for more details.\n\n## Integration\n\nConnect to your lightning nodes : \n\n- [x] LND ([Documentation](documentation\/client-lnd.md))\n- [x] C-Lightning ([Documentation](documentation\/client-clightning.md))\n- [x] Eclair  ([Documentation](documentation\/client-eclair.md))\n- [ ] Charge (Not supported yet)\n\nOr with custodial solution for lightning (without having a node  of your own) : \n\n- [x] LNDHub \/ BlueWallet ([Documentation](documentation\/client-lndhub.md))\n- [x] LNBits ([Documentation](documentation\/client-lnbits.md))\n\n## Extensible\n\nWith `LightningPay`, you can easly extend your client by add extension methods to the `ILightningClient` interface.\n\nSee the [full documentation here](\/documentation\/extensions.md).\n\n## Samples\n\nNeed for code samples ? Go here : [Lightning samples](samples\/)\n\n## Documentation\n\n[Lightning Documentation](documentation\/)\n\n## Local test\n\nYou can use our [docker-compose file](docker\/) to test the `LightningPay` clients.\n\n## Continuous Integration\n\n[LightningPay build reports](https:\/\/dev.azure.com\/NiawaCorp\/LightningPay\/_build?definitionId=24)\n\n## Contributing\n\nWe appreciate new contributions.\n\n- Non developer : You found a bug or have an suggestion for a new feature ? Don't hesitate to create an issue\n- Developer : develop branch is the principal branch for development. This branch is protected. You must create a pull request and target this branch for code validation.\n\n## Credits\n\nMany thanks to the [BTCPayServer.Lightning](https:\/\/github.com\/btcpayserver\/BTCPayServer.Lightning) project that inspiring us.","1":"# React Bitcoin Monitor\n\nAn app that monitors changes in the _Bitcoin Price Index (BPI)_.\n\nBy default, the BPI will be shown for _USD_, _GBP_, and _EUR_. Optionally, one can select ones own currency to display in addition to the 3 aforementioned currencies.\n\n_Bitcoin Monitor_ makes use of the _[CoinDesk Bitcoin Price Index API]_. Go [here](https:\/\/www.coindesk.com\/price\/) for more price information by CoinDesk.\n\nGo **[here](http:\/\/react-bitcoin-monitor.drminnaar.me\/)** for live demo.\n\nThe application is composed of the following components:\n\n* Header - A heading that displays application title\n\n* BitcoinMonitor - The primary (root) component that manages state for itself and all underlying components. It is also responsible for connecting to _BitcoinService_ to retrieve _Bitcoin Price Index_ data.\n\n* Display - Displays the _Bitcoin Price Index_ data for USD, GBP, and EUR as a default. Also allows one to select a currency as a fourth price to monitor.\n\n* Indicator - Used by the _Display_ component, it displays an indicator that shows if the current price is up or down from previous price.\n\nComponent Diagram\n![Component Diagram](https:\/\/user-images.githubusercontent.com\/33935506\/34460739-2e3b6a84-ee20-11e7-8808-a654fbdaaf55.png)\n\nThe following services are used to obtain _Bitcoin Price Index_ data:\n\n* BitcoinService\n\n  A wrapper that is responsible for integrating with the [CoinDesk Bitcoin Price Index API]\n\nService Diagram\n![react-bitcoin-monitor-services](https:\/\/user-images.githubusercontent.com\/33935506\/34460740-2e7c490a-ee20-11e7-936e-60c637b630da.png)\n\nFeatures:\n\n* Show BPI for USD, GBP, and EUR\n* Show BPI for any custom selected currency\n\nThis project also demonstrates:\n\n* a typcial React project layout structure\n* babel setup and configuration\n* webpack setup and configuration\n* eslint setup and configuration\n* SCSS setup and configuration\n* [CoinDesk Bitcoin Price Index API] integration\n\n**Screenshots:**\n\n... | ...\n---|---\n![](https:\/\/user-images.githubusercontent.com\/33935506\/34460771-4309303a-ee21-11e7-8a41-867a266e092c.png) | ![](https:\/\/user-images.githubusercontent.com\/33935506\/34460772-4337f320-ee21-11e7-9cc5-aa3b78f5f6b0.png)\n![](https:\/\/user-images.githubusercontent.com\/33935506\/34460773-436739be-ee21-11e7-9604-8450e09ee9cc.png) | ![](https:\/\/user-images.githubusercontent.com\/33935506\/34460774-43a80264-ee21-11e7-8323-fbee96ccce35.png)\n\n---\n\n## Developed With\n\n* [Visual Studio Code](https:\/\/code.visualstudio.com\/) - A source code editor developed by Microsoft for Windows, Linux and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring\n* [Node.js](https:\/\/nodejs.org\/en\/) - Javascript runtime\n* [React](https:\/\/reactjs.org\/) - A javascript library for building user interfaces\n* [Babel](https:\/\/babeljs.io\/) - A transpiler for javascript\n* [Webpack](https:\/\/webpack.js.org\/) - A module bundler\n* [SCSS](http:\/\/sass-lang.com\/) - A css metalanguage\n* [Bootstrap 4](https:\/\/getbootstrap.com\/) - Bootstrap is an open source toolkit for developing with HTML, CSS, and JS\n* [Axios](https:\/\/github.com\/axios\/axios) - Promise based HTTP client for the browser and node.js\n* [CoinDesk Bitcoin Price Index API] - Provides Bitcoin Price Index data\n* [Surge] - Static web publishing for Front-End Developers\n\n---\n\n## Related Projects\n\n* [react-starter]\n\n  A basic template that consists of the essential elements that are required to start building a React application\n\n* [react-clicker]\n\n  A basic React app that allows one to increase, decrease, or reset a counter\n\n* [react-clock-basic]\n\n  A basic clock that displays the current date and time\n\n* [react-timer-basic]\n\n  A basic timer that will start a countdown based on an input of time in seconds\n\n* [react-timer-advanced]\n\n   A countdown timer that offers an advanced UI experience\n\n* [react-masterminds]\n\n  A basic game of guessing a number with varying degrees of difficulty\n\n* [react-movie-cards]\n\n  A basic application that displays a list of movies as a list of cards\n\n* [react-calculator-standard]\n\n  A calculator that provides the essential arithmetic operations, an expression builder, and a complete history of all expressions\n\n* [react-weather-standard]\n\n  A weather application that displays the current weather, daily forecasts, and hourly forecasts based on your current geolocation\n\n---\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nThe following software is required to be installed on your system:\n\n* Node 8.x\n* Npm 3.x\n\nType the following commands in the terminal to verify your node and npm versions\n\n```bash\nnode -v\nnpm -v\n```\n\n### Install\n\nFollow the following steps to get development environment running.\n\n* Clone _'react-bitcoin-monitor'_ repository from GitHub\n\n  ```bash\n  git clone https:\/\/github.com\/drminnaar\/react-bitcoin-monitor.git\n  ```\n\n   _OR USING SSH_\n\n  ```bash\n  git clone git@github.com:drminnaar\/react-bitcoin-monitor.git\n  ```\n\n* Install node modules\n\n   ```bash\n   cd react-bitcoin-monitor\n   npm install\n   ```\n\n### Build\n\n* Build application\n\n  This command will also run ESLint as part of build process.\n\n  ```bash\n  npm run build\n  ```\n\n* Build application and start watching for changes\n\n  This command will also run ESLint as part of build process.\n\n  ```bash\n  npm run build:watch\n  ```\n\n### Run ESlint\n\n* Lint project using ESLint\n\n  ```bash\n  npm run lint\n  ```\n\n* Lint project using ESLint, and autofix\n\n  ```bash\n  npm run lint:fix\n  ```\n\n### Run\n\n* Run start\n\n  This will run the _'serve'_ npm task\n\n  ```bash\n  npm start\n  ```\n\n* Run webpack dev server\n\n  ```bash\n  npm run serve:dev\n  ```\n\n* Alternatively run live-server (simple development http server with live reload capability)\n\n  ```bash\n  npm run serve\n  ```\n\n---\n\n## Versioning\n\nI use [SemVer](http:\/\/semver.org\/) for versioning. For the versions available, see the [tags on this repository](https:\/\/github.com\/drminnaar\/react-bitcoin-monitor\/tags).\n\n## Authors\n\n* **Douglas Minnaar** - *Initial work* - [drminnaar](https:\/\/github.com\/drminnaar)\n\n[CoinDesk Bitcoin Price Index API]: https:\/\/www.coindesk.com\/api\/\n[Surge]: https:\/\/surge.sh\/\n[react-starter]: https:\/\/github.com\/drminnaar\/react-starter\n[react-clicker]: https:\/\/github.com\/drminnaar\/react-clicker\n[react-clock-basic]: https:\/\/github.com\/drminnaar\/react-clock-basic\n[react-timer-basic]: https:\/\/github.com\/drminnaar\/react-timer-basic\n[react-timer-advanced]: https:\/\/github.com\/drminnaar\/react-timer-advanced\n[react-masterminds]: https:\/\/github.com\/drminnaar\/react-masterminds\n[react-movie-cards]: https:\/\/github.com\/drminnaar\/react-movie-cards\n[react-calculator-standard]: https:\/\/github.com\/drminnaar\/react-calculator-standard\n[react-weather-standard]: https:\/\/github.com\/drminnaar\/react-weather-standard\n","2":"# LBRYcrd - The LBRY blockchain\n\n[![Build Status](https:\/\/travis-ci.org\/lbryio\/lbrycrd.svg?branch=master)](https:\/\/travis-ci.org\/lbryio\/lbrycrd)\n[![MIT licensed](https:\/\/img.shields.io\/dub\/l\/vibe-d.svg?style=flat)](https:\/\/github.com\/lbryio\/lbry-desktop\/blob\/master\/LICENSE)\n\nLBRYcrd uses a blockchain similar to bitcoin's to implement an index and payment system for content on the LBRY network. It is a fork of [bitcoin core](https:\/\/github.com\/bitcoin\/bitcoin). In addition to the libraries used by bitcoin, LBRYcrd also uses [icu4c](https:\/\/github.com\/unicode-org\/icu\/tree\/master\/icu4c).\n\nPlease read the [lbry.tech overview](https:\/\/lbry.tech\/overview) for a general understanding of the LBRY pieces. From there you could read the [LBRY spec](https:\/\/spec.lbry.com\/) for specifics on the data in the blockchain.\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n   1. [Examples](#examples)\n   2. [Data directory](#data-directory)\n3. [Running from Source](#running-from-source)\n   1. [Ubuntu with pulled static dependencies](#ubuntu-with-pulled-static-dependencies)\n   2. [Ubuntu with local shared dependencies](#ubuntu-with-local-shared-dependencies)\n   3. [MacOS (cross-compiled)](<#macos-(cross-compiled)>)\n   4. [MacOS with local shared dependencies](#macos-with-local-shared-dependencies)\n   5. [Windows (cross-compiled)](<#windows-(cross-compiled)>)\n   6. [Use with CLion](#use-with-clion)\n4. [Contributing](#contributing)\n   - [Testnet](#testnet)\n5. [Mailing List](#mailing-list)\n6. [License](#license)\n7. [Security](#security)\n8. [Contact](#contact)\n\n## Installation\n\nLatest binaries are available from https:\/\/github.com\/lbryio\/lbrycrd\/releases. There is no installation procedure; the CLI binaries will run as-is and will have any uncommon dependencies statically linked into the binary. The QT GUI is not supported. LBRYcrd is distributed as a collection of executable files; traditional installers are not provided.\n\n## Usage\n\nThe `lbrycrdd` executable will start a LBRYcrd node and connect you to the LBRYcrd network. Use the `lbrycrd-cli` executable\nto interact with lbrycrdd through the command line. Command-line help for both executables are available through\nthe \"--help\" flag (e.g. `lbrycrdd --help`). Examples:\n\n#### Examples\n\nRun `.\/lbrycrdd -server -daemon` to start lbrycrdd in the background.\n\nRun `.\/lbrycrd-cli -getinfo` to check for some basic information about your LBRYcrd node.\n\nRun `.\/lbrycrd-cli help` to get a list of all commands that you can run. To get help on specific commands run `.\/lbrycrd-cli [command_name] help`\n\nTest locally:\n\n```sh\n.\/lbrycrdd -server -regtest -txindex  # run this in its own window\n.\/lbrycrd-cli -regtest generate 120   # mine 20 spendable coins\n.\/lbrycrd-cli -regtest claimname my_name deadbeef 1 # hold a name claim with 1 coin\n.\/lbrycrd-cli -regtest generate 1     # get that claim into the block\n.\/lbrycrd-cli -regtest listnameclaims # show owned claims\n.\/lbrycrd-cli -regtest getclaimsforname my_name # show claims under that name\n.\/lbrycrd-cli -regtest stop           # kill lbrycrdd\nrm -fr ~\/.lbrycrd\/regtest\/            # destroy regtest data\n```\n\nFor further understanding of a \"regtest\" setup, see the local stack setup instructions here: https:\/\/lbry.tech\/resources\/regtest-setup\n\nThe CLI help is also browsable online at https:\/\/lbry.tech\/api\/blockchain\n\n#### Data directory\n\nLbrycrdd will use the below default data directories (changeable with -datadir):\n\n```sh\nWindows:  %APPDATA%\\lbrycrd\nMac:      ~\/Library\/Application Support\/lbrycrd\nUnix:     ~\/.lbrycrd\n```\n\nThe data directory contains various things such as your default wallet (wallet.dat), debug logs (debug.log), and blockchain data. You can optionally create a configuration file lbrycrd.conf in the default data directory which will be used by default when running lbrycrdd.\n\nFor a list of configuration parameters, run `.\/lbrycrdd --help`. Below is a sample lbrycrd.conf to enable JSON RPC server on lbrycrdd.\n\n```sh\nrpcuser=lbry\nrpcpassword=xyz123456790\ndaemon=1\nserver=1\ntxindex=1\n```\n\n## Running from Source\n\nThe easiest way to compile is to utilize the Docker image that contains the necessary compilers: lbry\/build_lbrycrd. This will allow you to reproduce the build as made on our build servers. In this sample we map a local lbrycrd folder and a local ccache folder inside the image:\n```sh\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\ndocker run -v \"$(pwd):\/lbrycrd\" --rm -v \"${HOME}\/ccache:\/ccache\" -w \/lbrycrd -e CCACHE_DIR=\/ccache lbry\/build_lbrycrd packaging\/build_linux_64bit.sh\n```\n\nSome examples of compiling directly:\n\n#### Ubuntu with pulled static dependencies\n\n```sh\nsudo apt install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/packaging\/build_linux_64bit.sh\n.\/src\/test\/test_lbrycrd\n\n```\n\nOther Linux distros would be similar. The build shell script is fairly trivial; take a peek at its contents.\n\n#### Ubuntu with local shared dependencies\n\nNote: using untested dependencies may lead to conflicting results.\n\n```sh\nsudo add-apt-repository ppa:bitcoin\/bitcoin\nsudo apt-get update\nsudo apt-get install libdb4.8-dev libdb4.8++-dev libicu-dev libssl-dev libevent-dev \\\n                     build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\n# optionally include libminiupnpc-dev libzmq3-dev\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/autogen.sh\n.\/configure --enable-static --disable-shared --with-pic --without-gui CXXFLAGS=\"-O3 -march=native\"\nmake -j$(nproc)\n.\/src\/lbrycrdd -server ...\n\n```\n\n#### MacOS (cross-compiled)\n\n```sh\nsudo apt-get install clang llvm git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n# download MacOS SDK from your favorite source\nmkdir depends\/SDKs\ntar ... extract SDK to depends\/SDKs\/MacOSX10.11.sdk\n.\/packaging\/build_darwin_64bit.sh\n\n```\n\nLook in packaging\/build_darwin_64bit.sh for further understanding.\n\n#### MacOS with local shared dependencies\n\n```sh\nbrew install boost berkeley-db@4 icu4c libevent\n# fix conflict with gawk pulled first:\nbrew reinstall readline\nbrew reinstall gawk\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\/depends\nmake NO_QT=1\ncd ..\n.\/autogen.sh\nCONFIG_SITE=$(pwd)\/depends\/x86_64-apple-darwin15.6.0\/share\/config.site .\/configure --enable-static --disable-shared --with-pic --without-gui --enable-reduce-exports CXXFLAGS=-O2\nmake -j$(sysctl -n hw.ncpu)\n\n```\n\n#### Windows (cross-compiled)\n\nCompiling on MS Windows (outside of WSL) is not supported. The Windows build is cross-compiled from Linux like so:\n\n```sh\nsudo apt-get install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n\nupdate-alternatives --set x86_64-w64-mingw32-g++ \/usr\/bin\/x86_64-w64-mingw32-g++-posix\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/packaging\/build_windows_64bit.sh\n\n```\n\nIf you encounter any errors, please check `doc\/build-*.md` for further instructions. If you're still stuck, [create an issue](https:\/\/github.com\/lbryio\/lbrycrd\/issues\/new) with the output of that command, your system info, and any other information you think might be helpful. The scripts in the packaging folder are simple and will grant extra light on the build process as needed.\n\n#### Use with CLion\n\nCLion has not traditionally supported Autotools projects, although some progress on that is now in the works. We do include a cmake build file for compiling lbrycrd. See contrib\/cmake. Alas, CLion doesn't support external projects in cmake, so that particular approach is also insufficient. CLion does support \"compile_commands.json\" projects. Fortunately, this can be easily generated for lbrycrd like so:\n\n```sh\npip install --user compiledb\n.\/autogen.sh && .\/configure --enable-static=no --enable-shared --with-pic --without-gui CXXFLAGS=\"-O0 -g\" CFLAGS=\"-O0 -g\" # or whatever normal lbrycrd config\ncompiledb make -j10\n```\n\nThen open the newly generated compile_commands.json file as a project in CLion. Debugging is supported if you compiled with `-g`. To enable that you will need to create a target in CLion by going to File -> Settings -> Build -> Custom Build Targets. Add an empty target with your choice of name. From there you can go to \"Edit Configurations\", typically found in a drop-down at the top of the editor. Add a Custom Build Application, select your new target, select the compiled file (i.e. test_lbrycrd or lbrycrdd, etc), and then add any necessary command line parameters. Ensure that there is nothing in the \"Before launch\" section.\n\n## Contributing\n\nContributions to this project are welcome, encouraged, and compensated. For more details, see [https:\/\/lbry.tech\/contribute](https:\/\/lbry.tech\/contribute)\n\nWe follow the same coding guidelines as documented by Bitcoin Core, see [here](\/doc\/developer-notes.md). To run an automated code formatting check, try:\n`git diff -U0 master -- '*.h' '*.cpp' | .\/contrib\/devtools\/clang-format-diff.py -p1`. This will check any commits not on master for proper code formatting.\nWe try to avoid altering parts of the code that is inherited from Bitcoin Core unless absolutely necessary. This will make it easier to merge changes from Bitcoin Core. If commits are expected not to be merged upstream (i.e. we broke up a commit from Bitcoin Core in order to use a single feature in it), the commit message must contain the string \"NOT FOR UPSTREAM MERGE\".\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Releases](https:\/\/github.com\/lbryio\/lbrycrd\/releases) are created\nregularly to indicate new official, stable release versions.\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money. Developers are strongly encouraged to write [unit tests](\/src\/test\/README.md) for new code and to\nsubmit new unit tests for old code. Unit tests are compiled by default and can be run with `src\/test\/test_lbrycrd`\n\nThe Travis CI system makes sure that every pull request is built, and that unit and sanity tests are automatically run. See https:\/\/travis-ci.org\/lbryio\/lbrycrd\n\n### Testnet\n\nTestnet is maintained for testing purposes and can be accessed using the command `.\/lbrycrdd -testnet`. If you would like to obtain testnet credits, please contact brannon@lbry.com or grin@lbry.com .\n\nIt is easy to solo mine on testnet. (It's easy on mainnet too, but much harder to win.) For instructions see  [SGMiner](https:\/\/github.com\/lbryio\/sgminer-gm) and [Mining Contributions](https:\/\/github.com\/lbryio\/lbrycrd\/tree\/master\/contrib\/mining) \n\n## Mailing List\n\nWe maintain a mailing list for notifications of upgrades, security issues, and soft\/hard forks. To join, visit [https:\/\/lbry.com\/forklist](https:\/\/lbry.com\/forklist).\n\n## License\n\nThis project is MIT licensed. For the full license, see [LICENSE](LICENSE).\n\n## Security\n\nWe take security seriously. Please contact [security@lbry.com](mailto:security@lbry.com) regarding any security issues.\nOur PGP key is [here](https:\/\/lbry.com\/faq\/pgp-key) if you need it.\n\n## Contact\n\nThe primary contact for this project is [@BrannonKing](https:\/\/github.com\/BrannonKing) (brannon@lbry.com)\n","3":"# Lightning Charge\n\n[![build status](https:\/\/api.travis-ci.org\/ElementsProject\/lightning-charge.svg)](https:\/\/travis-ci.org\/ElementsProject\/lightning-charge)\n[![npm release](https:\/\/img.shields.io\/npm\/v\/lightning-charge.svg)](https:\/\/www.npmjs.com\/package\/lightning-charge)\n[![docker release](https:\/\/img.shields.io\/docker\/pulls\/shesek\/lightning-charge.svg)](https:\/\/hub.docker.com\/r\/shesek\/lightning-charge\/)\n[![MIT license](https:\/\/img.shields.io\/github\/license\/elementsproject\/lightning-charge.svg)](https:\/\/github.com\/ElementsProject\/lightning-charge\/blob\/master\/LICENSE)\n[![Pull Requests Welcome](https:\/\/img.shields.io\/badge\/PRs-welcome-brightgreen.svg)](http:\/\/makeapullrequest.com)\n[![IRC](https:\/\/img.shields.io\/badge\/chat-on%20freenode-brightgreen.svg)](https:\/\/webchat.freenode.net\/?channels=lightning-charge)\n\n\nA drop-in solution for accepting lightning payments, built on top of [c-lightning](https:\/\/github.com\/ElementsProject\/lightning).\n\n- Simple HTTP REST API, optimized for developer friendliness and ease of integration. Near-zero configuration.\n\n- Supports invoice metadata, fiat currency conversion, long polling, web hooks, websockets and server-sent-events.\n\n- Built-in checkout page, can be iframed or redirected to.\n\n:zap: radically low fees :zap: nano payments :zap: instant confirmations :zap:\n\n## Getting Started\n\nSetup [c-lightning](https:\/\/github.com\/ElementsProject\/lightning#getting-started) and nodejs (v7.6 or newer), then:\n\n```bash\n$ npm install -g lightning-charge\n\n$ charged --api-token mySecretToken # defaults: --ln-path ~\/.lightning\/testnet --db-path .\/charge.db --port 9112\n\n```\n\n> Note: if you're running into permission issues, try following\n[these instructions](https:\/\/docs.npmjs.com\/getting-started\/fixing-npm-permissions#option-two-change-npms-default-directory).\n\nThat's it! The Lightning Charge REST API is now running and ready to process payments.\nYou can access it at `http:\/\/localhost:9112` using the API access token configured with `--api-token`.\n\nConfiguration options may alternatively be provided using environment variables:\n\n```bash\n$ LN_PATH=~\/.lightning\/testnet DB_PATH=charge.db API_TOKEN=mySecretToken PORT=9112 charged\n```\n\nListens for connections on `127.0.0.1` by default. Set `-i 0.0.0.0` to bind on all available interfaces.\nNote that Charge does not have TLS encryption and should not normally be exposed directly to the public\ninternet. For remote access, you should setup an SSH tunnel or a TLS-enabled reverse proxy like nginx.\n\nSee `$ charged --help` for the full list of available options.\n\n### Deploy with Docker\n\nTo deploy Lightning Charge with Docker, run these commands:\n\n```bash\n$ mkdir data # make sure to create the folder _before_ running docker\n$ docker run -it -u `id -u` -v `pwd`\/data:\/data -p 9735:9735 -p 9112:9112 \\\n             shesek\/lightning-charge --api-token mySecretToken\n```\n\nThis will start `bitcoind`, `lightningd` and `charged` and hook them up together.\nYou will then be able to access the REST API at `http:\/\/localhost:9112` using `mySecretToken`.\n\nRuns in `testnet` mode by default, set `NETWORK` to override.\n\nIf you want to experiment in `regtest` mode and don't care about persisting data, this should do:\n\n```bash\n$ docker run -it -e NETWORK=regtest -p 9112:9112 shesek\/lightning-charge --api-token mySecretToken\n```\n\nTo connect to an existing `lightningd` instance running on the same machine,\nmount the lightning data directory to `\/etc\/lightning` (e.g. `-v $HOME\/.lightning:\/etc\/lightning`).\nConnecting to remote lightningd instances is currently not supported.\n\nTo connect to an existing `bitcoind` instance running on the same machine,\nmount the bitcoin data directory to `\/etc\/bitcoin` (e.g. `-v $HOME\/.bitcoin:\/etc\/bitcoin`).\nTo connect to a remote bitcoind instance, set `BITCOIND_URI=http:\/\/[user]:[pass]@[host]:[port]`\n(or use `__cookie__:...` as the login for cookie-based authentication).\n\n### Deploy to Azure\n\n[One-click deployment on Azure](https:\/\/github.com\/NicolasDorier\/lightning-charge-azure)\n(by [@NicolasDorier](https:\/\/github.com\/NicolasDorier)).\n\nAn instructional video is [available here](https:\/\/www.youtube.com\/watch?v=D4RqULSA4uU).\n\n## Client libraries\n\nClients libraries are available for [JavaScript](https:\/\/github.com\/ElementsProject\/lightning-charge-client-js)\nand [PHP](https:\/\/github.com\/ElementsProject\/lightning-charge-client-php).\nFor other languages, you can use the REST API directly using a standard HTTP library.\n\n## LApps\n\nBelow are example LApps built on top of Lightning Charge:\n\n- [FileBazaar](https:\/\/github.com\/ElementsProject\/filebazaar): an ecommerce tool for content creators that produce digital files like photos, videos, or music.\n\n- [Lightning Publisher](https:\/\/github.com\/ElementsProject\/wordpress-lightning-publisher): accept bitcoin payments for content on WordPress blogs.\n\n- [nanotip](https:\/\/github.com\/ElementsProject\/nanotip): a simple web server for accepting lightning donations (a lightning tip jar).\n\n- [paypercall](https:\/\/github.com\/ElementsProject\/paypercall): easily charge for HTTP APIs on a pay-per-call basis.\n\n- [nanopos](https:\/\/github.com\/ElementsProject\/nanopos): a simple point-of-sale system for physical stores.\n\n- [ifpaytt](https:\/\/github.com\/ElementsProject\/ifpaytt): trigger IFTTT actions with lightning payments.\n\n- [WooCommerce Lightning](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning): a lightning gateway for the WooCommerce e-commerce software.\n\n- [Lightning Jukebox](https:\/\/github.com\/ElementsProject\/lightning-jukebox): a lightning powered jukebox. Pay with Bitcoin to choose your music.\n\nThird party Lapps:\n\n- [Satoshi's Place](https:\/\/github.com\/LightningK0ala\/satoshis.place): a collaborative art board, pay with lightning to draw on a pixel grid. (live on [satoshis.place](https:\/\/satoshis.place\/))\n\n- [Pollo feed](https:\/\/github.com\/j-chimienti\/pollofeed): a lightning powered chicken feeder. (live on [pollofeed.com](https:\/\/pollofeed.com\/))\n\n- [lightning-captive-portal](https:\/\/github.com\/poperbu\/lightning-captive-portal\/): Wi-Fi access through a nodogsplash captive portal with Lightning payments.\n\n## REST API\n\nAll endpoints accept and return data in JSON format.\n\nAuthentication is done using HTTP basic authentication headers, with `api-token` as the username and\nthe api token (configured with `--api-token`\/`-t` or using the `API_TOKEN` environment variable) as the password.\n\nInvoices have the following properties: `id`, `msatoshi`, `msatoshi_received`, `quoted_currency`, `quoted_amount`, `rhash`, `payreq`, `description`, `created_at`, `expires_at`, `paid_at`, `metadata` and `status` (one of `unpaid|paid|expired`).\n\nThe code samples below assume you've set `CHARGE=http:\/\/api-token:mySecretToken@localhost:9112`.\n\n### `GET \/info`\n\nGet information about the c-lightning node.\n\n```bash\n$ curl $CHARGE\/info\n{\"id\":\"032c6ba19a2141c5fee6ac8b6ff6cf24456fd4e8e206716a39af3300876c3a4835\",\"port\":42259,\"address\":[],\"version\":\"v0.5.2-2016-11-21-1937-ge97ee3d\",\"blockheight\":434,\"network\":\"regtest\"}\n```\n\n### `POST \/invoice`\n\nCreate a new invoice.\n\n*Body parameters*: `msatoshi`, `currency`, `amount`, `description`, `expiry`, `metadata` and `webhook`.\n\nYou can specify the amount as `msatoshi` (1 satoshi = 1000 msatoshis),\nor provide a `currency` and `amount` to be converted according to the current exchange rates (via bitcoinaverage).\nIf a currency and amount were provided, they'll be available under `quoted_{currency|amount}`.\n\n`expiry` sets the invoice expiry time in seconds (defaults to one hour).\n`metadata` may contain arbitrary invoice-related meta-data.\n`description` is embedded in the payment request and presented by the user's wallet (keep it short).\n\n`webhook` may contain a URL to be registered as a webhook\n(see [`POST \/invoice\/:id\/webhook`](https:\/\/github.com\/ElementsProject\/lightning-charge#post-invoiceidwebhook)).\n\nReturns `201 Created` and the invoice on success.\n\n```bash\n$ curl -X POST $CHARGE\/invoice -d msatoshi=10000\n{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",\"status\":\"unpaid\",\"rhash\":\"6823e46a08f50...\",\n \"payreq\":\"lntb100n1pd99d02pp...\",\"created_at\":1515369962,\"expires_at\":1515373562}\n\n# with fiat-denominated amounts\n$ curl -X POST $CHARGE\/invoice -d currency=EUR -d amount=0.5\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"quoted_currency\":\"EUR\",\"quoted_amount\":\"0.5\",...}\n\n# without amount (accept all payments)\n$ curl -X POST $CHARGE\/invoice\n{\"id\":\"W8CF0UqY7qfAHCfnchqk9\",\"msatoshi\":null,...}\n\n# with metadata as application\/json\n$ curl -X POST $CHARGE\/invoice -H 'Content-Type: application\/json' \\\n  -d '{\"msatoshi\":7000,\"metadata\":{\"customer_id\":9817,\"products\":[593,182]}}'\n{\"id\":\"PLKV1f8B7sth7w2OeDOt_\",\"msatoshi\":\"7000\",\"metadata\":{\"customer_id\":9817,\"products\":[593,182]},...}\n\n# with metadata as application\/x-www-form-urlencoded\n$ curl -X POST $CHARGE\/invoice -d msatoshi=5000 -d metadata[customer_id]=9817 -d metadata[product_id]=7189\n{\"id\":\"58H9eoerBpKML9FvnMQtG\",\"msatoshi\":\"5000\",\"metadata\":{\"customer_id\":\"9817\",\"product_id\":\"7189\"},...}\n```\n\n### `GET \/invoices`\n\nList all invoices.\n\n```bash\n$ curl $CHARGE\/invoices\n[{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",...},{\"id\":\"PLKV1f8B7sth7w2OeDOt_\",\"msatoshi\":\"7000\"},...]\n```\n\n### `GET \/invoice\/:id`\n\nGet the specified invoice.\n\n```bash\n$ curl $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"quoted_currency\":\"EUR\",\"quoted_amount\":\"0.5\",\"status\":\"unpaid\",...}\n```\n\n### `DELETE \/invoice\/:id`\n\nDelete the specified invoice.\n\n*Body parameters:* `status`\n\nThe current status of the invoice needs to be specified in the request body.\n\n```bash\n$ curl -X DELETE $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb -d status=unpaid\n204 No Content\n```\n\n### `GET \/invoice\/:id\/wait?timeout=[sec]`\n\nLong-polling invoice payment notification.\n\nWaits for the invoice to be paid, then returns `200 OK` and the updated invoice.\n\nIf `timeout` (defaults to 30s) is reached before the invoice is paid, returns `402 Payment Required`.\n\nIf the invoice is expired and can no longer be paid, returns `410 Gone`.\n\n```bash\n$ curl $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\/wait?timeout=60\n# zZZZzzZ\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"status\":\"paid\",\"paid_at\":1515371152,...}\n```\n\n### `POST \/invoice\/:id\/webhook`\n\nRegister a URL as a web hook to be notified once the invoice is paid.\n\n*Body parameters:* `url`.\n\nReturns `201 Created` on success. Once the payment is made, a POST request with the updated invoice will be made to the provided URL.\n\nIf the invoice is already paid, returns `405 Method Not Allowed`. If the invoice is expired, returns `410 Gone`.\n\nWebhooks can also be registered during invoice creation using the `webhook` parameter.\n\nFor security reasons, the provided `url` should contain a secret token used to verify the authenticity of the request\n(see an example HMAC-based implementation at woocommerce-gateway-lightning\n[here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L214-L225),\n[here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L131-L134)\nand [here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L109-L115)).\n\n```bash\n$ curl -X POST $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\/webhook -d url=http:\/\/example.com\/callback\nCreated\n```\n\n### `GET \/payment-stream`\n\nSubscribe to payment updates as a [server-sent events](https:\/\/streamdata.io\/blog\/server-sent-events\/) stream.\n\n```bash\n$ curl $CHARGE\/payment-stream\n# zzZZzZZ\ndata:{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"status\":\"paid\",\"paid_at\":1515371152,...}\n# zZZzzZz\ndata:{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",\"status\":\"paid\",\"paid_at\":1515681209,...}\n# zZZzzzz...\n```\n\nOr via JavaScript:\n\n```js\nconst es = new EventSource('http:\/\/api-token:[TOKEN]@localhost:9112\/payment-stream')\n\nes.addEventListener('message', msg => {\n  const inv = JSON.parse(msg.data)\n  console.log('Paid invoice:', inv)\n})\n```\n\n(`EventSource` is natively available in modern browsers,\nor via the [`eventsource` library](https:\/\/github.com\/EventSource\/eventsource) in nodejs)\n\n## WebSocket API\n\n### `GET \/ws`\n\nSubscribe to payment updates over WebSocket.\n\n```javascript\nconst ws = new WebSocket('http:\/\/api-token:[TOKEN]@localhost:9112\/ws')\n\nws.addEventListener('message', msg => {\n  const inv = JSON.parse(msg.data)\n  console.log('Paid invoice:', inv)\n})\n```\n\n## Tests\n\nRequires `bitcoind`, `bitcoin-cli`, `lightningd`, `lightning-cli`\nand [`jq`](https:\/\/stedolan.github.io\/jq\/download\/) to be in your `PATH`.\n\n```bash\n$ git clone https:\/\/github.com\/ElementsProject\/lightning-charge.git\n$ cd lightning-charge\n$ npm install\n$ npm test\n```\n\nThis will setup a temporary testing environment with a bitcoind regtest node\nand two c-lightning nodes with a funded channel,\nthen start the Lightning Charge server and run the unit tests\n(written with [mocha](https:\/\/mochajs.org\/) and [supertest](https:\/\/github.com\/visionmedia\/supertest)).\n\nTo run in verbose mode, set the `VERBOSE` environment variable: `$ VERBOSE=1 npm test`.\n\nTo pass arguments to mocha, use `$ npm test -- [mocha opts]`.\n\nTo prevent the test environment files from being deleted after completing the tests, set `KEEP_TMPDIR=1`.\n\nTo setup a testing environment without running the tests, run `$ npm run testenv`.\nThis will display information about the running services and keep them alive for further inspection.\n\nTests can also be run using docker: `$ docker build --build-arg TESTRUNNER=1 -t charge . && docker run -it --entrypoint npm charge test`\n\n## License\n\nMIT\n","4":"Check out https:\/\/coinbuddy.co\/coins to track which exchanges support your favorite coin\n# Cryptocurrency\n\n| Name          | Description                                              | Pros                                                                  | Cons                                             | Where to buy                                                           | Similar to | Category |\n|---------------|----------------------------------------------------------|-----------------------------------------------------------------------|--------------------------------------------------|------------------------------------------------------------------------|------------|----------|\n| [Bitcoin (BTC)](https:\/\/bitcoin.org\/en\/) | Bitcoin is a cryptocurrency and a digital payment system | \u2022 Most widely accepted cryptocurrency in the world  | \u2022 Slow transaction time <br\/> \u2022 Not as decentralized as people think due to the fact that majority of miners are Chinese | [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481)     | Litecoin   | Currency |\n| [Ethereum (ETH)](https:\/\/www.ethereum.org\/) | Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference. | \u2022 Programmable money <br\/> \u2022 Smart contracts<br\/> \u2022 Ability to issue your own tokens \u2022 Huge community - Ethereum Enterprise Alliance consists of companies like Microsoft, Intel, and more \t| \u2022 Higher inflation than bitcoin <br\/>\u2022 Scalability is still a challenge-entire blockchain can be clogged if faced with a large number of concurrent transactions  \t| [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481) \t| Waves | Platform\n| [Ripple (XRP)](https:\/\/ripple.com\/) \t| Ripple is a real-time gross settlement system (RTGS), currency exchange and remittance network operated by Ripple. \t| \u2022 Math-based currency <br\/>\u2022 Free from DoS attacks<br\/>\u2022 Its settlement infrastructure is used by the banks \t| \u2022 Founders of Ripple control ~60% of XRP\t| [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) \t| Stellar \t| Payment Network\n| [Litecoin (LTC)](https:\/\/litecoin.org\/) | Litecoin is a peer-to-peer Internet currency that enables instant, near-zero cost payments to anyone in the world. | \u2022 Faster transaction time than bitcoin. <br\/>\u2022 Also can handle more transactions than bitcoin. <br\/>\u2022 Segwit-ready | \u2022 Weak marketing | [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481) | Bitcoin | Currency\n| [Ethereum Classic (ETC)](https:\/\/ethereumclassic.github.io\/) | Ethereum Classic is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference. | \u2022 Continuation of the original Ethereum blockchain - the classic version preserving untampered history | \u2022 Community of developers vehemently against Ethereum | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Ethereum | Currency\n| [Dash (DASH)](https:\/\/www.dash.org\/) | Dash (formerly known as Darkcoin and XCoin) is an open source peer-to-peer cryptocurrency that offers instant transactions (InstantSend), private transactions (PrivateSend) and token fungibility. | \u2022 Instantaneous transaction time about 1.2 seconds <br\/>\u2022 Private transaction possible with privatesend<br\/>\u2022 Low transaction fee | \u2022 Core team is secretive about their roadmaps <br\/>\u2022 Decentralized governance is immature - few masternode owners make the decision | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Stellar, NEM, Ripple | Payment Network\n| [NEM (XEM)](https:\/\/www.nem.io\/) | NEM has a stated goal of a wide distribution model and has introduced new features to blockchain technology such as its proof-of-importance (POI) algorithm, multisignature accounts, encrypted messaging, and an Eigentrust++ reputation system. | \u2022 Unique proof-of-importance (POI) algorithm <br\/> \u2022 Variety of usecases - can send payments and messages securely globally and is recognized by some Japanese banks <br\/> \u2022 Incredibly scalable - 3000 transactions\/sec\/ <br\/>\u2022 Low transaction fee - 0.01% fee | \u2022 No private transactions <br\/>\u2022 No mining available <br\/> \u2022 Unclear roadmap <br\/> \u2022 Lack of enterprise features <br\/> \u2022 No substantial development updates recently | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Stellar, Dash, Ripple | Payment Network, Platform\n| [Iota (MIOTA)](https:\/\/iota.org\/) | Iota is a cryptocurrency that aims to establish itself as the fuel for efficient machine-to-machine (M2M) transactions | \u2022 No transaction cost <br\/>\u2022Scalability due to \"Tangle\" which forces every new transaction to verify two previous transactions<br\/>\u2022 Offline transaction | \u2022 All the tokens are premined <br\/>\u2022Lack of marketing talent in the team.| [Bitfinex](https:\/\/www.bitfinex.com\/?ref=coingenius.io) | Ethereum | Platform\n| [Monero (XMR)](https:\/\/getmonero.org) | Monero (XMR) is a privacy-focused cryptocurrency that is not based on Bitcoin's code. |  \u2022 Untraceable payments & Unlinkable transactions <br\/> \u2022 Second most used cryptocurrency in the dark web. <br\/>\u2022 Cryptonote-based | \u2022 Untraceability makes it challenging to go mainstream | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Bytecoin, Zcash | Currency\n| [EOS (EOS)](https:\/\/eos.io\/) | EOS.IO is software that introduces a blockchain architecture designed to enable vertical and horizontal scaling of decentralized applications (the \u201cEOS.IO Software\u201d). The software provides accounts, authentication, databases, asynchronous communication and the scheduling of applications across multiple CPU cores and\/or clusters. | \u2022 Allows developers to develop on the blockchain without the hassle of dealing with account recovery, permissions, etc<br\/>\u2022 Much more scalable - millions of transactions\/sec<br\/>\u2022 No need to spend tokens to rent the computing power on EOS <br\/> \u2022 Experienced founder behind the team who contributed to Bitshares and Steem |  \u2022 No mining available <br\/> \u2022 Founder is known for abandoning projects <br\/> \u2022 DPoS can result in centralization | [Kraken](https:\/\/www.kraken.com\/?ref=coingenius.io) | Iota, Ethereum | Platform\n| [Bitshares (BTS)](https:\/\/bitshares.org\/) | BitShares offers a stack of financial services including exchange and banking on a blockchain. | \u2022 Allows for trading on its decentralized exchange <br\/> \u2022 Extremely fast transaction time - handles tens of thousands\/sec <br\/> \u2022 Allows for creation of smartcoins and user-issued assets akin to Waves' custom tokens | \u2022 Declining developer interest. Main developer left to work for Steem | [Poloniex](https:\/\/poloniex.com\/) | Waves, Lykke | Decentralized Exchange\n| [Stratis (STRAT)](https:\/\/stratisplatform.com\/) | Stratis offers full service capabilities for the development, deployment and management of blockchain applications and solutions utilizing C# on the .Net framework. | \u2022 Block chain as a service. (Private & public blockchains for corps) <br\/> \u2022 Segwit-ready. <br\/> \u2022 Master nodes provide extra services like making the network transactions more private, enabling instant transactions, etc. <br\/> \u2022 Smart contracts using C# | \u2022 No actual corporate customers as of May 30th 2017 <br\/> \u2022 Smart contracts available only on sidechains| [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Lisk | Platform\n| [Zcash (ZEC)](https:\/\/z.cash\/) | Zcash is the first open, permissionless cryptocurrency that can fully protect the privacy of transactions using zero-knowledge cryptography. | \u2022 Untraceable payments & Unlinkable transactions | \u2022 20% of block reward goes to the developers. | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Bytecoin, Monero | Currency\n| [Bitconnect (BCC)](https:\/\/bitconnect.co\/?ref=coingenius) | BitConnect is an open source all in one bitcoin and crypto community platform designed to provide multiple investment opportunities with cryptocurrency education where it is entirely possible to find the independence we all desire, in a community of like-minded, freedom loving individuals who, like you, are seeking the possibility of income stability in a very unstable world. | \u2022 Allows crypto investors to lend bitconnect coin and make passive income | \u2022 Has a chance of being a massive Ponzi Scheme - volatility bot that trades on your behalf never loses money, which is nearly impossible <br\/>\u2022 No whitepaper | [Livecoin](https:\/\/www.livecoin.net\/?ref=coingenius.io) | N\/A | Lending Network\n| [Waves (WAVES)](https:\/\/wavesplatform.com\/) | Crypto-platform for asset\/custom token issuance, transfer and trading on blockchain | \u2022 Allows for trading on its decentralized exchange <br\/> \u2022 Straightforward custom token creation process <br\/> \u2022 Fast transactions and future-proof scaling. <br\/> \u2022 Friendly community | \u2022 Many fake coins created as a result of easy creation process | [Bittrex](https:\/\/bittrex.com) | Bitshares, Lykke | Decentralized Exchange\n| [Steem (STEEM)](https:\/\/steem.io\/)| Steem is a blockchain-based social media platform where anyone can earn rewards. | \u2022 Content creators on steemit.com get rewarded when their posts get upvoted | \u2022 Vulnerable to voting manipulation via sybil attack | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | AMP Synereo | Currency\n| [Antshares (ANS\/NEO)](https:\/\/www.antshares.org\/) | As China's first ever original and open source public chain project, Antshares serves as a smart assets platform. Smart assets are the combination of smart contract of blockchain and digital assets. Antshares allows for a smarter way for assets registration, issuance, and circulation. | \u2022 Ethereum for China <br\/> \u2022 Quantum-proof <br\/> \u2022 More parallelizable virtual machine <br\/> \u2022 More programming language support than ethereum <br\/> \u2022Partnership with Microsoft | \u2022 People online are reporting issues with its online wallet not syncing | [Bittrex](https:\/\/bittrex.com) | Ethereum | Platform\n| [Gnosis (GNO)](https:\/\/gnosis.pm\/) | Based on Ethereum \u2014 The next generation blockchain network. Speculate on anything with an easy-to-use prediction market. | \u2022 Can create a customizable prediction market app | \u2022 No known Gnosis-powered apps | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Augur | Platform\n| [Golem (GNT)](https:\/\/golem.network\/) | Golem is a global, open sourced, decentralized supercomputer that anyone can access. It's made up of the combined power of user's machines, from personal laptops to entire datacenters. | \u2022 You get rewarded for renting out computing power | \u2022 No Mining available | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Siacoin | Computing Network\n| [Bytecoin (BCN)](https:\/\/bytecoin.org\/)| Bytecoin allows safe and secure transactions around the globe and offers the convenience of instant fee-free money transactions. | \u2022 Free instant international payments. <br\/> \u2022 Unntraceable payment <br\/> \u2022 Cryptonote-based | \u2022 80%+ were premined prior to public release | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Monero, Zcash | Payment Network\n| [Siacoin (SC)](http:\/\/sia.tech\/) | Sia is a decentralized network of datacenters that, taken together, comprise the world's fastest, cheapest, and most secure cloud storage platform. | \u2022 You get rewarded for renting out your computer storage <br\/> \u2022 Files are split across the network & encrypted so no need to worry about privacy | \u2022 Low adoption | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Golem, Storj | Storage Network\n| [Dogecoin (DOGE)](http:\/\/dogecoin.com\/) | Dogecoin is a cryptocurrency featuring a likeness of the Shiba Inu dog from the \"Doge\" Internet meme as its logo. | \u2022 Easy to send payments online | \u2022 Coin is not taken seriously. <br\/> \u2022 No unique technical feature | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Steem | Currency\n| [Stellar Lumens (XLM)](https:\/\/www.stellar.org\/) | Stellar is a platform that connects banks, payments systems, and people. | \u2022 Instant payment (2-5 seconds) <br\/> \u2022 Customizable payment infrastructure| \u2022 No mining available. 90% of Lumens are owned by the founders | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Ripple | Payment Network \n\n## More Resources\n\n-  **[kennethreitz\/awesome-coins](https:\/\/github.com\/kennethreitz\/awesome-coins)** (GitHub Repo)\n","5":"Tip4commit\n==========\n\n[![tip for next commit](https:\/\/tip4commit.com\/projects\/307.svg)](https:\/\/tip4commit.com\/projects\/307)\n[![Build Status](https:\/\/travis-ci.org\/tip4commit\/tip4commit.svg?branch=master)](https:\/\/travis-ci.org\/tip4commit\/tip4commit)\n\nDonate bitcoins to open source projects or receive tips for code contributions.\n\nName | Link\n----|----|\nOfficial site | https:\/\/tip4commit.com\/\nDiscussions | https:\/\/bitcointalk.org\/index.php?topic=315802.0\nFAQs | https:\/\/github.com\/tip4commit\/tip4commit\/wiki\/FAQ\nIssues | https:\/\/github.com\/tip4commit\/tip4commit\/issues\nTwitter | https:\/\/twitter.com\/tip4commit\n\nDevelopers\n==========\n\nIf you would like to contribute to the development of tip4commit, you can find the contribution guidelines and installation instructions in the [developer README](https:\/\/github.com\/tip4commit\/tip4commit\/wiki\/Developer-README)\n\n\nLicense\n=======\n\n[MIT License](https:\/\/github.com\/tip4commit\/tip4commit\/blob\/master\/LICENSE)\n","6":"This is a Bitcoin qt wrapper for .NET. It is written in C#.\n\nIt is made in june 2013 containing all methods in the Bitcoin-qt API (few exceptions such as multi-signature addresses).\n\nBesides the C# wrapper which can be used in any kind of project, there is a MVC 4 project using the Bitcoin wrapper. Here the methods are called using jQuery (AJAX), to show how to get information from the running Bitcoin server to the client.\n\nTutorial can be found at http:\/\/www.larsholdgaard.com\/bitcoin","7":"# bitcoin-protocol\n\n[![npm version](https:\/\/img.shields.io\/npm\/v\/bitcoin-protocol.svg)](https:\/\/www.npmjs.com\/package\/bitcoin-protocol)\n[![Build Status](https:\/\/travis-ci.org\/mappum\/bitcoin-protocol.svg?branch=master)](https:\/\/travis-ci.org\/mappum\/bitcoin-protocol)\n[![Dependency Status](https:\/\/david-dm.org\/mappum\/bitcoin-protocol.svg)](https:\/\/david-dm.org\/mappum\/bitcoin-protocol)\n\n**Bitcoin network protocol streams**\n\nThis module encodes and decodes low-level network protocol data using streams.\n\nYou may want a higher-level module like [bitcoin-net](https:\/\/github.com\/mappum\/bitcoin-net\/), which some things for you such as connection handshakes, sending keepalive pings, etc.\n\n## Usage\n\n`npm install bitcoin-protocol`\n\n```js\nvar net = require('net')\nvar bp = require('bitcoin-protocol')\n\nvar decoder = bp.createDecodeStream()\ndecoder.on('data', function (message) { console.log(message) })\n\nvar encoder = bp.createEncodeStream()\n\nvar socket = net.connect(8333, '127.0.0.1', function () {\n  socket.pipe(decoder)\n  encoder.pipe(socket)\n\n  encoder.write({\n    magic: 0xd9b4bef9,\n    command: 'version',\n    payload: {\n      version: 70012,\n      services: Buffer(8).fill(0),\n      timestamp: Math.round(Date.now() \/ 1000),\n      receiverAddress: {\n        services: Buffer('0100000000000000', 'hex'),\n        address: '0.0.0.0',\n        port: 8333\n      },\n      senderAddress: {\n        services: Buffer(8).fill(0),\n        address: '0.0.0.0',\n        port: 8333\n      },\n      nonce: Buffer(8).fill(123),\n      userAgent: 'foobar',\n      startHeight: 0,\n      relay: true\n    }\n  })\n})\n```\n\n### Methods\n\n#### `createDecodeStream([opts])`\n\nCreates a stream which parses raw network bytes written to it and outputs message objects.\n\nOpts may contain:\n```js\n{\n  magic: Number\n  \/\/ If provided, the decoder will check if messages' \"magic\" field matches\n  \/\/ this value. If it does not match, the stream will emit an error.\n}\n```\n\n#### `createEncodeStream([opts])`\n\nCreates a stream which encodes message objects to raw network bytes.\n\nOpts may contain:\n```js\n{\n  magic: Number\n  \/\/ If provided, the encoder will automatically add the \"magic\" field to each\n  \/\/ message written to it.\n}\n```\n\n### Format\n\n**Decoder**\n\nEmitted by the decoder:\n```js\n{\n  magic: Number,\n  command: String,\n  length: Number,\n  checksum: Buffer, \/\/ 8 bytes,\n  payload: Object \/\/ see below for detailed payload formats\n}\n```\n\n**Encoder**\n\nWritten to the encoder:\n```js\n{\n  magic: Number, \/\/ optional if you set this in the options\n  command: String,\n  payload: Object \/\/ see below for detailed payload formats\n}\n```\n\n### Payload Reference\n\nThe formats for the objects used as message payloads for the various commands are as follows. See [the wiki](https:\/\/en.bitcoin.it\/wiki\/Protocol_documentation) for more information about these messages.\n\n#### `version`\n```js\n{\n  version: Number,\n  services: Buffer, \/\/ 8 bytes\n  timestamp: Number,\n  receiverAddress: {\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  senderAddress: {\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  nonce: Buffer, \/\/ 8 bytes\n  userAgent: String,\n  startHeight: Number,\n  relay: Boolean\n}\n```\n\n#### `verack`, `getaddr`, `mempool`, `filterclear`, `sendheaders`\n```js\n\/\/ no payload needed\n```\n\n#### `addr`\n```js\n[\n  {\n    time: Number,\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  ...\n]\n```\n\n#### `inv`, `getdata`, `notfound`\n```js\n[\n  {\n    type: Number,\n    hash: Buffer \/\/ 32 bytes\n  },\n  ...\n]\n```\n\n#### `getblocks`, `getheaders`\n```js\n{\n  version: Number,\n  locator: [\n    Buffer \/\/ 32 bytes\n  ],\n  hashStop: Buffer \/\/ 32 bytes\n}\n```\n\n#### `tx`\n```js\n{\n  version: Number,\n  ins: [\n    {\n      hash: Buffer, \/\/ 32 bytes\n      index: Number,\n      script: Buffer, \/\/ varying length\n      sequence: Number\n    },\n    ...\n  ],\n  outs: [\n    {\n      value: BN, \/\/ from 'bn.js' package\n      script: Buffer \/\/ varying length\n    },\n    ...\n  ],\n  locktime: Number\n}\n```\n\n#### `block`\n```js\n{\n  header: {\n    version: Number,\n    prevHash: Buffer, \/\/ 32 bytes\n    merkleRoot: Buffer, \/\/ 32 bytes\n    timestamp: Number,\n    bits: Number,\n    nonce: Number,\n  },\n  transactions: [\n    {}, \/\/ same format as 'tx' message\n    ...\n  ]\n}\n```\n\n#### `headers`\n```js\n[\n  {\n    header: {\n      version: Number,\n      prevHash: Buffer, \/\/ 32 bytes\n      merkleRoot: Buffer, \/\/ 32 bytes\n      timestamp: Number,\n      bits: Number,\n      nonce: Number,\n    },\n    nTransactions: Number\n  },\n  ...\n]\n```\n\n#### `ping`, `pong`\n```js\n{\n  nonce: Buffer \/\/ 8 bytes\n}\n```\n\n#### `reject`\n```js\n{\n  message: String,\n  ccode: Number,\n  reason: String,\n  data: Buffer \/\/ varying length\n}\n```\n\n#### `filterload`\n```js\n{\n  data: Buffer, \/\/ varying length\n  nHashFuncs: Number,\n  nTweak: Number,\n  nFlags: Number\n}\n```\n\n#### `filteradd`\n```js\n{\n  data: Buffer \/\/ varying length\n}\n```\n\n#### `merkleblock`\n```js\n{\n  header: {\n    version: Number,\n    prevHash: Buffer, \/\/ 32 bytes\n    merkleRoot: Buffer, \/\/ 32 bytes\n    timestamp: Number,\n    bits: Number,\n    nonce: Number\n  },\n  numTransactions: Number,\n  hashes: [\n    Buffer \/\/ 32 bytes\n  ],\n  flags: Buffer \/\/ varying length\n}\n```\n\n#### `alert`\n```js\n{\n  payload: Buffer, \/\/ varying length\n  signature: Buffer \/\/ varying length\n}\n```\n","8":"https:\/\/zeronet.io\n","9":"# `\ud83d\udd17 multichain`\n\n## Layout\n\n`\/` declares the assets and chains that exist, but provides no chain-specific implementations.\n\n`\/infra` defines a local deployment of the multichain using `docker-compose`. All underlying chains provide a `Dockerfile` and service definition to make running node instances easy. All chains need to add a `Dockerfile` and service definition that allows the multichain to spin up a local development-mode instance of the chain. This is necessary for running comprehensive local test suites.\n\n`\/api` defines the different compatibility APIs that exist: Account, Address, Contract, Gas, and UTXO. Chains should implement the APIs that are relevant to them. For example, Bitcoin (and its forks) implements the Address, Gas, and UTXO APIs. No actual implementations should be added to this folder.\n\n`\/chain`  defines all of the chain-specific implementations of the APIs. Each chain has its own sub-package. For example, Bitcoin, Bitcoin Cash, Dogecoin, and Zcash are all chains that implement the Address, Gas, and UTXO APIs, and each of these implementations are in `\/chain\/bitcoin`, `\/chain\/bitcoincash`, `\/chain\/dogecoin`, and `\/chain\/zcash` respectively.\n\n## Example\n\nThe `\ud83d\udd17 multichain` is designed to be flexible enough to support any kind of chain. Anyone is free to contribute to the `\ud83d\udd17 multichain` by adding support for a new chain, or improving support for an existing chain. To show how this is done, we will walk-through an example: adding support for Dogecoin.\n\n### Chains and Assets\n\nBefore doing anything else, let's add an enumeration for the `Asset` and `Chain` types, which can be found in `package multichain`. To avoid favouritism, all assets and chains are listed in alphabetical order. Unless otherwise advised by an offiical team member, the names and tickers found on https:\/\/coinmarketcap.com must be used.\n\nAdding an `Asset`:\n\n```go\n\/\/ Enumeration of supported assets. When introducing a new chain, or new asset\n\/\/ from an existing chain, you must add a human-readable string to this set of\n\/\/ enumerated values. Assets must be listed in alphabetical order.\nconst (\n    BCH  = Asset(\"BCH\")  \/\/ Bitcoin Cash\n    BTC  = Asset(\"BTC\")  \/\/ Bitcoin\n    DOGE = Asset(\"DOGE\") \/\/ Dogecoin (This is our new asset!)\n    ETH  = Asset(\"ETH\")  \/\/ Ether\n    ZEC  = Asset(\"ZEC\")  \/\/ Zcash\n)\n```\n\nAdding a `Chain`:\n\n```go\n\/\/ Enumeration of supported chains. When introducing a new chain, you must add a\n\/\/ human-readable string to this set of enumerated values. Chains must be listed\n\/\/ in alphabetical order.\nconst (\n    Bitcoin     = Chain(\"Bitcoin\")\n    BitcoinCash = Chain(\"BitcoinCash\")\n    Dogecoin    = Chain(\"Dogecoin\") \/\/ (This is our new chain!)\n    Ethereum    = Chain(\"Ethereum\")\n    Zcash       = Chain(\"Zcash\")\n)\n```\n\n### Docker\n\nNext, we need to setup a Docker container in the `\/infra` folder. This is needed for local test suites, allowing for end-to-end integrated testing directly against a node. Doing this requires a couple of steps.\n\nFirst, we create a new `dogecoin\/` folder in the `\/infra` folder:\n\n```\n\/infra\n|-- \/bitcoin\n|-- \/bitcoincash\n|-- \/dogecoin         # This is our new folder!\n|   |-- Dockerfile    # This is our new Dockerfile!\n|   |-- dogecoin.conf\n|   |-- run.sh        # This is our new run file!\n|-- \/zcash\n|-- .env\n|-- docker-compose.yaml\n```\n\nThe new folder _must_ at least contain a `Dockerfile` that installs the node, and a `run.sh` file that runs the nodes. The node _should_ be run in test mode. The new folder can also contain other files that are specific to the needs of the chain being added. In our case, the `dogecoin.conf` file is also needed to configure the node. (We will omit showing all the code here, since there is quite a bit of it, but you can check it out in the `\/infra\/dogecoin` folder.)\n\nSecond, we add an entry to the `.env` file. Our entry _must_ include a private key that will have access to funds, and the public address associated with that private key. We will add:\n\n```sh\n#\n# Dogecoin\n#\n\n# Address that will receive mining rewards. Generally, this is set to an address\n# for which the private key is known by a test suite. This allows the test suite\n# access to plenty of testing funds.\nexport DOGECOIN_PK=cRZnRgH2ztcJupCzkWbq2mjiT8PSFAmtYRYb1phg1vSRRcNBX4w4\nexport DOGECOIN_ADDRESS=n3PSSpR4zqUKWH4tcRjP9aTwJ4GmixQXmt\n```\n\nLast, we add a service to the `docker-compose.yaml` file. This allows the node to boot alongside the other nodes in the multichain. This entry must expose the node for use in tests, and must not overlap with other nodes that already exist (ports are reserved on a first-come-first-serve basis). We will define the service as:\n\n```yaml\n##\n## Dogecoin\n##\n\ndogecoin:\n  build:\n    context: .\/dogecoin\n  ports:\n    - \"0.0.0.0:18332:18332\"\n  entrypoint:\n    - \".\/root\/run.sh\"\n    - \"${DOGECOIN_ADDRESS}\"\n```\n\n### Address API\n\nAll chains _should_ implement the Address API. Luckily for Dogecoin, it is so similar to Bitcoin that we can re-export the Bitcoin implementation without the need for custom modifications. In `\/chain\/dogecoin\/address.go` we add:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype (\n\tAddressEncoder       = bitcoin.AddressEncoder\n\tAddressDecoder       = bitcoin.AddressDecoder\n\tAddressEncodeDecoder = bitcoin.AddressEncodeDecoder\n)\n```\n\nThese three interfaces allow users of the `\ud83d\udd17 multichain` to easily encode and decode Dogecoin addresses. Other chains will need to provide their own implementations, based on their chains address standards.\n\n### Gas API\n\nMost, but not all, chains _should_ implement the Gas API. Again, Dogecoin is so similar to Bitcoin that we can re-export the Bitcoin implementation in `\/chain\/dogecoin\/gas.go`:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype GasEstimator = bitcoin.GasEstimator\n\nvar NewGasEstimator = bitcoin.NewGasEstimator\n```\n\nThe interface allows users of the `\ud83d\udd17 multichain` to estimate gas prices (although, the current implementation is _very_ simple). The associated function allows users to construct an instance of the interface for Dogecoin.\n\n### UTXO API\n\nGenerally speaking, chains fall into two categories: account-based or UTXO-based (and some can even be both). Bitcoin, and its forks, are all UTXO-based chains. As a fork of Bitcoin, Dogecoin is a UTXO-based chain, so we implement the UTXO API. To implement the UTXO API, we must implement the `Tx`, `TxBuilder`, and `Client` interfaces. More information can be found in the comments of `\/api\/utxo` folder.\n\nAgain, the implementation for Dogecoin is trivial. In `\/chain\/dogecoin\/utxo`, we have:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype (\n\tTx            = bitcoin.Tx\n\tTxBuilder     = bitcoin.TxBuilder\n\tClient        = bitcoin.Client\n\tClientOptions = bitcoin.ClientOptions\n)\n\nvar (\n\tNewTxBuilder         = bitcoin.NewTxBuilder\n\tNewClient            = bitcoin.NewClient\n\tDefaultClientOptions = bitcoin.DefaultClientOptions\n)\n```\n\nUp to this point, we have done nothing but re-export Bitcoin. So what makes Dogecoin different? And how can we express that difference? Well, the `\/chain\/dogecoin` folder is the place where we must define anything else Dogecoin users will need. In the case of Dogecoin, the only thing that differentiates it from Bitcoin is the `*chaincfg.Param` object. We define this in `\/chain\/dogecoin\/dogecoin.go`:\n\n```go\npackage dogecoin\n\nimport (\n\t\"github.com\/btcsuite\/btcd\/chaincfg\"\n)\n\nfunc init() {\n\tif err := chaincfg.Register(&MainNetParams); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := chaincfg.Register(&RegressionNetParams); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nvar MainNetParams = chaincfg.Params{\n\tName: \"mainnet\",\n\tNet:  0xc0c0c0c0,\n\n\t\/\/ Address encoding magics\n\tPubKeyHashAddrID: 30,\n\tScriptHashAddrID: 22,\n\tPrivateKeyID:     158,\n\n\t\/\/ BIP32 hierarchical deterministic extended key magics\n\tHDPrivateKeyID: [4]byte{0x02, 0xfa, 0xc3, 0x98}, \/\/ starts with xprv\n\tHDPublicKeyID:  [4]byte{0x02, 0xfa, 0xca, 0xfd}, \/\/ starts with xpub\n\n\t\/\/ Human-readable part for Bech32 encoded segwit addresses, as defined in\n\t\/\/ BIP 173. Dogecoin does not actually support this, but we do not want to\n\t\/\/ collide with real addresses, so we specify it.\n\tBech32HRPSegwit: \"doge\",\n}\n\nvar RegressionNetParams = chaincfg.Params{\n\tName: \"regtest\",\n\n\t\/\/ Dogecoin has 0xdab5bffa as RegTest (same as Bitcoin's RegTest).\n\t\/\/ Setting it to an arbitrary value (leet_hex(dogecoin)), so that we can\n\t\/\/ register the regtest network.\n\tNet: 0xd063c017,\n\n\t\/\/ Address encoding magics\n\tPubKeyHashAddrID: 111,\n\tScriptHashAddrID: 196,\n\tPrivateKeyID:     239,\n\n\t\/\/ BIP32 hierarchical deterministic extended key magics\n\tHDPrivateKeyID: [4]byte{0x04, 0x35, 0x83, 0x94}, \/\/ starts with xprv\n\tHDPublicKeyID:  [4]byte{0x04, 0x35, 0x87, 0xcf}, \/\/ starts with xpub\n\n\t\/\/ Human-readable part for Bech32 encoded segwit addresses, as defined in\n\t\/\/ BIP 173. Dogecoin does not actually support this, but we do not want to\n\t\/\/ collide with real addresses, so we specify it.\n\tBech32HRPSegwit: \"dogert\",\n}\n```\n\nMost of the functions that we have re-exported expected `*chaincfg.Params` as an argument. By defining one for regnet and mainnet, users can construct Dogecoin instances of the UTXO API by using these params.\n\n## Test Suite\n\n1. Install Docker\n2. Install Docker Compose\n3. Run Docker\n4. Run `.\/test.sh`\n\nExample output:\n\n```sh\nCreating network \"docker_default\" with the default driver\nBuilding bitcoin\n\n...\n\nSuccessfully built 1ebb03faa04f\nSuccessfully tagged docker_bitcoin:latest\nBuilding bitcoincash\n\n...\n\nSuccessfully built e12e98011869\nSuccessfully tagged docker_bitcoincash:latest\nBuilding zcash\n\n...\n\nSuccessfully built 56231a29ca2e\nSuccessfully tagged docker_zcash:latest\ndocker_bitcoin_1 is up-to-date\ndocker_bitcoincash_1 is up-to-date\ndocker_zcash_1 is up-to-date\nWaiting for multichain to boot...\n=== RUN   TestMultichain\nRunning Suite: Multichain Suite\n===============================\n\n...\n\nStopping docker_bitcoincash_1 ... done\nStopping docker_zcash_1       ... done\nStopping docker_bitcoin_1     ... done\nRemoving docker_bitcoincash_1 ... done\nRemoving docker_zcash_1       ... done\nRemoving docker_bitcoin_1     ... done\nRemoving network docker_default\nDone!\n```\n","10":"BitCoin v0.01 ALPHA\r\n\r\nCopyright (c) 2009 Satoshi Nakamoto\r\nDistributed under the MIT\/X11 software license, see the accompanying\r\nfile license.txt or http:\/\/www.opensource.org\/licenses\/mit-license.php.\r\nThis product includes software developed by the OpenSSL Project for use in\r\nthe OpenSSL Toolkit (http:\/\/www.openssl.org\/).  This product includes\r\ncryptographic software written by Eric Young (eay@cryptsoft.com).\r\n\r\n\r\nIntro\r\n-----\r\nBitcoin is an electronic cash system that uses a peer-to-peer network to\r\nprevent double-spending.  It's completely decentralized with no server or\r\ncentral authority.\r\n\r\n\r\nOperating Systems\r\n-----------------\r\nWindows NT\/2000\/XP (and probably Vista)\r\n\r\nVista hasn't been tested yet.  All the libraries used are cross-platform, so\r\nthere's nothing preventing future Linux and Mac builds.\r\n\r\n\r\nSetup\r\n-----\r\nUnpack the files into a directory and run bitcoin.exe.\r\n\r\nThe software automatically finds other nodes to connect to.  You should set\r\nyour firewall to forward port 8333 to your computer so you can receive incoming\r\nconnections, otherwise the nodes you can connect with will be limited.\r\n\r\nTo support the network by running a node, select:\r\n\r\n  Options->Generate Coins\r\n\r\nand keep the program open or minimized.  It runs at idle priority when no other\r\nprograms are using the CPU.  Your computer will be solving a very difficult\r\ncomputational problem that is used to lock in blocks of transactions.  The time\r\nto generate a block varies each time, but may take days or months, depending\r\non the speed of your computer and the competition on the network.  It's not a\r\ncomputation that has to start over from the beginning if you stop and restart\r\nit.  A solution might be found at any given moment it's running.  As a reward\r\nfor supporting the network, you receive coins when you successfully generate a\r\nblock.\r\n","11":"coinnext engine\n===============\n\nVirtual coins market: exchange engine\n\n[App setup guide](https:\/\/www.evernote.com\/l\/AWWu1FCvmwlIIZZQYQmMzk9V1SEmmsFuCdk)\n","12":"bitcoin-analysis\n================\n\n\u6bd4\u7279\u5e01\u6e90\u4ee3\u7801\u5206\u6790\n","13":"# JSWallet\n\n![Screen Shot](https:\/\/github.com\/mmick66\/jswallet\/blob\/master\/assets\/Screen_Shot.png)\n\n\nThis is a companion to my [Medium tutotial](https:\/\/medium.com\/@michael.m\/lets-create-a-secure-hd-bitcoin-wallet-in-electron-react-js-575032c42bf3).\n\nIt is **not** production code and should be used for educational puproses only.\n\n> It seems that at this moment, testnet is experiencing a tremendous amount of tranffic which has rendered the network practically unusable. The faucets are down and the transactions are stuck. We will all have to wait for while.\n\n## Installation\n\n```\ngit clone https:\/\/github.com\/mmick66\/jswallet.git\ncd jswallet\nnpm install\nnpm start\n```\n\n## Design Principles\n\nKey derivation is the beating heart of a Bitcoin Wallet and most security concerns have to do with this first step.\n\nMy code is mainly intended as an illustration of the following pattern:\n\n![Key Derivation](https:\/\/github.com\/mmick66\/jswallet\/blob\/master\/assets\/Key%20Chain.png)\n\n## Building\n\nThis project was built using [electron-forge](https:\/\/github.com\/electron-userland\/electron-forge). I have had problems building it in some machines and apparently the [issue is not uncommon](https:\/\/github.com\/electron-userland\/electron-forge\/issues\/434). In theory it should work like so...\n\n```\nnpm publish\n```\n\n## Warnings\n\nAs stated above this is **not** production code. \nIt is set to work with *testnet* by default but by a simple change in the `env.js` it could well function with real bitcoins!\n\n","14":"## DarkWallet - Bitcoin privacy wallet for anonymous anarchist hackers\n\nInstall the wallet on Ubuntu with this command:\n\n```\n$ wget -q -O- https:\/\/raw.githubusercontent.com\/RojavaCrypto\/launderwallet\/master\/scripts\/install.sh | bash\n```\n\nThen it will be available in the launcher.\n\n![launcher in ubuntu](https:\/\/raw.githubusercontent.com\/RojavaCrypto\/launderwallet\/master\/launcher.png)\n\nOther platforms coming soon.\n\n","15":"osCommerce Bitcoin Payment Module v0.6\n\nThis module enables your osCommerce webstore to accept Bitcoin. \n\nIMPORTANT: This module is currently under development and works with BTC as the default currency only.\n\n\nFeatures:\n\n* Creates a unique payment address for each order\n* Automatically updates BTCUSD exchange rate\n* Updates order to Processing when payment is received (# of Bitcoin network confirmations is configurable)\n* Forwards excess bitcoins to your off-server forwarding address\n* Python script restarts bitcoind if it becomes unresponsive\n* Bitcoind and monitor.py can be run on a server other than the osCommerce hosting server\n\n\nRequirements:\n\nosCommerce (tested so far only with v2.3.1)\nPython with modules: MySQLdb and simplejson\nbitcoind\n\n\nInstallation:\n\n1. Copy all files into your osCommerce installation (the checkout_success.php replaces \nthe existing one so if you or any addons have modified that page, you'll want to merge \nour changes).\n\n2. Enable Bitcoin Payment module\n\n3. Fill in bitcoind RPC host:port, user, password, and create a random notification key\n\n4. Create BTC currency in osCommerce administration -> Localization -> Currencies with \nthe following settings. For Value enter # of BTC a USD would buy you.\n\nTitle: Bitcoin\nCode: BTC\nSymbol Left:\nSymbol Right: BTC\nDecimal Point: .\nThousands Point: ,\nDecimal Places: 3\n\n5. Recommended: Install the Display Totals in Default Currency addon from \nhttp:\/\/www.oscommerce.com\/community\/contributions,3333 and make the modifications \nlisted in this post: https:\/\/bitcointalk.org\/index.php?topic=67166.msg791064#msg791064\n\n6. Move .\/script folder to your preferred location for Python scripts (preferably \noutside the web root)\n\n6. Copy .\/script\/default_settings.py to .\/script\/settings.py and configure at least \nBASE_PATH and OSC_URL\n\n7. Make sure bitcoind is running, is in the path, and has an rpcuser and rpcpassword set \nin .bitcoin\/bitcoin.conf\n\n8. Start monitor.py:\n\n    monitor.py &\n\nYou can 'tail -f .\/scripts\/monitor.log' to follow what the monitor script is doing.\n\nTodo:\n\n* Include a watchdog script to make sure monitor.py is running via cronjob.\n\nInspired by http:\/\/addons.oscommerce.com\/info\/8170 by phoenix.x742 \/ 2 Oct 2011\nbpn.php modified from an osCommerce Paypal IPN script\n","16":"ZynqBTC\n=======\n\nA Bitcoin miner for the Zynq chip utilizing the Zedboard.\n\nGoal\n====\n\nThe main goal of this is a proof-of-concept of making the Zedboard a fully functional Bitcoin miner for the open source community.\n\nTODO\n====\n\n- Complete\/Verify the SHA256 IP in HLS\n- Create the Zynq PL utilizing the SHA256 IP as well as AXI4 FIFO Stream and AXI4 Interconnect (for multiple miners)\n- Create the Arbiter in C\/C++ for communication to the AXI4 Interconnect\n- Configure the ARM to run Linux on Proc 0 and Arbiter on Proc 1\n- Support the Stratum protocol (getwork will not be supported in the main branch. If getwork version is requested, a new branch will be created).\n- Benchmark!!!!\n\nBasic Design\n============\n\nThe basic design is to utilize the ARM dual core processor to handle communication to a pool and act as an arbiter for the miners. Utilizing AXI4 capabilities, it will be able to communicate with the programmable logic (PL) with ease.\n\n- Processor 0 - This is the main communication to the outside world. This processor will run Linux with Python\/Perl scripts to handle datatransmission to\/from pool and to\/from arbiter\n- Processor 1 - This is a bare-metal program which will communicate with Processor 0 for jobs, and the PL to distribute\/read in work\n- PL - Where the miners live.\n\nFeatures\n========\n\nA fully functional Zynq Bitcoin Miner. Since not everything about it are currently defined below are specifications:\n- Full AXI4 support -- The design will utilize the AXI4 specification for communication between the ARM to the PL and the subsystems on the PL\n- Customizability -- The design will allow the end user to modify any point of the design, of course, within limitation of the WebPACK licensing for Zynq (this means some software\/IP might not be available)\n\nKey Concepts\n============\n\n- Use Vivado HLS to create and generate the SHA256 algorithm in an AXI4 FIFO format in order to get the best performance while limiting memory usage\n- Limit HDL coding. (This means far fewer mistakes in the long run)\n- \"Productizing\" - Each part of this system should be able to stand on its own, which allows anyone to create their own Zynq miner, or modify the current one with better results.\n\t- SHA256 - Standalone AXI4 Spec'd IP\n\t- Linux - (Already standalone)\n\t- Arbiter - Written in C\/C++ and written straight to the ARM processor using Xilinx SDK\n\t- Packaged goods (All the above should be workable from an SD card)\n\nSHA256 IP\n=========\n\nThe SHA256 algorithm will be created in Vivado HLS is a High-Level Synthesis tool provided by Xilinx. The tool will then be able to output a valid IP to use within the design itself, but it does provide the HDL in case a user wants to make minor tweaks to the code (but it will be invalidated if it is regenerated).\n\n\nCurrently, all HLS related code is generated using the Vivado HLS 2012.4 30-day trial license provided by Xilinx.\n\nWiki\n====\nFAQ - https:\/\/github.com\/stiggy87\/ZynqBTC\/wiki\/FAQ\n","17":"WebBitcoinEscrow\nMinimalist and secure web based escrow service for Bitcoin powered by blockchain.info written in Go.\n\nMain Features!\nVery secure due to secret based system rather than using authentication\nWritten in Go thus highly performant and low in RAM usage\nEasy to deploy\nAdminpanel to deal with escalated escrows.\n","18":"<p align=\"center\">\n    <img src=\".\/logo.jpeg\"\n         height=\"130\">\n<\/p>\n<p align=\"center\">\n    <a href=\"https:\/\/github.com\/dily3825002\/awesome-blockchain\/network\">\n        <img src=\"https:\/\/img.shields.io\/github\/forks\/dily3825002\/awesome-blockchain.svg\"\n             alt=\"forks\">\n    <\/a>\n    <a href=\"https:\/\/github.com\/dily3825002\/awesome-blockchain\/stargazers\">\n        <img src=\"https:\/\/img.shields.io\/github\/stars\/dily3825002\/awesome-blockchain.svg\"\n             alt=\"stars\">\n    <\/a>\n    <a href=\".\/LICENSE.md\">\n        <img src=\"https:\/\/img.shields.io\/badge\/license-GNU-blue.svg\"\n             alt=\"license\">\n    <\/a>\n<\/p>\n\n# \u533a\u5757\u94fe\u8d44\u6e90\u6c47\u603b \n\n## \u4ee5\u592a\u574a\u5f00\u53d1\u8d44\u6e90\u6c47\u603b \n\n[Web3.js\u3001Solidity\u3001Truffle\u6559\u7a0b\u53ca ETH \u5f00\u53d1\u8d44\u6e90\u6c47\u603b\ud83d\udcaf](https:\/\/github.com\/dily3825002\/awesome-ethereum)\n\n## \u533a\u5757\u94fe\u767d\u76ae\u4e66\n\n\u4e0b\u8f7d\u5305\u4f53\u5373\u53ef\n\u5f85\u7eed\n<br\/>\n## \u5e38\u7528\u5fc5\u5907\n\n|\u4ea4\u6613\u6240|\u573a\u5916\u4ea4\u6613\u6240|\u8d44\u8baf|\u6570\u636e\u67e5\u8be2|\n|--|--|--|--|\n|[\u5e01\u5b89\uff1a\u670d\u52a1\u6700\u597d\u7684\u5e01\u5e01\u4ea4\u6613\u6240](https:\/\/www.binance.com\/?ref=10113920) |[OTCBTC\uff1a\u9760\u8c31\u573a\u5916\u6cd5\u5e01\u4ea4\u6613\u7f51\u7ad9 ](https:\/\/otcbtc.com\/referrals\/OTCKING)|[MyToken\uff1a\u7b80\u6d01\u7684\u5e01\u79cd\u884c\u60c5APP](http:\/\/mytoken.io\/)|[\u6bd4\u7279\u5e01\u533a\u5757\u6d4f\u89c8\u5668 ](https:\/\/btc.com\/)|\n|[\u706b\u5e01\uff1a\u9760\u8c31\u7684\u4ea4\u6613\u6240](https:\/\/www.huobi.pro\/zh-cn\/)|[OKEX\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u671f\u8d27\u7684\u4ea4\u6613\u6240](https:\/\/www.okex.com\/)|[\u975e\u5c0f\u53f7\uff1a\u5f3a\u5927\u7684\u884c\u4e1a\u5927\u6570\u636e\u7f51\u7ad9 ](http:\/\/www.feixiaohao.com\/)|[\u4ee5\u592a\u574a\u533a\u5757\u6d4f\u89c8\u5668](https:\/\/etherscan.io\/)|\n|[OKEX\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u671f\u8d27\u7684\u4ea4\u6613\u6240](https:\/\/www.okex.com\/)|[\u6bd4\u7279\u513f\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u5404\u79cd\u5206\u53c9\u5e01](https:\/\/gate.io\/signup\/485240)|[\u91d1\u8272\u8d22\u7ecf\uff1a\u533a\u5757\u94fe\u7b2c\u4e00\u5a92\u4f53](http:\/\/jinse.com\/)|[\u5206\u53c9\u5e01\u5927\u5168 ](http:\/\/pieifo.com\/)|\n|[\u6bd4\u7279\u513f\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u5404\u79cd\u5206\u53c9\u5e01](https:\/\/gate.io\/signup\/485240)|-|[\u5df4\u6bd4\u7279\uff1a\u533a\u5757\u94fe\u7b2c\u4e00\u8bba\u575b ](http:\/\/www.8btc.com\/)|[ICOROOT\u9879\u76ee\u8bc4\u6d4b](https:\/\/www.icoroot.com\/)|\n|-|-|[\u94fe\u5411\u8d22\u7ecf\uff1a\u533a\u5757\u94fe\u4fe1\u606f\u670d\u52a1\u5e73\u53f0](http:\/\/www.chainfor.com\/)|[\u4ee5\u592a\u574a\u56fd\u5185\u95e8\u6237\u7f51 ](http:\/\/ethfans.org\/)|\n|-|-|-|[BFC\uff1a\u6700\u5f3a\u7684\u5e01\u79cd\u5927\u6570\u636e\u7f51\u7ad9](https:\/\/bitinfocharts.com\/zh\/)|\n<br\/>\n\n## \u4ea4\u6613\u6240\uff1a\u8d70\u597d\u7b2c\u4e00\u6b65\n\n|\u56fd\u5185\u4ea4\u6613\u6240|\u56fd\u5916\u4ea4\u6613\u6240|\u573a\u5916\u4ea4\u6613\u6240|\n|--|--|--|\n|[\u5e01\u5b89\uff1a\u670d\u52a1\u6700\u597d\u7684\u5e01\u5e01\u4ea4\u6613\u6240](https:\/\/www.binance.com\/?ref=10113920)|[B\u7f51\uff1a\u7f8e\u56fd\u77e5\u540d\u5934\u90e8\u6570\u5b57\u8d27\u5e01\u5e73\u53f0](https:\/\/bittrex.com\/)|[OTCBTC\uff1a\u4f53\u9a8c\u6700\u597d\u7684\u573a\u5916\u5e73\u53f0](https:\/\/otcbtc.com\/referrals\/OTCKING)|\n|[\u706b\u5e01\uff1a\u9760\u8c31\u7684\u4ea4\u6613\u6240](https:\/\/www.huobi.pro\/zh-cn\/)|[P\u7f51\uff1a\u6210\u7acb\u4e8e2014\u5e74\u7684\u8001\u724c\u5c71\u5be8\u5e01\u5e73\u53f0](https:\/\/poloniex.com\/)|[LocalBitcoins\uff1a\u5168\u7403\u6700\u5927\u573a\u5916\u5e73\u53f0](https:\/\/localbitcoins.com\/)|\n|[\u6bd4\u7279\u513f\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u5404\u79cd\u5206\u53c9\u5e01 ](https:\/\/gate.io\/signup\/485240)|[Bithumb\uff1a\u97e9\u56fd\u6392\u540d\u7b2c\u4e00\u7684\u4ea4\u6613\u5e73\u53f0](https:\/\/www.bithumb.com\/)|[\u53ef\u76c8\u53ef\u4e50\uff1a\u652f\u6301\u573a\u5916\u7684\u7efc\u5408\u4ea4\u6613\u6240](https:\/\/www.coincola.com\/mobile\/redpacket?ref=bnpm8imB)|\n|[OKEX\uff1a\u652f\u6301\u6cd5\u5e01\u548c\u671f\u8d27](https:\/\/www.okex.com\/)|[Hitbtc\uff1a\u82f1\u56fd\u9886\u5148\u7684\u4ea4\u6613\u5e73\u53f0](https:\/\/hitbtc.com\/)|[OKEX C2C\uff1aOKEX\u573a\u5916](https:\/\/www.okex.com\/c2c\/trade\/trade.do)|\n|[EXX\uff1a\u53ef\u4fe1\u8d56\u7684\u6570\u5b57\u8d27\u5e01\u4ea4\u6613\u7f51 ](https:\/\/www.exx.com\/r\/c4c2539b9f192f47492a15b9afd8a8ea)|[KEX\uff1a\u53ef\u5145\u503c\u6cd5\u5e01\u7684\u97e9\u56fd\u4ea4\u6613\u5e73\u53f0](https:\/\/www.kex.com\/)|[\u706b\u5e01 C2C\uff1a\u706b\u5e01\u573a\u5916ZB ](https:\/\/otc.huobi.pro\/)|\n|[KUCOIN\uff1a\u7b80\u5355\u6613\u7528\u7684\u6570\u5b57\u8d27\u5e01\u4ea4\u6613\u7f51 ](https:\/\/www.kucoin.com\/#\/?r=E3lswr)|[EtherDelta\uff1a\u53bb\u4e2d\u5fc3\u5316\u7b2c\u4e00\u4ea4\u6613\u5e73\u53f0](https:\/\/etherdelta.com\/)|[C2C\uff1a\u4e2d\u6bd4\u7279\u573a\u5916](https:\/\/vip.zb.com\/activity\/joinbtc?tuijianid=32ab425f28355704632893ae7eb1cbbc)|\n|[ZB\uff1a\u56fd\u5185\u8001\u5b57\u53f7\u4e2d\u6bd4\u7279\u5408\u4f5c\u5e73\u53f0 ](https:\/\/vip.zb.com\/activity\/joinbtc?tuijianid=32ab425f28355704632893ae7eb1cbbc)|[Liqui\uff1a\u4e4c\u514b\u5170\u4f18\u79c0\u7684\u4ea4\u6613\u5e73\u53f0](https:\/\/liqui.io\/)|[BitcoinWorld\uff1a\u6bd4\u7279\u5e01\u4e16\u754c\u573a\u5916\u5e73\u53f0](https:\/\/bitcoinworld.com\/register?referral=64597)|\n|[Bitfinex\uff1a\u7ecf\u5e38\u4e16\u754c\u7b2c\u4e00\u7684\u9999\u6e2f\u4ea4\u6613\u6240](https:\/\/www.bitfinex.com\/)|[Quoinex\uff1a\u65e5\u672c\u6700\u597d\u7684\u6301\u7167\u4ea4\u6613\u5e73\u53f0](https:\/\/quoinex.com\/)|[LinkCoin\uff1a\u597d\u7528\u7684\u573a\u5916\u4ea4\u6613\u5e73\u53f0](https:\/\/www.linkcoin.pro\/)|\n|[AEX\uff1a\u6bd4\u7279\u65f6\u4ee3\u6d77\u5916\u7248 ](https:\/\/www.aex.com\/)|[BIT-Z\uff1a\u5168\u7403\u5316\u6570\u5b57\u8d27\u5e01\u4ea4\u6613\u5e73\u53f0](https:\/\/www.bit-z.com\/)|-|\n|[ALLCOIN\uff1a\u6fb3\u5927\u5229\u4e9a\u4e0a\u5e02\u516c\u53f8\u4ea4\u6613\u6240 ](https:\/\/www.allcoin.com\/Account\/RegisterByPhoneNumber\/?InviteCode=MTQ2OTk4MDgwMDg5Mzgw)|[BitMex\uff1a\u603b\u90e8\u4f4d\u4e8e\u585e\u820c\u5c14\u7684\u4ea4\u6613\u5e73\u53f0](https:\/\/www.bitmex.com\/)|-|\n|[\u5e01\u8d62\u7f51\uff1a\u575a\u633a\u652f\u6301\u6cd5\u5e01\u7684\u4ea4\u6613\u6240 ](https:\/\/www.coinw.com\/)|[CME\uff1a\u6bd4\u7279\u5e01\u671f\u8d27\u5e73\u53f0](http:\/\/www.cmegroup.com\/)|-|\n|[CEX\uff1a\u5e01\u4e45\u6d77\u5916\u7248](https:\/\/www.cex.com\/)|-|-|\n|[BigOne\uff1a\u8001\u732b\u638c\u7ba1\u7684\u5e01\u5e01\u4ea4\u6613\u6240 ](https:\/\/big.one\/)|-|-|\n|[CoinEgg\uff1a\u805a\u5e01\u56fd\u9645\u7248](https:\/\/www.coinegg.com\/)|-|-|\n<br\/>\n\n## \u5a92\u4f53\u8d44\u8baf\uff1a\u8bc6\u5a92\u4f53\uff0c\u770b\u5e01\u5708\n\n|\u5a92\u4f53|\u5fae\u535a|\u8ba2\u9605\u53f7|\n|--|--|--|\n|[\u91d1\u8272\u8d22\u7ecf\uff1a\u5e01\u5708\u56fd\u5185\u7b2c\u4e00\u5a92\u4f53](http:\/\/www.jinse.com\/)|[\u8d22\u65b0\u7f51\uff1a\u56fd\u5bb6\u5a92\u4f53\uff0c\u56fd\u5185\u5e01\u5708\u653f\u7b56\u98ce\u5411\u6807](https:\/\/weibo.com\/caixincn?refer_flag=1001030101_)|[\u767d\u8bdd\u533a\u5757\u94fe\uff1a\u5e01\u5708\u6700\u826f\u5fc3\u516c\u4f17\u53f7\uff0c\u5c0f\u767d\u9996\u9009](https:\/\/mp.weixin.qq.com\/s\/PAJowLo3ECp-zLncvqrSpg)|\n|[\u94fe\u5411\u8d22\u7ecf\uff1a\u533a\u5757\u94fe\u4fe1\u606f\u670d\u52a1\u5e73\u53f0 ](http:\/\/www.chainfor.com\/)|[\u5357\u5bab\u8fdc\uff1a\u5e01\u5708\u8001\u8d44\u683c\u7684\u6bd4\u7279\u5e01\u8e0f\u7a7a\u8005](https:\/\/weibo.com\/bmngy?refer_flag=1001030103_ )|[BABI\u8d22\u7ecf\uff1a\u5e01\u5b89\u65d7\u4e0b\u5e01\u5708\u5a92\u4f53\u53f7 ](https:\/\/mp.weixin.qq.com\/s\/u6zlKg0nqp7Otz2jeYmuWw)|\n|[\u5df4\u6bd4\u7279\u8bba\u575b\uff1a\u533a\u5757\u94fe\u56fd\u5185\u7b2c\u4e00\u8bba\u575b ](http:\/\/8btc.com\/?fromuser=%BC%C5%C4%AF%BB%F0%C9%BD)|[\u5b9d\u4e8c\u7237\uff1a\u6bd4\u7279\u5e01\u4e0a\u5e1d\u5206\u53c9\u53d1\u8d77\u4eba](https:\/\/weibo.com\/u\/5941645212?refer_flag=1001030102_)|[\u5df4\u6bd4\u7279\u8d44\u8baf\uff1a\u5df4\u6bd4\u7279\u65d7\u4e0b\u516c\u4f17\u53f7 ](https:\/\/mp.weixin.qq.com\/s\/52fzEwKm8inn7KYPq0DSmw)|\n|[BTC123\uff1a\u6bd4\u7279\u5e01\u7efc\u5408\u4fe1\u606f\u7f51](https:\/\/www.btc123.com\/)|[\u4f55\u751f\uff1a\u5e01\u5708\u575a\u6301\u76f4\u64ad\u6700\u957f\u7684\u4eba](https:\/\/weibo.com\/u\/2393473121?refer_flag=1001030102_ )|[\u672a\u6765\u865a\u62df\u5e01\uff1a\u5927\u70ae\u8bc4\u7ea7\uff0c\u7cbe\u5f69\u6599\u591a](https:\/\/mp.weixin.qq.com\/s\/StSRVQ39qZvhqVA3xP9bRA)|\n|[\u5e01\u4e4e\uff1a\u6709\u8425\u517b\u7684\u5e01\u5708\u793e\u533a ](https:\/\/zt.bihu.com\/?id=25175)|[\u6768\u6797\u79d1\uff1a\u539f\u6bd4\u7279\u5e01\u4e2d\u56fdCEO](https:\/\/weibo.com\/yanglinke?refer_flag=1001030102_)|[\u533a\u5757\u94fe\u94c5\u7b14\uff1a\u4e07\u8c61\u6295\u8d44\u7684\u5a92\u4f53 ](https:\/\/mp.weixin.qq.com\/s\/uoaIwprpeExTthrbV4e5CA)|\n|[\u5e01\u95ee\uff1a\u5e01\u5708\u77e5\u4e4e ](https:\/\/www.bitask.org\/)|[\u6bd4\u7279\u5434](https:\/\/weibo.com\/wuhanaixin?refer_flag=1001030101_ )|[\u817e\u8baf\u53ef\u4fe1\u533a\u5757\u94fe\uff1a\u817e\u8baf\u533a\u5757\u94fe\u5b98\u65b9\u53f7 ](https:\/\/mp.weixin.qq.com\/s\/HV_6ttZuzY1SHX2btog7bQ)|\n|[\u533a\u5757\u94fe\u94c5\u7b14\uff1a\u533a\u5757\u94fe\u6280\u672f\u8ba8\u8bba\u793e\u533a ](http:\/\/chainb.com\/)|[\u4f55\u4e00\uff1a\u5e01\u5b89\u5408\u4f19\u513f\u4eba\uff0c\u9996\u5e2d\u5ba2\u670d\u7533](https:\/\/weibo.com\/lilithhe?refer_flag=1001030102_)|[Hi\u533a\u5757\u94fe NEO](https:\/\/mp.weixin.qq.com\/s\/koy-e2TnLM7JcLVVBmG-wA)|\n|[\u5e01\u770b\uff1a\u6bd4\u7279\u5e01\u8d44\u8baf\u53ca\u5de5\u5177\u7efc\u5408\u95e8\u6237](https:\/\/www.bitkan.com\/)|[\u5c60\u9752\u6625\uff1a\u535a\u58eb\uff0c\u6295\u7968\u94fe\u521b\u59cb\u4eba](http:\/\/weibo.com\/MyBitcoin?refer_flag=1001030101_ )|[\u667a\u80fd\u7ecf\u6d4e\uff1aNEO\u5b98\u65b9\u516c\u4f17\u53f7\uff0c\u6d3b\u52a8\u591a](https:\/\/mp.weixin.qq.com\/s\/ZWCmZnAwHYruvMYzxZ9HzA)|\n|[\u6bd4\u7279\u5934\u6761\uff1a\u533a\u5757\u94fe\u754c\u7684\u5934\u6761 ](http:\/\/www.bitett.com\/)|[\u6c5f\u5353\u5c14\uff1a\u77ff\u6c60\u5927\u4f6c\uff0cBCH\u652f\u6301\u8005](https:\/\/weibo.com\/ltc1btc?refer_flag=1001030101_)|-|\n|[\u6bd4\u7279\u4e4b\u5bb6\uff1a\u6bd4\u7279\u5e01\u95e8\u6237\u7f51 ](http:\/\/www.btc798.com\/)|[\u6bd4\u7279\u5e01\u79cb\u5c71\u541b](https:\/\/weibo.com\/coinxun?from=profile&amp;wvr=6 )|-|\n|[EthFans\uff1a\u4ee5\u592a\u574a\u4e2d\u6587\u95e8\u6237 ](http:\/\/ethfans.org\/)|[\u5b59\u5b87\u6668\uff1a90\u540e\u7f51\u7ea2\u521b\u4e1a\u8005\uff0c\u6ce2\u573a\u521b\u59cb\u4eba](https:\/\/weibo.com\/shixb90?refer_flag=1001030101_)|-|\n|[CoinDesk\uff1a\u56fd\u5916\u6bd4\u7279\u5e01\u7efc\u5408\u95e8\u6237\u7f51\u7ad9](https:\/\/www.coindesk.com\/)|[\u6bd4\u7279\u5e01\u83b1\u7279\u5e01](https:\/\/weibo.com\/xxszjs?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_hot=1 )|-|\n|[BitcoinTalk\uff1a\u5168\u7403\u7b2c\u4e00\u533a\u5757\u94fe\u8bba\u575b ](https:\/\/bitcointalk.org\/index.php?board=30.0)|[\u66b4\u8d70\u606d\u4eb2\u738b\uff1a\u4f20\u5947\u4eba\u7269\uff0cCybex\u521b\u59cb\u4eba](https:\/\/weibo.com\/p\/1005051402559840\/home?from=page_100505&amp;mod=TAB&amp;is_hot=1#place)|-|\n|[Reddit\uff1a\u56fd\u5916\u70ed\u95e8\u7684\u6bd4\u7279\u5e01\u8ba8\u8bba\u7ec4 ](https:\/\/www.reddit.com\/)|-|-|\n|[\u672a\u6765\u8d22\u7ecf\uff1a\u7b80\u6d01\u98ce\u683c\u7684\u8d22\u7ecf\u5a92\u4f53](http:\/\/www.weilaicaijing.com\/)|-|-|\n\n<br\/>\n\n## \u7092\u5e01\u5de5\u5177\uff1a\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\n\n|\u5e01\u79cd\u884c\u60c5|\u94b1\u5305\u5de5\u5177|\u533a\u5757\u67e5\u8be2|\u91cf\u5316\u4ea4\u6613|\n|--|--|--|--|\n|[\u975e\u5c0f\u53f7\uff1a\u5f3a\u5927\u7684\u884c\u4e1a\u5927\u6570\u636e\u7f51\u7ad9](https:\/\/www.feixiaohao.com\/)|[imToken\uff1a\u56fd\u5185\u6700\u6d41\u884c\u7684\u4ee5\u592a\u574a\u94b1\u5305APP](https:\/\/token.im\/)|[BTC\u6d4f\u89c8\u5668](https:\/\/btc.com\/)|[BotVS\uff1a\u9996\u5bb6\u6570\u5b57\u8d27\u5e01\u91cf\u5316\u5de5\u5177\uff0c\u529f\u80fd\u5f3a\u5927](https:\/\/www.botvs.com\/)|\n|[AiCoin\uff1a\u539fSOSOBTC\uff0c\u652f\u6301APP ](https:\/\/www.aicoin.net.cn\/)|[MyEtherWallet\uff1a\u6700\u597d\u7528\u7684\u4ee5\u592a\u574a\u7f51\u9875\u94b1\u5305\u6bd4\u7279\u5e01\u5b98\u65b9\u94b1\u5305](https:\/\/www.myetherwallet.com\/)|[ETH\u6d4f\u89c8\u5668](https:\/\/etherscan.io\/)|[\u6bd4\u7279\u5e01\u7cbe\u7075\uff1a\u7b80\u5355\u597d\u7528\u7684\u5bf9\u51b2\u548c\u642c\u7816\u5de5\u5177](http:\/\/www.btcjl.com\/)|\n|[MyToken\uff1a\u5c0f\u5de7\u597d\u7528\u7684\u884c\u60c5\u67e5\u770bAPP ](https:\/\/mytoken.io\/)|[BlockChain\uff1a\u597d\u7528\u7684\u591a\u5e01\u79cd\u7f51\u9875\u94b1\u5305](https:\/\/bitcoin.org\/zh_CN\/choose-your-wallet)|[LTC\u6d4f\u89c8\u5668](https:\/\/chainz.cryptoid.info\/ltc\/)|[\u7c73\u6846\u91cf\u5316\uff1a\u79c1\u4eba\u91cf\u5316\u4ea4\u6613\u5e73\u53f0](https:\/\/www.ricequant.com\/)|\n|[CoinMarketCap\uff1a\u56fd\u5916\u8001\u724c\u5927\u6570\u636e\u7f51\u7ad9](https:\/\/coinmarketcap.com\/)|[\u83b1\u7279\u5e01\u5ba2\u6237\u7aef\u4ee5](https:\/\/blockchain.info\/zh-cn\/wallet\/#\/)|[QTUM\u6d4f\u89c8\u5668](https:\/\/qtumexplorer.io\/)|[\u963f\u5e03\u91cf\u5316\uff1a\u7efc\u5408\u7684\u5f00\u6e90\u4ea4\u6613\u7cfb\u7edf](http:\/\/www.abuquant.com\/)|\n|[BTC123\uff1a\u6bd4\u7279\u5e01\u4ef7\u683c\u6c47\u603b\u53ca\u884c\u60c5\u56fe\u8868 ](https:\/\/www.btc123.com\/trades)|[\u592a\u574a\u5b98\u65b9\u5ba2\u6237\u7aef](https:\/\/electrum-ltc.org\/)|[USDT\u6d4f\u89c8\u5668](http:\/\/omnichest.info\/lookupsp.aspx?sp=31)|[\u679c\u5e01\u7f51\uff1a\u6bd4\u7279\u5e01\u91cf\u5316\u81ea\u52a8\u4ea4\u6613\u5e73\u53f0](https:\/\/guobinet.com\/)|\n|[Bitkan\uff1a\u4e3b\u6d41\u5e01\u79cd\u5b9e\u65f6\u6570\u636e\u6c47\u603b ](http:\/\/bitkan.com\/price)|[\u6bd4\u7279\u6d3e\uff1a\u56fd\u5185\u529f\u80fd\u6700\u5f3a\u5927\u7684\u94b1\u5305](http:\/\/bitpie.com\/)|[\u5c0f\u8681NEO\u6d4f\u89c8\u5668](http:\/\/antcha.in\/)|[\u5e01\u91cf\u5316\uff1a\u6bd4\u7279\u5e01\u3001\u83b1\u7279\u5e01\u91cf\u5316\u81ea\u52a8\u4ea4\u6613\u5e73\u53f0](http:\/\/www.bilianghua.com\/)|\n|[Cryptowat\uff1a\u70ed\u95e8\u8d44\u4ea7\u4e13\u4e1a\u884c\u60c5\u56fe\u8868 ](https:\/\/cryptowat.ch\/)|[Bither\uff1a\u56fd\u4ea7\u5f00\u6e90\u6bd4\u7279\u5e01\u94b1\u5305,\u65e0\u9700\u540c\u6b65\u533a\u5757](https:\/\/bither.net\/)|[BitInfoCharts\u7efc\u5408\u6d4f\u89c8\u5668](https:\/\/bitinfocharts.com\/zh\/)|[Samaritan\uff1a\u7b80\u5355\u6613\u7528\u7684\u6570\u5b57\u8d27\u5e01\u91cf\u5316\u6846\u67b6](http:\/\/samaritan.stockdb.org\/)|\n|[Investing\uff1a\u72ec\u6709\u5b9e\u65f6\u4e70\u5165\u5356\u51fa\u5206\u6790](https:\/\/cn.investing.com\/)|[BitBank\uff1a\u6bd4\u94f6\u96c6\u56e2\u65d7\u4e0b\u6bd4\u7279\u5e01\u70ed\u94b1\u5305](https:\/\/www.bitbank.com\/)|[BitBank\u7efc\u5408\u6d4f\u89c8\u5668](https:\/\/block.bitbank.com\/)|[\u6bd4\u7279\u4e00\u4e0b\uff1a\u7b80\u5355\u597d\u7528\u7684\u642c\u7816\u5de5\u5177](http:\/\/www.bityixia.com\/)|\n|-|[\u83b1\u7279\u5e01\u5b98\u65b9\u5f00\u6e90\u94b1\u5305](https:\/\/litecoin.org\/cn\/)|-|-|\n|-|[Jaxx\uff1a\u652f\u6301\u51e0\u5341\u79cd\u8d44\u4ea7\u7684\u4f18\u79c0\u94b1\u5305](https:\/\/jaxx.io\/)|-|-|\n|-|[AToken\uff1a\u652f\u6301\u51e0\u5341\u79cd\u8d44\u4ea7\u7684\u94b1\u5305](https:\/\/www.atoken.com\/)|-|-|\n|-|[\u9177\u795e\u94b1\u5305\uff1a\u8d85\u9177\u786c\u4ef6\u94b1\u5305P](https:\/\/www.coldlar.com\/)|-|-|\n|-|[PO.IM \uff1a\u5e01\u4fe1\u6d77\u5916\u7248\u94b1\u5305](https:\/\/po.im\/)|-|-|\n|-|[ONE\u94b1\u5305: \u4e07\u80fd\u94b1\u5305](http:\/\/app.onechain.one\/appstart.html)|-|-|\n\n<br\/>\n\n## \u5927\u6570\u636e\n\n- [\u6bd4\u7279\u5e01\u5bcc\u8c6a\u699c](http:\/\/qukuai.com\/top)\n- [\u4ee5\u592a\u574a\u5bcc\u8c6a\u699c](https:\/\/etherscan.io\/accounts)\n- [\u4ea4\u6613\u6240\u4ea4\u6613\u91cf\u6392\u884c\u699c](https:\/\/coinmarketcap.com\/exchanges\/volume\/24-hour\/)\n- [\u4e3b\u6d41\u5e01\u79cd\u6d3b\u8dc3\u5730\u5740\u6570](https:\/\/bitinfocharts.com\/zh\/comparison\/activeaddresses-btc-eth-bch-ltc-dash-xmr.html)\n- [\u4e0a\u5343\u4e2aDAPP\u5927\u5168](https:\/\/www.stateofthedapps.com\/)\n- [Erc20\u4ee3\u5e01\u5927\u5168](https:\/\/etherscan.io\/tokens)\n- [\u4e3b\u6d41\u5e01\u79cd\u8f6c\u8d26\u624b\u7eed\u8d39\u6982\u51b5](https:\/\/bitinfocharts.com\/zh\/comparison\/transactionfees-btc-eth-bch-ltc-dash-xmr.html)\n- [\u77ff\u6c60\u7b97\u529b\u6392\u884c\u699c](https:\/\/btc.com\/stats\/pool)\n- [\u4ee5\u592a\u574a\u91cd\u8981\u6570\u636e\u5b9e\u65f6\u53ef\u89c6\u5316\u56fe\u8868 ](https:\/\/ethstats.net\/)\n- [\u6bd4\u7279\u5e01\u533a\u5757\u6570\u636e](https:\/\/btc.com\/stats\/block-size)\n- [\u6bd4\u7279\u5e01\u5835\u585e\u76d1\u89c6](https:\/\/btc.com\/stats\/unconfirmed-tx)\n- [\u4e91\u517b\u732b\u6570\u636e\u5206\u6790 ](http:\/\/bitgame.pro\/user?lang=zh-cn)\n- [\u53ef\u89c6\u5316\u7684ICO\u53d1\u5c55\u5386\u53f2 ](https:\/\/elementus.io\/token-sales-history)\n- [\u533a\u5757\u94fe\u76f8\u5173\u5fae\u4fe1\u6307\u6570 ](http:\/\/index.wxadd.com\/rank\/bitcoin)\n- [\u533a\u5757\u94fe\u76f8\u5173\u767e\u5ea6\u6307\u6570](http:\/\/index.baidu.com\/?tpl=trend&amp;type=0&amp;area=0&amp;time=13&amp;word=%C7%F8%BF%E9%C1%B4%2C%B1%C8%CC%D8%B1%D2%2Cico%2C%D2%D4%CC%AB%B7%BB)\n\n<br\/>\n\n## \u81ea\u5a92\u4f53\uff1a\u5e01\u5708\u91cc\uff0c\u4fe1\u606f\u5c31\u662f\u94b1\n\n|\u4e2a\u4eba\u8ba2\u9605\u53f7|\u535a\u5ba2\u3001\u7b80\u4e66|\u77e5\u8bc6\u661f\u7403|\n|--|--|--|\n|[\u732b\u8bf4\uff1a2017\u5e74\u65e0\u6570\u65b0\u97ed\u83dc\u7684\u542f\u8499\u516c\u4f17\u53f7](https:\/\/mp.weixin.qq.com\/s\/Y_IrNMPfCsysv4TLWnEUqQ)|[\u6c6a\u6653\u660e\u535a\u5ba2\uff1a\u5927\u91cf\u7cfb\u7edf\u7684\u533a\u5757\u94fe\u6280\u672f\u6559\u7a0b](http:\/\/wangxiaoming.com\/)|[\u706b\u5c71\u592b\u5987\u7092\u5e01\u76f4\u64ad\u95f4](https:\/\/t.zsxq.com\/aMz33Bu)|\n|[\u95ea\u7535HSL\uff1a\u6280\u672f\u5927\u795e\uff0cBCH\u652f\u6301\u8005](https:\/\/mp.weixin.qq.com\/s\/eG4434YSihvV_CmDRrfjMw)|[Elwin\u968f\u5fc3\u535a\u5ba2](http:\/\/blog.csdn.net\/elwingao )|[BNB\u7c89\u4e1d\u5708](https:\/\/t.xiaomiquan.com\/3rf2rBi )|\n|[\u6570\u5b57\u8d27\u5e01\u8d8b\u52bf\u72c2\u4eba\uff1a\u575a\u6301\u65e5\u66f4\u7684\u884c\u60c5\u5206\u6790\u5e08](https:\/\/mp.weixin.qq.com\/s\/u1auM4i5PJEmybMkONmlNA)|[\u9ece\u8dc3\u6625\u535a\u5ba2\uff1a\u4eba\u79f0\u6625\u54e5\uff0c\u5b54\u58f9\u5b66\u9662\u521b\u59cb\u4eba](http:\/\/liyuechun.org\/#blog)|[\u533a\u5757\u5148\u950b\uff1a\u70e7\u54e5\u7ba1\u7406\u7684\u51e0\u5343\u4eba\u7684\u5927\u661f\u7403](https:\/\/t.xiaomiquan.com\/VFeQZba)|\n|[\u82cf\u6c5f\uff1a\u5e01\u5708\u72ec\u7acb\u601d\u8003\u8005\uff0c\u7bc7\u7bc7\u7cbe\u534e](https:\/\/mp.weixin.qq.com\/s\/wBF4reersATh-6cuNXPqZw)|[\u732b\u53cb\u5708\uff1a\u4eba\u591a\uff0c\u70ed\u95f9\uff0c\u4f46\u8001\u732b\u4e0d\u5e38\u51fa\u73b0](https:\/\/t.xiaomiquan.com\/7AAmea6)|[\u533a\u5757\u94fe\u89c2\u5bdf\u8005\uff1a\u4eba\u4e0d\u591a\uff0c\u4f46\u5708\u4e3b\u7ecf\u5e38\u795e\u9884\u6d4b](https:\/\/t.xiaomiquan.com\/fi2vNJi )|\n|[Miao\u8bf4:\u533a\u5757\u94fe\u8001\u8463](https:\/\/mp.weixin.qq.com\/s\/fcqRi5d61Se5vBPq2B9AIg)|[\u95ea\u7535\u6bd4\u7279\u5e01\u5708\uff1a\u5927\u5934\u7ecf\u5e38\u51fa\u73b0](https:\/\/t.xiaomiquan.com\/3ZBURbY )|[\u5927\u70ae\u77ff\u793e(IPFS)\uff1aIPFS\u53ca\u5176\u6316\u77ff\u7684\u661f\u7403](https:\/\/t.xiaomiquan.com\/ZnAMFIQ)|\n|[\u5e01\u8ba1\uff1a\u5e01\u5708\u516b\u5366\uff0c\u70ed\u70b9\u8ffd\u8e2a\u5c0f\u660e\u5fae\u601d\u8003](https:\/\/mp.weixin.qq.com\/s\/vEy187_3thDgXdEcoHW9Ug)|[\u533a\u5757\u94fe\u7231\u597d\u8005](https:\/\/t.xiaomiquan.com\/ieUniuv)|-|\n|[\u674e\u767d\u8bdd\u65e5\u5e38](https:\/\/mp.weixin.qq.com\/s\/xl4QRQQcSThBb_z4O7ib6A)|[\u6d77\u5916\u5e01\u5708\uff1a\u7528\u5fc3\u7ba1\u7406\u7684](https:\/\/t.xiaomiquan.com\/rRVvZVr )|-|\n|[\u51e0\u7c73\u4e00\u56de\u5934\uff1a\u5206\u4eab\u5404\u79cd\u8d5a\u94b1\u7684\u6545\u4e8b\u548c\u6280\u5de7](https:\/\/mp.weixin.qq.com\/s\/n_dX2RU5i7oyajLmlrrWPw)|-|-|\n|[\u4e00\u4e8c\uff1a\u5df2\u7ecf\u51fa\u4e66\u7684\u6770\u51fa90\u540e\uff0c\u6587\u7ae0\u5f88\u597d](https:\/\/mp.weixin.qq.com\/s\/m1NCDcs-f-WmnTtq35YwvA)|-|-|\n|[\u84dd\u72d0\u7b14\u8bb0](https:\/\/mp.weixin.qq.com\/s\/2BTcjsAXCVfz63IR6Kw3qg)|-|-|\n|[45\u533a](https:\/\/mp.weixin.qq.com\/s\/C5cnthAx6XV0m-oSbuShrA)|-|-|\n|[\u5e01\u864e\uff1a\u9760\u8c31\u9879\u76ee\u5e26\u6295](http:\/\/mp.weixin.qq.com\/s\/HD6-TgJo3ejquZUbO0EzZg )|-|-|\n|[\u738b\u56e2\u957f\u533a\u5757\u94fe\u65e5\u8bb0\uff1a\u771f\u5b9e\u7684\u6295\u8d44\u65e5\u8bb0](https:\/\/mp.weixin.qq.com\/s\/YT4yQFu9Y0Vx-s_tHWvixA )|-|-|\n\n<br\/>\n\n## \u4e1a\u754c\u516c\u53f8\uff1a\u5411\u57cb\u5934\u505a\u4e8b\u7684\u884c\u4e1a\u516c\u53f8\u656c\u793c\n\n|\u77ff\u6c60\u77ff\u673a|\u6280\u672f\u7814\u53d1|\u9879\u76ee\u8bc4\u6d4b|\n|--|--|--|\n|[\u8682\u8681\u77ff\u673a](https:\/\/www.bitmain.com\/)|[\u5e03\u6bd4\u533a\u5757\u94fe](http:\/\/www.bubi.cn\/)|[ICOROOT\uff1a\u56fd\u5185\u6700\u4e13\u4e1a\u7684\u9879\u76ee\u8bc4\u7ea7](https:\/\/www.icoroot.com\/)|\n|[AntPool\u8681\u6c60 ](https:\/\/antpool.com\/home.htm)|[\u4e07\u8c61\u533a\u5757\u94fe]( http:\/\/www.wxblockchain.com\/)|[Crushcrypto\uff1a\u56fd\u5916\u6700\u597d\u6700\u5168\u7684\u9879\u76ee\u4fe1\u606f]( https:\/\/crushcrypto.com\/)|\n|[BTC\u77ff\u6c60 ](https:\/\/pool.btc.com\/)|[\u817e\u8baf\u533a\u5757\u94fe](https:\/\/trustsql.qq.com\/)|[52ICOIFO\u5206\u53c9\u5927\u5168\uff1a\u5404\u79cd\u5e01\u7684\u5206\u53c9\u4fe1\u606f\u4e00\u7f51\u6253\u5c3d](http:\/\/www.52ico.com\/)|\n|[ViaBTC\u77ff\u6c60](https:\/\/pool.viabtc.com\/)|[\u4e91\u8c61\u533a\u5757\u94fe]( http:\/\/www.yunphant.com\/)|[TopIcoList]( http:\/\/pieifo.com\/)|\n|[F2Pool \u9c7c\u6c60](https:\/\/www.f2pool.com\/)|[\u590d\u6742\u7f8e\u533a\u5757\u94fe](http:\/\/www.33.cn\/)|[IcoRating](https:\/\/topicolist.com\/)|\n|[\u83b1\u6bd4\u7279\u77ff\u6c60 ](http:\/\/www.btc.top\/)|[\u4e95\u901a\u533a\u5757\u94fe]( https:\/\/www.jingtum.com\/)|[IcoWeb]( https:\/\/icorating.com\/)|\n|[\u56fd\u6c60 ](https:\/\/pool.btcchina.com\/)|[\u592a\u4e00\u4e91](https:\/\/taiyiyun.com\/)|[IcoAlert](http:\/\/www.icoweb.co\/)|\n|[\u7b97\u529b\u5de2](https:\/\/www.hashnest.com\/)|[\u5b89\u94fe\u4e91]( https:\/\/www.anlink.com\/)|[Icodrops\uff1a\u56fd\u5916\u6743\u5a01\u9879\u76ee\u8bc4\u7ea7\u7f51\u7ad9 ]( https:\/\/www.icoalert.com\/)|\n|[\u7b97\u529b\u5427 ](https:\/\/pow8.com\/)|-|[Coingecko\uff1a\u6700\u65b0\u56fd\u5916\u9879\u76ee\u4f17\u7b79\u5217\u8868](http:\/\/icodrops.com\/)|\n|[BTC\u96be\u5ea6\u7b97\u529b ](http:\/\/bitcoin.sipa.be\/)|-|-|\n|[MiningPool ](https:\/\/miningpoolhub.com\/)|-|-|\n|[ETC\u77ff\u6c60](http:\/\/www.91pool.com\/)|-|-|\n|[\u718a\u732b\u77ff\u673a ](http:\/\/pandaminer.com\/)|-|-|\n|[\u5e01\u4fe1\u77ff\u6c60 ](https:\/\/pool.bixin.com\/home)|-|-|\n|[\u661f\u706b\u77ff\u6c60](https:\/\/eth.ethfans.org\/)|-|-|\n|-|[OneChain](http:\/\/www.onechain.one\/)|-|\n\n<br\/>\n\n## \u4e66\u7c4d\uff1a\u6c89\u4e0b\u5fc3\uff0c\u8bfb\u672c\u4e66\n\n|\u7eb8\u8d28\u4e66|\u7535\u5b50\u4e66|\u4e2d\u6587\u767d\u76ae\u4e66\u7cbe\u9009|\n|--|--|--|\n|[\u6bd4\u7279\u5e01\uff1a\u4e00\u4e2a\u865a\u5e7b\u800c\u771f\u5b9e\u7684\u91d1\u878d\u4e16\u754c ](https:\/\/e.jd.com\/30161987.html)|[\u7cbe\u901a\u6bd4\u7279\u5e01\u7b2c\u4e8c\u7248 ](http:\/\/book.8btc.com\/books\/6\/masterbitcoin2cn\/_book\/)|[ETH\u767d\u76ae\u4e66 ](http:\/\/ethfans.org\/wikis\/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6)|\n|[\u533a\u5757\u94fe\u9769\u547d ]( https:\/\/item.jd.com\/12033804.html )|[\u9ad8\u76db\u533a\u5757\u94fe\u62a5\u544a ]( http:\/\/book.8btc.com\/books\/1\/gaosheng_blockchain_report\/_book\/)|[EOS\u767d\u76ae\u4e66 ]( http:\/\/chainx.org\/paper\/index\/index\/id\/20.html)|\n|[\u533a\u5757\u94fe\uff1a\u65b0\u7ecf\u6d4e\u84dd\u56fe\u53ca\u5bfc\u8bfb ](https:\/\/item.jd.com\/10401239824.html)|[\u592e\u884c\u6570\u5b57\u8d27\u5e01\u7814\u7a76\u4e0e\u63a2\u8ba8 ](http:\/\/book.8btc.com\/books\/6\/cnfinance201617\/_book\/)|[\u661f\u9645\u6587\u4ef6\u767d\u76ae\u4e66 ](http:\/\/chainx.org\/paper\/index\/index\/id\/13.html)|\n|[\u533a\u5757\u94fe\uff1a\u6280\u672f\u9a71\u52a8\u91d1\u878d]( https:\/\/item.jd.com\/12014042.html )|[Solidity\u667a\u80fd\u5408\u7ea6\u7f16\u7a0b\u6307\u5357]( http:\/\/book.8btc.com\/books\/6\/solidity-zh\/_book\/)|[Polkadot\u767d\u76ae\u4e66]( http:\/\/chainx.org\/paper\/index\/index\/id\/6.html)|\n|[\u533a\u5757\u94fe\uff1a\u91cd\u5851\u7ecf\u6d4e\u4e0e\u4e16\u754c ](https:\/\/item.jd.com\/11922237.html)|-|[Kyber\u53bb\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u767d\u76ae\u4e66 ](http:\/\/chainx.org\/paper\/index\/index\/id\/26.html)|\n|[\u533a\u5757\u94fe\uff1a\u4ece\u6570\u5b57\u8d27\u5e01\u5230\u4fe1\u7528\u793e\u4f1a ]( https:\/\/weidian.com\/item.html?itemID=1878011740 )|-|[\u6d41\u91cf\u77ff\u77f3\u767d\u76ae\u4e66]( https:\/\/minerdl.yunfan.com\/miner\/lltoken\/uploadfile\/pdf\/llt_white_paper.pdf)|\n|[\u533a\u5757\u94fe\uff1a\u5b9a\u4e49\u672a\u6765\u91d1\u878d\u4e0e\u7ecf\u6d4e\u65b0\u683c\u5c40 ](https:\/\/item.jd.com\/11936509.html)|-|-|\n|[\u533a\u5757\u94fe\u6570\u5b57\u8d27\u5e01\u6295\u8d44\u6307\u5357]( https:\/\/e.jd.com\/30373377.html )|-|-|\n|[\u5982\u4f55\u6295\u8d44\u6570\u5b57\u8d27\u5e01 ](https:\/\/item.jd.com\/12114952.html)|-|-|\n|[\u533a\u5757\u94fe\u5f00\u53d1\u6307\u5357 ]( https:\/\/weidian.com\/item.html?itemID=2133865911 )|-|-|\n|[\u533a\u5757\u94fe\u6280\u672f\u6307\u5357 ](http:\/\/item.jd.com\/12007317.html)|-|-|\n|[\u533a\u5757\u94fe\u6838\u5fc3\u7b97\u6cd5\u89e3\u6790]( https:\/\/item.jd.com\/13612791347.html )|-|-|\n|[\u533a\u5757\u94fe\u6280\u672f\u539f\u7406\u53ca\u5e95\u5c42\u67b6\u6784 ](https:\/\/item.jd.com\/12188306.html)|-|-|\n|[\u533a\u5757\u94fe\u539f\u7406\u3001\u8bbe\u8ba1\u4e0e\u5e94\u7528]( https:\/\/item.jd.com\/12159265.html )|-|-|\n\n<br\/>\n\n## \u5176\u4ed6\n\n|\u7cbe\u54c1\u6e38\u620f|\u7cbe\u54c1\u6587\u7ae0|\n|--|--|\n|[Solidity\u5728\u7ebf\u5f00\u53d1 ](https:\/\/ethereum.github.io\/browser-solidity\/#version=soljson-v0.4.18+commit.9cf6e910.js)|[TED\u5173\u4e8e\u533a\u5757\u94fe\u7684\u5165\u95e8\u79d1\u666e\u89c6\u9891 ](https:\/\/weibo.com\/tv\/v\/FzcPgFU1y?fid=1034:01ea26af661b0e4bf56a63f6628fba57)|\n|[ETH\u517b\u732b\u6e38\u620f ]( https:\/\/www.cryptokitties.co\/)|[\u6bd4\u7279\u5e01\u7684\u57fa\u56e0 ]( https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483975&amp;idx=1&amp;sn=bc0217c669b4089df132b4d4f2cf3768&amp;chksm=e87de8e7df0a61f1126b772f228891d0c74b98c0d3d181a2ca80e892dfcede11f6fa36d47c89#rd)|\n|[ETH\u517b\u732b\u6e38\u620f\u6570\u636e\u5206\u6790 ](http:\/\/bitgame.pro\/user?lang=zh-cn)|[\u6307\u8d23\u6bd4\u7279\u5e01\u6316\u77ff\u8017\u7535\u662f\u65e0\u7406\u53d6\u95f9 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483978&amp;idx=1&amp;sn=a1d7e7e5762ccd8d01bd6f7dcf3cc5ed&amp;chksm=e87de8eadf0a61fc70d45f2939e86566e09e437db62ae2e088150093452d683b8cb8579dd897#rd)|\n|[\u4e2d\u672c\u806a\u9ab0\u5b50 ]( https:\/\/www.satoshidice.com\/)|[\u6df1\u5ea6\u5256\u6790\u5171\u8bc6\u673a\u5236\u548c\u62dc\u5360\u5ead\u5c06\u519b\u95ee\u9898]( https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483981&amp;idx=1&amp;sn=60f84950d01d2e57bea2a96c654de664&amp;chksm=e87de8eddf0a61fb4dc387ff21d54de89508707eeaf5116b9e8e9d7b46de4db37a8543a2d32b#rd)|\n|[\u514d\u8d39\u83b7\u53d6\u6bd4\u7279\u5e01 ](https:\/\/freebitco.in\/)|[\u6bd4\u7279\u5e01\u786c\u9aa8\u5934\uff1a\u975e\u5bf9\u79f0\u52a0\u5bc6\u6280\u672f ](https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483984&amp;idx=1&amp;sn=2eb00844811d010866bc7490dd6ae1d7&amp;chksm=e87de8f0df0a61e603fb4e0d21f77a915c4b847436e295236b9fd7c9e770297c0f93806fceae#rd)|\n|[BTC RPG \u6e38\u620f]( http:\/\/pokebits.com\/)|[\u4e2d\u5fc3\u5316 VS \u53bb\u4e2d\u5fc3\u5316 ]( https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483987&amp;idx=1&amp;sn=b1f75b2893ddb7822ce7b72b2f59f4c9&amp;chksm=e87de8f3df0a61e5548786cd8496aabec63cef182a7911a92cf78ec9e8799dce858ad2744738#rd)|\n|[BTC\u865a\u62df\u9152\u5427 ](http:\/\/virtualpub.io\/)|[\u6bd4\u7279\u5e01\u7684\u5b89\u5168\u95ee\u9898 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483990&amp;idx=1&amp;sn=a57e7b04f892da4a97979669c3b63ff4&amp;chksm=e87de8f6df0a61e01a081ef1b4fc03ac24348c4e9b948422f1044e7992e5850bb0c16a6e780f#rd)|\n|[BTC\u91c7\u77ff\u6e38\u620f ]( http:\/\/freebtcmine.com\/)|[\u6bd4\u7279\u5e01\u5206\u53c9\u7684\u80cc\u666f\u4e0e\u5386\u53f2\u6e0a\u6e90]( https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247483995&amp;idx=1&amp;sn=4c85f4c43c912aef01d12b4e09cd2004&amp;chksm=e87de8fbdf0a61edf350def88a324c575961faab713c23ced5dab68e2af6f881e0e1609c597f#rd)|\n|[\u591a\u4eba BTC RPG](http:\/\/satoshiwars.com\/)|[\u9762\u5bf9\u6bd4\u7279\u5e01\u5206\u53c9,\u6211\u4eec\u8981\u4fdd\u6301\u72ec\u7acb\u601d\u8003 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNTY0MDM5OQ==&amp;mid=2247484001&amp;idx=1&amp;sn=b687c0c93474ac89945834298d116c5a&amp;chksm=e87de8c1df0a61d7ba1c7b626a35eac2e54ba0d8b4428c8a6e077d89ce5cc66fea772301ffe7#rd)|\n|[BTC\u8d5b\u8f66\u6e38\u620f ]( http:\/\/cryptoracers.com\/)|[\u6df1\u5733\u8f66\u724c\u4e0e\u6bd4\u7279\u5e01 ]( https:\/\/mp.weixin.qq.com\/s?__biz=MzI0NjYzOTQ1OQ==&amp;mid=2247484223&amp;idx=1&amp;sn=7363f47c65ca3a292bf18d13b9847f9f&amp;chksm=e9bd7d33decaf42570d9f1750703fa0aed1a820afe69b868ff7ecc58d5c1e3e26619c620e8be&amp;mpshare=1&amp;scene=1&amp;srcid=1213NIin9Rn4yZdEfzwdm14D#rd)|\n|[BTC\u96e8\u4f1e\u6e38\u620f ](http:\/\/rainpool.io\/)|[\u6bd4\u7279\u5e01\u6bcf\u5929\u90fd\u5728\u5237\u65b0\u6211\u5bf9\u5b83\u7684\u8ba4\u77e5 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzAwNTU2ODQ2Mw==&amp;mid=2651979176&amp;idx=1&amp;sn=5126d668d07c6763fdc66709b69c68a7&amp;chksm=80ffff08b788761ebae3abc498e0d16aefc5f48b94febbe0c660993d17123629c64479acb7b5&amp;mpshare=1&amp;scene=1&amp;srcid=1213XrrxQkDs3ub0oDiX0kGT#rd)|\n|[BTC\u6218\u4e89\u6e38\u620f ]( http:\/\/gamefaucet.com\/)|[\u533a\u5757\u94fe\u4e0b\u771f\u6b63\u9760\u8c31\u7684\u843d\u5730\u521b\u4e1a\u673a\u4f1a](https:\/\/mp.weixin.qq.com\/s?__biz=MzAwNTU2ODQ2Mw==&amp;mid=2651979182&amp;idx=1&amp;sn=b4e00c32bb508a3ae0580fa1d848ac7d&amp;chksm=80ffff0eb7887618409e70bd3f52466143df8c1d4ae72b50067aa39ed9b1daf6daa5d8c5ba9d&amp;mpshare=1&amp;scene=1&amp;srcid=1213MLeKUna5dkuvEwEYDQxL#rd)|\n|[\u4e00\u952e\u751f\u6210\u5206\u53c9\u5e01 ](https:\/\/forkgen.tech\/)|[\u600e\u6837\u624d\u80fd\u6446\u8131\u201c\u97ed\u83dc\u201d\u601d\u7ef4? ](https:\/\/mp.weixin.qq.com\/s?__biz=MzAxMjMzMDg4OA==&amp;mid=2650539156&amp;idx=1&amp;sn=bda79443e43d17cffc4a2a2d0f14d608&amp;chksm=83bbd673b4cc5f65b275ffbfeab5f15706aafb83331abaa20eed429cf880e265b4b4764ebf6c&amp;mpshare=1&amp;scene=1&amp;srcid=1214FfHNORy7zgYKQGUKGcyx#rd)|\n|[\u62db\u8d22\u732b\uff1a\u7f51\u6613\u7684\u7b2c\u4e00\u6b3e\u533a\u5757\u94fe\u6e38\u620f ]( http:\/\/bi.163.com\/)|[\u533a\u5757\u94fe\u8d44\u4ea7\u7684\u914d\u7f6e\u903b\u8f91\uff08\u4e0a\uff09 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzAxMjMzMDg4OA==&amp;mid=2650538875&amp;idx=1&amp;sn=f42c21c8c4b49025b87c61026f40fd8d&amp;chksm=83bbd19cb4cc588ad0b67f588912d1566feb954e4aac137769de2bb35b7c20040b8be8b78fdf&amp;mpshare=1&amp;scene=1&amp;srcid=1214E4Ggdtmks24CC2FMGROK#rd)|\n|[\u516c\u4fe1\u5b9d\u5e03\u6d1b\u514b\u57ce\uff0c\u5165\u4f4f\u53ef\u6316GXS\uff01](https:\/\/wechat.gxb.io\/activity2\/#\/?token=e41e9105867a238c1206f20f03b63ac4e743539984df6830d72776c5029484db)|[\u533a\u5757\u94fe\u8d44\u4ea7\u7684\u914d\u7f6e\u903b\u8f91\uff08\u4e0b\uff09 ](https:\/\/mp.weixin.qq.com\/s?__biz=MzAxMjMzMDg4OA==&amp;mid=2650538880&amp;idx=1&amp;sn=ae74dea790873f975ff4bcadb9491e69&amp;chksm=83bbd167b4cc587170b111d532f12cc6115ea84ea4e435e5bef462e7362bd1a41cd368e3ad4a&amp;mpshare=1&amp;scene=1&amp;srcid=1214pHSiSyDYnGN1IT1bR57V#rd)|\n|-|[\u6280\u672f\u5927\u795e\u201c\u4e91\u98ce\u201d2011\u5e74\u5173\u4e8eBTC\u7684\u5206\u6790]( https:\/\/blog.codingnow.com\/2011\/05\/bitcoin.html)|\n|-|[\u957f\u94d72011\u5e74\u7684\u6295\u8d44\u5efa\u8bae\uff08\u53f2\u8bd7\u7ea7\u8bc4\u8bba\uff09](https:\/\/www.zhihu.com\/question\/19982269)|\n|-|[2017\u5e74\u4f60\u4e3a\u4ec0\u4e48\u9519\u8fc7\u6bd4\u7279\u5e01\uff1f](https:\/\/mp.weixin.qq.com\/s?__biz=MzIyNDk1NzU4OA==&amp;mid=2247484665&amp;idx=1&amp;sn=c0e3a0a9b72315065920f9aeeb4c144d&amp;chksm=e8064102df71c8148fc42b200e8b30276d0df8803bd1e3a18330bda3a13c46445aa8663b9d88&amp;mpshare=1&amp;scene=1&amp;srcid=1214THPGs7RcH0Q3VIqX4sMr#rd)|\n<br\/>\n\n## Tips\n\n<p align=\"center\">\n\u90fd\u770b\u5230\u8fd9\u91cc\u4e86\u4e0d\u5173\u6ce8\u516c\u4f17\u53f7\u4e48<br\/>\u300c\u8fd9\u91cc\u6587\u7ae0\u4e0d\u6b63\u7ecf\u300d<br\/><br\/>\n    <img src=\".\/wechat.jpg\"\n         height=\"130\">\n<\/p>\n\n\n\u5982\u679c\u4f60\u6709\u66f4\u591a\u4fe1\u606f\u8bf7\u53d1\u7ed9\u6211\n\u90ae\u7bb1\uff1adily3825002@163.com\n","19":"# Coldcard Wallet\n\nColdcard is a Cheap, Ultra-secure & Opensource Hardware Wallet for Bitcoin.\nGet yours at [Coldcard.com](http:\/\/coldcard.com)\n\n[Follow @COLDCARDwallet on Twitter](https:\/\/twitter.com\/coldcardwallet) to keep up\nwith the latest updates and security alerts. \n\n![coldcard logo](https:\/\/coldcard.com\/static\/images\/coldcard-logo-nav.png)\n\n![coldcard picture front](https:\/\/coldcard.com\/static\/images\/coldcard-front.png)\n![coldcard picture back](https:\/\/coldcard.com\/static\/images\/coldcard-back.png)\n\n## Reproducible Builds\n\nTo have confidence this source code tree is the same as the binary on your device,\nyou can rebuild it from source and get **exactly the same bytes**. This process\nhas been automated using Docker. Steps are as follows:\n\n1. Install Docker and start it.\n2. Install [make (GNUMake)](https:\/\/www.gnu.org\/software\/make\/) if you don't already have it.\n3. Checkout the code, and start the process.\n\n    git clone https:\/\/github.com\/Coldcard\/firmware.git\n    \n    cd firmware\/stm32\n    \n    make repro\n\n4. At the end of the process a clear confirmation message is shown, or the differences.\n5. Build products can be found `firmware\/stm32\/built`.\n\n## Check-out and Setup\n\nDo a checkout, recursively to get all the submodules:\n\n    git clone --recursive https:\/\/github.com\/Coldcard\/firmware.git\n\nAlready checked-out and getting git errors? Do this:\n\n    git fetch\n    git reset --hard origin\/master\n\nThen:\n\n- `cd firmware`\n- `git submodule update --init` _(if needed?)_\n- `brew install autogen virtualenv`\n- `virtualenv -p python3 ENV` (Python > 3.5 is required)\n- `source ENV\/bin\/activate` (or `source ENV\/bin\/activate.csh` based on shell preference)\n- `pip install -r requirements.txt`\n\nSetup and Run the Desktop-based Coldcard simulator:\n\n- `cd unix; make setup && make; .\/simulator.py`\n\nBuilding the firmware:\n\n- `cd ..\/cli; pip install --editable .`\n- `cd ..\/stm32; make setup && make; make firmware-signed.dfu`\n- The resulting file, `firmware-signed.dfu` can be loaded directly onto a Coldcard, using this\n  command (already installed based on above)\n- `ckcc upgrade firmware-signed.dfu`\n\nWhich looks like this:\n\n    [ENV] [firmware\/stm32 42] ckcc upgrade firmware-signed.dfu\n    675328 bytes (start @ 293) to send from 'firmware-signed.dfu'\n    Uploading  [##########--------------------------]   29%  0d 00:01:04\n\n\n### MacOS\n\nYou'll probably need to install at least these packages:\n\n    brew install --cask xquartz\n    brew install sdl2 xterm\n    brew install --cask gcc-arm-embedded\n\nUsed to be these were needed as well:\n\n    brew tap PX4\/px4\n    brew search px4\n    brew install px4\/px4\/gcc-arm-none-eabi-80 (latest gcc-arm-none-eabi-XX, currently 80)\n\nYou may need to reboot to avoid a `DISPLAY is not set` error.\n\n### Linux\n\nYou'll probably need to install these (Ubuntu 16):\n\n    apt install libudev-dev python-sdl2 gcc-arm-none-eabi\n\nIf you get stuck on the \"Skip PIN\" screen after the startup, edit the `pyb.py` file located under `\/unix\/frozen-modules\/` and follow the instructions from line 27 to line 31:\n```\n# If on linux, try commenting the following line\naddr = bytes([len(fn)+2, socket.AF_UNIX] + list(fn))\n# If on linux, try uncommenting the following two lines\n#import struct\n#addr = struct.pack('H108s', socket.AF_UNIX, fn)\n```\n\n## Code Organization\n\nTop-level dirs:\n\n`shared`\n\n- shared code between desktop test version and real-deal\n- expected to be largely in python, and higher-level\n\n`unix`\n\n- unix (MacOS) version for testing\/rapid dev\n- this is a simulator for the product\n\n`testing`\n\n- test cases and associated data\n\n\n`stm32`\n\n- embedded micro version, for actual product\n- final target is a binary file for loading onto hardware\n\n`external`\n\n- code from other projects, ie. the dreaded submodules\n\n`stm32\/bootloader`\n\n- 32k of factory-set code that you cannot change\n- however, you can inspect what code is on your coldcard and compare to this.\n\n`hardware`\n\n- schematic and bill of materials for the Coldcard\n\n`unix\/work\/MicroSD`\n\n- files on \"simulated\" microSD card \n\n\n## Support\n\nFound a bug? Email: support@coinkite.com\n","20":"# bitcoin in tiny pieces\n\nThese are Python scripts made from scracth to play with Bitcoin addresses: public, private, WIF...\n\nThe scripts are compatible with Python 2 and Python 3.\n\n## before start\n\nInstall base58 for Python (tested with base58-1.0.0):\n\n\t$ pip install base58\n\n## examples of use\n\n\t$ .\/bitcoin-public-from-private.py 0x01\n\t\t79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\n\n\t# with VERBBOSE = True in bitcoin-address-from-public-key.py :\n\t$ .\/bitcoin-public-from-private.py 0x01 | .\/bitcoin-address-from-public-key.py\n\t\tpubkey = 0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\n\n\t\tUncompressed public key:\n\t\tkey_hash =      91b24bf9f5288532960ac687abb035127b1d28a5\n\t\tchecksum =      0074ffe0526d823be09b39865422a1d6135afc85afb0a6863c58e9fe89989170\n\t\tkey_hash + checksum =   0091b24bf9f5288532960ac687abb035127b1d28a5 0074ffe0\n\t\tbitcoin address =       1EHNa6Q4Jz2uvNExL497mE43ikXhwF6kZm\n\n\t\tCompressed public key:\n\t\tkey_hash =      751e76e8199196d454941c45d1b3a323f1433bd6\n\t\tchecksum =      510d1634d943109b69da527ef5948106f22b655fb5193b4e9ef7e4dcd342d245\n\t\tkey_hash + checksum =   00751e76e8199196d454941c45d1b3a323f1433bd6 510d1634\n\t\tbitcoin address =       1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH\n\n\t\tHybrid public key:\n\t\tkey_hash =      7083929bc41c16f2337fbcd10cd73df8a4e2a2bb\n\t\tchecksum =      74a0a7a97d3c7f60adceb3475880abac2231bc02b4f91753ae6dc20fcabe96ae\n\t\tkey_hash + checksum =   007083929bc41c16f2337fbcd10cd73df8a4e2a2bb 74a0a7a9\n\t\tbitcoin address =       1BFvJKK757eGXdNHkXkgem4fWZU28d1cnk\n\n\t$ .\/bitcoin-wif-from-private-key.py 0x01\n\t\tprivkey = 8001\n\n\t\tFor compressed public key:\n\t\tchecksum =      553bc06a6f4e0f4d575a9b43e2eb82546131dccec1c3a99151ee08cb5972c8a9\n\t\tkey + checksum =        800101 553bc06a\n\t\tbitcoin address =       5rM1SJieKB\n\n\t\tFor uncompressed public key:\n\t\tchecksum =      e27a1d3a74fa86f9a913e996663ea76fc2333c3b77ae33ff18349a549fd36721\n\t\tkey + checksum =        8001 e27a1d3a\n\t\tbitcoin address =       26k9aD1PF\n\n\t$ echo 0x01 | .\/bitcoin-public-from-private.py | .\/bitcoin-address-from-public-key.py | xargs -I {} .\/bitcoin-get-address-balance.py {}\n\n\t\taddress         = 1EHNa6Q4Jz2uvNExL497mE43ikXhwF6kZm\n\t\ttotal_received  = 4.87126141 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n\n\t\taddress         = 1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH\n\t\ttotal_received  = 0.14609494 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n\n\t\taddress         = 1BFvJKK757eGXdNHkXkgem4fWZU28d1cnk\n\t\ttotal_received  = 0 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n\t# Use a SHA256 hashed string as private key, and check if it has been used:\n\t$ .\/bitcoin-test-address-balance.sh satoshi\n\t\tsatoshi\n\t\taddress         = 1ADJqstUMBB5zFquWg19UqZ7Zc6ePCpzLE\n\t\ttotal_received  = 0.00375370 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n\n\t\taddress         = 1xm4vFerV3pSgvBFkyzLgT1Ew3HQYrS1V\n\t\ttotal_received  = 0.00111100 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n\n\t\taddress         = 16uTbx4gagzvEzyeSh57SdxZNbZnTrRoks\n\t\ttotal_received  = 0 Bitcoin\n\t\tfinal_balance   = 0 Bitcoin\n\n## notes of usage\n\nThe scripts contain useful comments and links to documentation. Also contain configuration variables that can be preset:\n\nEach script can be configured with at least the variable `VERBOSE` which can be `True` or `False`: if you want to concatenate scripts in command-line with `|`, you need to set `VERBOSE = False`.\n\n`bitcoin-address-from-public-key.py` contains the variable `COMPRESS_PUBKEY` that accepts the values 0 to 3 in order to print uncompressed, compressed, hybrid, or all of the valid formats of a public bitcoin address.\n\n`bitcoin-wif-from-private-key.py` contains the variable `COMPRESS_PUBKEY` that accepts the values 0 to 2 in order to print uncompressed, compressed, or both formats of WIF.\n\n## notes for Windows users\n\nThe folder `batchs for Windows` contains `.bat` files for ease of usage with Windows:\n\n* be sure you have Python in your `%PATH%`, or prepend the Python path to `python` inside each `.bat`\n\n* modify inside each `.bat` the complete path to the folder where you've copied all these Python scripts\n\n* Now usage in Windows is as easy as with Linux:\n\n        C:\\> echo 0x01 | bitcoin-public-from-private | bitcoin-address-from-public-key\n\t        1EHNa6Q4Jz2uvNExL497mE43ikXhwF6kZm\n\t        1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH\n\t        1BFvJKK757eGXdNHkXkgem4fWZU28d1cnk\n\nPlease, see `notes of usage` above for configuring outputs and using with `|` concatenation.\n\n## License\n\nRelease under [GPL 3](https:\/\/www.gnu.org\/licenses\/gpl-3.0.en.html).","21":"# Kapitalize\n\nKapitalize is an industrious Bitcoin client for node.\n\n`npm install kapitalize`\n\n## Example\n\n```js\nvar kapitalize = require('kapitalize')()\n\nkapitalize.auth('Macintyre, John', 'mypassword')\n\nkapitalize.getNewAddress(function(err, address) {\n    kapitalize.validateAddress(address, console.log)\n})\n\n```\n\n## Chaining\n\nPretty much everything in Kapitalize is chainable.\n\n```js\nvar kapitalize = require('kapitalize')()\n\nkapitalize\n.auth('Macintyre', 'mypassword')\n.set('host', '127.0.0.1')\n.set({\n    port:8332\n})\n.getNewAddress()\n.getBalance()\n```\n\n## Methods\n\nThe [Bitcoin API](https:\/\/github.com\/Weltschmerz\/Kapitalize#commands) is supported as direct methods. Use either camelcase or lowercase.\n\n```js\nkapitalize.getNewAddress(function(err, address) {\n    this.validateaddress(address, function(err, info) {\n\n    })\n})\n```\n### .exec(command [string], ...arguments..., callback [function])\n\nExecutes the given command with optional arguments. Function `callback` defaults to `console.log`.\nAll of the API commands are supported in lowercase or camelcase. Or uppercase. Anycase!\n\n```js\nkapitalize.exec('getNewAddress')\n\nkapitalize.exec('getbalance', function(err, balance) {\n\n})\n```\n\n### .set(key [string, object], value [optional])\n\nAccepts either key & value strings or an Object containing settings, returns `this` for chainability.\n\n```js\nkapitalize.set('host', '127.0.0.1')\n```\n\n### .get(key [string])\n\nReturns the specified option's value\n\n```js\nkapitalize.get('user')\n```\n\n### .auth(user [string], pass [string])\n\nGenerates authorization header, returns `this` for chainability\n\n## Commands\n\nAll [Bitcoin API](https:\/\/en.bitcoin.it\/wiki\/Original_Bitcoin_client\/API_Calls_list) commands are supported, in lowercase or camelcase form.\n\n<table>\n<tr>\n<th> Command <\/th>\n<th> Parameters <\/th>\n<th> Description <\/th>\n<th> Requires unlocked wallet?\n<\/th><\/tr>\n<tr>\n<td> addmultisigaddress <\/td>\n<td> [nrequired] [\"key\",\"key\"] [account] <\/td>\n<td> <b>Currently only available on testnet<\/b> Add a nrequired-to-sign multisignature address to the wallet. Each key is a bitcoin address or hex-encoded public key. If [account] is specified, assign address to [account]. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> backupwallet <\/td>\n<td> [destination] <\/td>\n<td> Safely copies wallet.dat to destination, which can be a directory or a path with filename. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> dumpprivkey <\/td>\n<td> [bitcoinaddress] <\/td>\n<td> Reveals the private key corresponding to <bitcoinaddress< <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> encryptwallet <\/td>\n<td> [passphrase] <\/td>\n<td> Encrypts the wallet with <passphrase<. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getaccount <\/td>\n<td> [bitcoinaddress] <\/td>\n<td> Returns the account associated with the given address. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getaccountaddress <\/td>\n<td> [account] <\/td>\n<td> Returns the current bitcoin address for receiving payments to this account. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getaddressesbyaccount <\/td>\n<td> [account] <\/td>\n<td> Returns the list of addresses for the given account. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getbalance <\/td>\n<td> [account] [minconf=1] <\/td>\n<td> If [account] is not specified, returns the server's total available balance.<br \/>If [account] is specified, returns the balance in the account. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getblock <\/td>\n<td> [hash] <\/td>\n<td> Returns information about the given block hash. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getblockcount <\/td>\n<td> <\/td>\n<td> Returns the number of blocks in the longest block chain. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getblockhash <\/td>\n<td> [index] <\/td>\n<td> Returns hash of block in best-block-chain at <index< <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getblocknumber <\/td>\n<td> <\/td>\n<td> <b>Deprecated<\/b>. Use getblockcount. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getconnectioncount <\/td>\n<td> <\/td>\n<td> Returns the number of connections to other nodes. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getdifficulty <\/td>\n<td> <\/td>\n<td> Returns the proof-of-work difficulty as a multiple of the minimum difficulty. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getgenerate <\/td>\n<td> <\/td>\n<td> Returns true or false whether bitcoind is currently generating hashes <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> gethashespersec <\/td>\n<td> <\/td>\n<td> Returns a recent hashes per second performance measurement while generating. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getinfo <\/td>\n<td> <\/td>\n<td> Returns an object containing various state info. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getmemorypool <\/td>\n<td> [data] <\/td>\n<td> If [data] is not specified, returns data needed to construct a block to work on:\n<ul><li> \"version\": block version\n<\/li><li> \"previousblockhash\": hash of current highest block\n<\/li><li> \"transactions\": contents of non-coinbase transactions that should be included in the next block\n<\/li><li> \"coinbasevalue\": maximum allowable input to coinbase transaction, including the generation award and transaction fees\n<\/li><li> \"time\": timestamp appropriate for next block\n<\/li><li> \"bits\": compressed target of next block\n<\/li><\/ul>\n<p>If [data] is specified, tries to solve the block and returns true if it was successful.\n<\/p>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getmininginfo <\/td>\n<td> <\/td>\n<td> Returns an object containing mining-related information:\n<ul><li> blocks\n<\/li><li> currentblocksize\n<\/li><li> currentblocktx\n<\/li><li> difficulty\n<\/li><li> errors\n<\/li><li> generate\n<\/li><li> genproclimit\n<\/li><li> hashespersec\n<\/li><li> pooledtx\n<\/li><li> testnet\n<\/li><\/ul>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getnewaddress <\/td>\n<td> [account] <\/td>\n<td> Returns a new bitcoin address for receiving payments.  If [account] is specified (recommended), it is added to the address book so payments received with the address will be credited to [account]. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getreceivedbyaccount <\/td>\n<td> [account] [minconf=1] <\/td>\n<td> Returns the total amount received by addresses with [account] in transactions with at least [minconf] confirmations. If [account] not provided return will include all transactions to all accounts. (version 0.3.24-beta) <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getreceivedbyaddress <\/td>\n<td> [bitcoinaddress] [minconf=1] <\/td>\n<td> Returns the total amount received by <bitcoinaddress< in transactions with at least [minconf] confirmations. While some might consider this obvious, value reported by this only considers *receiving* transactions. It does not check payments that have been made *from* this address. In other words, this is not \"getaddressbalance\". Works only for addresses in the local wallet, external addresses will always show 0. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> gettransaction <\/td>\n<td> [txid] <\/td>\n<td> Returns an object about the given transaction containing:\n<ul><li> \"amount\": total amount of the transaction\n<\/li><li> \"confirmations\":  number of confirmations of the transaction\n<\/li><li> \"txid\": the transaction ID\n<\/li><li> \"time\": time the transaction occurred\n<\/li><li> \"details\" - An array of objects containing:\n<ul><li> \"account\"\n<\/li><li> \"address\"\n<\/li><li> \"category\"\n<\/li><li> \"amount\"\n<\/li><\/ul>\n<\/li><\/ul>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> getwork <\/td>\n<td> [data] <\/td>\n<td> If [data] is not specified, returns formatted hash data to work on:\n<ul><li> \"midstate\": precomputed hash state after hashing the first half of the data\n<\/li><li> \"data\": block data\n<\/li><li> \"hash1\": formatted hash buffer for second hash\n<\/li><li> \"target\": little endian hash target\n<\/li><\/ul>\n<p>If [data] is specified, tries to solve the block and returns true if it was successful. \n<\/p>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> help <\/td>\n<td> [command] <\/td>\n<td> List commands, or get help for a command. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> importprivkey <\/td>\n<td> [bitcoinprivkey] [label] <\/td>\n<td> Adds a private key (as returned by dumpprivkey) to your wallet. <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> keypoolrefill <\/td>\n<td> <\/td>\n<td> Fills the keypool, requires wallet passphrase to be set. <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> listaccounts <\/td>\n<td> [minconf=1] <\/td>\n<td> Returns Object that has account names as keys, account balances as values. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> listreceivedbyaccount <\/td>\n<td> [minconf=1] [includeempty=false] <\/td>\n<td> Returns an array of objects containing:\n<ul><li> \"account\": the account of the receiving addresses\n<\/li><li> \"amount\": total amount received by addresses with this account\n<\/li><li> \"confirmations\": number of confirmations of the most recent transaction included\n<\/li><\/ul>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> listreceivedbyaddress <\/td>\n<td> [minconf=1] [includeempty=false] <\/td>\n<td> Returns an array of objects containing:\n<ul><li> \"address\": receiving address\n<\/li><li> \"account\": the account of the receiving address\n<\/li><li> \"amount\": total amount received by the address\n<\/li><li> \"confirmations\": number of confirmations of the most recent transaction included\n<\/li><\/ul>\n<p>To get a list of accounts on the system, execute bitcoind listreceivedbyaddress 0 true\n<\/p>\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> listsinceblock<\/td>\n<td> [blockhash] [target-confirmations] <\/td>\n<td> Get all transactions in blocks since block [blockhash], or all transactions if omitted. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> listtransactions <\/td>\n<td> [account] [count=10] [from=0] <\/td>\n<td> Returns up to [count] most recent transactions skipping the first [from] transactions for account [account]. If [account] not provided will return recent transaction from all accounts.\n<\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> move <\/td>\n<td> [fromaccount] [toaccount] [amount] [minconf=1] [comment] <\/td>\n<td> Move from one account in your wallet to another <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> sendfrom <\/td>\n<td> [fromaccount] [tobitcoinaddress] [amount] [minconf=1] [comment] [comment-to] <\/td>\n<td> <amount< is a real and is rounded to 8 decimal places. Will send the given amount to the given address, ensuring the account has a valid balance using [minconf] confirmations. Returns the transaction ID if successful (not in JSON object). <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> sendmany <\/td>\n<td> [fromaccount] [address:amount,...] [minconf=1] [comment] <\/td>\n<td> amounts are double-precision floating point numbers <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> sendtoaddress <\/td>\n<td> [bitcoinaddress] [amount] [comment] [comment-to] <\/td>\n<td> <amount< is a real and is rounded to 8 decimal places. Returns the transaction ID <txid< if successful. <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> setaccount <\/td>\n<td> [bitcoinaddress] [account] <\/td>\n<td> Sets the account associated with the given address. Assigning address that is already assigned to the same account will create a new address associated with that account. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> setgenerate <\/td>\n<td> [generate] [genproclimit] <\/td>\n<td> [generate] is true or false to turn generation on or off.\n\nGeneration is limited to [genproclimit] processors, -1 is unlimited. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> signmessage <\/td>\n<td> [bitcoinaddress] [message] <\/td>\n<td> Sign a message with the private key of an address. <\/td>\n<td> Y\n<\/td><\/tr>\n<tr>\n<td> settxfee <\/td>\n<td> [amount] <\/td>\n<td> [amount] is a real and is rounded to the nearest 0.00000001 <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> stop <\/td>\n<td> <\/td>\n<td> Stop bitcoin server. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> validateaddress <\/td>\n<td> [bitcoinaddress] <\/td>\n<td> Return information about [bitcoinaddress]. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> verifymessage <\/td>\n<td> [bitcoinaddress] [signature] [message] <\/td>\n<td> Verify a signed message. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> walletlock <\/td>\n<td>  <\/td>\n<td> Removes the wallet encryption key from memory, locking the wallet. After calling this method,  you will need to call walletpassphrase again before being able to call any methods which require the wallet to be unlocked. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> walletpassphrase <\/td>\n<td> [passphrase] [timeout] <\/td>\n<td> Stores the wallet decryption key in memory for <timeout< seconds. <\/td>\n<td> N\n<\/td><\/tr>\n<tr>\n<td> walletpassphrasechange <\/td>\n<td> [oldpassphrase] [newpassphrase] <\/td>\n<td> Changes the wallet passphrase from <oldpassphrase< to <newpassphrase<. <\/td>\n<td> N\n<\/td><\/tr><\/table>\n\n## Options\n\nYou may pass options to the initialization function or to the `set` method.\n\n```js\n\nvar kapitalize = require('kapitalize')({\n    user:'user'\n})\n\nkapitalize.set('pass', 'somn')\nkapitalize.set({port:8331})\n\n```\n\nAvailable options and default values:\n\n+ host *localhost*\n+ port *8332*\n+ user\n+ pass\n","22":"bitcoin-wallets\n===\n\nBitcoin (BTC, BCH, BTG, etc) and [Zcash](https:\/\/github.com\/Ayms\/zcash-wallets) wallets made simple, javascript implementation of [BIP 32](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0032.mediawiki) Bitcoin hierarchical deterministic keys\n\n## History\n\n<b>Please note that this module is now deprecated, please see [bitcoin-transactions](https:\/\/github.com\/Ayms\/bitcoin-transactions) since it has been merged there<\/b>\n\n## Rationale\n\nCreate your bitcoin addresses and wallets by your own and recover them from a phrase (but please read the warning below)\/seed you know if you lose them, this eliminates the constant need of wallets backup with the associated risks and this eliminates the risk of losing all of your addresses (then your money)\n\nConvert your original bitcoin address to a bitcoin fork address (Bitcoin Cash, Bitcoin Gold, etc) or any coin address to another one\n\n## Conversion\n\nGiven the increasing number of forks that are occurring this module allows non expert users to easily match addresses from their original wallet to a bitcoin fork address (Bitcoin Cash, Bitcoin Gold, etc), so you don't need to regenerate one wallet for each fork\n\n## Implementation\n\nThis module is using [elliptic](https:\/\/github.com\/indutny\/elliptic) and [bs58](https:\/\/github.com\/cryptocoinjs\/bs58), the code is inspired from [hdkey](https:\/\/github.com\/cryptocoinjs\/hdkey)\n\n## Details\n\nThere are quasi no standards for bitcoin wallets, every bitcoin client proposes a specific one and generally does not let you generate your keys, the reason invoked for this is to protect the users from generating insecure keys that could be discovered and stolen by an attacker\n\n[Bitcoin core](https:\/\/github.com\/bitcoin\/bitcoin) has recently implemented as the default partially [BIP32](https:\/\/github.com\/bitcoin\/bitcoin\/pull\/8035) which generates first 100 addresses from a seed chosen by the software\n\nWe don't think that it's necessarily a good idea to trust a software, even open source, to choose the main seed for you knowing that all of your keys depend on it and are generated from this master seed (which is typically a 32 bytes sequence)\n\nThis implementation is mainly following the bitcoin core wallet format but lets you decide for the seed, you can reuse the information generated for other wallets, you can select from the addresses generated which ones you will use and break the tree dependencies\n\n## Can we trust BIP32?\n\nThere are good signs that we can but of course if all your addresses depend on a tree algorithm then, even if unlikely, the possibility still exists to revert it and discover the seed from your keys, then discover all of your keys. Another possibility, probably unlikely also, is to find patterns allowing to fingerprint all the keys generated so finally people can trace you.\n\nSurprisingly from ~32 bytes keys BIP32 ends up with a 78 bytes format to describe them with all the necessary information like indexes, parent to possibly allow to revert the tree\n\nBitcoin core derives two addresses from a seed and then derives all the other addresses from it, this constitute one branch in the tree and the (hardened) addresses are represented by m\/0\/i where i is the number of the key, when 100 addresses are used it generates others following the same principle\n\nbitcoin-wallets do the same but introduces a secret option where the reference to the tree for each key is not indicated in the wallet, neither the master seed and master key (so you should better make sure you will be able to recover it if you use this option)\n\n## Warning\n\nFor now you should not use this module (except for conversion purposes) if you are not an expert to choose a seed with enough entropy (ie 128 bits) and you should not use the possibility to derive keys from a phrase\n\nIndeed, human phrases are known to be predictable with considerably less (ie ridiculous) entropy than a seed generated with a prng\n\nDo not think you are stronger than the theory and will generate a human phrase with 128 bits of entropy, you won't\n\nOther methods exist to remember more easily your seed than a 32 bytes sequence, for example [BIP39](https:\/\/github.com\/bitcoin\/bips\/blob\/master\/bip-0039.mediawiki) or [Electrum](http:\/\/docs.electrum.org\/en\/latest\/seedphrase.html)\n\nBut choosing x words among a set of y words in a dictionary to reach the required entropy is still not something a human being will easily remember, it will have to be written somewhere, so we can question why it can be considered easier than writing a 32 bytes sequence, question of appreciation, people like it apparently\n\nThis is an ongoing TODO but one of the goals here would be to generate a seed from phrases\/information that a human being can really remember, more to come...\n\n## Installation\n\nJust create a folder, copy index.js and install via npm [elliptic](https:\/\/github.com\/indutny\/elliptic) and [bs58](https:\/\/github.com\/cryptocoinjs\/bs58)\n\n## Use - Generate keys\n\n\tgenerate_keys_simple('toto'); \/\/Never use this! The private key is the hash256 of the utf8 representation of the phrase\n\t\/*\n\tprivate key: 31f7a65e315586ac198bd798b6629ce4903d0899476d5741a9f32e2e521b6a66\n\tpublic key (compressed): 0235120e148979e25191400fe64f360db079b917ac367d322e44394db320b26988\n\tbitcoin address: 12UB9cFE12ZBKZZaFWPxE1p574WxQuLVvY\n\tprivate key wif: KxtqjBjoXGF76b5zGgYyRByGEo7cBLNM3Q3gKBmhv5DQRQbYvZkj\n\t*\/\n\t\n\tBitcoin Core (0x00 p2pkh, 0x05 p2sh) - default then version can be set to null\n\t\n\tgenerate_keys_simple('',null,new Buffer('1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c','hex')); \/\/the private key is the buffer you pass\n\t\/*\n\tprivate key: 1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c\n\tpublic key (compressed): 039e0a50d9f660d5e361ed47bb2d91f96ec360d86f8c377b4e02ed87e4217c4218\n\tbitcoin address: 16uqY2xbpWc2h3aJMiYc2PKs17f4NyQ8GY\n\tprivate key wif: KxDohMDu4iQ3GYMJGakyfCtcHtuGjqfcDLR2oUYEbNpkGJeTYmGq\n\t*\/\n\t\n\tBitcoin Cash (0x1c p2pkh, 0x28 p2sh)\n\t\n\tgenerate_keys_simple('',new Buffer('1c','hex'),new Buffer('1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c','hex')); \/\/the private key is the buffer you pass\n\t\n\t\/*\n\tprivate key: 1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c\n\tpublic key (compressed): 039e0a50d9f660d5e361ed47bb2d91f96ec360d86f8c377b4e02ed87e4217c4218\n\tbitcoin cash address: CNNj75JfhZaZbBUj3TsXbtwtdEsUGaQ6qi\n\tprivate key wif: KxDohMDu4iQ3GYMJGakyfCtcHtuGjqfcDLR2oUYEbNpkGJeTYmGq\n\t*\/\n\t\n\tBitcoin Gold (0x26 p2pkh, 0x17 p2sh)\n\t\n\tgenerate_keys_simple('',new Buffer('26','hex'),new Buffer('1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c','hex')); \/\/the private key is the buffer you pass\n\t\n\t\/*\n\tprivate key: 1de2e396a194570339c2289a71d98bdb11c2dc204df06f8e4841028f9179739c\n\tpublic key (compressed): 039e0a50d9f660d5e361ed47bb2d91f96ec360d86f8c377b4e02ed87e4217c4218\n\tbitcoin gold address: GPkkxAHYoNDKmWsbHfCiT9fkvHSuShfFcc\n\tprivate key wif: KxDohMDu4iQ3GYMJGakyfCtcHtuGjqfcDLR2oUYEbNpkGJeTYmGq\n\t*\/\n\n\tvar hd=generate_keys_bip32(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex'));\n\n\thd.deriveChild(0).deriveChild(0).deriveChild(0); \/m\/0\/0\n\t\n\t\/*\n\tmaster seed chain code: f6dff350d088f62f444db026f5476e2f8ebf1df200da50e3ac2656b093b90dcd\n\tmaster seed private key: 0bfe13930513cf7ad70bb34161f758417df200d6393e2301d49aa92a9cb6f777\n\tmaster seed public key: 04468067c38b846a4af20520b0aae8dcd344391770d200eaf82cc8f391a44c6845a5db4e062450078091671e0d797315fec4e0227a216ddd186301f117cad895ab\n\tmaster seed public key (compact): 03468067c38b846a4af20520b0aae8dcd344391770d200eaf82cc8f391a44c6845\n\tmaster seed Extended private key: xprv9s21ZrQH143K4Wv2JLdfN8td2qVm8qTU7c7hD36gSfsnfNp7AjjgcaGiem5v7KvJnmpee8JeciN8dGvK5r2KZtEt8N4hgnQ3kRP6mQp2JVL\n\tmaster seed Extended public key: xpub661MyMwAqRbcGzzVQNAfjGqMasLFYJBKUq3J1RWJ11QmYB9FiH3wANbCW4WCGJj1hT53TEuNSRYMRV511bhJzNDXnhtpjH3Szh6ZtFWxENS\n\tmaster seed bitcoin address: 1LwHzDUFzPq6x2Fdm5aeDrM67YxaqKLnUk\n\t------------------------------------ depth 1 index 2147483648\n\tchain code: b1db88d41905272e036a187716a92d1c10352f2a214a2448dcef3d97ff7fe25d\n\tprivate key: c9065bdee993a97d148f36ccba46644f67e4572a25a149b02d59bc73a3a1b543\n\tpublic key: 04c8646a2ec82beb33177f295574e6a4d0cfcab0f64c4235b27e30b87336bac018083ff16361ceb481c52945eddfa3aa6026609254c24b49303cc42ffb9652948b\n\tpublic key (compact): 03c8646a2ec82beb33177f295574e6a4d0cfcab0f64c4235b27e30b87336bac018\n\tExtended private key: xprv9vWNbpbWyMLxiqYS5EVb4VDpeQMjqwrP5bXxHpnQFWTpy6NAKr8NpBT5EbMQ7XUpEAeUGcUei2RJceExjy1tstGnbFX46L4DrU3icyjekMA\n\tExtended public key: xpub69Vj1L8QoiuFwKcuBG2bRdAZCSCEFQaESpTZ6DC1oqzoqthJsPSdMymZ5tKdaBt2UaaebeshY9nusFhohLYS62UZLgcXpnsQzRpYKLv2n3F\n\tbitcoin address: 1FEbDGRWoP4eqP1NckvAU8ZFFscEdei8d7\n\t------------------------------------ depth 2 index 2147483648\n\tchain code: 9550fb648a08d4b0d6e6109a9f9ebe4c232b505f85af8934439d50055f01a0a9\n\tprivate key: 81b70a0aca20e75f5ab28c7dff4761e25a52262d68f5091a25d69067f391b42d\n\tpublic key: 044f5bf3a2b799714371f70ee4cd3472541d3d7cee28809b5ed157e0f6aea04edf18c6a034c0a7deebd79d763bc08a36d5a8e6b98169fe305acf170caab8432c57\n\tpublic key (compact): 034f5bf3a2b799714371f70ee4cd3472541d3d7cee28809b5ed157e0f6aea04edf\n\tExtended private key: xprv9wvqzVdaZo7ZLL2SkMjzceqSutNqNtfN36tQRu4HaNJemxmsEtpyqsxSTC9bGMTeQi4XaVWuRpKtBLV9kmcd1GW5nDAPn6kzhbsm3wdu3ec\n\tExtended public key: xpub6AvCQ1AUQAfrYp6urPGzynnBTvDKnMPDQKp1EHTu8hqdem71nS9EPgGvJUjvcUJF4y7YRNgFwZ2kV43mhsZBH7rZ2V1iivJ4zuiohhVNRi1\n\tbitcoin address: 1EdqLpZJ9wi9mBNwzQJp8T8Rs2uPBwuyup\n\t------------------------------------ depth 3 index 2147483648\n\tchain code: da57d72f15178feb3228e9eba32cecd2750ee0c2143b6b6fdce2e22f0e3fd47e\n\tprivate key: a794e95400ccc3d5b2a42e089194e7bb596c9f93a481ae1a13641bbaec97aa04\n\tpublic key: 04232efbaee1d1d006c2d4b18cf3960b74701900dedeae1c7efddd6ac308f43e02ff81a4deea68149a67ab6338d3c81a086cfb8c3d9000957d5807716259bbac94\n\tpublic key (compact): 02232efbaee1d1d006c2d4b18cf3960b74701900dedeae1c7efddd6ac308f43e02\n\tExtended private key: xprv9ymBKTjmhJHAgYqK7xReE57Cvgj2Nn9k7kf2YEYiUsb5MrMD8eCbokxnmGEM372b3GZcqsRJhpTmuZ3Z6m1N2SSqBMKaUdk8X96fW2dqeXR\n\tExtended public key: xpub6CkXiyGfXfqTu2unDyxebD3wUiZWnEsbUyadLcxL3D84EegMgBWrMZHGcWFoYcg2vtSyZ9qXKcnZdzdvcQVSkeYEjUtYh1h4pz36h1iKmkx\n\tbitcoin address: 1PLEySkBy6c9LbEZ7V29WiieqdVGGFgyYh\n\t*\/\n\n\t\n## Use - Generate wallets\n\t\nOutput is stored in wallet.txt, all details for the keys are stored in log.txt (recommended to backup somewhere)\n\n\tBitcoin Core\n\n\tcreate_wallet(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex')); \/\/see \/tests\/wallet.txt and compare with original_wallet_dump.txt\n\n\tcreate_wallet(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex'),true); \/\/see \/tests\/wallet_secret.txt\n\t\n\tcreate_wallet(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex'),null or true,1000); \/\/generates 1000 keys, default is 100\n\t\n\tcreate_wallet('My super wallet');\/\/see \/tests\/my_super_wallet.txt - Again, never use this for now\n\t\n\tBitcoin Cash\n\t\n\tGenerate the same wallet as Bitcoin Core's one above for Bitcoin Cash\n\t\n\tcreate_wallet(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex'),null or true, null or number, new Buffer('1c','hex'))\n\t\n\tBitcoin Gold\n\t\n\tGenerate the same wallet as Bitcoin Cores's one above for Bitcoin Gold\n\t\n\tcreate_wallet(new Buffer('4ecf2e71d567072fe2f9cda40873afcaae4224e3f249018621a90dd43e88f8de','hex'),null or true, null or number, new Buffer('26','hex'))\n\t\n\t\n## Use - Convert bitcoin addresses\n\nConvert an address from one network to another one - convert(address,inversion,outversion)\n\n\tBitcoin Cash\n\t\n\tconvert('16uqY2xbpWc2h3aJMiYc2PKs17f4NyQ8GY',new Buffer('00','hex'),new Buffer('1c','hex'));\n\t\n\tAddress 16uqY2xbpWc2h3aJMiYc2PKs17f4NyQ8GY converted to CNNj75JfhZaZbBUj3TsXbtwtdEsUGaQ6qi\n\t\n\tBitcoin Gold\n\t\n\tconvert('16uqY2xbpWc2h3aJMiYc2PKs17f4NyQ8GY',new Buffer('00','hex'),new Buffer('26','hex'));\n\t\n\tAddress 16uqY2xbpWc2h3aJMiYc2PKs17f4NyQ8GY converted to GPkkxAHYoNDKmWsbHfCiT9fkvHSuShfFcc\n\t\n\tBitcoin Cash to Bitcoin Gold\n\t\n\tconvert('CNNj75JfhZaZbBUj3TsXbtwtdEsUGaQ6qi',new Buffer('1c','hex'),new Buffer('26','hex'));\n\t\n\tAddress CNNj75JfhZaZbBUj3TsXbtwtdEsUGaQ6qi converted to GPkkxAHYoNDKmWsbHfCiT9fkvHSuShfFcc\n\t\n## Wallets import\/export\n\nIn bitcoin core, open the debug console (Help\/Debug console)\n\t\nTo dump your current wallet use ``dumpwallet wallet.txt``\n\nNote: hdmaster, renamed hdseed here, is your master seed, see the Tools below if you want to get its hex representation\n\nTo import your bitcoin-wallets, put your wallet.txt in the bitcoin core root directory and use ``importwallet wallet.txt``\n\nAgain you can choose among the keys generated by bitcoin-wallets those that you want to put in your final wallet.txt (that's why you should better keep log.txt if you want later to reconciliate the keys chosen with the tree)\n\nCurrently importing keys as described above does not remove previous keys, [request](https:\/\/github.com\/bitcoin\/bitcoin\/issues\/8684) made to the bitcoin core team which is apparently implementing too a way to create keys from a user chosen private key\/seed - watch [Wallet - add option for a custom extended master privat key (xpriv)](https:\/\/github.com\/bitcoin\/bitcoin\/pull\/8735)\n\n## Other formats\n\nThe default bitcoin client version is bitcoin core (then compressed format is used for public keys and address derivation, 01 is added to private keys representation), please feel free to post bug\/PR and\/or contact us for other versions\n\n## Tools\n\nSee various uses and tools in tests\/tests.js (a bit messy, yes, but useful)\n\n## License\n\nMIT\n\n## Related projects :\n\n* [Ayms\/zcash-wallets](https:\/\/github.com\/Ayms\/zcash-wallets)\n* [Ayms\/bittorrent-nodeid](https:\/\/github.com\/Ayms\/bittorrent-nodeid)\n* [Ayms\/torrent-live](https:\/\/github.com\/Ayms\/torrent-live)\n* [Ayms\/node-Tor](https:\/\/github.com\/Ayms\/node-Tor)\n* [Ayms\/iAnonym](https:\/\/github.com\/Ayms\/iAnonym)\n* [Interception Detector](http:\/\/www.ianonym.com\/intercept.html)\n* [Ayms\/abstract-tls](https:\/\/github.com\/Ayms\/abstract-tls)\n* [Ayms\/websocket](https:\/\/github.com\/Ayms\/websocket)\n* [Ayms\/node-typedarray](https:\/\/github.com\/Ayms\/node-typedarray)\n* [Ayms\/node-dom](https:\/\/github.com\/Ayms\/node-dom)\n* [Ayms\/node-bot](https:\/\/github.com\/Ayms\/node-bot)\n* [Ayms\/node-gadgets](https:\/\/github.com\/Ayms\/node-gadgets)\n","23":"# Paper Wallet Generator Desktop & Mobile\n\n[![paper-wallet-generator](https:\/\/snapcraft.io\/\/paper-wallet-generator\/badge.svg)](https:\/\/snapcraft.io\/paper-wallet-generator)\n\nDesigned to securely generate altcoins addresses offline\n\n### Available Coins\n\n- 42-Coin (42) https:\/\/42-coin.org\n- Ark (ARK) https:\/\/ark.io\n- Bitcoin (BTC) https:\/\/bitcoin.org\n- Bitshares (BTS) https:\/\/bitshares.org\n- BitcoinGold (BTG) https:\/\/bitcoingold.org\n- Blocknet (BLOCK) https:\/\/blocknet.co\n- DASH (DASH) https:\/\/www.dash.org\n- DigiByte (DGB) https:\/\/www.digibyte.io\n- DeepOnion (ONION) https:\/\/deeponion.org\n- Dogecoin (DOGE) https:\/\/dogecoin.com\n- Ethereum (ETH) https:\/\/www.ethereum.org\n- Emercoin (EMC) https:\/\/emercoin.com\n- Lisk (LSK) https:\/\/lisk.io\n- Litecoin (LTC) https:\/\/litecoin.org\n- NameCoin (NMC) https:\/\/namecoin.org\n- NobtCoin (NOBT) http:\/\/nobt.info\n- NovaCoin (NVC) http:\/\/novacoin.org\n- PotCoin (POT) https:\/\/www.potcoin.com\n- PeerCoin (PPC) https:\/\/peercoin.net\n- PIVX (PIVX) https:\/\/pivx.org\n- PostCoin (POST) https:\/\/postcoin.top\n- ReddCoin (RDD) https:\/\/reddcoin.com\n- SmartHoldem (STH) https:\/\/smartholdem.io\n- Smilo (XSM) https:\/\/smilo.io\n- Vericoin (VRC) https:\/\/vericoin.info\/vericoin-digital-currency\n- Verium (VRM) https:\/\/vericoin.info\/verium-digital-reserve\n- Vertcoin (VTC) https:\/\/vertcoin.org\/download-wallet\n- Waves (WAVES) https:\/\/wavesplatform.com\n- ZENZO (ZNZ) https:\/\/zenzo.io\n- EverGreen (EGC) https:\/\/evergreencoin.org\n- SteepCoin (STEEP) https:\/\/steepcoin.org\/en\n- UniverseCoin (UNI) http:\/\/universe-project.com\n- BitConnectX (BCCX) https:\/\/www.thebitconnectcoincommunity.com\n- eXperience Points (XP) https:\/\/www.experiencepoints.io\/\n- SpectreCoin (XSPEC) https:\/\/spectreproject.io\n- GuapCoin (GUAP) http:\/\/www.guapcoin.org\/\n- Ravencoin (RVN) https:\/\/ravencoin.org\/\n- Tron (TRX) https:\/\/tron.network\n- PRUX-Coin (PRUX) https:\/\/prux.info\n- Bitcoinrand (BZAR) https:\/\/bitcoinrand.com\n- BIOTECH WAVES Token (BIOTECH) https:\/\/www.biotechtokens.net\n- HiveCoin (HVN) https:\/\/hivecoin.org\/\n\n\n## Example\n\nhttps:\/\/technologiespro.github.io\/paper-wallet-generator\/#\/\n\n## BUILD\n\n`npm install`\n\n`npm run electron:build`\n\n# IMPORTANT NOTE\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n","24":"# bds-btc \n![logo](.\/doc\/bds-logo.png)\n## Introduction\nbds-btc is one of the independent modules in open source project of block chain data service (BDS) - provides full node service.\n\n*bds-btc* Based on the v0.17.0 version of [bitcoin\/bitcoin](https:\/\/github.com\/bitcoin\/bitcoin),*bds-btc* redeveloped to support sending new block data directly to message middleware service of kafka to facilitate upstream services to subscribe and consume.\n\n## Architecture \n![Architecture](.\/doc\/bds-architecture.jpg)\n\n## Environmental Deployment\n### Install BTC\n#### Environment Initialization\n[build-unix](.\/doc\/build-unix.md)\n\n#### Install steps\n\n1. Compile\n\n ```\n   .\/autogen.sh\n   .\/configure\n   make\n   make install # optional\n ```\n\n2. Run full node and support sending messages to Kafka\n\n```\n   \/usr\/local\/bin\/bitcoind -kafka -kafkaproxyhost=<kafka proxy host> -kafkaproxyport=<kafka proxy port\uff0cdefault 8082> -kafkatopic=btc -datadir=<data directory> -rpcuser=<user> -rpcpassword=<password>\n```\n\n### Install confluent and kafka\n#### Install kafka\nSee [kafka](https:\/\/kafka.apache.org\/quickstart)\n\n##### Modify config\/server.properties \n\n* message.max.bytes=1048576000\n\n#### Install confluent \nsee [confluent](https:\/\/docs.confluent.io\/current\/installation\/installing_cp\/zip-tar.html#prod-kafka-cli-install)\n\nUnzip the confluent package and run Confluent REST Proxy\n\n##### Modify  <path-to-confluent>\/etc\/kafka-rest\/kafka-rest.properties \n\n* max.request.size = 1048576000\n* buffer.memory = 1048576000\n* send.buffer.bytes = 1048576000\n\n### Install BDS \nSee [BDS](https:\/\/github.com\/jdcloud-bds\/bds)\n\n### Database\nDatabase we now support SQL Server, PostgreSQL, you can choose one as a data storage method.\n\n#### SQL Server\nBuy [JCS For SQL Server](https:\/\/www.jdcloud.com\/cn\/products\/jcs-for-sql-server)\n\n#### PostgreSQL \nBuy [JCS For PostgreSQL](https:\/\/www.jdcloud.com\/cn\/products\/jcs-for-postgresql)\n\n### Install Grafana \nSee [Grafana Official](https:\/\/grafana.com\/)\n\n## New funtion \n\n1. The new function of sending messages to Kafka is added\uff08every time a new block is synchronized by full node, the data of the block is sent to kafka and the data structure is customized).\n2. Sendblock and sendbatchblock are newly added as RPC interfaces to trigger full node to send data for a specific block.\n\n### Source Code Change History\n[bds-btc](.\/CHANGE_HISTORY.md)\n\n## Contributing\n[Contributing guide](.\/CONTRIBUTING.md)\n\n## License\n[Apache License 2.0](.\/LICENSE)\n\n## Project Demonstration\n[Blockchain Data Service](https:\/\/bds.jdcloud.com\/)\n\n","25":"# php-bitcoin-signature-routines\n\nPHP routines for verifying Bitcoin signatures.  Requires PHP 5.3.2 and the extension GMP 4.2.0 or better. GMP may be available in a package called \"php5-gmp\" or similar for your system.\n\nThe main code is in verifymessage.php, with tests in test\/verifymessage.php.  You will probably want to encapsulate the code more nicely, but since the ECC library needs to be configured specially and I am not up-to-date on the latest PHP packaging hotness anyway, I figured it would be best to leave that up to users to do how they like best.","26":"bchd\n====\n[![Build Status](https:\/\/travis-ci.org\/gcash\/bchd.png?branch=master)](https:\/\/travis-ci.org\/gcash\/bchd)\n[![Go Report Card](https:\/\/goreportcard.com\/badge\/github.com\/gcash\/bchd)](https:\/\/goreportcard.com\/report\/github.com\/gcash\/bchd)\n[![ISC License](http:\/\/img.shields.io\/badge\/license-ISC-blue.svg)](http:\/\/copyfree.org)\n[![GoDoc](https:\/\/img.shields.io\/badge\/godoc-reference-blue.svg)](http:\/\/godoc.org\/github.com\/gcash\/bchd)\n\nbchd is an alternative full node bitcoin cash implementation written in Go (golang).\n\nThis project is a port of the [btcd](https:\/\/github.com\/btcsuite\/btcd) codebase to Bitcoin Cash. It provides a high powered\nand reliable blockchain server which makes it a suitable backend to serve blockchain data to lite clients and block explorers\nor to power your local wallet.\n\nbchd does not include any wallet functionality by design as it makes the codebase more modular and easy to maintain. \nThe [bchwallet](https:\/\/github.com\/gcash\/bchwallet) is a separate application that provides a secure Bitcoin Cash wallet \nthat communicates with your running bchd instance via the API.\n\n## Table of Contents\n\n- [Requirements](#requirements)\n- [Install](#install)\n  - [Install prebuilt packages](#install-pre-built-packages)\n  - [Build from Source](#build-from-source)\n- [Getting Started](#getting-started)\n- [Documentation](#documentation)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Requirements\n\n[Go](http:\/\/golang.org) 1.16.4 or newer.\n\n## Install\n\n### Install Pre-built Packages\n\nThe easiest way to run the server is to download a pre-built binary. You can find binaries of our latest release for each operating system at the [releases page](https:\/\/github.com\/gcash\/bchd\/releases).\n\n### Build from Source\n\nIf you prefer to install from source do the following:\n\n- Install Go according to the installation instructions here:\n  http:\/\/golang.org\/doc\/install\n\n- Run the following commands to obtain bchd, all dependencies, and install it:\n\n```bash\ngo get github.com\/gcash\/bchd\n```\n\nThis will download the source code into your GOPATH and compile `bchd` and install it in your path.\n\nFor developers if you wish to place the working directory outside your GOPATH you can do so with Go >=1.12.x as follows:\n```bash\nmkdir workspace\ncd workspace\ngit clone https:\/\/github.com\/gcash\/bchd.git\ncd bchd\ngo install (or build or run, etc)\n```\nDependencies will be automatically installed to `$GOPATH\/pkg\/mod`.\n\nIf you are a bchd contributor and would like to change the default config file (`bchd.conf`), make any changes to `sample-bchd.conf` and then run the following commands:\n\n```bash\ngo-bindata sample-bchd.conf  # requires github.com\/go-bindata\/go-bindata\/\ngofmt -s -w bindata.go\n```\n\n## Getting Started\n\nTo start bchd with default options just run:\n\n```bash\n.\/bchd\n```\n\nYou'll find a large number of runtime options with the help flag. All of them can also be set in a config file.\nSee the [sample config file](https:\/\/github.com\/gcash\/bchd\/blob\/master\/sample-bchd.conf) for an example of how to use it.\n\n```bash\n.\/bchd --help\n```\n\nYou can use the common json RPC interface through the `bchctl` command:\n\n```bash\n.\/bchctl --help\n\n.\/bchctl --listcommands\n```\n\nBchd separates the node and the wallet. Commands for the wallet will work when you are also running\n[bchwallet](https:\/\/github.com\/gcash\/bchwallet):\n\n```bash\n.\/bchctl -u username -P password --wallet getnewaddress\n```\n\n## Docker\n\nBuilding and running `bchd` in docker is quite painless. To build the image:\n\n```\ndocker build . -t bchd\n```\n\nTo run the image:\n\n```\n# Use stop-timeout to make sure the container exits cleanly!\ndocker run --stop-timeout=1200 bchd\n```\n\nTo run `bchctl` and connect to your `bchd` instance:\n\n```\n# Find the running bchd container.\ndocker ps\n\n# Exec bchctl.\ndocker exec <container> bchctl <command>\n```\n\n## Documentation\n\nThe documentation is a work-in-progress.  It is located in the [docs](https:\/\/github.com\/gcash\/bchd\/tree\/master\/docs) folder.\n\n## Contributing\n\nContributions are definitely welcome! Please read the contributing [guidelines](https:\/\/github.com\/gcash\/bchd\/blob\/master\/docs\/code_contribution_guidelines.md) before starting.\n\n## Security Disclosures\n\nTo report security issues please contact:\n\nChris Pacia (ctpacia@gmail.com) - GPG Fingerprint: 0150 2502 DD3A 928D CE52 8CB9 B895 6DBF EE7C 105C\n\nor\n\nJosh Ellithorpe (quest@mac.com) - GPG Fingerprint: B6DE 3514 E07E 30BB 5F40  8D74 E49B 7E00 0022 8DDD \n\n## License\n\nbchd is licensed under the [copyfree](http:\/\/copyfree.org) ISC License.\n","27":"<a href=\"https:\/\/squeezer.io\" target=\"_blank\"><img width=\"700\" height=\"auto\" src=\".\/readme-introduction.gif\"><\/a>\n\n#### Framework : [squeezer.io](https:\/\/squeezer.io)\n#### Docs : [docs.squeezer.io](https:\/\/docs.squeezer.io\/)\n\n[![Squeezer.IO](https:\/\/cdn.rawgit.com\/SqueezerIO\/squeezer\/9a010c35\/docs\/gitbook\/images\/badge.svg)](https:\/\/Squeezer.IO)\n[![Build Status](https:\/\/travis-ci.org\/SqueezerIO\/squeezer.svg?branch=master)](https:\/\/travis-ci.org\/SqueezerIO\/squeezer)\n[![npm version](https:\/\/badge.fury.io\/js\/squeezer-cli.svg)](https:\/\/badge.fury.io\/js\/squeezer-cli)\n[![DUB](https:\/\/img.shields.io\/dub\/l\/vibe-d.svg)]()\n\n### Contents\n\n* [Getting Started](#getting-started)\n* [Example Projects](#example-projects)\n* [Features](#features)\n* [Roadmap](#roadmap)\n* [Templates](#templates)\n* [Plugins](#plugins)\n* [Contributing](#contributing)\n* [Community](#community)\n* [Meetups](#meetups)\n\n### What is Squeezer ?\n\nSqueezer is a platform that empowers new-entry blockchain developers to build serverless dApps simply as dead.\n\n### ChainKit - Agnostic blockchain integration\n\nThe main usage of the ChainKit is to unify top blockchains interfaces into a single normalized API interface , therefore you can build blockchain dApps easily without digging into blockchain complex infrastructure.\n\n[How to use the ChainKit](https:\/\/github.com\/SqueezerIO\/squeezer-chainkit)\n### <a name=\"features\"><\/a>Features in short\n\n- create blockchain wallets\n- double-encrypt for wallet data\n- on-the-fly encryption\/decryption\n- user choose how to store wallet token\n- bi-directional onchain transactions (inbound and outbound)\n- create blockchain payment solution\n- build dApps connecting to smart contracts using chainkit agnostic connector\n- deploy smart contracts\n- quick intuitive code deployments by using a special mechanism which will deploy smart contracts and dApp services where code changed\n- powered by microservices\n- share components between functions, similar to monolytic project\n- auto-deployable, auto-scalable , no DevOps requirements\n- silent deployments ,no interruption for the current functionality ( really useful on production )\n- one single command to simultaneously deploy all available functions on your project\nwhere code changed from the last deployment\n- automatic rollback to the previous working deployment if something goes wrong\n- sequential deployments, wait for the current deployments in progress to finish\n- self-healing functions\n- test your code locally on a simulated functions platform for a faster development cycle\n- separate your environments in multiple stages\n- extend framework functionality with your own \"home-made\" plugins\n- pay only for the usage ( no monthly subscriptions )\n- [Swagger UI](http:\/\/swagger.io\/) API documentation support\n\n### <a name=\"roadmap\"><\/a>Roadmap\n\n- decentralize microservices, currently we are using cloud microservices, AWS Lambda, Azure Functions ... we need to get rid of it and store and access the microservices in a decentralized way, IPFS and Ethereum Swarm could be an option\n- add 2FA and other security options when  using ChainKit `sendTransaction` which is used on withdraws, transfer and other sensitive actions\n- add DEX site example using Squeezer `2way-payment-system`\n\n#### Requirements\n\n- [Install node.js](http:\/\/nodejs.org\/) version `>=6`\n\n### Squeezer CLI\n\n> Squeezer command-line interface\n\n#### <a name=\"templates\"><\/a>Templates\n\nCreate a quick project stub by using templates :\n\n| template | description |\n|-----|--------------|\n|Squeezer 2way Payment | https:\/\/github.com\/SqueezerIO\/squeezer-2way-payment |\n\n#### <a name=\"plugins\"><\/a>Plugins\n\nExtend or merge the Squeezer framework functionality with plugins\n\n| Plugin | Author |\n|-----|--------------|\n|**[Serve Plugin](https:\/\/github.com\/SqueezerIO\/squeezer-serve)** <br\/> This plugin enables serving support for local development within the Squeezer Framework. | [Nick Chisiu](https:\/\/github.com\/nickchisiu) |\n|**[Swagger Plugin](https:\/\/github.com\/SqueezerIO\/squeezer-swagger)** <br\/> This plugin enables Swagger API Documentation support within the Squeezer Framework. | [Nick Chisiu](https:\/\/github.com\/nickchisiu) |\n\n#### <a name=\"example-projects\"><\/a>Example Projects\n\n| Project Name | Author | Demo |\n|-------------|------|---------|\n| **[Squeezer 2way Payment](https:\/\/github.com\/SqueezerIO\/squeezer-2way-payment)** <br\/>  Squeezer Two Way Blockchain Payment System (inbound + outbound) | [Nick Chisiu](https:\/\/github.com\/nickchisiu) | [video](https:\/\/example.org) |\n\n\n#### <a name=\"getting-started\"><\/a>Getting started\n\nNOTE: **Windows** users should [enable symlinks](http:\/\/answers.perforce.com\/articles\/KB\/3472\/?q=enabling&l=en_US&fs=Search&pn=1) in order to avoid unwanted symbolic links errors .\n\n\n## [Full Video tutorial](https:\/\/www.youtube.com\/watch?v=2V3A_LTFu4E)\n\n1. Install Squeezer's command line tool globally on your machine using npm:\n`npm install squeezer-cli -g`\n2. Create a new project using the squeezer-2way-payment template: \n`sqz create --project my-first-project --template https:\/\/github.com\/SqueezerIO\/squeezer-2way-payment`\n3. Switch to the project's directory:\n    `cd my-first-project`\n4. Initialize the local directory as a Git repository:\n    `git init`\n5. Add the files in your new local repository. This stages them for the first commit:\n    `git add .`\n6. Open up GitHub in a browser, navigate to the repositories page, and click on the `New` button, and enter the name of your project that you've created locally, in our case it will be my-first-project, then create the new repository.\n7. In Terminal, add the URL for the remote repository where your local repository will be pushed:\n    git remote add origin remote repository URL\n8. Commit the files that you've staged in your local repository:\n    `git commit -m \"First commit\"`\n9. Push the master branch to GitHub:\n    `git push -u origin master`\n10. Open up a new browser window and navigate to https:\/\/platform.squeezer.io, then login to the platform.\n11. Click on the import project button and import the project you've created from GitHub.\n12. In the first step of the import process, you have to select the repository from your list.\n13. In the second step of the import, you have to choose the provider and the stage name, dev or prod.\n14. After importing the project, the deployment will start automatically.\n15. When the deploy will be finished, we can check the logs by clicking on it.\n16. Scroll all the way down in the log window and copy the Swagger URL, then paste in a browser window.\n\n\n#### <a name=\"contributing\"><\/a>Contributing\n\nSee [contributing.md](CONTRIBUTING.md) for contribution guidelines\n\n### <a name=\"community\"><\/a>Community\n\n* [Squeezer issues](https:\/\/github.com\/SqueezerIO\/squeezer\/issues)\n* [Facebook](https:\/\/www.facebook.com\/Squeezer.IO\/)\n* [Twitter](https:\/\/twitter.com\/SqueezerIO)\n* [Contact Us](mailto:nick@squeezer.io)\n\n### <a name=\"meetups\"><\/a>Meetups\n\n* [Workshop: Serverless javascript with Squeezer](https:\/\/www.meetup.com\/Cluj-Javascripters\/events\/243915438\/?)\n","28":"# Ptarmigan\n\n[![Build Status](https:\/\/travis-ci.org\/nayutaco\/ptarmigan.svg?branch=development)](https:\/\/travis-ci.org\/nayutaco\/ptarmigan)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n![PRs Welcome](https:\/\/img.shields.io\/badge\/PRs-welcome-brightgreen.svg?style=flat-square)\n![Issue Welcome](https:\/\/img.shields.io\/badge\/issue-welcome-brightgreen.svg)\n<!-- [![Coverity Scan Build Status](https:\/\/scan.coverity.com\/projects\/15128\/badge.svg)](https:\/\/scan.coverity.com\/projects\/nayutaco-ptarmigan) -->\n\n![Ptarmigan](docs\/images\/ptarmigan_text.png)\n\n## About\n\n* [Lightning Network BOLT](https:\/\/github.com\/lightningnetwork\/lightning-rfc) implementation\n* In Japanese, `ptarmigan` is called \"\u96f7 (thunder) \u9ce5 (bird)\".\n\n## Setup\n\n* Ubuntu 18.04\n* bitcoind\n  * above v0.17 (`getnetworkinfo` version >= 170000)\n  * bitcoin mainnet \/ testnet \/ regtest\n  * NOTE\n    * not support bitcoin.conf section format\n\n## Install\n\n```bash\nsudo apt install -y git autoconf pkg-config build-essential libtool python3 wget jq bc\n\ngit clone https:\/\/github.com\/nayutaco\/ptarmigan.git\ncd ptarmigan\nmake full\n\n# takes a lot of time...\n```\n\n[NOTE and details](docs\/INSTALL.md)\n\n## Starting `bitcoind`\n\nAt first, start `bitcoind`.\n`ptarmd` use bitcoind JSON-RPC, so need `rpcuser` and `rpcpassword`.\n\n* bitcoin.conf sample\n\n```text\nrpcuser=bitcoinuser\nrpcpassword=bitcoinpassword\nserver=1\ntxindex=1\ntestnet=1\n```\n\n```bash\nbitcoind -daemon\n\n# check started chain\nbitcoin-cli getblockchaininfo | jq -e '.chain'\n```\n\n## Starting `ptarmd`\n\nFor starting `ptarmd`, you should make new node as follows.\n\n```bash\ncd ptarmigan\/install\n.\/new_nodedir.sh [NODENAME]\ncd [NODENAME]\n\n# start ptarmigan daemon\n#   CHAIN=mainnet, testnet or regtest\n..\/ptarmd --network=testnet\n```\n\n## How to use\n\n* [How to use](docs\/howtouse.md)\n* [How to use REST API](docs\/howtouse_rest_api.md)\n\nNote: `ptarmigan` has interfaces of CLI, JSON-RPC and REST API.\nBut CLI and JSON-RPC will change in the near future.\nTry the newer REST API interface.\n\n## Dependency\n\n### libraries\n\n* git submodule\n  * [ARMmbed\/MbedTLS](https:\/\/github.com\/ARMmbed\/mbedtls)\n  * [LMDB\/lmdb](https:\/\/github.com\/LMDB\/lmdb)\n  * [akheron\/jansson](https:\/\/github.com\/akheron\/jansson)\n  * [benhoyt\/inih](https:\/\/github.com\/benhoyt\/inih)\n  * [curl\/curl](https:\/\/github.com\/curl\/curl)\n  * [enki\/libev](https:\/\/github.com\/enki\/libev)\n  * [luke-jr\/libbase58](https:\/\/github.com\/luke-jr\/libbase58)\n  * [madler\/zlib](https:\/\/github.com\/madler\/zlib)\n  * [nayutaco\/jsonrpc-c](https:\/\/github.com\/nayutaco\/jsonrpc-c) - forked from [hmng\/jsonrpc-c](https:\/\/github.com\/hmng\/jsonrpc-c)\n\n* download\n  * [boost](http:\/\/www.boost.org\/) (for dijkstra shortest paths)\n  * [OpenSSL](https:\/\/www.openssl.org\/) (only `USE_OPENSSL`)\n\n* reference code\n  * [sipa\/bech32](https:\/\/github.com\/sipa\/bech32)\n\n### application\n\n* [bitcoind](https:\/\/github.com\/bitcoin\/bitcoin)\n  * JSON-RPC\n    * `getrawtransaction`\n    * `signrawtransactionwithwallet`\n    * `sendrawtransaction`\n    * `gettxout`\n    * `getblock`\n    * `getblockhash`\n    * `getblockcount`\n    * `getnewaddress`\n    * `estimatesmartfee`\n    * `getnetworkinfo`\n    * `listunspent`\n    * `lockunspent`\n\n## Security\n\nIf you find any issues regarding security,\nplease disclose the information by sending an (possibly encrypted) email to security at nayuta dot co.\n[Our PGP key `3C95B178758342844787766AAF91183E1DCC4222`](https:\/\/pgp.mit.edu\/pks\/lookup?op=vindex&search=0xAF91183E1DCC4222).\n","29":"![ROKOS-OK](https:\/\/i.imgur.com\/YYXJ9up.png)\n\nROKOS IoT OK Bitcoin Fullnode and Cryptocurrencies Open Source\n=========================== \n\n### Join the new communications server\n<a href=\"https:\/\/discord.io\/bitcoin\">\n    <img alt=\"Logo\" src=\"https:\/\/discordapp.com\/api\/guilds\/213747404745211904\/widget.png?style=banner2\">\n  <\/a>\n\n* Integrated Cryptocurrencies \/ Tech in the Fullnode **Core** OS: **Bitcoin, OKCash, BFGminer\/CGMiner, Dev tools**  \n  \n* Integrated Cryptocurrencies \/ Tech in the Fullnode **Flavors** OS: **Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Europecoin, Soil, Mojo, Transfer, Kobocoin, Dash, MonetaryUnit, OpenBazaar, Expanse and Einsteinium.**\n\n* Project evolution based on feedback\/requests\/suggestions from: Cryptocurrency developers, Cryptocurrency users and New users to Crypto over any of the public forums (Core, Flavors, Github) where everyone can get involved, participate and\/or request for support.\n\n* A Big Thank you: Media authors, Donators, Supporters, Collaborators, The Open Source community, the Crypto community and involved cryptocurrencies communities and developers.\n\nRaspi OK OS for Raspberry PI and IoT Devices (Internet of Things)\n\nNative Bitcoin OKCash and Cryptocurrencies Full Nodes \/ versions for IoT\n\nROKOS Downloads, Resources, Feedback and Support Threads \n===========================\n\nWebsite Core: http:\/\/rokos.space\n\nSupport: https:\/\/discord.io\/bitcoin\n\nWebsite Github: https:\/\/github.com\/BitcoinFullnode\/rokos.space.website\n\nROKOS Github: https:\/\/github.com\/BitcoinFullnode\/ROKOS-OK-Bitcoin-Fullnode\n\nBTCTalk ROKOS Core support\/feedback: https:\/\/bitcointalk.org\/index.php?topic=1312616.0\n\nBTCTalk ROKOS Flavors support\/feedback: https:\/\/bitcointalk.org\/index.php?topic=1084908.0\n\nWebsite Flavors: http:\/\/rokos-flavors.space\n\nRaspberry Forums: https:\/\/www.raspberrypi.org\/forums\/viewtopic.php?f=41&t=112913\n\nPine64 Forums: https:\/\/forum.pine64.org\/archive\/index.php?thread-2483.html\n\n\nCoverage at Nasdaq - CES2017 among others:\n\nhttp:\/\/www.nasdaq.com\/article\/fintech-at-ces-mastercard-and-rokos-shake-things-up-cm734192\n\nCoverage at TechCrunch - CES2016 among others: \n\nhttp:\/\/techcrunch.com\/2016\/01\/04\/the-rokos-core-os-turns-your-raspberry-pi-into-a-bitcoin-node\/\n\nhttp:\/\/letstalkpayments.com\/fintech-at-ces-mastercard-coin-rokos-samsung-and-softbank-are-making-waves\/\n\n\nReleases\n===========================\n\n**#ROKOS [flavors] for Raspberry Pi [All] (X1) - February 21 2021**\n\nIntegrated: Bitcoin 0.21 + Okcash 6.9.0.6 + Litecoin 0.18.1 + Dash 0.16.1.1 + Blackcoin more 2.13.2.7 + Monetary Unit 2.2 + Dev tools and deps\n\nDownload:\nhttps:\/\/sourceforge.net\/projects\/rokos-crypto-full-node-os\/files\/ROKOS-FLAVORS\/ROKOS-FLAVORS-RASPBERRY\/\n\n\n**#ROKOS [core] for Raspberry Pi [All] (X1) - February 19 2021**\n\nIntegrated: Bitcoin 0.21 + Okcash 6.9.0.6 \/ Full Node + Dev tools and deps\n\nDownload:\nhttps:\/\/sourceforge.net\/projects\/rokos-bitcoin-full-node\/files\/ROKOS-CORE\/ROKOS-CORE-RASPBERRY\/\n\n**#ROKOS [core] for Pine64+ (v10) - February 06 2020**\n\nIntegrated: Bitcoin + Okcash \/ Full Node + Dev tools and deps\n\nDownload:\nhttps:\/\/sourceforge.net\/projects\/rokos-bitcoin-full-node\/\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3, 4 (v10) - January 25 2020**\n\nIntegrated: Bitcoin, Okcash, Bitcoin cash, Litecoin, Dash, Dogecoin, Qtum, Navcoin, Blackcoin, Einsteinium, Diamond, Monetary Unit\n\nDownload:\nhttps:\/\/sourceforge.net\/projects\/rokos-crypto-full-node-os\/\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3, 4 (v10) - January 11 2020**\n\nIntegrated: Bitcoin + Okcash \/ Full Node + BFGminer \/ CGMiner + Dev tools and deps\n\nDownload:\nhttps:\/\/sourceforge.net\/projects\/rokos-bitcoin-full-node\/\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3 (v9) - January 26 2019 - Private.Internal.Testing**\n\nIntegrated: Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Soil, Transfer, Dash, MonetaryUnit\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v9) - November 20 2018 - Private.Internal.Testing**\n\nIntegrated: OKCash + Bitcoin \/ Full Node + CGMiner deps\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v8) - April 7 2017**\n\nIntegrated: OKCash + Bitcoin \/ Full Node + Open Bazaar Server \/ CGMiner deps\n\n**#ROKOS [core] for Raspberry Pi, zero, 2, 3 (v7) - October 31 2016**\n\nIntegrated: OKCash + Bitcoin \/ Full Node + Open Bazaar Server\n\n**#ROKOS [core] for Pine64+ (v7) - October 28 2016**\n\nIntegrated: OKCash + Bitcoin \/ Full Node + Open Bazaar Server\n\nDownload:\nhttp:\/\/bit.ly\/rokos7corepine64\n\n**#ROKOS [flavors] for Raspberry Pi, zero, 2, 3 (v6) - May 10 2016**\n\nIntegrated: Bitcoin, OKCash, Gamecredits, Digitalcoin, Blackcoin, Diamondcoin, Energycoin, Europecoin, Metalcoin, Soil, Mojo, Transfer, Kobocoin, Dash, Horizon, MonetaryUnit, OpenBazaar and Expanse. \/ Full Nodes \/ Clients\n\nDownload (Gdrive): \nhttp:\/\/bit.ly\/rokos6magicflavors\n\n**#ROKOS [flavors] for Raspberry Pi 2 (v5) - March 07 2016**\n\nIntegrated: BTC, OK, GMC, BLK, DMD, DGC, ENRG, ERC, METAL, MOJO, SOIL, TX \/ Full Nodes \/ Clients\n\n**#ROKOS [core] BTC for BananaPi PRO (v4) - Jan 21 2016**\n\nIntegrated: Bitcoin \/ Full Node\n\nDownload (Gdrive): \nhttp:\/\/bit.ly\/rokos4coreBanana\n\n**#ROKOS [core] BTC for RaspberryPI 2 (v4) - Dec 25 2015**\n\nIntegrated: OKCash synced + Bitcoin \/ Full Node\n\n**#ROKOS [core] BTC for RaspberryPI 2 (v3) - Dec 19 2015**\n\nIntegrated: OKCash synced + Bitcoin \/ Full Node\n\n**#ROKOS [core] for RaspberryPI B+ \/ 2  (v2) - Jun 30 2015**\n\nIntegrated: OKCash synced + Bitcoin + Litecoin + Dogecoin \/ Full Node\n\n**#ROKOS [core] for RaspberryPi B+ \/ 2 (v1) - Jun 9 2015**\n\nIntegrated: OKCash Synced Wallet\n\n**#ROKOS [core] for RaspberryPi Model B+ (v0.alpha-beta) - Dec 21 2014 - Closed alpha-beta.**\n\nIntegrated: OKCash Wallet\n\n\nDonations and Support\n===========================\n\n* ROKOS is Open Source and shared\/released for free, If it helped your project or you like the work and feel kind and would like to help ROKOS grow continuously, you can support the project with a donation at:\n\n**BTC**  3FsGJZMQMnf9hJf1oLayJo2gsmwcit6XAj\n\n**OK**  P9LeQGwcfPs3vYwJ19e1odvaKdJj7wiUut\n","30":"BitWrk - Bitcoin-fueled Distributed Peer-to-Peer Blender Rendering (and more)\n=============================================================================\n\n[![5 Minute introduction to BitWrk](https:\/\/img.youtube.com\/vi\/KmwcxwhIRr0\/0.jpg)](https:\/\/www.youtube.com\/watch?v=KmwcxwhIRr0)\n\nArtists use [Blender](http:\/\/blender.org), a powerful yet free 3D software, to create impressive\npictures and movies. This requires a time-consuming, and costly, production step called _rendering_.\n\nBitWrk integrates with Blender and makes rendering much quicker by dispatching it to a swarm of\ncomputers. \n\nBy creating a _marketplace for computing power_, BitWrk introduces a new kind of\n_cloud computing_, in which resources are shared in a peer-to-peer fashion. It\nworks like a stock exchange, using crypto currency [Bitcoin](https:\/\/bitcoin.org\/)\nfor payment.\n\nThis is interesting for two groups of people:\n- The **buyers**: Users who require lots of computing power at their finger tips.\n- The **sellers**: Hardware owners who have computing power to spare and would like to\n  monetize that resource.\n\nBitWrk provides a service to both groups by connecting them in an easy-to-use way.\n\n### On the web\n[bitwrk.net](https:\/\/bitwrk.net\/) | [Download](https:\/\/github.com\/indyjo\/bitwrk\/releases) | [Facebook](https:\/\/www.facebook.com\/bitwrk) | [Twitter](https:\/\/twitter.com\/BitWrk)\n\n### Documentation\n[News](NEWS.md) | [Quickstart instructions](QUICKSTART.md) | [Concepts](CONCEPTS.md) | [Compiling](COMPILING.md) | [License information](COPYING)\n\n### Stargazers over time\n\n[![Stargazers over time](https:\/\/starchart.cc\/indyjo\/bitwrk.svg)](https:\/\/starchart.cc\/indyjo\/bitwrk)\n\nStatus\n------\n\nAs of version 0.6.5:\n- BitWrk concentrates on the use case of providing peer-to-peer rendering for [Blender](http:\/\/blender.org),\n  the free rendering software, into which it integrates by use of an add-on. Local network and swarm rendering\n  can be combined. GPU rendering is supported, too.\n- BitWrk is now integrated with a Bitcoin payment processing system, allowing users to pay for\n  compute power, in Bitcoin. For this, the user has to request a deposit address, which will\n  be provided after a couple of seconds by the payment processor. Bitcoin transactions need at\n  least 6 confirmations, i.e. depositing on BitWrk takes one hour on average. Withdrawals aren't\n  enabled yet for security reasons. Users are advised to keep the amount of money stored on BitWrk\n  as small as possible (deposits can be as small as 0.001 BTC!). Of course, a pay-out can be\n  triggered manually by the developer. Ask him!\n- There is a central service, written in Go (http:\/\/golang.org\/) and based on Google AppEngine.\n  It exports an API for entering bids and updating transactions. Every transaction's lifecycle can\n  be traced, and all communication is secured with Elliptic-Curve cryptographic\n  signatures. These are of the same kind than those that can be generated using\n  the original Bitcoin client, so it is very easy to test for correctness.\n- A client (also called the \"daemon\"), written in Go, provides a browser-based user interface to\n  everything related to BitWrk. The daemon enables control of ongoing trades, registered workers\n  and automatic trading mandates. It also provides access to BitWrk's Bitcoin-based payment system.\n- The client accepts tasks from BitWrk-enabled programs (such as Blender with the\n  BitWrk add-on installed) and dispatches them to the BitWrk service, where they are processed by\n  other participants. It also manages local worker programs (such as blender_slave.py) and offers\n  their services to the BitWrk exchange for money.\n\n### Build status\nmaster: [![Build Status](https:\/\/travis-ci.org\/indyjo\/bitwrk.svg?branch=master)](https:\/\/travis-ci.org\/indyjo\/bitwrk)\n| experimental: [![Build Status](https:\/\/travis-ci.org\/indyjo\/bitwrk.svg?branch=experimental)](https:\/\/travis-ci.org\/indyjo\/bitwrk)\n","31":"Bitcoin ipld format\n==================\n\n[![](https:\/\/img.shields.io\/badge\/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http:\/\/ipn.io)\n[![](https:\/\/img.shields.io\/badge\/project-IPFS-blue.svg?style=flat-square)](http:\/\/ipfs.io\/)\n[![](https:\/\/img.shields.io\/badge\/freenode-%23ipfs-blue.svg?style=flat-square)](http:\/\/webchat.freenode.net\/?channels=%23ipfs)\n[![Coverage Status](https:\/\/coveralls.io\/repos\/github\/ipfs\/go-ipld-btc\/badge.svg?branch=master)](https:\/\/coveralls.io\/github\/ipfs\/go-ipld-btc?branch=master)\n[![Travis CI](https:\/\/travis-ci.org\/ipfs\/go-ipld-btc.svg?branch=master)](https:\/\/travis-ci.org\/ipfs\/go-ipld-btc)\n\n> An ipld codec for Bitcoin blocks and transactions allowing path traversals across the blockchain!\n\nNote: This is WIP and may not be an entirely correct parser.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Install\n\n```sh\ngo get github.com\/ipfs\/go-ipld-btc\n```\n\n## Contribute\n\nPRs are welcome!\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https:\/\/github.com\/RichardLitt\/standard-readme) specification.\n\n","32":"# React Native Crypto Wallet\n\nSimple mobile Bitcoin & Ethereum wallet\n\n## Getting Started\n\nStart the React Native\n\n```sh\nyarn install\nreact-native run-ios\n```\n\n## Hacks required to run Crypto on RN\n\n- polyfill NodeJS API using [node-libs-browser](https:\/\/github.com\/webpack\/node-libs-browser) and\/or [node-libs-react-native](https:\/\/github.com\/parshap\/node-libs-react-native) in `rn-cli.config.js` via [extraNodeModules](https:\/\/facebook.github.io\/metro\/docs\/en\/configuration#extranodemodules) (NOTE: new RN versions have different structure, check the [docs](https:\/\/facebook.github.io\/metro\/docs\/en\/configuration#extranodemodules))\n- polyfill NodeJS globals in `global.js` using edited version of [shims](https:\/\/github.com\/tradle\/rn-nodeify\/blob\/master\/shim.js)\n- polyfill randomBytes using [react-native-randombytes](https:\/\/github.com\/mvayngrib\/react-native-randombytes) in `global.js`\n- fix the `bitcore-lib` [circular dependency](https:\/\/github.com\/bitpay\/bitcore-lib\/issues\/184) using the `postinstall` script (RN Metro bundler works differently than webpack which can work around the circular dependency)\n- use [shims](https:\/\/docs.ethers.io\/ethers.js\/html\/cookbook-react.html) for the `ethers.js` lib\n- relevant links:\n  - https:\/\/gist.github.com\/parshap\/e3063d9bf6058041b34b26b7166fd6bd\n\n## Features\n\n- Create wallet\n  - testnet or livenet\n- Show wallet info\n  - balance in crypto & USD\n  - private & public keys\n  - derivation strategy, address type etc\n- Send transaction\n  - scan QRCode address\n  - choose BTC fee\n  - show calculated fee\n- Generate address\n  - show QRCode address\n- List all addresses\n  - explore address transactions\n- Transactions history\n  - sent & received\n- Backup wallet\n  - using mnemonic\n  - export as JSON\n- Restore wallet\n  - using mnemonic\n  - import from JSON\n\n### 1. App Menu\n\n![screenshot 2019-02-07 at 14 09 37](https:\/\/user-images.githubusercontent.com\/38855190\/52413908-22b8f400-2ae3-11e9-9bd7-ce15276414df.png)\n\n### 2. Create Wallet\n\nStart by creating your first wallet.\n\n![screenshot 2019-02-07 at 14 09 56](https:\/\/user-images.githubusercontent.com\/38855190\/52413924-2ba9c580-2ae3-11e9-9eb5-5c7178d659b8.png)\n\n### 3. Wallet Info\n\nCheck details of the created wallet.\n\n![screenshot 2019-02-07 at 14 10 31](https:\/\/user-images.githubusercontent.com\/38855190\/52413947-3b290e80-2ae3-11e9-92f3-e155fb29c0af.png)\n\n### 4. Generate addresses\n\nGenerate multiple public addresses for receiving coins.\n\n![screenshot 2019-02-07 at 14 10 57](https:\/\/user-images.githubusercontent.com\/38855190\/52413996-5dbb2780-2ae3-11e9-86f7-e1077a089568.png)\n\n### 5. Addresses\n\nCheck list of all generated public addresses.\n\n![screenshot 2019-02-07 at 14 11 19](https:\/\/user-images.githubusercontent.com\/38855190\/52414038-788d9c00-2ae3-11e9-9bf6-43e8bbae5238.png)\n\n### 6. Send Transaction\n\n![screenshot 2019-02-07 at 14 11 40](https:\/\/user-images.githubusercontent.com\/38855190\/52414057-8511f480-2ae3-11e9-97d3-6fcfb52abda2.png)\n\n### 7. Select active wallet\n\nSwitch between all available wallets.\n\n![screenshot 2019-02-07 at 14 13 01](https:\/\/user-images.githubusercontent.com\/38855190\/52414075-95c26a80-2ae3-11e9-9658-d7599c9304e2.png)\n\n### 8. Backup wallet\n\nExport mnemonic or private key of your wallet.\n\n![screenshot 2019-02-07 at 14 13 24](https:\/\/user-images.githubusercontent.com\/38855190\/52414092-a377f000-2ae3-11e9-8684-5f8eca19645f.png)\n\n### 9. Restore wallet\n\nAdd wallet by mnemonic or .dat file.\n\n![screenshot 2019-02-07 at 14 13 43](https:\/\/user-images.githubusercontent.com\/38855190\/52414127-be4a6480-2ae3-11e9-8474-6caa8258f6ba.png)\n","33":"This is a modification of an old version of bitcointools:\nhttps:\/\/github.com\/gavinandresen\/bitcointools\n\nwhich incorporates a version of Matt Giuca's privkeyimport:\nhttps:\/\/code.launchpad.net\/~mgiuca\/+junk\/bitcoin-import\n\nThe purpose of this bitcointools version is to export a key from a bitcoin wallet and import it into a devcoin wallet.\n\nThe procedure works, but is awkward.  Once it is possible to import and export keys from the mainline client this modification will be obsolete.\n\nFor an example of using this in Linux, quit bitcoin and make a copy of the .bitcoin directory.  Also quit devcoin and make a copy of the .devcoin directory.\n\nThen print the bitcoin key you want to export by typing in a terminal in the bitcointools directory:\npython keydump.py <the address of the key you want to export>\n\nFor example, if the address of the key you want to export is 175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W, you would type \npython keydump.py 175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\n\nThis will save the base58 version of the private key with that address to a file named key.txt.\n\nThen in a terminal in a bitcointools directory, type:\nprivkeyimport.py --datadir <your home directory>\/.devcoin\n\nFor example, if your home directory is david, you would type \nprivkeyimport.py --datadir \/home\/david\/.devcoin\n\nThis will add the private key with the default key file name of key.txt to the devcoin wallet.\n\nThen run devcoin-qt -rescan by typing in a terminal in the devcoin directory:\n.\/devcoin-qt -rescan\n\nto ensure any transactions belonging to the imported key are added to the transaction list and balance.  Then open your devcoin-qt client and your balance will be up to date.  If the balance includes money sent to that private key, then even if you don't see your key in your receive address book, the key is in your wallet.\n\nOnce everything works, delete the file named key.txt so that if someone gets access to your computer they can't copy your private key and steal the money within.  For the same reason, delete the .bitcoin and .devcoin backups.  Then, assuming you encrypt your wallet after use so that if someone gets access to your computer they can't copy your wallet, encrypt the bitcoin wallet and the devcoin wallet.\n\n\n\nBelow is an explanation of other uses of bitcointools.\n\n----- dbdump.py -----\nRun    dbdump.py --help    for usage.  Database files are opened read-only, but\nyou might want to backup your Bitcoin wallet.dat file just in case.\n\nYou must quit Bitcoin before reading the transactions, blocks, or address database files.\n\nRequires the pycrypto library from  http:\/\/www.dlitz.net\/software\/pycrypto\/\nto translate public keys into human-friendly Bitcoin addresses.\n\nExamples:\n\nPrint out  wallet keys and transactions:\n  dbdump.py --wallet --wallet-tx\n\nPrint out the \"genesis block\" (the very first block in the proof-of-work block chain):\n  dbdump.py --block=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n\nPrint out one of the transactions from my wallet:\n  dbdump.py --transaction=c6e1bf883bceef0aa05113e189982055d9ba7212ddfc879798616a0d0828c98c\n  dbdump.py --transaction=c6e1...c98c\n\nPrint out all 'received' transactions that aren't yet spent:\n  dbdump.py --wallet-tx-filter='fromMe:False.*spent:False'\n\nPrint out all blocks involving transactions to the Bitcoin Faucet:\n  dbdump.py --search-blocks=15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC\n\nThere's a special search term to look for non-standard transactions:\n  dbdump.py --search-blocks=NONSTANDARD_CSCRIPTS\n\n----- statistics.py -----\nScan all the transactions in the block chain and dump out a .csv file that shows transaction volume per month.\n\n----- fixwallet.py -----\nHalf-baked utility that reads a wallet.dat and writes out a new wallet.dat.\n\nOnly half-baked because to be really useful I'd have to write serialize routines to re-pack data after modifying it...\n\n----- jsonToCSV.py -----\nRead JSON list-of-objects from standard input, writes CSV file to standard output.\nUseful for converting bitcoind's listtransactions output to CSV that can be\nimported into a spreadsheet.\n\n","34":"### Overview\n\nThis is a collection of simple programs which can generate bitcoin wallets, create and sign transactions, and send transactions over the bitcoin network.\n\nIt was a learning project for me to learn more about both golang, and the bitcoin protocol.\n\nThis project consists of three programs which each contain the most basic usecase.\n\n* keys.go - Generates a public\/private key pair\n* transaction.go - Creates, and signs a bitcoin transaction\n* network.go - Connects to a peer, and sends a transaction over the network\n\n### Disclaimer\n\nThese programs are not \"crytographically\" random, and should not be used for any purpose other than educational use.\n\n### Installation\n\n1. Install [go](http:\/\/golang.org\/)\n2. run `go get` to install dependencies\n3. Follow the instructions at [go-secp256k1](https:\/\/github.com\/toxeus\/go-secp256k1) to compile bitcoin\/c-secp256k1\n4. Run one of the programs using the syntax below\n\n### Usage\n\n##### Creating a key pair\n\n\tgo run keys.go\n\n\toptions (optional)\n\t--testnet\n\n##### Generating a transaction\n\n\tgo run transaction.go\n\t\n\toptions (required)\n\t--private-key yourPrivateKey\n\t--public-key yourPublicKey\n\t--destination destinationPublicKey\n\t--input-transaction inputTransactionHash\n\t--satoshis satoshisToSend\n\n\toptions (optional)\n\t--input-index inputTransactionIndex\n\n\n##### Sending a transaction over the bitcoin network\n\n\tgo run network.go\n\t\n\toptions (required)\n\t--transaction yourTransaction\n\t--node-address 255.255.255.255 (IPv4 address of the bitcoin node to connect to)\n\t--network-address 255.255.255.255 (IPv4 address of your public IP address)\n\n\toptions (optional)\n\t--testnet\n\n### Dependencies\n\n##### https:\/\/github.com\/toxeus\/go-secp256k1\nThis library is used for the creation of public keys from private keys, as well as signing transactions. It is a project which wraps the official bitcoin\/c-secp256k1 bitcoin library.\n\n##### https:\/\/github.com\/tv42\/base58\nThis library does the base58 conversion. I have included the base58 project in this codebase rather than importing it from the aforementioned github, because I needed to change the dictionary that was used.\n\n### Resources\n\n- Bitpay's insight for testnet: https:\/\/test-insight.bitpay.com\/\n- TP's TestNet Faucet: http:\/\/tpfaucet.appspot.com\/\n- Ken Shirriff's blog post \"Bitcoins the hard way\": http:\/\/www.righto.com\/2014\/02\/bitcoins-hard-way-using-raw-bitcoin.html\n- The Bitcoin wiki: https:\/\/en.bitcoin.it\/\n- Bitcoin developer guide: https:\/\/bitcoin.org\/en\/developer-guide\n- http:\/\/blockexplorer.com\/ for general transction\/address searching\n- http:\/\/blockchain.info\/ for general transction\/address searching\n- https:\/\/blockchain.info\/connected-nodes to see a list of connected nodes\n- bitcoin.stackexchange.com (http:\/\/bitcoin.stackexchange.com\/questions\/3374\/how-to-redeem-a-basic-tx) Information on redeeming a raw transaction, and explanation of fields.\n\n### License\n\nMIT\n","35":"# Mastering Bitcoin\nMastering Bitcoin is a book for developers, but the first two chapters cover bitcoin at a level that is approachable to non-programmers. Anyone with a basic understanding of technology can read the first two chapters and get a great understanding of bitcoin. \n\n# Published\n\"Mastering Bitcoin\" is now available in print and e-book formats by many book sellers including [Amazon](http:\/\/www.amazon.com\/Mastering-Bitcoin-Unlocking-Digital-Crypto-Currencies\/dp\/1449374042)\n, [Barnes & Nobles](http:\/\/www.barnesandnoble.com\/w\/mastering-bitcoin-andreas-m-antonopoulos\/1119253039?ean=9781449374044\n) and [O'Reilly Media](http:\/\/shop.oreilly.com\/product\/0636920032281.do). For a limited time, the book is also sold for bitcoin at the [author's site](http:\/\/bitcoinbook.info)\n\n# Source \nThe book's source code, found in this repository, kept synchronized with the print and ebook editions. Please do not submit changes here, instead use the [errata](http:\/\/www.oreilly.com\/catalog\/errata.csp?isbn=0636920032281) page on the publisher's site. \n\n<a rel=\"license\" href=\"http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https:\/\/i.creativecommons.org\/l\/by-sa\/4.0\/88x31.png\" \/><\/a><br \/><span xmlns:dct=\"http:\/\/purl.org\/dc\/terms\/\" href=\"http:\/\/purl.org\/dc\/dcmitype\/Text\" property=\"dct:title\" rel=\"dct:type\">Mastering Bitcoin<\/span> by <a xmlns:cc=\"http:\/\/creativecommons.org\/ns#\" href=\"http:\/\/antonopoulos.com\/\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Andreas M. Antonopoulos LLC<\/a> is licensed under a <a rel=\"license\" href=\"http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/\">Creative Commons Attribution-ShareAlike 4.0 International License<\/a>.\n\nThis \"Free Culture\" compliant license was approved by my publisher O'Reilly Media (http:\/\/oreilly.com), who understand the value of open source. O'Reilly Media is not just the world's best publisher of technical books but also a strong supporter of an open culture and the sharing of knowledge. \n\nThank you O'Reilly!\n\n# Translations\nThe Hungarian translation of the book can be found in the HU subdirectory.\n\n# Bitcoin donations\n1BTC33369dXmWYuc3qdBF5znKuNzo6gg6r\n","36":"### SpareCoins\n\nThis is the repo for the front end of the Chrome Extension.\n\n### Build Instructions\n\n**Update manifest version**\n\n**Zip the following files\/directories**\n - css\/\n - icons\/\n - js\/\n - lib\/\n - views\/\n - background.js\n - beep.wav\n - index.html\n - manifest\n - error.html\n - errorListener.js\n - error.js\n","37":"[![License](https:\/\/img.shields.io\/badge\/license-Apache%202.0-blue.svg)](LICENSE)\n[![Testnet Build](https:\/\/github.com\/ACINQ\/phoenix\/workflows\/TESTNET%20Build\/badge.svg)](https:\/\/github.com\/ACINQ\/phoenix\/actions?query=workflow%3A%22TESTNET+Build%22)\n[![Download Testnet APK](https:\/\/img.shields.io\/badge\/Download-Testnet%20APK-green?style=flat&logo=android&logoColor=white)](https:\/\/acinq.co\/pub\/phoenix\/phoenix-testnet-latest.apk)\n\n![Phoenix Logo](.readme\/phoenix_text.png)\n\nPhoenix is a Bitcoin wallet developed by [ACINQ](https:\/\/acinq.co), that allows you to send and receive bitcoins securely over the Lightning Network. It is self-custodial, which means that **you hold the keys** of the wallet. It provides a simple and clean UX. Thanks to native Lightning support, payments are faster and cheaper.\n\n---\n\n:rotating_light: This wallet is self-custodial. Your key, your bitcoins. But make sure you backup your key so you do not lose your money. Do not share your key with anyone.\n\n---\n\nHead to our website for more information:\n- [FAQ](https:\/\/phoenix.acinq.co\/faq)\n- [Terms](https:\/\/phoenix.acinq.co\/terms)\n- [Privacy](https:\/\/phoenix.acinq.co\/privacy)\n\n## Download\n\nPhoenix is available for Android and iOS:\n- for iOS: [on the App Store](https:\/\/apps.apple.com\/us\/app\/phoenix-wallet\/id1544097028), requires iOS 14+.\n- for Android: [on Google Play](https:\/\/play.google.com\/store\/apps\/details?id=fr.acinq.phoenix.mainnet), or [get the APK from the releases](https:\/\/github.com\/ACINQ\/phoenix\/releases)\n\n## Build and test Phoenix\n\nPhoenix is currently separated into two codebases:\n- the legacy Android app, found in the `phoenix-legacy` folder, using our own Scala [eclair-core](https:\/\/github.com\/ACINQ\/eclair) library for Lightning. Instructions to build this app are provided [here](https:\/\/github.com\/ACINQ\/phoenix\/blob\/master\/phoenix-legacy\/BUILD.md)\n- the iOS app found in the `phoenix-ios` folder, using our own Kotlin MultiPlatform [lightning-kmp](https:\/\/github.com\/ACINQ\/eclair) library for Lightning. Instructions to build this app are provided [here](https:\/\/github.com\/ACINQ\/phoenix\/blob\/master\/BUILD.md)\n\nThe `phoenix-android` folder contains the new Android app that shares code with the iOS app and use lightning-kmp. This app is not ready yet. It will eventually replace the legacy Android app.\n\n## Contribute\n\nWe use GitHub for bug tracking. Search [the existing issues](https:\/\/github.com\/ACINQ\/phoenix\/issues) for your bug and create a new one if needed.\n\nYou can also contribute to the project by submitting pull requests to improve the codebase or bring new features. Pull requests will be reviewed by members of the ACINQ team.\n\nTo contribute to Lightning in general, take a look at the [Eclair repository](https:\/\/github.com\/ACINQ\/eclair) for routing nodes, or the [lightning-kmp repository](https:\/\/github.com\/ACINQ\/lightning-kmp) for mobile nodes.\n\n## Translate the app\n\nIf you want to contribute to the translation effort, consult the guidelines provided in [TRANSLATION.md](https:\/\/github.com\/ACINQ\/phoenix\/blob\/master\/TRANSLATION.md)\n\n## Support\n\nFor troubleshooting and questions, visit [our support page](https:\/\/phoenix.acinq.co\/support).\n\n## License\n\nPhoenix is released under the terms of the Apache 2.0 license. See LICENSE for more information.\n","38":"bitcointalk-scraper\n===================\n\nPython-based scraper \/ crawler for members and messages on bitcointalk.org\n\nInstallation\n=============\n\na) Make sure required python packages are installed\n\n```\npip install cssselect lxml psycopg2 requests\n```\n\nb) Create tables in target PostgreSQL DB (see sql\/)\n\nc) Create .pgpass file in top-level of this directory containing connection info to the DB from previous step. Use the following format (9.1):\n\nhttp:\/\/www.postgresql.org\/docs\/9.1\/static\/libpq-pgpass.html\n\nd) Create \"data\" folder within the application folder, or change the _saveToFile method in memoizer.py to point to a different data directory.\n\nUsage\n=====\n\nMain crawler will store information about all boards, members, messages, and topics falling within a user-defined range of topic IDs (as presented by bitcointalk.org). By default this range is between topics 1 and 50 - to change the range simple edit the \"startTopicId\" and \"stopTopicId\" variables within \"scraper.py\". When you're ready to start the crawler, simply run \"python scrape_topics.py\".\n\nIn the interest of avoiding heavy server load, the crawler, by default will wait an average of 5 seconds between requests to bitcointalk.org. To change this, simply edit the variable \"interReqTime\" in bitcointalk.py to the desired value.\n\nThe main crawler file included, \"scrape_topics.py\", is only one possible implementation of the crawler. The scraping interface, accessed through the memoizer sub-module, accepts a variety of commands and is smart enough to avoid scraping the same URL twice. Feel free to build your own custom crawler on top of this!\n","39":"# Bitcoin address generator\nAvailable at https:\/\/kimbatt.github.io\/btc-address-generator\/\n\n## Features:\n*  Create bech32, segwit (p2sh-p2wpkh), and legacy (p2pkh) addresses\n*  Bulk generate addresses\n*  View details of private keys\n*  Private key encryption and decryption (BIP38)\n*  Create printable paper wallets with multiple designs\n*  Generate BIP39 mnemonic seeds\n*  View details and derived addresses of BIP39 mnemonic seeds\n*  The entire page is a single html file, so it can be saved easily\n\n## Libraries used:\n*  BigNumber (BN): https:\/\/github.com\/indutny\/bn.js\n*  crypto-js: https:\/\/github.com\/brix\/crypto-js\n*  QR code generator: https:\/\/github.com\/kazuhikoarase\/qrcode-generator\n*  Scrypt: https:\/\/github.com\/dchest\/scrypt-async-js\n*  es6-promise: https:\/\/github.com\/stefanpenner\/es6-promise\n\n## License:\n[WTFPL](http:\/\/www.wtfpl.net\/)\n","40":"![Webcoin](img\/logo.png)\n\n### A Bitcoin client for Node.js and the browser\n\n[![Build Status](https:\/\/travis-ci.org\/mappum\/webcoin.svg?branch=master)](https:\/\/travis-ci.org\/mappum\/webcoin)\n[![Dependency Status](https:\/\/david-dm.org\/mappum\/webcoin.svg)](https:\/\/david-dm.org\/mappum\/webcoin)\n[![npm version](https:\/\/img.shields.io\/npm\/v\/webcoin.svg)](https:\/\/www.npmjs.com\/package\/webcoin)\n\n----\n\nWebcoin is a Bitcoin client that works in Node.js and the browser. In the browser, it uses WebRTC to make P2P connections rather than relying on a centralized server to get data (like all the other JS Bitcoin libraries). It's kind of like the Bitcoin equivalent of [WebTorrent](https:\/\/github.com\/feross\/webtorrent).\n\nYou can use Webcoin to add Bitcoin payments to your application, without the need to hold your users' funds, and without making them trust any third-parties with their money. Webcoin is an [SPV](https:\/\/en.bitcoin.it\/wiki\/Thin_Client_Security#Simplified_Payment_Verification_.28SPV.29_Clients) light client, so it only uses a minimal amount of bandwidth and storage; it even works great on mobile devices!\n\n## Status\n\nMuch of Webcoin is already written and works well, including:\n\n- Downloading block headers from peers\n- Verifying block headers\n- Creating HD wallets\n- Filtering transactions with Bloom filters\n- Detecting incoming transactions confirmed in blocks\n\nI am currently making some major refactors to the codebase, and documenting all of it. Much of the code in this repo is being broken out into smaller modules, each with comprehensive tests and docs.\n\n### Modules\n\nWebcoin is made up of many small modules, most of which can each be used independently.\n\n| module | version | tests | issues | description |\n|---|---|---|---|---|\n| **[webcoin][webcoin]** | [![][webcoin-ni]][webcoin-nu] | [![][webcoin-ti]][webcoin-tu] | [![][webcoin-ii]][webcoin-iu] | **SPV Bitcoin client for Node and the browser (this module)** |\n| [peer-exchange][peer-exchange] | [![][peer-exchange-ni]][peer-exchange-nu] | [![][peer-exchange-ti]][peer-exchange-tu] | [![][peer-exchange-ii]][peer-exchange-iu] | Decentralized p2p signalling and discovery |\n| [blockchain-spv][blockchain-spv] | [![][blockchain-spv-ni]][blockchain-spv-nu] | [![][blockchain-spv-ti]][blockchain-spv-tu] | [![][blockchain-spv-ii]][blockchain-spv-iu] | Stores blockchain headers and verifies with SPV |\n| [blockchain-download][blockchain-download] | [![][blockchain-download-ni]][blockchain-download-nu] | [![][blockchain-download-ti]][blockchain-download-tu] | [![][blockchain-download-ii]][blockchain-download-iu] | Download blockchain data from peers |\n| [bitcoin-wallet][bitcoin-wallet] | [![][bitcoin-wallet-ni]][bitcoin-wallet-nu] | [![][bitcoin-protocol-ti]][bitcoin-protocol-tu] | [![][bitcoin-wallet-ii]][bitcoin-wallet-iu] | Sends and receives coins\n| [bitcoin-protocol][bitcoin-protocol] | [![][bitcoin-protocol-ni]][bitcoin-protocol-nu] | [![][bitcoin-protocol-ti]][bitcoin-protocol-tu] | [![][bitcoin-protocol-ii]][bitcoin-protocol-iu] | Bitcoin network protocol streams |\n| [bitcoin-inventory][bitcoin-inventory] | [![][bitcoin-inventory-ni]][bitcoin-inventory-nu] | [![][bitcoin-inventory-ti]][bitcoin-inventory-tu] | [![][bitcoin-inventory-ii]][bitcoin-inventory-iu] | Exchange transactions with peers |\n| [bitcoin-util][bitcoin-util] | [![][bitcoin-util-ni]][bitcoin-util-nu] | [![][bitcoin-util-ti]][bitcoin-util-tu] | [![][bitcoin-util-ii]][bitcoin-util-iu] | Utility functions for Bitcoin hashes and targets |\n| [bitcoin-merkle-proof][bitcoin-merkle-proof] | [![][bitcoin-merkle-proof-ni]][bitcoin-merkle-proof-nu] | [![][bitcoin-merkle-proof-ti]][bitcoin-merkle-proof-tu] | [![][bitcoin-merkle-proof-ii]][bitcoin-merkle-proof-iu] | Verify bitcoin Merkle proofs |\n| [bitcoin-filter][bitcoin-filter] | [![][bitcoin-filter-ni]][bitcoin-filter-nu] | [![][bitcoin-filter-ti]][bitcoin-filter-tu] | [![][bitcoin-filter-ii]][bitcoin-filter-iu] | Bloom filtering (BIP37) |\n| [webcoin-bridge][webcoin-bridge] | [![][webcoin-bridge-ni]][webcoin-bridge-nu] | [![][webcoin-bridge-ti]][webcoin-bridge-tu] | [![][webcoin-bridge-ii]][webcoin-bridge-iu] | A proxy that bridges the Bitcoin TCP and WebRTC networks |\n| [webcoin-params][webcoin-params] | [![][webcoin-params-ni]][webcoin-params-nu] | [![][webcoin-params-ti]][webcoin-params-tu] | [![][webcoin-params-ii]][webcoin-params-iu] | Abstract parameters, used for supporting other cryptocurrencies |\n| [webcoin-param-tests][webcoin-param-tests] | [![][webcoin-param-tests-ni]][webcoin-param-tests-nu] | [![][webcoin-param-tests-ti]][webcoin-param-tests-tu] | [![][webcoin-param-tests-ii]][webcoin-param-tests-iu] | Tests for parameters |\n| [electron-webrtc][electron-webrtc] | [![][electron-webrtc-ni]][electron-webrtc-nu] | [![][electron-webrtc-ti]][electron-webrtc-tu] | [![][electron-webrtc-ii]][electron-webrtc-iu] | WebRTC for Node via a hidden Electron process |\n\n[webcoin]: https:\/\/github.com\/mappum\/webcoin\n[webcoin-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin.svg\n[webcoin-nu]: https:\/\/www.npmjs.com\/package\/webcoin\n[webcoin-ti]:https:\/\/travis-ci.org\/mappum\/webcoin.svg?branch=master\n[webcoin-tu]: https:\/\/travis-ci.org\/mappum\/webcoin\n[webcoin-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin.svg\n[webcoin-iu]: https:\/\/github.com\/mappum\/webcoin\/issues\n\n[peer-exchange]: https:\/\/github.com\/mappum\/peer-exchange\n[peer-exchange-ni]: https:\/\/img.shields.io\/npm\/v\/peer-exchange.svg\n[peer-exchange-nu]: https:\/\/www.npmjs.com\/package\/peer-exchange\n[peer-exchange-ti]:https:\/\/travis-ci.org\/mappum\/peer-exchange.svg?branch=master\n[peer-exchange-tu]: https:\/\/travis-ci.org\/mappum\/peer-exchange\n[peer-exchange-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/peer-exchange.svg\n[peer-exchange-iu]: https:\/\/github.com\/mappum\/peer-exchange\/issues\n\n[blockchain-spv]: https:\/\/github.com\/mappum\/blockchain-spv\n[blockchain-spv-ni]: https:\/\/img.shields.io\/npm\/v\/blockchain-spv.svg\n[blockchain-spv-nu]: https:\/\/www.npmjs.com\/package\/blockchain-spv\n[blockchain-spv-ti]:https:\/\/travis-ci.org\/mappum\/blockchain-spv.svg?branch=master\n[blockchain-spv-tu]: https:\/\/travis-ci.org\/mappum\/blockchain-spv\n[blockchain-spv-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/blockchain-spv.svg\n[blockchain-spv-iu]: https:\/\/github.com\/mappum\/blockchain-spv\/issues\n\n[blockchain-download]: https:\/\/github.com\/mappum\/blockchain-download\n[blockchain-download-ni]: https:\/\/img.shields.io\/npm\/v\/blockchain-download.svg\n[blockchain-download-nu]: https:\/\/www.npmjs.com\/package\/blockchain-download\n[blockchain-download-ti]:https:\/\/travis-ci.org\/mappum\/blockchain-download.svg?branch=master\n[blockchain-download-tu]: https:\/\/travis-ci.org\/mappum\/blockchain-download\n[blockchain-download-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/blockchain-download.svg\n[blockchain-download-iu]: https:\/\/github.com\/mappum\/blockchain-download\/issues\n\n[bitcoin-inventory]: https:\/\/github.com\/mappum\/bitcoin-inventory\n[bitcoin-inventory-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-inventory.svg\n[bitcoin-inventory-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-inventory\n[bitcoin-inventory-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-inventory.svg?branch=master\n[bitcoin-inventory-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-inventory\n[bitcoin-inventory-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-inventory.svg\n[bitcoin-inventory-iu]: https:\/\/github.com\/mappum\/bitcoin-inventory\/issues\n\n[bitcoin-util]: https:\/\/github.com\/mappum\/bitcoin-util\n[bitcoin-util-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-util.svg\n[bitcoin-util-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-util\n[bitcoin-util-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-util.svg?branch=master\n[bitcoin-util-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-util\n[bitcoin-util-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-util.svg\n[bitcoin-util-iu]: https:\/\/github.com\/mappum\/bitcoin-util\/issues\n\n[bitcoin-merkle-proof]: https:\/\/github.com\/mappum\/bitcoin-merkle-proof\n[bitcoin-merkle-proof-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-merkle-proof.svg\n[bitcoin-merkle-proof-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-merkle-proof\n[bitcoin-merkle-proof-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-merkle-proof.svg?branch=master\n[bitcoin-merkle-proof-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-merkle-proof\n[bitcoin-merkle-proof-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-merkle-proof.svg\n[bitcoin-merkle-proof-iu]: https:\/\/github.com\/mappum\/bitcoin-merkle-proof\/issues\n\n[bitcoin-filter]: https:\/\/github.com\/mappum\/bitcoin-filter\n[bitcoin-filter-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-filter.svg\n[bitcoin-filter-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-filter\n[bitcoin-filter-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-filter.svg?branch=master\n[bitcoin-filter-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-filter\n[bitcoin-filter-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-filter.svg\n[bitcoin-filter-iu]: https:\/\/github.com\/mappum\/bitcoin-filter\/issues\n\n[bitcoin-wallet]: https:\/\/github.com\/mappum\/bitcoin-wallet\n[bitcoin-wallet-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-wallet.svg\n[bitcoin-wallet-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-wallet\n[bitcoin-wallet-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-wallet.svg?branch=master\n[bitcoin-wallet-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-wallet\n[bitcoin-wallet-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-wallet.svg\n[bitcoin-wallet-iu]: https:\/\/github.com\/mappum\/bitcoin-wallet\/issues\n\n[bitcoin-net]: https:\/\/github.com\/mappum\/bitcoin-net\n[bitcoin-net-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-net.svg\n[bitcoin-net-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-net\n[bitcoin-net-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-net.svg?branch=master\n[bitcoin-net-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-net\n[bitcoin-net-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-net.svg\n[bitcoin-net-iu]: https:\/\/github.com\/mappum\/bitcoin-net\/issues\n\n[bitcoin-protocol]: https:\/\/github.com\/mappum\/bitcoin-protocol\n[bitcoin-protocol-ni]: https:\/\/img.shields.io\/npm\/v\/bitcoin-protocol.svg\n[bitcoin-protocol-nu]: https:\/\/www.npmjs.com\/package\/bitcoin-protocol\n[bitcoin-protocol-ti]: https:\/\/travis-ci.org\/mappum\/bitcoin-protocol.svg?branch=master\n[bitcoin-protocol-tu]: https:\/\/travis-ci.org\/mappum\/bitcoin-protocol\n[bitcoin-protocol-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/bitcoin-protocol.svg\n[bitcoin-protocol-iu]: https:\/\/github.com\/mappum\/bitcoin-protocol\/issues\n\n[webcoin-bridge]: https:\/\/github.com\/mappum\/webcoin-bridge\n[webcoin-bridge-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-bridge.svg\n[webcoin-bridge-nu]: https:\/\/www.npmjs.com\/package\/webcoin-bridge\n[webcoin-bridge-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-bridge.svg?branch=master\n[webcoin-bridge-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-bridge\n[webcoin-bridge-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-bridge.svg\n[webcoin-bridge-iu]: https:\/\/github.com\/mappum\/webcoin-bridge\/issues\n\n[webcoin-params]: https:\/\/github.com\/mappum\/webcoin-params\n[webcoin-params-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-params.svg\n[webcoin-params-nu]: https:\/\/www.npmjs.com\/package\/webcoin-params\n[webcoin-params-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-params.svg?branch=master\n[webcoin-params-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-params\n[webcoin-params-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-params.svg\n[webcoin-params-iu]: https:\/\/github.com\/mappum\/webcoin-params\/issues\n\n[webcoin-param-tests]: https:\/\/github.com\/mappum\/webcoin-param-tests\n[webcoin-param-tests-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-param-tests.svg\n[webcoin-param-tests-nu]: https:\/\/www.npmjs.com\/package\/webcoin-param-tests\n[webcoin-param-tests-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-param-tests.svg?branch=master\n[webcoin-param-tests-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-param-tests\n[webcoin-param-tests-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-param-tests.svg\n[webcoin-param-tests-iu]: https:\/\/github.com\/mappum\/webcoin-param-tests\/issues\n\n[electron-webrtc]: https:\/\/github.com\/mappum\/electron-webrtc\n[electron-webrtc-ni]: https:\/\/img.shields.io\/npm\/v\/electron-webrtc.svg\n[electron-webrtc-nu]: https:\/\/www.npmjs.com\/package\/electron-webrtc\n[electron-webrtc-ti]: https:\/\/travis-ci.org\/mappum\/electron-webrtc.svg?branch=master\n[electron-webrtc-tu]: https:\/\/travis-ci.org\/mappum\/electron-webrtc\n[electron-webrtc-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/electron-webrtc.svg\n[electron-webrtc-iu]: https:\/\/github.com\/mappum\/electron-webrtc\/issues\n\n#### Parameters\n\nWebcoin was built from the ground-up with multiple cryptocurrencies in mind. The following modules are parameters which can be plugged in to Webcoin in order to support other currency networks.\n\n| network | module | version | tests |\n|---|---|---|---|\n| Bitcoin | [webcoin-bitcoin][webcoin-bitcoin] | [![][webcoin-bitcoin-ni]][webcoin-bitcoin-nu] | [![][webcoin-bitcoin-ti]][webcoin-bitcoin-tu] |\n| Bitcoin Testnet | [webcoin-bitcoin-testnet][webcoin-bitcoin-testnet] | [![][webcoin-bitcoin-testnet-ni]][webcoin-bitcoin-testnet-nu] | [![][webcoin-bitcoin-testnet-ti]][webcoin-bitcoin-testnet-tu] |\n| Litecoin | [webcoin-litecoin][webcoin-litecoin] (UNFINISHED) | [![][webcoin-litecoin-ni]][webcoin-litecoin-nu] | [![][webcoin-litecoin-ti]][webcoin-litecoin-tu] |\n| Zcash Alpha | [webcoin-zcash-alpha][webcoin-zcash-alpha] (UNFINISHED) | [![][webcoin-zcash-alpha-ni]][webcoin-zcash-alpha-nu] | [![][webcoin-zcash-alpha-ti]][webcoin-zcash-alpha-tu] |\n\n\n[webcoin-bitcoin]: https:\/\/github.com\/mappum\/webcoin-bitcoin\n[webcoin-bitcoin-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-bitcoin.svg\n[webcoin-bitcoin-nu]: https:\/\/www.npmjs.com\/package\/webcoin-bitcoin\n[webcoin-bitcoin-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-bitcoin.svg?branch=master\n[webcoin-bitcoin-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-bitcoin\n[webcoin-bitcoin-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-bitcoin.svg\n[webcoin-bitcoin-iu]: https:\/\/github.com\/mappum\/webcoin-bitcoin\/issues\n\n[webcoin-bitcoin-testnet]: https:\/\/github.com\/mappum\/webcoin-bitcoin-testnet\n[webcoin-bitcoin-testnet-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-bitcoin-testnet.svg\n[webcoin-bitcoin-testnet-nu]: https:\/\/www.npmjs.com\/package\/webcoin-bitcoin-testnet\n[webcoin-bitcoin-testnet-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-bitcoin-testnet.svg?branch=master\n[webcoin-bitcoin-testnet-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-bitcoin-test\n[webcoin-bitcoin-test-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-bitcoin-test.svg\n[webcoin-bitcoin-test-iu]: https:\/\/github.com\/mappum\/webcoin-bitcoin-test\/issues\n\n[webcoin-litecoin]: https:\/\/github.com\/mappum\/webcoin-litecoin\n[webcoin-litecoin-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-litecoin.svg\n[webcoin-litecoin-nu]: https:\/\/www.npmjs.com\/package\/webcoin-litecoin\n[webcoin-litecoin-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-litecoin.svg?branch=master\n[webcoin-litecoin-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-litecoin\n[webcoin-litecoin-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-litecoin.svg\n[webcoin-litecoin-iu]: https:\/\/github.com\/mappum\/webcoin-litecoin\/issues\n\n[webcoin-zcash-alpha]: https:\/\/github.com\/mappum\/webcoin-zcash-alpha\n[webcoin-zcash-alpha-ni]: https:\/\/img.shields.io\/npm\/v\/webcoin-zcash-alpha.svg\n[webcoin-zcash-alpha-nu]: https:\/\/www.npmjs.com\/package\/webcoin-zcash-alpha\n[webcoin-zcash-alpha-ti]: https:\/\/travis-ci.org\/mappum\/webcoin-zcash-alpha.svg?branch=master\n[webcoin-zcash-alpha-tu]: https:\/\/travis-ci.org\/mappum\/webcoin-zcash-alpha\n[webcoin-zcash-alpha-ii]: https:\/\/img.shields.io\/github\/issues-raw\/mappum\/webcoin-zcash-alpha.svg\n[webcoin-zcash-alpha-iu]: https:\/\/github.com\/mappum\/webcoin-zcash-alpha\/issues\n\n## License (MIT)\n\nCopyright 2015 Matt Bell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","41":"# BitcoinUtxoVisualizer\n\nBitcoinUtxoVisualizer (short `buv`) can generated videos of the evolution of the evolution of Bitcoin's [UTXO (Unspent Transaction Outputs)](https:\/\/medium.com\/bitbees\/what-the-heck-is-utxo-ca68f2651819).\n\nWatch the video on Youtube:\n\n<!--\nHow to create this gif from the video:\n\nffmpeg -ss 02:50:00 -i Bitcoin\\ UTXO\\ evolution\\ -\\ Block\\ 0\\ to\\ 661045.mp4 -c copy out.mp4\nffmpeg -i out.mp4 -frames:v 20 -vf \"fps=10,scale=838:-1:flags=lanczos\" -c:v pam -f image2pipe - |convert -delay 10 - -loop 0 -layers optimize output.gif\n\n# compress more, see https:\/\/stackoverflow.com\/a\/47343340\/48181\nmogrify -layers 'optimize' -fuzz 7% output.gif\n-->\n[![Bitcoin UTXO Creation & Destruction - Block 0 to 661045](doc\/animation_small.gif)](https:\/\/www.youtube.com\/watch?v=18m0bKsVb0Y)\n\n# Installation\n\n**WARNING**: Generating such video is a time & resource intensive task, as Bitcoin's database is continuously growing.\n\nThis currently only works in Linux. Prerequisites are a C++ compiler `g++` (>= v9) (or, my prefered choice, `clang++`), CMake (>= 3.13), and OpenCV (`libopencv-dev`).\n\n\n1. fetch\n   ```\n   git clone --recurse-submodules https:\/\/github.com\/martinus\/BitcoinUtxoVisualizer.git\n   ```\n1. compile\n   ```\n   mkdir BitcoinUtxoVisualizer\/build\n   cd BitcoinUtxoVisualizer\/build\n   cmake -DCMAKE_BUILD_TYPE=Release ..\n   make -j12\n   ```\n1. Run all tests, should print `SUCCESS!`\n   ```\n   .\/buv\n    ```\n\n\n# How To Generate a UTXO Movie\n\nThis is a 3 step process:\n\n## 1. Bitcoin Core\n\n1. Have a fully synced [Bitcoin Core](https:\/\/bitcoin.org\/en\/bitcoin-core\/) node running locally.\n1. Make sure to enable transaction index by adding `txindex=1` to `bitcoin.conf`.\n1. `buv` makes heavy use of Bitcoin Core's JSON RPC, so you need to enable this as well. Also, make sure the\n   RPCs have enough threads for processing. To sum this up, I have these settings in my `bitcoin.conf` file:\n   ```\n   server=1\n   rest=1\n   rpcport=8332\n   rpcthreads=12\n   rpcworkqueue=24\n   txindex=1\n   dbcache=2000\n\n   # generate username & password with 'bitcoin\/share\/rpcauth.py <username> -'\n   rpcauth=martinus:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n   ```\n\n## 2. Preprocess UTXO Data\n\nOnce Bitcoin Core is fully synced and RPC is enabled, you can preprocess the UTXO database. This fetches all blocks with full transaction data from bitcoin core, extracts UTXO data, and writes a compact data file. First, configure by editing `buv.json`. For this step, you only need to update `bitcoinRpcUrl` and the output `blkFile`:\n\n```\n\"bitcoinRpcUrl\": \"http:\/\/127.0.0.1:8332\",\n\"blkFile\": \"\/run\/media\/martinus\/big\/bitcoin\/BitcoinUtxoVisualizer\/changes.blk1\",\n```\n\nThe output `blkFile` will be ~7.5GB large (as of Block 660,000). It contains block information & all satoshi amounts that were added or removed for each block. The format is tuned to be very compact and very fast to parse.\n\n```\n.\/buv -ns -tc=utxo_to_change -cfg=..\/buv.json\n```\n\nOn my computer this takes about 1 1\/2 hours, saturates 12 cores, and takes ~6.5GB of RAM. I have spent a long time to speed this up, initially this took 4 days and >30GB of RAM.\n\n\n## 3. Generate UTXO Video\n\nAfter generating the `blkFile`, this file can be converted into an image stream that is directly piped into `ffmpeg` to generates a video. Preview is possible with `ffplay`.\n\nThe configuration file `buv.json` has several options to configure the output.\n\n### Generate Preview\n\nTo watch a preview, I usually update `buv.json` to start at a reasonably late block:\n```\n\"startShowAtBlockHeight\": 200000,\n```\n\n1. In one window, start `ffplay`:\n   ```\n   ffplay -f rawvideo -pixel_format rgb24 -video_size 3840x2160 -framerate 60 -i \"tcp:\/\/127.0.0.1:12987?listen\"\n   ```\n\n1. In another window, start `buv` to connect to `ffplay` and pipe its output into it.\n   ```\n   .\/buv -ns -tc=visualizer -cfg=..\/buv.json\n   ```\n   Once `buv` has processed up to block 200000 ffplay will pop up and show a life preview.\n\nIf you are happy with what you see, instead of `ffplay` use `ffmpeg` and start `buv` again:\n\n```\nffmpeg -f rawvideo -pixel_format rgb24 -video_size 3840x2160 -framerate 60 -i \"tcp:\/\/127.0.0.1:12987?listen\" -c:v libx264 -profile:v high -bf 2 -g 30 -preset slower -crf 24 -pix_fmt yuv420p -movflags faststart out.mp4\n```\n\nFor 660000 this will create a ~3 hour 4K x 60Hz video, where each frame represents a single block. The video is about 21GB large.\n\nHere is the final image of that video. Click for high resolution 4k image:\n\n[![Bitcoin UTXO still image](doc\/img_0661045_small.jpg)](https:\/\/raw.githubusercontent.com\/martinus\/BitcoinUtxoVisualizer\/master\/doc\/img_0661045_compressed.png)\n\n","42":"# HiddenBitcoin\nA privacy orineted Bitcoin wallet library in C\\#.  \nAn other abstraction layer on top NBitcoin.\n\n## This repository is discontinued. Take a look at its successor: [HBitcoin](https:\/\/github.com\/nopara73\/HBitcoin)\n","43":"Ufasoft Multi-currency Bitcoin Client and Miner\n\nWeb:\n  http:\/\/ufasoft.com\/coin\n\nForums:\n\thttp:\/\/forum.ufasoft.com\/forum\/index.php?board=6.0\n\thttps:\/\/bitcointalk.org\/index.php?topic=3486.0\n\thttps:\/\/bitcointalk.org\/index.php?topic=58821.0\n\n\n\nMiner Manual\n=======================\n\ncoin-miner {-options}\n  Options:\n    -a scrypt|sha256|prime|<seconds>   hashing algorithm (scrypt, prime or sha256), or time between getwork requests 1..60, default 15\n    -A user-agent       Set custom User-agent string in HTTP header, default: Ufasoft bitcoin miner\n    -g yes|no           set 'no' to disable GPU, default 'yes'\n    -h                  this help\n    -i index|name       select device from Device List, can be used multiple times, default - all devices\n    -I intensity        Intensity of GPU usage [-10..10], default 0\n    -l yes|no           set \\'no\\' to disable Long-Polling, default \\'yes\\'\\n\"\n    -o url              in form (http | stratum+tcp | xpt+tcp):\/\/username:password@server.tld:port\/path, by default http:\/\/127.0.0.1:8332\n    -t threads          Number of threads for CPU mining, 0..256, by default is number of CPUs (Cores), 0 - disable CPU mining\n    -T temperature      max temperature in Celsius degrees, default: 80\n    -v                  Verbose output\n    -x type=host:port   Use HTTP or SOCKS proxy. Examples: -x http=127.0.0.1:3128, -x socks=127.0.0.1:1080\n\n\n\n\nWindows build\nInstruction for Visual Studio 2017..2019\n===========================================\n1. Download 3rd-party Libraries:\n\n\tOpenSSL\t\t\thttp:\/\/www.openssl.org\/source\/openssl-1.0.1e.tar.gz\n\tMPIR\t\t\thttp:\/\/www.mpir.org\/mpir-2.6.0.tar.bz2\n\tSQLite\t\t\thttp:\/\/sqlite.org\/sqlite-amalgamation-3071502.zip\n\tJansson\t\t\thttp:\/\/www.digip.org\/jansson\/releases\/jansson-2.4.tar.bz2\n\n\tCreate .vcxproj files for them and build these LIBs\n\n\tFor GPU support you need:\n\t\tAMD APP SDK\t\t\t\t\t\t\t\t\thttp:\/\/developer.amd.com\/tools-and-sdks\/heterogeneous-computing\/amd-accelerated-parallel-processing-app-sdk\/downloads\/\n\t\tAMD Display Library (ADL) SDK\t\t\t\thttp:\/\/developer.amd.com\/tools-and-sdks\/graphics-development\/display-library-adl-sdk\/\n\t\tCUDA SDK for NVidia cards\t\t\t\t\thttps:\/\/developer.nvidia.com\/cuda-downloads\n\n2.\tAdd directories with OpenSSL, SQLite header files to the coineng.vcxproj's  INCLUDE list.\n3.\tAdd direcories with built .lib files to the coineng.vcxproj's linker settings\n4.\tBuild coineng.vcxproj. It results to coineng.exe and coineng.tlb files.\n5.\tcoineng.tlb is required to build WPF UI coin.exe.\n\n\nTo run the entire application all .exe\/.dll files of used libs should be in the same directory.\n\n\n\n\n========================\nThis software is free.\nBitcoin address for donations: 18X598V8rVdjy3Yg1cjZmnnv4SpPthuBeT\nDonating will help to improve this project.\n","44":"![Bitcoin Forbes](.\/images\/forbes_bitcoin.jpg)\n\n\n# Bitcoin Realized Volatility Forecasting with GARCH and Multivariate LSTM\n\nAuthor: **Chi Bui**\n\n## This Repository\n\n### Repository Directory\n```\n\u251c\u2500\u2500 README.md                    <-- Main README file explaining the project's business case,\n\u2502                                    methodology, and findings\n\u2502\n\u251c\u2500\u2500 Notebooks                    <-- Jupyter Notebooks for exploration and presentation\n\u2502   \u2514\u2500\u2500 Exploratory              <-- Unpolished exploratory data analysis (EDA) and modeling notebooks\n\u2502   \u2514\u2500\u2500 Reports                  <-- Polished final notebooks\n\u2502       \u2514\u2500\u2500 report-notebook    \n\u2502 \n\u2502\n\u251c\u2500\u2500 performance_df               <-- records of all models' performance metrics & propability predictions \n\u2502                                    on validation set\n\u2502\n\u251c\u2500\u2500 Report                       <-- Generated analysis\n\u2502   \u2514\u2500\u2500 presentation.pdf         <-- Non-technical presentation slides\n\u2502 \n\u2502\n\u2514\u2500\u2500 images                       <-- Generated graphics and figures to be used in reporting\n```\n\n### Quick Links\n1. [Final Analysis Notebook](.\/Notebooks\/Reports\/report_notebook.ipynb)\n1. [Non-Technical Presentation Slides](.\/Report\/presentation.pdf)\n\n### Remarks\n\nThe second part of the notebook utilizes LSTM, which uses an optimized implementation when running on a GPU. It's therefore highly recommended to run the notebooks on [Google Colab](https:\/\/colab.research.google.com\/notebooks\/intro.ipynb#recent=true).\n\n\n## Overview\n\nSince Bitcoin's first appearance in 2009, it has changed the world's financial landscape substantially. The decentralized cryptocurrency has established itself as an asset class recognized by many asset managers, large investment banks and hedge funds. As the speed of mainstream adoption continues to soar, it is also leading investors to explore new ventures, such as crypto options and futures.\n\nBitcoin has been historically known to be more volatile than regulated stocks and commodities. Its most recent surge in late December 2020, early January 2021 has brought about a lot of questions and uncertainties about the future financial landscape. At the point of writing this report (end of August 2021), Bitcoin is traded at slightly below USD 50,000, which is no small feat considering it entered 2020 at around USD 7,200. \n\nThe purpose of this project is to take a sneak peek into the future by **forecasting the next 7 days' average daily Realized Volatility (RV) of BTC-USD** using 2 different approaches - the traditional econometric approach to volatility prediction of financial time series **GARCH** and state-of-the-art **LSTM Neural Networks**.\n\n\n## Business Problem\n\nVolatility attempts to measure magnitude of price movements that a financial instrument experiences over a certain period of time. The more dramatic the price swings are in that instrument, the higher the level of volatility, and vice versa.\n\nVolatility is generally accepted as the best measure of market risk and volatility forecasting is used in many different applications across the industry. **Realized Volatility Forecasting** models are typically utilized in risk management, market making, portfolio optimization, and option trading. Specifically, according to Sinclair (2020), a number of trading strategies revolve around identifying situations where this volatility mismatch occurs:\n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=P\/L = Vega|\\sigma_{implied} - \\sigma_{realized}|\">\n\nin which Vega is the measurement of an option's price sensitivity to changes in the volatility of the underlying asset, and <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\sigma\"> is volatility.\nAs Implied Volatility (IV) could be derived from Option Prices using models such as the Black Scholes Model, forecasting Realized Volatility would give us the key to the second part of the equation.\n\nAlthough the forecasting and modeling of volatility has been the focus of many empirical studies and theoretical investigations in academia, forecasting volatility accurately remains a crucial challenge for scholars. On top of that, since crypto option trading is relatively new, there has not been as much research done on this Bitcoin volatility forecasting. In addition, crytocurrencies carry certain nuances that differ themselves from traditional regulated stocks and commodities, which would also need to be accounted for.\n\n\n## Dataset\n\nThe historical dataset of Bitcoin Open\/Close\/High\/Low prices were obtained using the Yahoo Finance API **`yfinance`**. This API is free, very easy to set up, but yet still contains a wide range of data and offerings. \n\nI will be downloading BTC-USD prices using ticker `BTC-USD` at 1-day interval. Yahoo did not add Bitcoin until 2014; and therefore although it was first traded in 2009, **`yfinance`** only contains data from September 2014 until now (August 2021). I would therefore be working with approx. 2,500 datapoints covering about 7 years of trading days.\n\n\n### Dataset Structure\n\nThe dataset contains daily prices of BTC-USD including:\n- `Open`\n- `High`\n- `Low`\n- `Close`\n\nThe objective of this project is to forecast the average daily **Realized Volatility** of BTC-USD 7 days out, using an Interval Window of 30 days. \n\n![Bitcoin Closing Prices](.\/images\/close.png)\n\n\n\n## Volatility Measuring \n\nVolatility does **not** measure the direction of price changes of a financial instrument, merely its dispersions over a certain period of time. High volatility is associated with higher risk, and low volatility lower risk. There're 2 main types of Volatility:\n\n- **Historical Volatility** or **Realized Volatility** (RV) is the actual volatility demonstrated by the underlying asset over a period of time. Realized Volatility is commonly calculated as the standard deviation of price returns, which is the dollar change in price as a percentage of previous day's price.\n- **Implied volatility** (IV), on the other hand, is the level of volatility of the underlying that is implied by the current option price.\n\n(The main focus of this project is **NOT Implied Volatility**, which can be derived from option pricing models such as the Black Scholes Model). \n\nTraditionally, Realized Volatility is defined as the **Standard Deviation of Daily Returns over a period of time**. Mathematically, **Daily Returns** can be represented as:\n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=R_{t, t%2Bi} = P_{t%2Bi} \/ P_{t} * 100\">\n\nHowever, for practicality purposes, it's generally preferable to use the **Log Returns**, especially in mathematic modeling, because it helps eliminate non-stationary properties of time series data, and makes it more stable:\n\n**Log Returns** Formula:\n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=r_{t, t%2Bi} = log(P_{t%2Bi} \/ P_{t})\">\n\n(In both formulas, <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=P_{t}\"> represents the price at time step <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=t\">)\n\nThere's another advantage to log returns, which is that they're additive across time: \n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=r_{t1, t2} %2B r_{t2, t3} = r_{t1, t3}\">\n\n![Returns vs. Log Returns](.\/images\/returns_logreturns.png)\n\nFor this specific project, **DAILY REALIZED VOLATILITY** is calculated using an **interval window** of **30 days** as follows:\n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\sigma_{daily} = \\sqrt{\\sum_{t} r_{t-1, t}^2} * \\sqrt{\\frac{1}{interval-1}}\">\n\nThe reason I selected 30 days is because 7 days seems too noisy to observe meaningful patterns, while longer intervals seem to smooth the volatility down significantly and tend to revert back to the mean.\n\nUsing interval window of 30 days would also help avoid wasting too many datapoints at the beginning of the dataset.\n\n![Different Intervals Plot](.\/images\/diff_intervals.png)\n\nTime-series forecasting models are the models that are capable to predict **future** values based on previously observed values. Target \"**future**\" data in this case is obtained by **shifting the current volatility backward** by the number of `n_future` lags. \n\nFor example, respected to last week's Monday, this week's Monday is the \"**future**\"; therefore I just need to shift the volatility this week back by 7 days, and use it as the desired \"**future**\" output for last week's, which I would then use for Neural Networks training and model performance evaluation. \n\nThis is a visualization of how current volatility is shifted backward to become future values, which I want to eventually aim for.\n\n![Shifting Volatility backwards](.\/images\/vol_shift_opt.gif)\n\nIn the plot above, the **blue line** indicates the **target future** value that I ultimately try to match up to. \nAnd the dotted **gray line** represents the **current volatility** at that time step. \n\n### Forecasting Target\n\nThe target here would be `vol_future` which represents the daily realized volatility of the next `n_future` days from today (average daily volatility from `t + n_future - INTERVAL_WINDOW + 1` to time step `t + n_future`). \n\nFor example, using an `n_future` value of 7 and an `INTERVAL_WINDOW` of 30, the value that I want to predict at time step `t` would be the average daily realized volatility from time step `t-22` to time step `t+7`.\n\n\n## Exploratory Data Analysis\n\n### Daily Volatility Grouped by Month\n\n![Daily Volatility Grouped by Month](.\/images\/vol_by_month.png)\n\nIt can be observed that:\n- volatility has consistently reached some of its higher points in the in the months of December\/January historically \n- March and April have the most amount of large outliers \n- while August and September (which are the upcoming months of the final testing forecast) historically has been relatively quiet\n\n### Daily Volatility Grouped by Year\n\nCryptocurrencies have gone through some huge structural changes in the last few years that would've affected volatility directly, such as:\n- Crypto Options became available on Deribit in 2016\n- Bitcoin Futures was offered on CME in 2017\n- and then CME Bitcoin Options in 2020\n\nThese events have allowed people to trade crypto volatility more efficiently, and therefore data pre-2016 are likely structurally different, and probably followed different patterns compared to data after 2016.\n\n![Daily Volatility Grouped by Year](.\/images\/vol_by_year.png)\n\nThese events are reflected in the plot above - Bitcoin's first record peak in 2017 (around USD 19,800 towards the end of December). And the outliers in 2020 corresponded with its over 200% surge in 2020 (Bitcoin started at USD 7,200 at the beginning of 2020). It reached USD 20,000 on most exchanges on 12\/15\/2020, and then proceeded to hit USD 30,000 just 17 days later, which is no small feat. To put things in perspective, it took the Dow Jones close to 3 years to make the same move. And then, on 01\/07\/2021 it broke USD 40,000. As of the time this report is written, BTC-USD is traded at high USD 49,700.\n\nIt can be observed that 2021's daily volatiliy overall has also been on the higher side. \n\n### Volatility Distribution\n\n![Volatility Distribution](.\/images\/vol_dist.png)\n\nThe distribution of daily realized volatility is lightly right skewed, with a small number of larger values spreaded thinly on the right.\n\nA skewed right distribution would have smaller median compared to mean, and mode smaller than median (mode < median < mean).\n\n\n## **Train-Validation-Test Splits**\n\nThere're a total of 2500 usable datapoints in this dataset which covers a period of almost 7 years from October 2014 until today (end of August 2021). Since cryptocurrencies are not traded on a regulated exchange, the Bitcoin market is open 24\/7, 1 year covers a whole 365 trading days instead of 252 days a year like with other stocks and commodities.\n\nI would split the dataset into 3 parts as follows:\n- the most recent 30 usable datapoints would be used for **Final Model Testing - approx. 1.2%**\n- 1 full year (365 days) for **Validation and Model Tuning during training - approx. 14.7%**\n- and the remaining for **Training - approx. 84.1%**\n\n![Training Validation Test Split](.\/images\/train_val_test.png)\n\n\n# Modeling\n\n## Performance Metrics\n\nUsually with financial time series, if we just shift through the historic data trying different methods, parameters and timescales, it's almost certain to find to some strategy with in-sample profitability at some point. However the whole purpose of \"forecasting\" is to predict the future based on currently available information, and a model that performs best on training data might not be the best when it comes to out-of-sample generalization (or **overfitting**). Avoiding\/Minimizing overfitting is even more important in the constantly evolving financial markets where the stake is high.\n\nThe 2 main metrics I'd be using are **RMSPE (Root Mean Squared Percentage Error)** and **RMSE (Root Mean Square Errors)** with RMSPE prioritized. Timescaling plays a crucial role in the calculation of volatility due to the level of freedom in frequency\/interval window selection. Therefore, RMSPE would help capture degree of errors compared to desired target values better than other metrics. In addition, RMSPE would punish large errors more than regular MAPE (Mean Absolute Percentage Error). \n\nRMSE and RMSPE would be tracked across different models' performance on validation set forecasting to indicate their abilities to generalize on out-of-sample data. As both of these metrics indicate the level of Error, the goal is to gradually reduce their values through different model structures and iterations.\n\n\n## Baseline Models\n\nTwo different simple baseline models were created to compare later models against. These 2 simple models are based on 2 essential characteristics of volatility:\n- **Mean Baseline model**: volatility in the long term will probably **mean revert** (meaning it'd be close to whatever the historical long-term average has been)\n\n![Mean Baseline Preditions](.\/images\/baseline.jpg)\n\n- **Naive Random Walk Forecasting**: volatility tomorrow will be close to what it is today (**clustering**) \n\n![Naive Random Walk Predictions](.\/images\/naive.jpg)\n\n\n## GARCH Models\n\n(Reference: http:\/\/users.metu.edu.tr\/ozancan\/ARCHGARCHTutorial.html)\n\nGARCH stands for **Generalized Autoregressive Conditional Heteroskedasticity**, which is an extension of the ARCH model (Autoregressive Conditional Heteroskedasticity). \n\nGARCH includes lag variance terms with lag residual errors from a mean process, and is **the traditional econometric approach to volatility prediction of financial time series**.\n\nMathematically, GARCH can be represented as follows:\n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\sigma_{t}^2 = \\omega %2B \\sum_{i}^{q}\\alpha_{i}\\epsilon_{t-i}^2 %2B \\sum_{1}^{p}\\beta_{i}\\sigma_{t-i}^2\">\n\n\nin which <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\sigma_{t}^2\"> is variance at time step <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=t\"> and <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\epsilon_{t-i}^2\"> is the model residuals at time step <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=t-1\">\n\nGARCH(1,1) only contains first-order lagged terms and the mathematic equation for it is: \n\n<img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\sigma^2_t = \\omega %2B \\alpha\\epsilon^{2}_{(t-1)} %2B \\beta\\sigma^{2}_{(t-1)}\">\n\nwhere <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\alpha\">, <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\beta\"> and <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\omega\"> sum up to 1, and <img src=\"https:\/\/render.githubusercontent.com\/render\/math?math=\\omega\"> is the long term variance.\n\n(Reference: Sinclair (2020))\n\nGARCH is generally regarded as an insightful improvement on naively assuming future volatility will be like the past, but also considered widely overrated as predictor by some experts in the field of volatility. GARCH models capture the essential characteristics of volatility: clustering and mean-revert.\n\nAmong all variants of the GARCH family that I have created, **TARCH(1,2)** with **Bootstrap** forecasting method was able to achive lowest RMSPE and RMSE on the Validation Set.\n\n![TARCH 1,2 Predictions](.\/images\/best_tarch_preds.png)\n\n\n## Neural Networks\n\nWhile GARCH remains the gold standard for volatility prediction within traditional financial institutions, there has been an increasing numbers of professionals and researchers turning to Machine Learning, especially Neural Networks, to gain insights into the financial markets in recent years.\n\n### Univariate Bidirectional LSTM\n\n**Bidirectional LSTM** is an extension of the regular LSTM. Since all timesteps of the input sequence are already available, Bidirectional LSTM could train 2 instead of 1 LSTMs on the same input sequence:\n- 1st one on the inputs as-is\n- 2nd one on the reversed copy of the inputs\n\nThis could help provide additional context to the networks, and usually produces faster and fuller learning on the problem.\n\nAfter experimenting with various Neural Networks architectures, I found that a simple 2-layered Bidirectional LSTM model with 32 and 16 units outpeformed everything else, including the best GARCH model found. \n\n![Univariate 2 Layered Bidirectional LSTM Predictions](.\/images\/lstm_2.png)\n\n\n## Final Model\n\n### Multivariate LSTM\n\nFor financial data, using only 1-dimensional data is likely insufficient. That could be the reason why most of the above models failed to yield better result than Naive Forecasting. It doesn't matter how many neurons or hidden layers are used, or how complex the model's architectures are, inadequate data is not going to produce the best results. Therefore, I decided to create another set of LSTM models but multivariate (meaning they can process other features other than the volatility itself).\n\n### Feature Engineering\n\nThe Open\/High\/Low\/Close prices are usually very similar and highly correlated to each other. Therefore, instead of keeping all of them in the dataset, I would add 2 more features:\n- **High-Low Spread** - which is the logarithm of the difference between the Highest and Lowest prices intraday as a percentage of the Closing price\n- **Open-Close Spread** - which is the difference between the Close and Open prices intraday as a percentage of the Closing price\n\n- and then take the logarithm of the Volume column\n\nand eliminate the three `Close`, `Open`, `High`, `Low` columns.\n\nThe predict here would be to predict next 7 days' volatility (`vol_future`) column using 4 below variables of the last `n_past` days:\n1. `HL_sprd`\n2. `CO_sprd`\n3. `Volume`\n4. `vol_current`\n\n**Reshaping the inputs** is literally the meat of Multivariate LSTM. Inputs for LSTM should have the following shape:\n\n**`[batch_size, n_past, input_dims]`**\n\nin which:\n\n- **`batch_size`** is the number of datapoints in each batch\n- **`n_past`** is the number of past time steps to be used for prediction \n- **`input_dims`** is the number of input features (which is 4 in this case)  \n\n\n### Final Model Architecture\n\nThe best performing Multivariate model is as simple 2-layered Bidirectional LSTMs with 32 and 16 units using a lookback window `n_past` of 30 days and `batch_size = 64`. In addition, there're 2 Dropout layers at 0.1 in following each hidden LSTM layers.\n\n![Final Multivariate LSTM predictions](.\/images\/final_lstm_preds.png)\n\nIt should be stressed that the model was trained on both the training and validation data this time. Therefore it'd naturally trace the target more closely up until the third week of July 2021 where the validation ends. \n\n\n# Conclusion\n\n|    | Model                                                                         |   Validation RMSPE |   Validation RMSE |\n|---:|:------------------------------------------------------------------------------|-------------------:|------------------:|\n| 12 | Multivariate Bidirect LSTM 2 layers (32\/16 units), n_past=30                  |           0.156677 |         0.0461386 |\n| 15 | Multivariate 2 Bidirect LSTM layers (32\/16 units), n_past=30, batch=32, tanh  |           0.163605 |         0.0507814 |\n| 13 | Multivariate Bidirect LSTM 3 layers (64\/32\/16 units), n_past=30               |           0.164623 |         0.0446602 |\n| 14 | Multivariate 4 Bidirect LSTM layers (128\/64\/32\/16 units), n_past=30, batch=64 |           0.167586 |         0.0503861 |\n|  6 | Bootstrap TARCH(1, 2, 0), Constant Mean, Skewt Dist                           |           0.200954 |         0.0668514 |\n|  9 | 2 layers Bidirect LSTM (32\/16 units), n_past=30                               |           0.202388 |         0.0578647 |\n|  4 | Bootstrap TARCH(1,1), Constant Mean, Skewt Dist                               |           0.209654 |         0.0698137 |\n|  5 | Simulation TARCH(1,1), Constant Mean, Skewt Dist                              |           0.215751 |         0.0732927 |\n|  8 | LSTM 1 layer 20 units, n_past=14                                              |           0.223199 |         0.0576027 |\n|  1 | Random Walk Naive Forecasting                                                 |           0.224657 |         0.0525334 |\n| 10 | 1 Conv1D 2 Bidirect LSTM layers (32\/16), n_past=30, batch=64                  |           0.230372 |         0.0621463 |\n|  7 | Simple LR Fully Connected NN, n_past=14                                       |           0.238177 |         0.0553356 |\n|  3 | Analytical GJR-GARCH(1,1,1), Constant Mean, Skewt Dist                        |           0.276679 |         0.0903115 |\n| 11 | 2 Bidirect LSTMs (32\/16), n_past=30, batch=64, SGD lr=6.9e-05                 |           0.399735 |         0.1655    |\n|  0 | Mean Baseline                                                                 |           0.50704  |         0.132201  |\n|  2 | GARCH(1,1), Constant Mean, Normal Dist                                        |           0.530965 |         0.185607  |\n\n\nIn terms of performance on the validation set (7\/23\/2020 to 7\/25\/2021), my final LSTM model has an RMSPE of 0.156677, which is roughly 4.42% better than the best performing variant of the GARCH models found - TARCH(1,2) with an RMSPE of 0.200954. Traders do not need to make perfectly accurate forecast to have a positive expectation when participating in the markets, he\/she just needs to make a forecast that is **both correct and more correct than the general consensus**. With GARCH still being the most popular volatility forecasting model, Multivariate LSTM could potentially give investors an advantage in terms of higher forecasting accuracy.\n\nThe final LSTM model has an RMSPE of 0.0534 on the Test set (which is the most recent 30 days of which future volatility data is available for comparison). Since RMSPE indicates the average magnitude of the error in relation to the actual values, an RMSPE of 0.0534 would translate to a magnitude accuracy of 94.65% on the average 7-day horizon daily volatility forecasting within the period of 07\/26\/2021 to 08\/24\/2021.  \n\nHowever, since financial time series data are constantly evolving, no model would be able to consistently forecast with high accuracy level forever. The average lifetime of a model is between 6 months to 5 years, and there's a phenomenon in quant trading that is called **alpha decay**, which is the loss in predictive power of an alpha model over time. In addition, according to Sinclair (2020), researchers have found that the publication of a new \"edge\" or anomaly in the markets lessens its returns by up to 58%.  \n\nThese models therfore require constant tweaking and tuning based on the most recent information available to make sure they stay up-to-date and learn to evolve with the markets. \n\n\n# **Next Steps**\n\nAs briefly mentioned above, I think there's potential application of WaveNet in the forecasting of volatility, and would like to explore that option in the future.\n\nIn addition, it's common knowledge that economic events could affect markets' dynamics. Since cryptocurrencies have cerain nuances that are different from other stocks and commodities', incorporating the regular economic calendars' events might not be the most relevant. I am currently still doing more research on collecting significant events that could have driven Bitcoin movements, and would like to incorporate that in another Multivariate LSTM set of models in the future to hopefully improve predictive power even more.\n\nEventually I want to experiment with higher frequencies (ie. intra-day), and also different bucketing intervals as well.\n\n\n# References:\n\n1. G\u00e9ron, A. (2019). *In Hands-on machine learning with Scikit-Learn & TensorFlow: concepts, tools, and techniques to build intelligent systems.* O'Reilly Media, Inc.\n\n2. Sinclair, E. (2020). *Positional option trading: An advanced guide.* John Wiley &amp; Sons. \n\n3. https:\/\/algotrading101.com\/learn\/yfinance-guide\/ \n\n4. https:\/\/www.coursera.org\/learn\/tensorflow-sequences-time-series-and-prediction\/supplement\/DM4fi\/convolutional-neural-networks-course\n\n5. https:\/\/insights.deribit.com\/options-course\/\n\n6. https:\/\/arch.readthedocs.io\/en\/latest\/univariate\/univariate_volatility_forecasting.html \n\n7. https:\/\/www.investopedia.com\/terms\/v\/vix.asp \n\n8. https:\/\/www.hindawi.com\/journals\/complexity\/2021\/6647534\/ \n\n9. https:\/\/github.com\/ritvikmath\/Time-Series-Analysis\/blob\/master\/GARCH%20Stock%20Modeling.ipynb\n\n10. https:\/\/github.com\/ritvikmath\/Time-Series-Analysis\/blob\/master\/GARCH%20Model.ipynb\n\n11. https:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction \n\n12. https:\/\/www.youtube.com\/watch?v=NKHQiN-08S8\n\n13. https:\/\/goldinlocks.github.io\/ARCH_GARCH-Volatility-Forecasting\/ \n\n14. https:\/\/towardsdatascience.com\/time-series-analysis-on-multivariate-data-in-tensorflow-2f0591088502 \n\n15. https:\/\/deepmind.com\/blog\/article\/wavenet-generative-model-raw-audio \n\n16. https:\/\/github.com\/philipperemy\/keras-tcn \n\n17. http:\/\/users.metu.edu.tr\/ozancan\/ARCHGARCHTutorial.html\n\n18. https:\/\/towardsdatascience.com\/8-commonly-used-pandas-display-options-you-should-know-a832365efa95\n\n\n\n\n\n\n\n\n\n\n\n\n\n","45":"","46":"keyhunter\n=========\n\nA tool to recover lost bitcoin private keys from dead harddrives.\n\nchmod +x keyhunter.py\n\n.\/keyhunter.py \/dev\/sdc\n\noutput should list found private keys in base58 key import format.\n\nbitcoind importprivkey 5K????????????? yay\n\nbitcoind getbalance\n\nDONATIONS --> 1YAyBtCwvZqNF9umZTUmfQ6vvLQRTG9qG\n","47":"# Introduction\n\n![Dart CI](https:\/\/github.com\/twostack\/dartsv\/workflows\/Dart%20CI\/badge.svg)\n\n## Overview\n\nTwoStack WalletSDK is a Bitcoin library for the Dart Language \\( [dartlang.org](https:\/\/dartlang.org) \\), loosely based on the [Moneybutton\/BSV](https:\/\/github.com\/moneybutton\/bsv) Javascript library. This library has been built in line with the ideals espoused by BitcoinSV, i.e. massive on-chain scaling, protocol stability and original-bitcoin-protocol implementation.\n\n\nThis library therefore lacks , and will not implement :\n* Segregated Witness \\(Segwit\\) Transaction support\n* Schnorr Signature support \n* Check Datasig \\(OP\\_CHECKDATASIG\\) \n\nCurrent Supported features are :\n* P2PKH Transactions \n* P2SH Transactions \n* P2MS Transactions (naked multisig)\n* P2PK Transactions\n* Custom-Script Builder Interface to support novel locking\/spending conditions within Script\n* Data-only Transactions\n* HD Key Derivation \\(BIP32\\)\n* Original Bitcoin Address format \n* Bitcoin Signed Messages\n* Mnemonic Seed Support (BIP39)\n* A built-in Bitcoin Script Interpreter\n* ECIES Encryption \/ Decryption (Supports Electrum ECIES \/ BIE1 )\n\n#### Sample of the Transaction API:\n\n```dart\n  var unlockBuilder = P2PKHUnlockBuilder(privateKey.publicKey);\n  var transaction = new Transaction()\n      .spendFromOutput(utxo, Transaction.NLOCKTIME_MAX_VALUE, scriptBuilder: unlockBuilder) \n      .spendTo(recipientAddress, BigInt.from(50000000), scriptBuilder: P2PKHLockBuilder(recipientAddress)) \n      .sendChangeTo(changeAddress, scriptBuilder: P2PKHLockBuilder(changeAddress)) \n      .withFeePerKb(1000); \n\n  \/\/Sign the Transaction Input\n  transaction.signInput(0, privateKey, sighashType: SighashType.SIGHASH_ALL | SighashType.SIGHASH_FORKID);\n\n```\n\n### Installation\n**Note**: Version 1.0.0 is a major version update to support Dart Null-Safety.\n\nThis library was built using version _2.14.3_ of the Dart SDK( [https:\/\/dart.dev\/tools\/sdk](https:\/\/dart.dev\/tools\/sdk) ).  \nAs of Version 1.0.0 this library supports Dart Null Safety, and will therefore require a minimum SDK Version of 2.12.2.\n\nNavigate to the root folder of this project, and pull the required supported Dart libraries using the `pub` package manager.\n\n```text\n> pub get\n```\n\n### Running the Tests\n\nIn the root folder of this project, run the command:\n\n```text\n> pub run test\n```\n\n## Acknowledgement\n\nA debt of gratitude is owed to the developers acknowledged in the LICENSE file. Without the hard work of individuals working on earlier library and node implementations like Bitcoin Core, Bitcoin Cash, MoneyButton\/BSV, BitcoinJ and many more, this library would likely not have come to fruition. Thank you.\n\n## Contact\n\nYou can reach the author at :\n\n* @twostack_org on Twitter\n* beardpappa@moneybutton.com \\(PayMail to buy me a beer\\)\n* stephan@twostack.org\n\n","48":"*********\nRollProxy\n*********\n\nRollProxy is a mining proxy for Bitcoin and other cryptocurrencies that support\nthe getwork protocol.  It can take advantage of the X-Roll-NTime extension to\nminimize the number of getwork requests sent to the work provider.  By keeping\nmore requests local, it minimizes latency, while drastically reducing the load\non mining pools.\n\nFeatures\n========\n\n- Full support for persistent HTTP connections\n- Long polling support\n- Mining statistics available via web interface\n- Basic failover mechanism\n- Ability to connect through an additional proxy server\n\nRequirements\n============\n\n- Python 2.6+ or 3+\n- argparse (part of the standard library as of Python 2.7 and 3.2)\n- urrlib3 <https:\/\/github.com\/shazow\/urllib3>\n\nQuick start\n===========\n\nFirst make sure argparse and urllib3 are installed::\n\n  # pip install argparse urllib3\n\nIf (and only if) you are going to use Python 3 or later, issue::\n\n  $ 2to3 -w rollproxy.py\n\nStart the proxy specifying the address and credentials for one or more mining\nservers::\n\n  $ python rollproxy.py http:\/\/username:password@host:port\/\n\nThe proxy will listen on port 8345 by default.  A web interface is also made\navailable on the same port.  For a detailed list of supported options, run::\n\n  $ python rollproxy.py --help\n\nMiners connecting to the proxy do not need to authenticate, but if they supply\na username RollProxy will then be able to generate per-worker statistics.\n\nLicense\n=======\n\nCopyright 2012 pooler <pooler@litecoinpool.org>\n\nThis program is free software: you can redistribute it and\/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n","49":"# coinscope\nAn observation and testing framework for bitcoin or bitcoin based altcoins\n\nThis software was written to allow for easy measurement and communication with the entire set of bitcoin and bitcoin based altcoins and thus far has culminated in a paper on the topic.\n\nThe paper was written in collaboration with Andrew Miller, James Litton, Andrew Pachulski, Neal Gupta,\nDave Levin, Neil Spring, and Bobby Bhattacharjee. The project page is available here. http:\/\/cs.umd.edu\/projects\/coinscope\/.\n\nI have been waiting to open source this for quite a while and have delayed until I documented it. This seems it may never come without nudges by others, so I am releasing it now with sparse documentation. I will fill in the documentation in response to questions or in the unlikely event I get bored.\n\n## Design\n\nThe design breaks down the major components of the system into separate processes. This design was meant to make splitting the design across machines trivial, as well as allowing components to scale independent of another.\n\nComponents communicate with one another over sockets, either unix or tcp. The components are as follows:\n\n## Connector\n\nThe connector, as the name suggests, connects to other bitcoin nodes and plays the protocol. It does not send any unnecessary traffic on its own, but will respond to pings and attempt to keep connections alive. To direct the connector to send messages to other nodes, a client can inject commands into it from opening a socket on the control path. C and python libraries are provided to speak the binary communication protocol it expects.\n\nThis component is single-threaded. In our experiments it was able to communicate with and attempt to connect to the entire discoverable bitcoin network on a single thread. The horde branch allows for multiple connectors to run under a multiplexing master connecto.\n\nThe connector logs all of its messages to a separate component, the log server. These logs can be viewed with a log client.\n\n## The Log Server\n\nThe connector and other components can connect to the log server and inject log events into the system. Logging clients can connect to the log server and receive messages that they are interested in. The log server will manage multiplexing the logging stream to however many clients are interested in it.\n\n## Log Clients\n\nThese components connect to the logging server and view the logging stream. The verbatim logger just captures the raw output of the log server, which can be used to store long-term logs. The console logger prints a plaintext version of the log to the console. \n\n## Clients\n\nClients connect to the other components as needed and inject commands into the connector. A client may request the connector to connect to a bitcoin node, for instance, or broadcast a message to all nodes. The client may then wait and watch the network traffic by connection to the log server to see how its commands perturbed the network.\n\n## Getting started\n\nAt minimum, building the software requires libconfig++, libev-dev, Boost program options, and a C++ compiler. Once those are installed, go into the root directory and type make.\n\nAny missing dependencies should hopefully be obvious by the build error. \n\nYou will want to modify the configuration in netmine.cfg appropriately. The configuration is mostly self-explanatory and commented.\n\nTo run the software, it's easiest to start programs (which reside in their subdirectories) in the following order: the log server, any log clients (e.g., the console client), the connector, and then finally any clients for the connector.\n\nGenerally speaking if you do things in the \"wrong\" order it should do sensible things (e.g., just log to the console if the logserver isn't up or yell at you), but this makes the most sense.\n\nIf you are logging everything to disk with the verbatim logger, you'll probably want to rotate logs eventually. This requires a two step process to signal to the verbatim logger that this is about to occur so it doesn't write incomplete logging onto the new file. A logrotate script that does this is in the tools section under verbatim-rotate.cfg\n\nFor clients, the place to start may be the connect client. Just modify the source code to give it the address of a bitcoin node (or run one on 127.0.0.1) and run this script. It should connect to the connector, send the connect request, and then output the results of the request. Other clients are available as examples. \n\nIf you prefer to use Python instead of C, python libraries are in the libraries\/python directory.\n\n## Horde Branch\n\nAs mentioned above, the horde is a system that allows for multiple connector instances. It is less tested than the master branch, but at some point in the future the intention is that it will be merged with the master branch. Bug reports\/fixes welcome.\n\n\n\n","50":"walletool ~ a tool for reading wallet.dat files\n===============================================\n\nInstallation\n------------\n\n* Install Python 3.x.\n* Install the `bsddb3` module (if you're on Windows, use Gohlke's site).\n\nExtracting private keys from Bitcoin-QT\/Litecoin-QT wallets\n-----------------------------------------------------------\n\n* Have your `wallet.dat` handy.\n* For Bitcoin, run `python wt_extract_keys.py -d wallet.dat -v 0`\n* For Litecoin, run `python wt_extract_keys.py -d wallet.dat -v 48`\n\nA list of addresses \/ private keys is printed.\n\nYMMV :)\n","51":"**[We are hiring, join us! \ud83d\udc68\u200d\ud83d\udcbb\ud83d\udc69\u200d\ud83d\udcbb](https:\/\/jobs.lever.co\/ledger\/?department=Engineering)**\n\n\n<img src=\"https:\/\/user-images.githubusercontent.com\/3273751\/151214602-f5153588-1911-4456-ae65-604d56821b36.png\" height=\"80\" \/> <img src=\"https:\/\/user-images.githubusercontent.com\/211411\/52533081-e679d380-2d2e-11e9-9c5e-571e4ad0107b.png\" height=\"80\" \/>\n\n[![Ledger Devs Slack](https:\/\/img.shields.io\/badge\/Slack-LedgerDevs-yellow.svg?style=flat)](https:\/\/ledger-dev.slack.com\/)\n[![License](https:\/\/img.shields.io\/badge\/License-Apache%202.0-blue.svg)](https:\/\/opensource.org\/licenses\/Apache-2.0)\n\nWelcome to Ledger's JavaScript libraries.\n\n**See also:**\n\n- [Changelog](https:\/\/github.com\/LedgerHQ\/ledgerjs\/releases)\n- [**LedgerJS examples**](https:\/\/github.com\/LedgerHQ\/ledgerjs-examples)\n- [Ledger Live Desktop](https:\/\/github.com\/ledgerhq\/ledger-live-desktop)\n- [Ledger Live Mobile](https:\/\/github.com\/ledgerhq\/ledger-live-mobile)\n- [live-common](https:\/\/github.com\/ledgerhq\/ledger-live-common)\n- Deprecated libraries are archived in https:\/\/github.com\/LedgerHQ\/ledgerjs-legacy\n\n## `@ledgerhq\/hw-transport-*`\n\n**To communicate with a Ledger device, you first need to identify which transport(s) to use.**\n\n> The _hw-transport_ libraries implement communication protocol for our [hardware wallet devices](https:\/\/www.ledger.com\/) (Ledger Nano \/ Ledger Nano S \/ Ledger Nano X \/ Ledger Blue) in many platforms: **Web, Node, Electron, React Native,...** and using many different communication channels: **U2F, HID, WebUSB, Bluetooth,...**\n\n| Channels | U2F\/WebAuthn | HID | WebUSB | Bluetooth |\n|----------|--------------|-----|--------|-----------|\n| Blue     | DEPRECATED<sup>1<\/sup> | YES | NO     | NO        |\n| Nano S   | DEPRECATED<sup>1<\/sup> | YES | YES    | NO        |\n| Nano X   | DEPRECATED<sup>1<\/sup> | YES | YES    | YES       |\n\n1. U2F is deprecated. See https:\/\/github.com\/LedgerHQ\/ledgerjs\/blob\/master\/docs\/migrate_webusb.md\n\nSummary of implementations available per platform\n\n\n|    Platforms     |  U2F\/WebAuthn    |                HID                |       WebUSB        |           Bluetooth           |\n|------------------|------------------|-----------------------------------|---------------------|-------------------------------|\n| Web              | `@ledgerhq\/hw-transport-u2f` | `@ledgerhq\/hw-transport-webhid` | `@ledgerhq\/hw-transport-webusb` | `@ledgerhq\/hw-transport-web-ble`          |\n| Electron\/Node.js | NO               | `@ledgerhq\/hw-transport-node-hid`<sup>1<\/sup> | NO                  | `@ledgerhq\/hw-transport-node-ble`         |\n| iOS              | NO               | NO                                | NO                  | `@ledgerhq\/react-native-hw-transport-ble` |\n| Android          | `@ledgerhq\/hw-transport-u2f`<sup>2<\/sup> | `@ledgerhq\/react-native-hid`                  | `@ledgerhq\/hw-transport-webusb`<sup>2<\/sup>    | `@ledgerhq\/react-native-hw-transport-ble` |\n\n1. 3 implementations available\n2. via Android Chrome\n\n**Beware the current web support:**\n\n\n| Channels | U2F               | WebHID.         | WebUSB             | WebBluetooth |\n|----------|-------------------|-----------------|--------------------|--------------|\n| Windows  | DEPRECATED<sup>1<\/sup> | YES             | OK BUT<sup>2<\/sup> | YES          |\n| Mac      | DEPRECATED<sup>1<\/sup> | YES             | YES                | YES          |\n| Linux    | DEPRECATED<sup>1<\/sup> | YES             | YES                | YES          |\n| Chrome   | DEPRECATED<sup>1<\/sup> | YES<sup>3<\/sup> | YES                | YES          |\n| Safari   | DEPRECATED<sup>1<\/sup> | NO              | NO                 | NO           |\n| Firefox  | DEPRECATED<sup>1<\/sup> | NO              | NO                 | NO           |\n| IE.      | DEPRECATED<sup>1<\/sup> | NO              | NO                 | NO           |\n\n\n1. U2F is deprecated. See https:\/\/github.com\/LedgerHQ\/ledgerjs\/blob\/master\/docs\/migrate_webusb.md\n2. instabilities has been reported\n3. WebHID supported under _Chrome experimental flags_\n\n\n**Please find respective documentation for each transport:**\n\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-u2f.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-u2f) [@ledgerhq\/hw-transport-u2f](https:\/\/github.com\/LedgerHQ\/ledgerjs-legacy\/tree\/master\/packages\/hw-transport-u2f) **[Web]** **(U2F)** (legacy but reliable) \u2013 FIDO U2F api. [check browser support](https:\/\/caniuse.com\/u2f).\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-webauthn.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-webauthn) [@ledgerhq\/hw-transport-webauthn](https:\/\/github.com\/LedgerHQ\/ledgerjs-legacy\/tree\/master\/packages\/hw-transport-webauthn) **[Web]** **(WebAuthn)** (experimental) \u2013 WebAuthn api. [check browser support](https:\/\/caniuse.com\/webauthn).\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-webusb.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-webusb) [@ledgerhq\/hw-transport-webusb](.\/packages\/hw-transport-webusb) **[Web]** **(WebUSB)** \u2013 WebUSB [check browser support](https:\/\/caniuse.com\/webusb).\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-webhid.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-webhid) [@ledgerhq\/hw-transport-webhid](.\/packages\/hw-transport-webhid) **[Web]** **(WebHID)** \u2013 WebHID [check browser support](https:\/\/caniuse.com\/webhid).\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-web-ble.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-web-ble) [@ledgerhq\/hw-transport-web-ble](.\/packages\/hw-transport-web-ble) **[Web]** **(Bluetooth)** \u2013 [check browser support](https:\/\/caniuse.com\/web-bluetooth).\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-node-hid.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-node-hid) [@ledgerhq\/hw-transport-node-hid](.\/packages\/hw-transport-node-hid) **[Node]**\/Electron **(HID)** \u2013 historical implementation \u2013 uses `node-hid` and `usb`.\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-node-hid-noevents.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-node-hid-noevents) [@ledgerhq\/hw-transport-node-hid-noevents](.\/packages\/hw-transport-node-hid-noevents) **[Node]**\/Electron **(HID)** \u2013 uses **only** `node-hid`. Does not provide USB events.\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-node-hid-singleton.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-node-hid-singleton) [@ledgerhq\/hw-transport-node-hid-singleton](.\/packages\/hw-transport-node-hid-singleton) **[Node]**\/Electron **(HID)** \u2013 uses `node-hid` and `usb-detection`. Focus on supporting one device at a time (potentially will have more robust events and less blocking cases)\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-node-ble.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-node-ble) [@ledgerhq\/hw-transport-node-ble](.\/packages\/hw-transport-node-ble) **[Node]**\/Electron **(BLE)** (experimental) \u2013 uses `@abandonware\/noble`.\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/react-native-hw-transport-ble.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/react-native-hw-transport-ble) [@ledgerhq\/react-native-hw-transport-ble](.\/packages\/react-native-hw-transport-ble) **[React Native]** **(Bluetooth)** \u2013 uses `react-native-ble-plx`\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/react-native-hid.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/react-native-hid) [@ledgerhq\/react-native-hid](.\/packages\/react-native-hid) **[React Native]** **(HID)** _Android_ \u2013 Ledger's native implementation\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-http.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-http) [@ledgerhq\/hw-transport-http](.\/packages\/hw-transport-http) **[DEV only]** universal HTTP channel. **NOT for PROD**.\n\n### An unified _Transport_ interface\n\nAll these transports implement a generic interface exposed by\n[@ledgerhq\/hw-transport](.\/packages\/hw-transport).\nThere are specifics for each transport which are explained in each package.\n\nA Transport is essentially:\n\n- `Transport.listen: (observer)=>Subscription`\n- `Transport.open: (descriptor)=>Promise<Transport>`\n- `transport.exchange(apdu: Buffer): Promise<Buffer>`\n- `transport.close()`\n\nand some derivates:\n\n- `transport.create(): Promise<Transport>`: make use of `listen` and `open` for the most simple scenario.\n- `transport.send(cla, ins, p1, p2, data): Promise<Buffer>`: a small abstraction of `exchange`\n\n> NB: [APDU](https:\/\/en.wikipedia.org\/wiki\/Smart_card_application_protocol_data_unit) is the encoding primitive for all binary exchange with the devices. (it comes from smart card industry)\n\n## `@ledgerhq\/hw-app-*`\n\nAs soon as your _Transport_ is created, you can already communicate by implementing the apps protocol (refer to application documentations, for instance [BTC app](https:\/\/github.com\/LedgerHQ\/ledger-app-btc\/blob\/master\/doc\/btc.asc) and [ETH app](https:\/\/github.com\/LedgerHQ\/ledger-app-eth\/blob\/master\/doc\/ethapp.asc) ones).\n\nWe also provide libraries that help implementing the low level exchanges. These higher level APIs are split per app:\n\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-app-eth.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-app-eth) [@ledgerhq\/hw-app-eth](.\/packages\/hw-app-eth): Ethereum Application API\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-app-btc.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-app-btc) [@ledgerhq\/hw-app-btc](.\/packages\/hw-app-btc): Bitcoin Application API\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-app-xrp.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-app-xrp) [@ledgerhq\/hw-app-xrp](.\/packages\/hw-app-xrp): Ripple Application API\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-app-str.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-app-str) [@ledgerhq\/hw-app-str](.\/packages\/hw-app-str): Stellar Application API\n\n**Community packages:**\n\n- [![npm](https:\/\/img.shields.io\/npm\/v\/@cardano-foundation\/ledgerjs-hw-app-cardano.svg)](https:\/\/www.npmjs.com\/package\/@cardano-foundation\/ledgerjs-hw-app-cardano) [@cardano-foundation\/ledgerjs-hw-app-cardano](https:\/\/github.com\/cardano-foundation\/ledgerjs-hw-app-cardano): Cardano ADA Application API\n\n- [![npm](https:\/\/img.shields.io\/npm\/v\/ledger-cosmos-js.svg)](https:\/\/www.npmjs.com\/package\/ledger-cosmos-js) [ledger-cosmos-js](https:\/\/github.com\/cosmos\/ledger-cosmos-js): Cosmos\/Tendermint Application API\n\n## Other packages\n\n### Published Packages\n\n| Package                                                                  | Version                                                                                                                                       | Description                                                                                                  |\n| ------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| [`create-dapp`](https:\/\/github.com\/LedgerHQ\/ledgerjs-legacy\/tree\/master\/packages\/create-dapp)                                   | [![npm](https:\/\/img.shields.io\/npm\/v\/create-dapp.svg)](https:\/\/www.npmjs.com\/package\/create-dapp)                                             | Ledger DApp Ethereum starter kit                                                                             |\n| [`@ledgerhq\/web3-subprovider`](https:\/\/github.com\/LedgerHQ\/ledgerjs-legacy\/tree\/master\/packages\/web3-subprovider)               | [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/web3-subprovider.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/web3-subprovider)               | web3 subprovider implementation for web3-provider-engine                                                     |\n| **Development Tools**                                                    |\n| [`@ledgerhq\/hw-transport-mocker`](\/packages\/hw-transport-mocker)         | [![npm](https:\/\/img.shields.io\/npm\/v\/@ledgerhq\/hw-transport-mocker.svg)](https:\/\/www.npmjs.com\/package\/@ledgerhq\/hw-transport-mocker)         | Tool used for test to record and replay APDU calls.                                                          |\n\n## Basic gist\n\n```js\nimport Transport from \"@ledgerhq\/hw-transport-node-hid\";\n\/\/ import Transport from \"@ledgerhq\/hw-transport-webusb\";\n\/\/ import Transport from \"@ledgerhq\/react-native-hw-transport-ble\";\nimport AppBtc from \"@ledgerhq\/hw-app-btc\";\nconst getBtcAddress = async () => {\n  const transport = await Transport.create();\n  const btc = new AppBtc(transport);\n  const result = await btc.getWalletPublicKey(\"44'\/0'\/0'\/0\/0\");\n  return result.bitcoinAddress;\n};\ngetBtcAddress().then(a => console.log(a));\n```\n\n## Contributing\n\nPlease read our [contribution guidelines](.\/CONTRIBUTING.md) before getting\nstarted.\n\n**You need to have a recent [Node.js](https:\/\/nodejs.org\/) and\n[Yarn](https:\/\/yarnpkg.com\/) installed.**\n\n### Install dependencies\n\n```bash\nyarn\n```\n\n### Build\n\nBuild all packages\n\n```bash\nyarn build\n```\n\n### Watch\n\nWatch all packages change. Very useful during development to build only file that changes.\n\n```bash\nyarn watch\n```\n\n### Lint\n\nLint all packages\n\n```bash\nyarn lint\n```\n\n### Run Tests\n\nFirst of all, this ensure the libraries are correctly building, and passing lint and flow:\n\n```\nyarn test\n```\n\n**then to test on a real device...**\n\nPlug a device like the Nano S and open Bitcoin app.\n\nThen run the test and accept the commands on the devices for the tests to\ncontinue.\n\n```bash\nyarn test-node\n```\n\nYou can also test on the web:\n\n```bash\nyarn test-browser\n```\n\n> make sure to configure your device app with \"Browser support\" set to \"YES\".\n\n### Deploy\n\nChecklist before deploying a new release:\n\n- you have the right in the LedgerHQ org on NPM\n- you have run `npm login` once (check `npm whoami`)\n- Go to **master** branch\n  - your master point on LedgerHQ repository (check with `git config remote.$(git config branch.master.remote).url` and fix it with `git branch --set-upstream master origin\/master`)\n  - you are in sync (`git pull`) and there is no changes in `git status`\n- Run `yarn` once, there is still no changes in `git status`\n\n**deploy a new release**\n\n```\n yarn run publish\n```\n\nthen, go to [\/releases](https:\/\/github.com\/LedgerHQ\/ledgerjs\/releases) and create a release with change logs.\n\n**alternatively:**\n\ndeploy a canary release (beta, etc)\n\n```\n yarn run publish -c\n```\n\n> NB: if there is a new package, AFAIK you need to manually `npm publish` it once on NPM.\n\n## VSCode settings \n\nHere is a example config for a workspace file to handle the monorepo setup.  \nJust add `project.code-workspace` to your `.vscode` folder\n\n```json\n{\n  \"folders\": [\n    {\n      \"name\": \"root\",\n      \"path\": \"..\/\"\n    },\n    {\n      \"name\": \"cryptoassets\",\n      \"path\": \"..\/packages\/cryptoassets\"\n    },\n    {\n      \"name\": \"devices\",\n      \"path\": \"..\/packages\/devices\"\n    },\n    {\n      \"name\": \"errors\",\n      \"path\": \"..\/packages\/errors\"\n    },\n    {\n      \"name\": \"hw-app-algorand\",\n      \"path\": \"..\/packages\/hw-app-algorand\"\n    },\n    {\n      \"name\": \"hw-app-btc\",\n      \"path\": \"..\/packages\/hw-app-btc\"\n    },\n    {\n      \"name\": \"hw-app-cosmos\",\n      \"path\": \"..\/packages\/hw-app-cosmos\"\n    },\n    {\n      \"name\": \"hw-app-eth\",\n      \"path\": \"..\/packages\/hw-app-eth\"\n    },\n    {\n      \"name\": \"hw-app-polkadot\",\n      \"path\": \"..\/packages\/hw-app-polkadot\"\n    },\n    {\n      \"name\": \"hw-app-str\",\n      \"path\": \"..\/packages\/hw-app-str\"\n    },\n    {\n      \"name\": \"hw-app-tezos\",\n      \"path\": \"..\/packages\/hw-app-tezos\"\n    },\n    {\n      \"name\": \"hw-app-trx\",\n      \"path\": \"..\/packages\/hw-app-trx\"\n    },\n    {\n      \"name\": \"hw-app-xrp\",\n      \"path\": \"..\/packages\/hw-app-xrp\"\n    },\n    {\n      \"name\": \"hw-transport\",\n      \"path\": \"..\/packages\/hw-transport\"\n    },\n    {\n      \"name\": \"hw-transport-http\",\n      \"path\": \"..\/packages\/hw-transport-http\"\n    },\n    {\n      \"name\": \"hw-transport-mocker\",\n      \"path\": \"..\/packages\/hw-transport-mocker\"\n    },\n    {\n      \"name\": \"hw-transport-node-ble\",\n      \"path\": \"..\/packages\/hw-transport-node-ble\"\n    },\n    {\n      \"name\": \"hw-transport-node-hid\",\n      \"path\": \"..\/packages\/hw-transport-node-hid\"\n    },\n    {\n      \"name\": \"hw-transport-node-hid-noevents\",\n      \"path\": \"..\/packages\/hw-transport-node-hid-noevents\"\n    },\n    {\n      \"name\": \"hw-transport-node-hid-singleton\",\n      \"path\": \"..\/packages\/hw-transport-node-hid-singleton\"\n    },\n    {\n      \"name\": \"hw-transport-node-speculos\",\n      \"path\": \"..\/packages\/hw-transport-node-speculos\"\n    },\n    {\n      \"name\": \"hw-transport-web-ble\",\n      \"path\": \"..\/packages\/hw-transport-web-ble\"\n    },\n    {\n      \"name\": \"hw-transport-webhid\",\n      \"path\": \"..\/packages\/hw-transport-webhid\"\n    },\n    {\n      \"name\": \"hw-transport-webusb\",\n      \"path\": \"..\/packages\/hw-transport-webusb\"\n    },\n    {\n      \"name\": \"logs\",\n      \"path\": \"..\/packages\/logs\"\n    },\n    {\n      \"name\": \"react-native-hid\",\n      \"path\": \"..\/packages\/react-native-hid\"\n    },\n    {\n      \"name\": \"react-native-hw-transport-ble\",\n      \"path\": \"..\/packages\/react-native-hw-transport-ble\"\n    }\n  ],\n}\n```\n\n","52":"cryptofaucet-node\n=================\n\nWhat is it?\n----\nFully customizable Bitcoin \/ Litecoin \/ altcoin faucet built on NodeJS, Express 3, and Bootstrap.\n\nConfiguration\n----\nSet global configuration options in config.js \n\nInstallation\n----\n\n    npm install\n    \nThis will install all the necessary dependencies\n    \nRun\n----\n\n    node app.js\n    \nOr using forever:\n\n    forever start app.js\n","53":"# BTCVOL\n\nThis is the code that runs [btcvol.info](http:\/\/btcvol.info\/). It is a Google Appengine App written in Go.\n\nbtcvol is licensed under the [WTFPL](http:\/\/www.wtfpl.net\/). Do WTF you want with it.\n\nThe charting capabilities are provided by [Highcharts](http:\/\/www.highcharts.com\/), which is licensed under [Creative Commons Attribution-NonCommercial 3.0](http:\/\/creativecommons.org\/licenses\/by-nc\/3.0\/).","54":"cryptocoin\n----------\n\nA JavaScript library to allow you to use crypto currencies in the browser.\n\n**NOTE:** It's undecided if this module will be used going forward since much of the innovation is happening on the individual module level.\n\n- **Active Development:** https:\/\/github.com\/cryptocoinjs\n- **Documentation:** http:\/\/cryptocoinjs.com\n\n\nInstall\n-------\n\n### Node.js\/Browserify\n\n    npm install --save cryptocoin\n\n### Component\n\n    component install cryptocoinjs\/cryptocoin\n\n\n### Bower\n\n    bower install cryptocoin\n\n\n### Script\n\n```html\n<script src=\"\/path\/to\/cryptocoin.min.js\"><\/script>\n```\n\n\nContributions\n-------------\n\nPlease read this: https:\/\/github.com\/cryptocoinjs\/cryptocoin\/wiki\/Contributor-Guidelines\n\n\nLicense\n-------\n\nThis library is free and open-source software released under the MIT\nlicense.\n\n\n\nCopyright\n---------\n\nBitcoinJS (c) 2011-2012 Stefan Thomas  \nReleased under MIT license  \nhttp:\/\/bitcoinjs.org\/\n\nJSBN (c) 2003-2005 Tom Wu  \nReleased under BSD license  \nhttp:\/\/www-cs-students.stanford.edu\/~tjw\/jsbn\/\n\nCryptoJS (c) 2009\u20132012 by Jeff Mott  \nReleased under New BSD license  \nhttp:\/\/code.google.com\/p\/crypto-js\/\n","55":"Namecoin Core integration\/staging tree\n=====================================\n\n[![Build Status](https:\/\/travis-ci.org\/namecoin\/namecoin-core.svg?branch=master)](https:\/\/travis-ci.org\/namecoin\/namecoin-core)\n\nhttps:\/\/namecoin.org\n\nWhat is Namecoin? \n----------------\n\nNamecoin is a decentralized open source information registration and transfer system based on the Bitcoin cryptocurrency.\n\nWhat does it do?\n----------------\n\n* Securely record and transfer arbitrary names (keys).\n* Attach a value (data) to the names (up to 520 bytes, more in the future).\n* Transact namecoins, the digital currency (\u2115, NMC).\n\nNamecoin was the first fork of Bitcoin and still is one of the most innovative altcoins. It was first to implement merged mining and a decentralized DNS. Namecoin squares Zooko's Triangle!\n\nWhat can it be used for?\n----------------\n\n* Protect free-speech rights online by making the web more resistant to censorship.\n* Access websites using the .bit domain (with TLS\/SSL).\n* Store identity information such as email, GPG key, BTC address, TLS fingerprints, Bitmessage address, etc.\n* Human readable Tor .onion names\/domains.\n* File signatures, Voting, bonds\/stocks,\/shares, web of trust, escrow and notary services (to be implemented).\n\nFor more information, as well as an immediately useable, binary version of\nthe Namecoin Core software, see https:\/\/www.namecoin.org\/download.\n\nLicense\n-------\n\nNamecoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https:\/\/opensource.org\/licenses\/MIT.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built (see doc\/build-*.md for instructions) and tested, but is not guaranteed to be\ncompletely stable. [Tags](https:\/\/github.com\/namecoin\/namecoin-core\/tags) are created\nregularly to indicate new official, stable release versions of Namecoin Core.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\nand useful hints for developers can be found in [doc\/developer-notes.md](doc\/developer-notes.md).\n\nThe developer [forum](https:\/\/forum.namecoin.info\/viewforum.php?f=4)\nshould be used to discuss complicated or controversial changes before working\non a patch set.\n\nDeveloper IRC can be found on Freenode at #namecoin-dev.\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src\/test\/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled in configure) with: `make check`. Further details on running\nand extending unit tests can be found in [\/src\/test\/README.md](\/src\/test\/README.md).\n\nThere are also [regression and integration tests](\/test), written\nin Python.\nThese tests can be run (if the [test dependencies](\/test) are installed) with: `test\/functional\/test_runner.py`\n\nThe CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\nand that unit\/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n\nTranslations\n------------\n\n**Translation workflow is not yet set up for Namecoin Core.  For strings which are common to Bitcoin Core, see below.**\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https:\/\/www.transifex.com\/bitcoin\/bitcoin\/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc\/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n","56":"# \u57fa\u4e8e JupyterLab \u7684\u6bd4\u7279\u5e01\u6781\u901f\u5165\u95e8\u6307\u5357\n**\u2014\u2014 \u8fdb\u5165\u533a\u5757\u94fe\u4e16\u754c\u7684\u7edd\u4f73\u5165\u53e3**\n\n\n**\u4f5c\u8005\uff1a\u674e\u5927\u72d7Leeduckgo**\n\n---\n\n**\u9879\u76ee\u4e3b\u9875\uff1a**\n\nhttps:\/\/bitcoin.doge.university\n\n**\u4e92\u52a8\u6559\u7a0b\u5730\u5740\uff1a**\n\nhttps:\/\/xue.cn\/hub\/app\/books\/3\n\n**\u8fdb\u9636\u8bfe\u7a0b\u5730\u5740\uff1a**\n\nhttps:\/\/github.com\/albertschr\/bitcoin_advanced_course_based_on_jupyterlab\n\n---\n\n## \u672c\u4e66\u9002\u5408\u4eba\u7fa4\n\n- \u7f16\u7a0b\u5165\u95e8\u8005\n\n  \u53ef\u80fd\u4f60\u5df2\u7ecf\u5165\u95e8\u4e86 Python\uff0c\u53ef\u80fd\u4f60\u521a\u521a\u5b66\u5b8c[\u300a\u81ea\u5b66\u662f\u95e8\u624b\u827a\u300b](https:\/\/github.com\/selfteaching\/the-craft-of-selfteaching)\u3002\u90a3\u4e48\u628a\u8fd9\u672c\u6559\u7a0b\u5f53\u6210\u4f60\u7684\u7b2c\u4e00\u4e2a\u300c\u8fdb\u9636\u9879\u76ee\u300d\u5427\uff01\u4f60\u80fd\u4f53\u4f1a\u5230\u7f16\u7a0b\u4f5c\u4e3a\u300c\u601d\u8003\u8f85\u52a9\u5de5\u5177\u300d\u7684\u5de8\u5927\u5a01\u529b\u3002\n\n- \u60f3\u8981\u4e86\u89e3\u533a\u5757\u94fe\u7684\u5f00\u53d1\u8005\n\n  \u4f60\u662f\u4e00\u540d\u5f00\u53d1\u8005\uff0c\u6700\u8fd1\u542c\u8bf4\u4e86\u533a\u5757\u94fe\u3002\u90a3\u4e48\u6765\u770b\u8fd9\u672c\u6559\u7a0b\u5427\uff01\u4f60\u5c06\u4f53\u9a8c\u300c\u95ea\u7535\u5165\u95e8\u300d\u7684\u5feb\u611f\u3002\n\n## \u4e00\u6bb5\u8bdd\u8bf4\u660e\u6bd4\u7279\u5e01\u5e72\u4e86\u4ec0\u4e48\n\n\u6bd4\u7279\u5e01\u5c06\u4f20\u7edf\u7684\u300c\u5206\u5e03\u5f0f\u7cfb\u7edf\u300d\u5f80\u524d\u63a8\u8fdb\u4e00\u6b65\uff0c\u5b9e\u73b0\u4e86\u300c\u8282\u70b9\u53ef\u81ea\u7531\u8fdb\u51fa\u300d\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u76ee\u7684\u662f\u7ef4\u62a4\u4e00\u4e2a\u300c\u5386\u53f2\u6570\u636e\u4e0d\u53ef\u7be1\u6539\u7684\u6570\u636e\u5e93\u300d\u3002\n\u7136\u540e\uff0c\u8fd9\u4e2a\u4e0d\u53ef\u7be1\u6539\u7684\u6570\u636e\u5e93\u7528\u5728\u5b58\u50a8\u8d26\u7c3f\u4e0a\uff0c\u4e8e\u662f\u5c31\u6210\u4e3a\u4e86\u4e00\u5bb6\u6709\u300c\u5b58\u50a8\u300d\u548c\u300c\u8f6c\u8d26\u300d\u4e1a\u52a1\u7684\u300c\u4e16\u754c\u94f6\u884c\u300d\u3002\n\n## \u4e3a\u4ec0\u4e48\u8981\u4ee5\u6bd4\u7279\u5e01\u4e3a\u6846\u67b6\u5165\u95e8\u533a\u5757\u94fe\uff1f\n\n- \u6bd4\u7279\u5e01\u662f\u8fc4\u4eca\u4e3a\u6b62\u4e3a\u6b62\u6700\u6210\u529f\u7684\u533a\u5757\u94fe\u9879\u76ee\n- \u6bd4\u7279\u5e01\u7684\u6838\u5fc3\u8db3\u591f\u7b80\u6d01\uff0c\u7b26\u5408\u300c\u5965\u5361\u59c6\u5243\u5200\u539f\u5219\u300d\n- \u6bd4\u7279\u5e01\u7684\u6587\u6863 \/ Wiki \u5f88\u4e30\u5bcc\n- \u6bd4\u7279\u5e01\u6709 [Python](https:\/\/github.com\/petertodd\/python-bitcoinlib) \u7248\u672c\u7684\u5b9e\u73b0\uff0c\u800c Python \u7248\u672c\u7684\u6e90\u7801\u6bd4\u8f83\u597d\u8bfb\n\n## \u672c\u4e66\u6d89\u53ca\u7684\u5185\u5bb9\n\n\u6570\u5b66\u3001\u5bc6\u7801\u5b66\u3001\u4fe1\u606f\u5b66\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u3001Python \u7f16\u7a0b\u7b49\u3002\n\n## \u672c\u4e66\u7279\u6027\n\n- **\u4ea4\u4e92\u6027\uff1a** \u672c\u4e66\u7528 Ipynb \u4f5c\u4e3a\u8f7d\u4f53\uff0c\u5305\u542b\u5927\u91cf\u4ea4\u4e92\u5f0f\u5185\u5bb9\u3002\n- **\u591a\u5c42\u6b21\u6027\uff1a** \u672c\u4e66\u9762\u5411\u591a\u5c42\u6b21\u7684\u8bfb\u8005\u3002\u53ef\u4ee5\u4f5c\u4e3a\u975e\u8ba1\u7b97\u673a\u5de5\u4f5c\u8005\u4e86\u89e3\u6bd4\u7279\u5e01\u7684\u5165\u95e8\u8bfb\u7269\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8fdb\u5165\u533a\u5757\u94fe\u884c\u4e1a\u7684\u8ba1\u7b97\u673a\u5de5\u4f5c\u8005\u7684\u5165\u95e8\u6559\u7a0b\u3002\n- **\u53ef\u6269\u5c55\u6027\uff1a** \u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u53ef\u4ee5\u4e0d\u65ad\u6269\u5c55\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u68f5\u4ee5\u6bd4\u7279\u5e01\u539f\u7406\u4e3a\u6839\u90e8\u7684\u300c\u533a\u5757\u94fe\u6559\u7a0b\u4e4b\u6811\ud83c\udf32\u300d\u3002\n\n## \u53c2\u8003\u8d44\u6599\n\n- \u82f1\u6587\u7248\u6bd4\u7279\u5e01\u767d\u76ae\u4e66\uff1ahttps:\/\/bitcoin.org\/bitcoin.pdf\n- \u81f3\u4eca\u4e3a\u6b62\u6700\u597d\u7684\u7ffb\u8bd1 by \u674e\u7b11\u6765\uff1ahttps:\/\/github.com\/xiaolai\/bitcoin-whitepaper-chinese-translation\/blob\/master\/Bitcoin-Whitepaper-EN-CN.md\n- ECDSA \u5bc6\u7801\u5b66\u5e93: https:\/\/github.com\/warner\/python-ecdsa\n- \u7cbe\u901a\u6bd4\u7279\u5e01\uff1ahttp:\/\/v1.8btc.com\/books\/261\/master_bitcoin\/_book\n- Draveness \u535a\u5ba2\uff1ahttps:\/\/draveness.me\/tag\/%E5%8C%BA%E5%9D%97%E9%93%BE\n\n## \u76ee\u5f55\n\n[0 \u5e8f\u8a00](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/0_%E5%BA%8F%E8%A8%80.ipynb)\n\n[1 \u7b80\u4ecb](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/1_Introduction_%E7%AE%80%E4%BB%8B.ipynb)\n\n[2.1 \u4ea4\u6613\uff08Transactions\uff09\u2014\u2014 \u7535\u5b50\u8d27\u5e01\u7684\u5b9a\u4e49](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/2.1_Transaction_%E4%BA%A4%E6%98%93_%E7%94%B5%E5%AD%90%E8%B4%A7%E5%B8%81%E7%9A%84%E5%AE%9A%E4%B9%89.ipynb)\n\n[2.2 \u4ea4\u6613\uff08Transactions\uff09\u2014\u2014 \u4ea4\u6613\u94fe\u7684\u96be\u70b9](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/2.2_Transaction_%E4%BA%A4%E6%98%93_%E4%BA%A4%E6%98%93%E9%93%BE%E7%9A%84%E9%9A%BE%E7%82%B9.ipynb)\n\n[3 \u65f6\u95f4\u6233\u670d\u52a1\u5668 (Timestamp Server) \u2014\u2014 \u533a\u5757\u7684\u94fe](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/3_TimeStamp_Server_%E6%97%B6%E9%97%B4%E6%88%B3%E6%9C%8D%E5%8A%A1%E5%99%A8.ipynb)\n\n[4 \u5de5\u4f5c\u91cf\u8bc1\u660e (Proof-of-Work)](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/4_Proof-of-Work_%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E.ipynb)\n\n[5 \u7f51\u7edc (Network)](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/5_Network_%E7%BD%91%E7%BB%9C.ipynb)\n\n[6 \u6fc0\u52b1\uff08Incentive\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/6_Incentive_%E5%A5%96%E5%8A%B1.ipynb)\n\n[7 \u56de\u6536\u786c\u76d8\u7a7a\u95f4\uff08Reclaiming Disk Space\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/7_Reclaiming_Disk_Space_%E5%9B%9E%E6%94%B6%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4.ipynb)\n\n[8 \u7b80\u5316\u7248\u652f\u4ed8\u786e\u8ba4\uff08Simplified Payment Verification Privacy\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/8_Simplified_Payment_Verification_%E7%AE%80%E5%8C%96%E7%89%88%E6%94%AF%E4%BB%98%E7%A1%AE%E8%AE%A4.ipynb)\n\n[9 Combining and Splitting Value\uff08\u503c\u7684\u7ec4\u5408\u4e0e\u5206\u5272\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/9_Combining_and_Splitting_Value_%E5%80%BC%E7%9A%84%E7%BB%84%E5%90%88%E4%B8%8E%E5%88%86%E5%89%B2.ipynb)\n\n[10 \u9690\u79c1\uff08Privacy\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/10_Privacy_%E9%9A%90%E7%A7%81.ipynb)\n\n[11 \u8ba1\u7b97\uff08Calculations\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/11_Calculations_%E8%AE%A1%E7%AE%97.ipynb)\n\n[12 \u7ed3\u8bba\uff08Conclusion\uff09](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/12_Conclusion_%E7%BB%93%E8%AE%BA.ipynb)\n\n[\u9644\u5f55A \u767d\u76ae\u4e66_\u539f\u6587+\u7ffb\u8bd1+\u5355\u8bcd\u6ce8\u91ca](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/%E3%80%90%E9%99%84%E3%80%91%E7%99%BD%E7%9A%AE%E4%B9%A6_%E5%8E%9F%E6%96%87+%E7%BF%BB%E8%AF%91+%E5%8D%95%E8%AF%8D%E6%B3%A8%E9%87%8A.ipynb)\n\n[\u9644\u5f55B \u6bd4\u7279\u5e01\u76f8\u5173\u7f51\u7ad9](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/%E3%80%90%E9%99%842%E3%80%91%E6%AF%94%E7%89%B9%E5%B8%81%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99.ipynb)\n\n[\u9644\u5f55C \u4e60\u9898\u96c6](https:\/\/xue.cn\/visitor\/reader?bookId=3&mode=visitor&path=bitcoin_elementary_course_based_on_jupyterlab\/%E3%80%90%E9%99%843%E3%80%91%E4%B9%A0%E9%A2%98%E9%9B%86.ipynb)\n\n## \u4f5c\u8005\u8054\u7cfb\u65b9\u5f0f\uff08\u52a0\u6211\u8fdb\u5b66\u4e60\u7fa4\uff09\n\n\u4f5c\u8005\u5fae\u4fe1\u4e8c\u7ef4\u7801\uff1a\n\n![qr_code](pics\/qr_code.jpg)\n\n\u4f5c\u8005\u516c\u4f17\u53f7\uff1a\n\n![\u5927\u72d7\u54d4\u54d4](pics\/\u5927\u72d7\u54d4\u54d4.jpeg)\n\n","57":"ArcBit\n===========\nBitcoin wallet for Android. First mobile wallet to support reusable\/stealth addresses. Also offers cold wallet storage and offline spending. Visit http:\/\/www.arcbit.io\/ for more information.\n\n#####Play store Link:\nhttps:\/\/play.google.com\/store\/apps\/details?id=com.arcbit.arcbit\n\n#####Features:\n- No signup required\n- Cold wallet storage and offline spending\n- Single recovery passphrase that works forever\n- Private keys never leave your device\n- Faster loading time compared to other wallets\n- Send and receive bitcoin payments\n- View transactions and wallet balance\n- PIN protection\n- Email support built into app\n- HD wallet support\n- Forward\/reusable\/stealth address support\n- Over 150 local currencies support \n- Bitcoin, millibits and bits denomination support\n- Dedicated help section for any question about how to use the app\n- Automatic cycling of addresses to prevent address reuse\n- Open source\n- xpub keys stored client side unlike many other wallets, which offers better privacy\n- Can access private keys without an internet connection\n- Advance mode for Bitcoin experts\n\n##### Advance features:\n\n- Pick Your Preferred block explorer API, currently we support Bitpay\u2019s Insight and blockchain.info. You can also point ArcBit to your own Insight Server.\n- Import private keys support\n- Import BIP38 encrypted private keys support\n- Import watch only addresses support\n- Import HD wallet account keys support\n- Import HD wallet watch only account keys support\n\nBuild\n===========\nTo build and run ArcBit simply open the project from Android Studios and click run.\n\n\nMade Possible By\n===========\nArcBit is made possible by, but not limited to these projects.\n\n- https:\/\/github.com\/bitcoinj\/bitcoinj\n\n- https:\/\/github.com\/bitpay\/insight\n\n- https:\/\/github.com\/bitpay\/insight-api\n\n","58":"# bitcoin.it-promotional_graphics\nFixed Bitcoin promotional graphics\n\nWhat was fixed: https:\/\/bitcointalk.org\/index.php?topic=1771347.0\n","59":"# satoshi-bitcoin\n\n![](https:\/\/badgen.net\/bundlephobia\/min\/satoshi-bitcoin)\n[![Build Status](https:\/\/travis-ci.org\/dawsbot\/satoshi-bitcoin.svg?branch=master)](https:\/\/travis-ci.org\/dawsbot\/satoshi-bitcoin)\n[![npm version](https:\/\/badge.fury.io\/js\/satoshi-bitcoin.svg)](http:\/\/badge.fury.io\/js\/satoshi-bitcoin)\n\n> npm module to convert between Satoshi and Bitcoin <b>with lightweight precision<\/b>.\n\n<br>\n\n## The Problem\n\n![The problem](http:\/\/i.imgur.com\/H1Ck3bF.png)\n\n<br>\n\n## Install\n\n```bash\nnpm install --save satoshi-bitcoin\n\n# OR\n\nyarn add satoshi-bitcoin\n```\n\n<br>\n\n## Usage\n\n#### Node.js\n\n```js\nvar sb = require(\"satoshi-bitcoin\");\n\nsb.toSatoshi(1);\n\/\/=>100000000\n\nsb.toBitcoin(100000000);\n\/\/=>1\n```\n\n<br>\n\n#### Web\n\n```html\n<!-- package injected as \"sb\" -->\n<script src=\"https:\/\/rawgit.com\/dawsonbotsford\/satoshi-bitcoin\/master\/index.bundle.js\"><\/script>\n<script>\n  console.log(\"One Satoshi equals \" + sb.toBitcoin(1) + \" Bitcoin\");\n<\/script>\n```\n\n<br>\n\nOr download it with `npm install --save satoshi-bitcoin` and reference it as:\n\n```html\n<script src=\"node_modules\/satoshi-bitcoin\/index.bundle.js\"><\/script>\n```\n\n<br>\n\n### Error Handling\n\n```javascript\ntry {\n  sb.toSatoshi(false); \/\/Throws TypeError\n} catch (err) {\n  console.log(err);\n}\n```\n\n<br>\n\n## API\n\n`sb.toSatoshi(number || string)`\n`sb.toBitcoin(number || string)`\n\n[Read more on the Wiki](https:\/\/github.com\/dawsonbotsford\/satoshi-bitcoin\/blob\/master\/wiki\/index.md)\n\n<br>\n\n## FAQ\n\n- What is a Satoshi?\n\n  - Satoshi is to Bitcoin as pennies are to the dollar. Except that there are 100,000,000 Satoshi in one Bitcoin.\n\n- Why do I need a module when I can just divide or multiply by 100,000,000?\n  - [See here](http:\/\/repl.it\/zlF\/4) - Floating point errors are a problem. So `satoshi-bitcoin` uses a tiny bignum library (big.js) to ensure accurate conversions!\n\n<br>\n\n## Tests\n\n```bash\nnpm test\n```\n\n<br>\n\n## License\n\nMIT \u00a9 [Dawson Botsford](https:\/\/dawsbot.com)\n","60":"## Lightning Network Daemon\n\n[![Build Status](https:\/\/img.shields.io\/travis\/lightningnetwork\/lnd.svg)](https:\/\/travis-ci.org\/lightningnetwork\/lnd)\n[![MIT licensed](https:\/\/img.shields.io\/badge\/license-MIT-blue.svg)](https:\/\/github.com\/lightningnetwork\/lnd\/blob\/master\/LICENSE)\n[![Irc](https:\/\/img.shields.io\/badge\/chat-on%20libera-brightgreen.svg)](https:\/\/web.libera.chat\/#lnd)\n[![Godoc](https:\/\/godoc.org\/github.com\/lightningnetwork\/lnd?status.svg)](https:\/\/godoc.org\/github.com\/lightningnetwork\/lnd)\n\n<img src=\"logo.png\">\n\nThe Lightning Network Daemon (`lnd`) - is a complete implementation of a\n[Lightning Network](https:\/\/lightning.network) node.  `lnd` has several pluggable back-end\nchain services including [`btcd`](https:\/\/github.com\/btcsuite\/btcd) (a\nfull-node), [`bitcoind`](https:\/\/github.com\/bitcoin\/bitcoin), and\n[`neutrino`](https:\/\/github.com\/lightninglabs\/neutrino) (a new experimental light client). The project's codebase uses the\n[btcsuite](https:\/\/github.com\/btcsuite\/) set of Bitcoin libraries, and also\nexports a large set of isolated re-usable Lightning Network related libraries\nwithin it.  In the current state `lnd` is capable of:\n* Creating channels.\n* Closing channels.\n* Completely managing all channel states (including the exceptional ones!).\n* Maintaining a fully authenticated+validated channel graph.\n* Performing path finding within the network, passively forwarding incoming payments.\n* Sending outgoing [onion-encrypted payments](https:\/\/github.com\/lightningnetwork\/lightning-onion)\nthrough the network.\n* Updating advertised fee schedules.\n* Automatic channel management ([`autopilot`](https:\/\/github.com\/lightningnetwork\/lnd\/tree\/master\/autopilot)).\n\n## Lightning Network Specification Compliance\n`lnd` _fully_ conforms to the [Lightning Network specification\n(BOLTs)](https:\/\/github.com\/lightningnetwork\/lightning-rfc). BOLT stands for:\nBasis of Lightning Technology. The specifications are currently being drafted\nby several groups of implementers based around the world including the\ndevelopers of `lnd`. The set of specification documents as well as our\nimplementation of the specification are still a work-in-progress. With that\nsaid, the current status of `lnd`'s BOLT compliance is:\n\n  - [X] BOLT 1: Base Protocol\n  - [X] BOLT 2: Peer Protocol for Channel Management\n  - [X] BOLT 3: Bitcoin Transaction and Script Formats\n  - [X] BOLT 4: Onion Routing Protocol\n  - [X] BOLT 5: Recommendations for On-chain Transaction Handling\n  - [X] BOLT 7: P2P Node and Channel Discovery\n  - [X] BOLT 8: Encrypted and Authenticated Transport\n  - [X] BOLT 9: Assigned Feature Flags\n  - [X] BOLT 10: DNS Bootstrap and Assisted Node Location\n  - [X] BOLT 11: Invoice Protocol for Lightning Payments\n\n## Developer Resources\n\nThe daemon has been designed to be as developer friendly as possible in order\nto facilitate application development on top of `lnd`. Two primary RPC\ninterfaces are exported: an HTTP REST API, and a [gRPC](https:\/\/grpc.io\/)\nservice. The exported API's are not yet stable, so be warned: they may change\ndrastically in the near future.\n\nAn automatically generated set of documentation for the RPC APIs can be found\nat [api.lightning.community](https:\/\/api.lightning.community). A set of developer\nresources including guides, articles, example applications and community resources can be found at:\n[docs.lightning.engineering](https:\/\/docs.lightning.engineering).\n\nFinally, we also have an active\n[Slack](https:\/\/lightning.engineering\/slack.html) where protocol developers, application developers, testers and users gather to\ndiscuss various aspects of `lnd` and also Lightning in general.\n\n## Installation\n  In order to build from source, please see [the installation\n  instructions](docs\/INSTALL.md).\n\n## Docker\n  To run lnd from Docker, please see the main [Docker instructions](docs\/DOCKER.md)\n\n## IRC\n  * irc.libera.chat\n  * channel #lnd\n  * [webchat](https:\/\/web.libera.chat\/#lnd)\n\n## Safety\n\nWhen operating a mainnet `lnd` node, please refer to our [operational safety\nguidelines](docs\/safety.md). It is important to note that `lnd` is still\n**beta** software and that ignoring these operational guidelines can lead to\nloss of funds.\n\n## Security\n\nThe developers of `lnd` take security _very_ seriously. The disclosure of\nsecurity vulnerabilities helps us secure the health of `lnd`, privacy of our\nusers, and also the health of the Lightning Network as a whole.  If you find\nany issues regarding security or privacy, please disclose the information\nresponsibly by sending an email to security at lightning dot engineering,\npreferably encrypted using our designated PGP key\n(`91FE464CD75101DA6B6BAB60555C6465E5BCB3AF`) which can be found\n[here](https:\/\/gist.githubusercontent.com\/Roasbeef\/6fb5b52886183239e4aa558f83d085d3\/raw\/5fa96010af201628bcfa61e9309d9b13d23d220f\/security@lightning.engineering).\n\n## Further reading\n* [Step-by-step send payment guide with docker](https:\/\/github.com\/lightningnetwork\/lnd\/tree\/master\/docker)\n* [Contribution guide](https:\/\/github.com\/lightningnetwork\/lnd\/blob\/master\/docs\/code_contribution_guidelines.md)\n","61":"# bitwork\n\n> Bitcoin networking made simple.\n\nbitwork is the easiest, yet powerful way to process data from the bitcoin network.\n\nIt makes interacting with bitcoin as easy as making an HTTP GET request, or listening to WebSockets!\n\n![bitwork](bitwork.png)\n\nIt abstracts the complex and esoteric low level networking APIs (P2P protocol + JSON-RPC) into a unified, easy-to-use interface that resembles a simple HTTP request.\n\n![stack](stack.png)\n\nUnderneath, bitwork takes care of all the complexities in fetching and listening to data from the P2P network, as well as make use of the JSON-RPC API for some features which when combined, enables an extremely user-friendly yet powerful API.\n\nFinally, it has [a built-in data processing engine](#_3-use) which parses the incoming transaction byte stream into structured programmable objects which makes programmers' jobs significantly easier.\n\n---\n\n# Who is this for?\n\nThis library is for **reading DIRECTLY from a bitcoin node,** which means this is for those **who run a bitcoin node of their own**. If you already have access to a Bitcoin node via JSON-RPC and P2P, this library is for you.\n\n> NOTE: Most developers shouldn't need to run their own bitcoin node as it will become exponentially harder to maintain as the blockchain grows. (For example, it is already possible for blockchains like Bitcoin SV to grow at a speed of 2GB per block, which is approximately 10 minutes)\n>\n> Instead, look into solutions for synchronizing only the required data subset **without having to run a node**. See [Bitbus](https:\/\/bitbus.network).\n\n\n---\n\n# What problems does it solve?\n\nWhat problems does Bitwork solve? \n\nShort answer: Everything related to Bitcoin data processing. \n\nLong answer:\n\n## 1. P2P\n\nWorking with the P2P protocol directly is very tedious and has a lot of unintuitive limitations. Let's just take one example: the `\"getheaders\"` API. Here's a description of how it works:\n\n> \"Return a headers packet containing the headers of blocks starting right after the last known hash in the block locator object, up to hash_stop or 2000 blocks\"\n\nThere are several problems here:\n\n1. First, you can only get headers for 2000 blocks at a time.\n2. Second, \"blocks starting **right after** the last known hash\", which means if you say \"Get headers from hash X to Y\", it **will NOT include the block X itself**! Such a simple query is tedious if you're directly trying to use the P2P protocol.\n3. Third, you can only use block hash to query headers, no height. Again, tedious.\n\nAnother example, the header returned by the P2P protocol doesn't include a `\"nextblockhash\"` field. This is understandable if we remember that the main purpose of the P2P protocol is for block propagation (and not for querying). However it's still true that it's inconvenient (You can get this information through JSON-RPC)\n\nAlso due to its P2P nature, developers must programm in a [message passing pattern](https:\/\/en.wikipedia.org\/wiki\/Message_passing) when trying to process data from the blockchain. This means you call a `sendMessage` to make a request, and then also implement a separate event listener which listens to data from the network and distinguish random data from the actual response you're expecting. This creates a messy [spaghetti code](https:\/\/en.wikipedia.org\/wiki\/Spaghetti_code) and is not desirable. Ideally you should be able to **interact with the P2P network with just a few lines of code, just like you would with HTTP.**\n\nBitwork solves these problems by functioning as an abstraction layer which frees developers from having to worry about all these quirks.\n\n**Bitwork lets you treat Bitcoin like HTTP.**\n\n## 2. JSON-RPC\n\nJSON-RPC is meant to be a more user friendly way to query the blockchain, but the performance is worse than P2P. Currently it doesn't support streaming, so it takes up a lot of memory and often crashes the node itself when the block is too large. (This is a new type of problem only possible in a scaling blockchain like Bitcoin SV)\n\nThere are also several other performance and synchronization issues with JSON-RPC. It's better to use the P2P protocol directly when possible.\n\n**Bitwork mostly uses the P2P protocol directly, and uses JSON-RPC methods when it's necessary.**\n\n## 3. ZeroMQ\n\nWorking with Zeromq to listen to blockchain events is sketchy. It has synchronization issues with the JSON-RPC API. For example sometimes there will be a ZeroMQ event trigger, but the JSON-RPC won't return a response when you query the same event immediately, and you will have to try another query several seconds later. This is more severe during peak transaction periods, which is when the realtime feature matters the most.\n\nOne solution to mitigate this issue is to never trust Zeromq 100% and use a hybrid approach of ZeroMQ plus constant polling.\n\nBut this is a mediocre solution at best, and there is no reason to do this if we directly listen to the P2P network.\n\n**Bitwork directly listens to the P2P network instead of relying on ZeroMQ.**\n\n## 4. Usability\n\nThere simply does not exist a single high level API that makes interacting with a Bitcoin node as simple as making a HTTP request.\n\nBitwork makes everything simple, and will get rid of all your headaches dealing with Bitcoin data.\n\n**It just works.**\n\n---\n\n# Install\n\nFirst install the package to your app folder\n\n```\nnpm install --save bitwork\n```\n\n---\n\n# Usage\n\nFirst you must initialize it:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  \/\/ YOUR LOGIC\n})\n```\n\nThe constructor can take the following attributes:\n\n- `rpc`: RPC settings\n  - `protocol`: JSON-RPC access protocol (**optional.** default: \"http\")\n  - `host`: JSON-RPC endpoint IP (**optional.** default: \"127.0.0.1\")\n  - `port`: JSON-RPC port (**optional.** default: 8332)\n  - `user`: JSON-RPC username (**required**)\n  - `pass`: JSON-RPC password (**required**)\n- `peer`: P2P settings\n  - `host`: Peer IP to connect to (**optional.** default: 127.0.0.1)\n- `chain`: Chain definition (optional. strongly recommended)\n  - `prune`: automatically prune the oldest `.tx` file inside the `chain` folder when the number of files exceeds `prune`.\n  - `path`: the path to store the chain files in\n\n---\n\n# Quickstart\n\nLet's try.\n\nFirst, install bitwork\n\n```\nnpm install --save bitwork\n```\n\nSecond, create a file `listener.js`.\n\n```\nconst bitwork = require('bitwork')\n\/\/ Remember to replace the \"user\" and \"pass\" with your OWN JSON-RPC username and password!\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\nrun\n\n```\nnode listener\n```\n\nThat's it! You'll start seeing new transactions flow in, in realtime.\n\nNext, let's try reading a block. Create another file `read.js`:\n\n```\nconst bitwork = require('bitwork')\n\/\/ Remember to replace the \"user\" and \"pass\" with your OWN JSON-RPC username and password!\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let { header, tx } = await bit.get(\"block\", 598924)\n  console.log(\"block header = \", header)\n  console.log(\"block transactions = \", tx)\n})\n```\n\nand run:\n\n```\nnode read\n```\n\nYou'll get the full block content for block height 598924!\n\n---\n\n# API\n\nThere are three API methods:\n\n1. **get:** fetch data from the blockchain.\n2. **on:** listen to data from the blockchain.\n3. **use:** attach middleware.\n\n## 1. get\n\n### a. mempool\n\n#### Syntax\n\n```\nbit.get(\"mempool\").then((mepool) => {\n  \/\/  mempool := {\n  \/\/    tx: <array of mempool transactions>\n  \/\/  }\n})\n```\n\n#### Example\n\nGet mempool transactions\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  bit.get(\"mempool\").then((mempool) => {\n    console.log(\"mempool transactions = \", mempool.tx)\n  })\n})\n```\n\nor using async\/await:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\");\n  console.log(\"mempool transactions = \", mempool.tx)\n})\n```\n\n### b. block\n\n#### Syntax\n\n```\nbit.get(\"block\", <hash|height>).then((block) => {\n  \/\/  block := {\n  \/\/    header: <block header object>,\n  \/\/    tx: <array of mempool transactions>\n  \/\/  }\n})\n```\n\n\n#### Example\n\n\nGet by block height\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", 598924)\n  console.log(\"block header = \", block.header)\n  console.log(\"block transactions = \", block.tx)\n})\n```\n\nGet by block hash\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\")\n  console.log(\"block header = \", block.header)\n  console.log(\"block transactions = \", block.tx)\n})\n```\n\n### c. header\n\n#### Syntax\n\n```\nbit.get(\"header\", <Query>).then((headers) => {\n  \/\/  headers := <array of headers>\n})\n```\n\nWhere the `<Query>` is an object which may have the following attributes:\n\n- `at`: Specify the exact position of the block (hash or height).\n- `from`: Specify the position to fetch from (hash or height)\n- `to`: Specify the position to end fetching (hash or height)\n\n#### Example\n\nGet a block header at a specific height:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let header = await bit.get( \"header\", { at: 598848 })\n  console.log(\"header = \", header)\n})\n```\n\nGet a block header at a specific hash:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let header = await bit.get( \"header\", { at: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\" })\n  console.log(\"header = \", header)\n})\n```\n\nGet block headers starting from a height, until the end (blockchain tip)\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get(\n    \"header\", \n    { from: 598848 }\n  )\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers starting from a block hash, until the end (blockchain tip)\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get( \"header\", { from: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\" })\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers between two heights:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get( \"header\", { from: 598848, to: 598850 })\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers between a height and a hash:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get(\"header\", { from: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\", to: 598850 })\n  console.log(\"headers = \", headers)\n})\n```\n\n### d. JSON-RPC\n\n#### Syntax\n\n```\nbit.get(\"rpc\", <JSON-RPC method>, ...<JSON-RPC arguments>).then((response) => {\n  \/\/ response := <JSON-RPC response> \n}).catch((e) => {\n  \/\/ e := <error message>\n})\n```\n\nWhere `<JSON-RPC method>` may be ANY of the methods shown at https:\/\/github.com\/bitpay\/bitcoind-rpc\/blob\/master\/lib\/index.js#L160\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let info = await bit.get(\"rpc\", \"getInfo\")\n  console.log(\"info = \", info)\n})\n```\n\nwill print something like:\n\n```\ninfo =  {\n  version: 100020100,\n  protocolversion: 70015,\n  blocks: 598980,\n  timeoffset: 0,\n  connections: 41,\n  proxy: '',\n  difficulty: 129757875307.3484,\n  testnet: false,\n  stn: false,\n  paytxfee: 0,\n  relayfee: 0.00001,\n  errors: \"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\",\n  maxblocksize: 2000000000,\n  maxminedblocksize: 128000000\n}\n```\n\nYou can also pass additional arguments;\n\n```\nconst bitwork = require('..\/index')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.on(\"ready\", async () => {\n  let tx = await bit.get(\"rpc\", \"getRawTransaction\", \"da80aa6f5a21b41485b73d268af1d3f89d360cd5c6147b4214af8d5add612b12\")\n  console.log('tx = ', tx)\n})\n```\n\n---\n\n## 2. on\n\nThe `on` method lets you create an event listener:\n\n### a. mempool\n\nListen to realtime incoming mempool transactions via P2P\n\n#### Syntax\n\n```\nbit.on(\"mempool\", (e) => {\n  \/\/  e := <new transaction object>\n})\n```\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(\"New transaction = \", e)\n  })\n})\n```\n\n### b. block\n\nListen to realtime incoming blocks via P2P\n\n#### Syntax\n\n```\nbit.on(\"block\", (e) => {\n  \/\/  e := {\n  \/\/    header: <new block header>,\n  \/\/    tx: <array of transaction objects in the block>\n  \/\/  }\n})\n```\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"block\", (e) => {\n    console.log(\"header = \", e.header)\n    console.log(\"transactions = \", e.tx)\n  })\n})\n```\n\n### c. ready\n\nMust use before calling any other methods:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  \/\/ YOUR APP LOGIC GOES HERE\n})\n```\n\n---\n\n## 3. use\n\nThe `use` method is used for attaching middleware.\n\n![flow](flow.png)\n\nThere are three middleware types:\n\n1. **Parse:** The parser which deserializes an incoming raw transaction into any format that's easy to use in programs.\n2. **Filter:** Filter the transactions based on a tester function.\n3. **Map:** Transform the transactions through a map function.\n\n> Note that these three steps are executed in this specific order. The transaction goes through a parser, and then gets filtered, and finally mapped.\n\n\nThe processors are attached to bitwork through the following syntax:\n\n```\nbit.use(<processor>, <name or lambda function>)\n```\n\n\n### a. parse\n\n`parse` is the first step. parse is used for deserializing an incoming raw transaction byte stream into a JavaScript object.\n\n![serialize](serialize.png)\n\nHere are the parsers currently supported natively:\n\n1. bob: https:\/\/medium.com\/@_unwriter\/hello-bob-94701d278afb\n2. txo: https:\/\/github.com\/interplanaria\/txo\n3. hex: raw hex string format\n\nTo use BOB, simply add `bit.use(\"parse\", \"bob\")`\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.on(\"ready\", async () => {\n  let blk = await bit.get(\"block\", 598966)\n  console.log(JSON.stringify(blk, null, 2))\n})\n```\n\nThis will give you:\n\n1. `\"header\"`: the block header for 598966\n2. `\"tx\"`: all transactions in block 598966, DESERIALIZED with BOB.\n\nWhich looks like this:\n\n<pre class='scroll'><code>\n{\n  \"header\": {\n    \"hash\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n    \"version\": 549453824,\n    \"prevHash\": \"0000000000000000006d8e25371046c57f9cbbe251d84b1d0c636721de23c5e7\",\n    \"merkleRoot\": \"8c9bbd17117f0d3848d6089ea1e7ef2dfd310e0e5a61bf9d4ac2cf4b9d994ca7\",\n    \"time\": 1567860575,\n    \"bits\": 403221253,\n    \"nonce\": 1908806409,\n    \"height\": 598966\n  },\n  \"tx\": [\n    {\n      \"tx\": {\n        \"h\": \"03f4052af378df64d5f416c7174d088178f2a679b67a451956f1d3c1c65b4f01\"\n      },\n      \"in\": [],\n      \"out\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 118,\n                  \"ops\": \"OP_DUP\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"op\": 169,\n                  \"ops\": \"OP_HASH160\",\n                  \"ii\": 1,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"TBICBeU94joq\/WU8fS3P9NMyAbg=\",\n                  \"s\": \"L\\u0012\\u0002\\u0005\ufffd=\ufffd:*\ufffde<}-\ufffd\ufffd\ufffd2\\u0001\ufffd\",\n                  \"ii\": 2,\n                  \"i\": 2\n                },\n                {\n                  \"op\": 136,\n                  \"ops\": \"OP_EQUALVERIFY\",\n                  \"ii\": 3,\n                  \"i\": 3\n                },\n                {\n                  \"op\": 172,\n                  \"ops\": \"OP_CHECKSIG\",\n                  \"ii\": 4,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"v\": 1250008636,\n            \"i\": 0,\n            \"a\": \"17wDvnpvv7XSWjMRfnhjcdvY6jzonNKL5A\"\n          }\n        }\n      ],\n      \"blk\": {\n        \"i\": 598966,\n        \"h\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n        \"t\": 1567860575\n      }\n    },\n    ....\n    {\n      \"tx\": {\n        \"h\": \"b4e1bdb6177ece9b75d8450c47e6c1240504409e8f61bad5a8f3bcb48fff67ad\"\n      },\n      \"in\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"b\": \"MEUCIQCvPs7z6JFpu31mhEQvzxZB1i7xJIb3p1ULsbvHsf1u1AIgTMBvTY5079UbyNyKUmPnUjPD5osBteLzzErHrRUGsWpB\",\n                  \"s\": \"0E\\u0002!\\u0000\ufffd>\ufffd\ufffd\ufffdi\ufffd}f\ufffdD\/\ufffd\\u0016A\ufffd.\ufffd$\ufffd\ufffd\ufffdU\\u000b\ufffd\ufffd\u01f1\ufffdn\ufffd\\u0002 L\ufffdoM\ufffdt\ufffd\ufffd\\u001b\ufffd\u070aRc\ufffdR3\ufffd\ufffd\\u0001\ufffd\ufffd\ufffd\ufffdJ\u01ed\\u0015\\u0006\ufffdjA\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"b\": \"Ah4neps6BPFZyW1etCz15L9Mh4rwOwXoIm6omBnbvLsx\",\n                  \"s\": \"\\u0002\\u001e'z\ufffd:\\u0004\ufffdY\ufffdm^\ufffd,\ufffd\ufffdL\ufffd\ufffd\ufffd;\\u0005\ufffd\\\"n\ufffd\ufffd\\u0019\u06fc\ufffd1\",\n                  \"ii\": 1,\n                  \"i\": 1\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"h\": \"ea8c2317c44c2830d8abc9223fc7ddfef7c5df9acce3e979069e6d30c8ee3fcb\",\n            \"i\": 1,\n            \"a\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\"\n          }\n        }\n      ],\n      \"out\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 106,\n                  \"ops\": \"OP_RETURN\",\n                  \"ii\": 0,\n                  \"i\": 0\n                }\n              ],\n              \"i\": 0\n            },\n            {\n              \"cell\": [\n                {\n                  \"b\": \"MUx0eU1FNmI1QW5Nb3BRckJQTGs0RkdOOFVCdWh4S3Fybg==\",\n                  \"s\": \"1LtyME6b5AnMopQrBPLk4FGN8UBuhxKqrn\",\n                  \"ii\": 1,\n                  \"i\": 0\n                },\n                {\n                  \"b\": \"AQ==\",\n                  \"s\": \"\\u0001\",\n                  \"ii\": 2,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"eyJ0IjoxNy4xLCJoIjo2NywicCI6MTAyNiwiYyI6NDAsIndzIjo1LjcsIndkIjozNjB9\",\n                  \"s\": \"{\\\"t\\\":17.1,\\\"h\\\":67,\\\"p\\\":1026,\\\"c\\\":40,\\\"ws\\\":5.7,\\\"wd\\\":360}\",\n                  \"ii\": 3,\n                  \"i\": 2\n                },\n                {\n                  \"b\": \"MTlqYnhyeDN2TnlzeVRtY2hKQ2RRUHhURnYyQ1U4U2pYbw==\",\n                  \"s\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\",\n                  \"ii\": 4,\n                  \"i\": 3\n                },\n                {\n                  \"b\": \"MTU2Nzg2MDMzMw==\",\n                  \"s\": \"1567860333\",\n                  \"ii\": 5,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 1\n            }\n          ],\n          \"e\": {\n            \"v\": 0,\n            \"i\": 0,\n            \"a\": \"false\"\n          }\n        },\n        {\n          \"i\": 1,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 118,\n                  \"ops\": \"OP_DUP\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"op\": 169,\n                  \"ops\": \"OP_HASH160\",\n                  \"ii\": 1,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"X8+pk8zgWrwxtTOQ1YUGqA1UbkQ=\",\n                  \"s\": \"_\u03e9\ufffd\ufffd\ufffdZ\ufffd1\ufffd3\ufffd\u0545\\u0006\ufffd\\rTnD\",\n                  \"ii\": 2,\n                  \"i\": 2\n                },\n                {\n                  \"op\": 136,\n                  \"ops\": \"OP_EQUALVERIFY\",\n                  \"ii\": 3,\n                  \"i\": 3\n                },\n                {\n                  \"op\": 172,\n                  \"ops\": \"OP_CHECKSIG\",\n                  \"ii\": 4,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"v\": 159922,\n            \"i\": 1,\n            \"a\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\"\n          }\n        }\n      ],\n      \"blk\": {\n        \"i\": 598966,\n        \"h\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n        \"t\": 1567860575\n      }\n    }\n  ]\n}\n<\/code><\/pre>\n\nTo use TXO, simply add `bit.use(\"parse\", \"txo\")`\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"txo\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\nTo use raw hex format, add `bit.use(\"parse\", \"hex\")`\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"hex\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\n\n### b. filter\n\nThe second stage is \"filter\". This is where you filter the parsed transaction set based on a filter function. \n\n![filter](filter.png)\n\nDepending on whether an input passes the filter function test, it gets included in or excluded from the result set.\n\nIt works the same way [Array.prototype.filter](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter) does. Here's an example where we're trying to filter non-OP_RETURN transactions:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\")\n  console.log(\"mempool =\", mempool)\n})\n```\n\nThis also applies to listeners. When you run the following code, it will only trigger the `\"mempool\"` event when the incoming transaction passes the filter test:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(\"ONLY NON-OPRETURN TXS\", e)\n  })\n})\n```\n\n\n### c. map\n\nThe last stage is \"map\". Map lets you transform the incoming data into a desired format.\n\n![map](map.png)\n\nIt works the same way [Array.prototype.map](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/map) does, **BUT WITH A TWIST**. \n\nFor every transformed object, it auto-attaches a couple of transaction related metadata such as `tx.h` (transaction id) and `blk` (block metadata)\n\n\n#### Syntax\n\nUse the following to declare a `map` function for a bitwork instance:\n\n```\nbit.use(\"map\", <transformer function>)\n```\n\n#### How it works\n\nOnce a \"map\" middleware is set, all requests (both `get` and `on`) will go through the `map` step before returning a response.\n\nHowever, **unlike the previous steps (`parse` and `filter`) using `map` adds an additional structure.**\n\nFor a mempool transaction:\n\n1. it wraps each transformed object in a `$` attribute.\n2. it also auto-attaches an additional `tx.h` attribute which indicates the transaction id.\n\nExample:\n\n```\n{\n  \"$\": <transformed object>,\n  \"tx\": {\n    \"h\": <transaction id>\n  }\n}\n```\n\nFor a transaction in a block, it attaches one more attribute `blk`:\n\n```\n{\n  \"$\": <transformed object>,\n  \"tx\": {\n    \"h\": <transaction id>\n  },\n  \"blk\": {\n    \"i\": <block height (index)>,\n    \"h\": <block hash>,\n    \"t\": <block time>\n  }\n}\n```\n\n\nHere's an example:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0])\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\")\n  \/\/\n  \/\/ Since we have a \"map\" middleware, the transformed\n  \/\/ transactions are wrapped inside a \"$\" attribute.\n  \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n  \/\/\n  \/\/  mempool := {\n  \/\/    \"tx\": [{\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }, {\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }, {\n  \/\/      ...\n  \/\/    }, {\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }]\n  \/\/  }\n  \/\/\n})\n```\n\nThis also applies to listeners:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0].tape[0].cell.slice(1))\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (mempool) => {\n    \/\/\n    \/\/ Since we have a \"map\" middleware, the transformed\n    \/\/ transactions are wrapped inside a \"$\" attribute.\n    \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n    \/\/\n    \/\/  mempool := {\n    \/\/    \"$\": <e.out[0].tape[0].cell.slice(1)>,\n    \/\/    \"tx\": {\n    \/\/      \"h\": <transaction id>\n    \/\/    }\n    \/\/  }\n    \/\/\n    })\n    console.log(\"ONLY the OPRETURN cells\", e)\n})\n```\n\nIn case of block related requests, we also have an additional `blk` attribute attached automatically:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0].tape[0].cell.slice(1))\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", 588000)\n  \/\/\n  \/\/ Since we have a \"map\" middleware, the transformed\n  \/\/ transactions are wrapped inside a \"$\" attribute.\n  \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n  \/\/\n  \/\/  block := {\n  \/\/    header: <block header>,\n  \/\/    tx: [\n  \/\/      {\n  \/\/        \"$\": <.out[0].tape[0].cell.slice(1)>,  \n  \/\/        \"tx\": {\n  \/\/          \"h\": <transaction id>\n  \/\/        },\n  \/\/        \"blk\": {\n  \/\/          \"i\": <block height>,\n  \/\/          \"h\": <block hash>,\n  \/\/          \"t\": <block time>\n  \/\/        }\n  \/\/      },\n  \/\/      ...\n  \/\/      {\n  \/\/        \"$\": <.out[0].tape[0].cell.slice(1)>,  \n  \/\/        \"tx\": {\n  \/\/          \"h\": <transaction id>\n  \/\/        },\n  \/\/        \"blk\": {\n  \/\/          \"i\": <block height>,\n  \/\/          \"h\": <block hash>,\n  \/\/          \"t\": <block time>\n  \/\/        }\n  \/\/      }\n  \/\/    ]\n  \/\/  }\n  \/\/\n})\n```\n\n> **NOTE**\n>\n> The \"map\" step is separate from the \"parse\" step because the \"parse\" takes care of deserialization, which won't vary much across applications, whereas \"map\" functions are application specific and will be different for every app.\n\n---\n\n# Troubleshoot\n\n## 1. How many bitworks to create?\n\nThere are two modes of bitwork usage:\n\n1. **Fetch mode:** for actively fetching data from the bitcoin network.\n2. **Listen mode:** for setting up an event handler to listen to events from the bitcoin network.\n\nIf your application involves both **fetching** and **listening**, you should create two separate bitwork instances: one for fetching, and the other for listening.\n\nHere's an example:\n\n```\nconst bitwork = require('bitwork')\nconst fetcher = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nfetcher.on(\"ready\", async () => {\n  let mempool = await fetcher.get(\"mempool\")\n  console.log(\"current mempool = \", mempool)\n})\nconst listener = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nlistener.on(\"ready\", async () => {\n  listener.on(\"mempool\", (e) => {\n    console.log(\"new mempool transaction\", e)\n  })\n  listener.on(\"block\", (e) => {\n    console.log(\"new mempool transaction\", e)\n  })\n})\n```\n\nThings to note:\n\n1. We have created two bitwork instances: `fetcher` and `listener`.\n2. The `listener` can listen to both `mempool` and `block` events simultaneously.\n\n","62":"# BUIDL Bootcamp\n\nIf you're on Windows, [watch this video](https:\/\/youtu.be\/qVQO7pezDWM). Otherwise:\n\n### Step 1: Git\n\nGit is the primary collaboration software for software development -- like Google Docs for programmers.\n\nTo check whether you have it installed go to your terminal, type \u201cgit\u201d and hit enter. If you don\u2019t see a bunch of instructions (see pic below), you don\u2019t have git installed and need to install [Git](https:\/\/git-scm.com\/book\/en\/v2\/Getting-Started-Installing-Git)\n\n![image](.\/images\/git.png)\n\n### Step 2: Github\n\n[Create a GitHub account](https:\/\/github.com\/join) if you don\u2019t already have one.\n\n### Step 3: Python\n\nGo to your terminal, type \u201cpython3\u201d and hit enter. If you don\u2019t see a \u201cpython prompt\u201d (see pic below) then you need to [install Python 3](https:\/\/docs.python-guide.org\/starting\/installation\/). Hit control-d or call the python `exit()` function to exit.\n\n![image](.\/images\/prompt.png)\n\n\n### Step 4: Clone the Project with Git, install dependencies, and run it\n\n```\ngit clone https:\/\/github.com\/justinmoon\/digital-cash.git\ncd digital-cash\npython3 -m venv venv\nsource venv\/bin\/activate\npython3 -m pip install -r requirements.txt\njupyter notebook\n```\n\nThis will open up your web browser to a page that looks like the image below. This is [Jupyter Notebook](http:\/\/jupyter.org\/), which is basically a little website that\u2019s run on only your computer.\n\nClick the \"PNGCoin Workbook.ipynb\" link to follow along with this first lesson.\n\n### Using Jupyter Notebook\n\nCheck out [this tutorial](https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tutorial\/) to learn more about using Jupyter Notebook.\n\nIf you stop Jupyter for any reason and later want to restart it:\n\n```\ncd digital-cash\nsource venv\/bin\/activate\njupyter notebook\n```\n","63":"<img style=\"width:500px\" src=\"https:\/\/user-images.githubusercontent.com\/33088785\/145907555-c2d870a7-46aa-419e-a12b-8502c80c0849.png\">\n\n# LNURLVend\n## Offline bitcoin vending machine\n\n> <i>Join our <a href=\"https:\/\/t.me\/makerbits\">telegram support\/chat<\/a>.<\/i>\n\nLNURLVend is the next logic step after <a href=\"https:\/\/github.com\/arcbtc\/LNURLPoS\">LNURLPoS<\/a> <-- go to that repo to learn more about the concepts behind LNURLVend.\n\n### Demo video\n\nhttps:\/\/twitter.com\/arcbtc\/status\/1470541850566090757\n\n### Tutorial video\n\n<a href=\"https:\/\/www.youtube.com\/watch?v=Fg0UuuzsYXc&list=PLPj3KCksGbSYcLQoQbRGAtuHnQ4U4mXeL&index=38\" target=\"_blank\" ><img style=\"width:500px\" src=\"https:\/\/user-images.githubusercontent.com\/33088785\/146017455-5cda5ad7-ba7a-490b-8362-919102bde948.png\"><\/a>\n\n## Hardware\n\n![145817489-0223e99f-537b-4852-a8cb-26ceba8d4a5a](https:\/\/user-images.githubusercontent.com\/33088785\/145819968-96b2c263-cbf7-4b20-9237-aabe1fec5373.png)\n\n* Vending Machine. I use this excellent <a href=\"https:\/\/www.aliexpress.com\/item\/1005003681521257.html\">vending machine<\/a> \ud83e\udd29 (USE THIS PROMO CODE TO SAVE $45 **VSFPCZIIPKTM**)\n* ESP32 DEV MODULE\n* 12V to 5V Converter USB,3A\n* male\/male, female\/female, male\/female jumper wires\n* Keypad membrane\n* 1.4inch TFT ST7735\n* 12v battery (optional)\n* Wide breadboard (I used x2 normal breadboards stuck together)\n* 4 Channel Relay Module\n* Single relay module\n\n**Keypad membrane GPIO map:** \n12-> 32, last row (A,B,C,D) GND\n\n**TFT GPIO map:** \n[VCC - 5V (on the single relay), GND - GND, CS - GPIO5, Reset - GPIO16, AO (DC) - GPI17, SDA (MOSI) - GPIO23, SCK - GPIO18, LED - 3.3V (on the single relay)]\n\n![vending](https:\/\/user-images.githubusercontent.com\/33088785\/145814575-58988069-48b9-4e1d-8aa2-85be552be4c8.png)\n\n## Software\n\n### Arduino software install\n\n* Download\/install latest <a href=\"https:\/\/www.arduino.cc\/en\/software\">Arduino IDE<\/a>\n* Install ESP32 boards, using <a href=\"https:\/\/docs.espressif.com\/projects\/arduino-esp32\/en\/latest\/installing.html#installing-using-boards-manager\">boards manager<\/a>\n* Copy <a href=\"https:\/\/github.com\/arcbtc\/LNURLVend\/tree\/main\/libraries\">these libraries<\/a> into your Arduino IDE library folder\n* Plug in ESP32. From *Tools>Board>ESP32 Boards* select **ESP32 DEV MODULE**\n\n> *Note: You may need to roll your ESP32 boards back to an earlier version in the Arduino IDE, by using tools>boards>boards manager, searching for esp. I use v1.0.5(rc6), and have also used v1.0.4 which worked.*\n### LNbits extension\n\nTo make things easy (usually a few clicks on things like Raspiblitz), there is an <a href=\"https:\/\/github.com\/lnbits\/lnbits\/tree\/master\/lnbits\/extensions\/lnurlpos\">LNbits extension<\/a>.\nIf you want to make your own stand-alone server software that would be fairly easy to do, by replicating the lnurl.py file in the extension.\n\n### Future updates \nLooking forward to seeing this same project being used in a range of vending machines, all shapes and sizes.\n","64":"# Bitcoin-Keys-Generator\nPython module that generates private key, public key and wallet address from number\n\n# Usage\n\n`python generators 123` \n\nwithout any argument, script is converting number `1` by default. ","65":"Sample code from \"Basic blockchain programming\", a developer-oriented series about Bitcoin.\n\nhttp:\/\/davidederosa.com\/basic-blockchain-programming\/\n","66":"BitcoinEmissions\n================\n\nA project to calculate CO2 emissions of mining bitcoin.\n\nMotivation\n==========\n\nWe wanted to understand how much energy was going into the computing the hashes in bitcoin and hence how much CO2 was being produced. \n\n\n\nAssumptions\n===========\n\nGenerating electricity releases 500 grams of CO2\/kWhe. Based on:  [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Electricity_generation#Environmental_concerns)\n\nThe average efficiency of the bitcoin miners in the system is 2000 Mhash\/J. Which is conservative. Source: [mining hardware comparison](https:\/\/en.bitcoin.it\/wiki\/Mining_hardware_comparison)\n\nWe have generated a function which fits the HashRate up to now - it assumes it's exponental.\n\nResults\n=======\n\nAccording to our calculations as of May 1st 2014 each bitcoin will release ~103 kg of CO2 into the atmosphere. That happens once every 24 seconds. \n\nIf efficiency of bitcoin miners stays the same. That number will reach ~1602 kg of CO2 by May 1st 2015. \n\nRunning the code\n================\n\nWe've provided the code which is Wolfram Mathematica (version 9). \n","67":"LndHub\n======\n\nWrapper for Lightning Network Daemon (lnd). It provides separate accounts with minimum trust for end users.\n\nINSTALLATION\n------------\n\nYou can use those guides or follow instructions below:\n\n* https:\/\/github.com\/dangeross\/guides\/blob\/master\/raspibolt\/raspibolt_6B_lndhub.md\n* https:\/\/medium.com\/@jpthor\/running-lndhub-on-mac-osx-5be6671b2e0c\n\n```\ngit clone git@github.com:BlueWallet\/LndHub.git\ncd LndHub\nnpm i\n```\n\nInstall `bitcoind`, `lnd`, and `redis`. Edit LndHub's `config.js` to set it up correctly.\nCopy the files `admin.macaroon` (for Bitcoin mainnet, usually stored in `~\/.lnd\/data\/chain\/bitcoin\/mainnet\/admin.macaroon`)\nand `tls.cert` (usually stored in `~\/.lnd\/tls.cert`) into the root folder of LndHub.\n\nLndHub expects LND's wallet to be unlocked, if not \u2014 it will attempt to unlock it with the password stored in `config.lnd.password`.\nDon't forget to configure disk-persistence for `redis` (e.g., you may want to set `appendonly` to  `yes` in `redis.conf` (see\nhttp:\/\/redis.io\/topics\/persistence for more information).\n\nIf you have no `bitcoind` instance, for example if you use neutrino, or you have no bitcoind wallet, \nfor example if you use LND for wallet managment, you can remove the bitcoind settings from `config.js`.\nPlease note that this feature is limited to Bitcoin, so you can't use it if you use any other cryptocurrency with LND (e.g., Litecoin).\n\n### Deploy to Heroku\n\nAdd config vars :\n* `CONFIG` : json serialized config object\n* `MACAROON`: hex-encoded `admin.macaroon`\n* `TLSCERT`: hex-encoded `tls.cert`\n\n### Run in docker\n\nLndHub is available on Docker Hub as [`bluewalletorganization\/lndhub`](https:\/\/hub.docker.com\/r\/bluewalletorganization\/lndhub).\nPlease note that this requires a separate instance of redis and LND and optionally, bitcoind.\nYou can also view Umbrel's implementation using docker-compose [here](https:\/\/github.com\/getumbrel\/umbrel\/blob\/280c87f0f323666b1b0552aeb24f60df94d1e43c\/apps\/lndhub\/docker-compose.yml).\n\n### Reference client implementation\n\nCan be used in ReactNative or Nodejs environment\n\n* https:\/\/github.com\/BlueWallet\/BlueWallet\/blob\/master\/class\/wallets\/lightning-custodian-wallet.js\n\n\n\n### Tests\n\nAcceptance tests are in https:\/\/github.com\/BlueWallet\/BlueWallet\/blob\/master\/tests\/integration\/lightning-custodian-wallet.test.js\n\n![image](https:\/\/user-images.githubusercontent.com\/1913337\/52418916-f30beb00-2ae6-11e9-9d63-17189dc1ae8c.png)\n\n\n\n## Responsible disclosure\n\nFound critical bugs\/vulnerabilities? Please email them to bluewallet@bluewallet.io\nThanks!\n","68":"","69":"# AI-Trader\n\nWe had some good codes going here but some new ideas have happened. They will be shown here (Different branch) and\nover at [TheDoctorAI\/edge-learner](https:\/\/github.com\/TheDoctorAI\/edge-learner)\n\n------------------------------------------------------------------\n\n---- Setting Up Locally:\n\n`pipenv sync`\n\n`pipenv shell`\n\n`python -m ipykernel install --user --name=aitrader`\n\n`jupyter notebook --ip=127.0.0.1`\n\n---- At this point you should be able to switch to your Pipenv's Python as kernel in notebook.\n\n------------------------------------------------------------------\n\nor...\n\nAll of the .ipynb scripts in this repo can be run on Google Colaboratory. There is a Colab button link on each of the script pages here on Github. For instance: https:\/\/github.com\/TheDoctorAI\/AI-Trader\/blob\/master\/lstm_forecaster.ipynb\n","70":"# 21: Build the Machine-Payable Web [![Build Status](https:\/\/travis-ci.org\/21dotco\/two1-python.svg?branch=master)](https:\/\/travis-ci.org\/21dotco\/two1-python)\n\n![21 logo](docs\/img\/21_banner.png \"21\")\n\n21 is an open source Python library and command line interface for\nquickly building machine-payable web services. It allows you to\naccomplish three major tasks:\n\n  - Get bitcoin on any device\n  - Add bitcoin micropayments to any Django or Flask app\n  - Earn bitcoin on every HTTP request\n\nThe package includes:\n\n - an HD wallet to securely manage your bitcoin\n - crypto and bitcoin libraries to build bitcoin\/blockchain applications\n - a [micropayment-channels](https:\/\/21.co\/learn\/intro-to-micropayment-channels\/) client and server\n - commands for mining, buying, and earning bitcoin, as well as requesting it from the 21 faucet\n - tools for publishing machine-payable endpoints to the [21 Marketplace](https:\/\/21.co\/mkt)\n - containers that allow your machine to sell machine resources for bitcoin\n\nand much more.\n\n## Security\n\n_Please note that the 21 software is in beta_. To protect the security\nof your systems while using 21, we highly recommend you install the\nsoftware on a device other than your main laptop (e.g. 21 Bitcoin\nComputer, an old laptop, or an Amazon Virtual Machine) while the\nproduct is still in beta. You can read more security-related\ninformation [here](https:\/\/21.co\/learn\/security\/). Please send an\nemail to [security@21.co](mailto:\/\/support@21.co) regarding any issue\nconcerning security.\n\n## Installation\n[Create an account](https:\/\/21.co) or install the library and CLI\n(python3.4+ is required):\n\n``` bash\n$ curl https:\/\/21.co | sh\n```\n\n`two1` can also be installed via pip:\n\n``` bash\n$ sudo pip3 install two1\n```\n\nStart with the command line tool:\n\n``` bash\n$ 21 help\n```\n\nThen read the [Introduction to 21](https:\/\/21.co\/learn\/intro-to-21\/) guide\nand the `two1`\n[documentation](https:\/\/21.co\/learn\/#reference-21-library).\n\n## Developers\nTo edit and run the two1 source code:\n\n```shell\n$ git clone https:\/\/github.com\/21dotco\/two1-python.git\n$ cd two1-python\/\n$ pip3 install -r requirements.txt  # Install the requirements\n$ pip3 install -e .  # Install 21 as an editable python library\n```\n\nYour changes to the source will now be reflected in your system\ninstallation in real-time.\n\n## Docker\nYou can pull [Docker](https:\/\/www.docker.com\/) images with\n`two1` pre-installed from the\n[21 Docker Hub repository](https:\/\/hub.docker.com\/r\/21dotco\/two1).\n\n``` bash\n$ docker pull 21dotco\/two1\n```\n\nThen run the latest base image:\n\n``` bash\n$ docker run -it 21dotco\/two1 sh\n```\n\n## Community\nJoin the [21 developer community](https:\/\/slack.21.co) to chat\nwith other users or to get in touch with support.\n\n## Licensing\n`two1` is licensed under the FreeBSD License. See\n[LICENSE](https:\/\/github.com\/21dotco\/two1-python\/blob\/master\/LICENSE)\nfor the full license text.\n","71":"BTCPool for Bitcoin, Ethereum, Decred, Bytom, ...\n==================\n\n|Branch|Status|\n|------|------|\n|master|[![CircleCI](https:\/\/circleci.com\/gh\/btccom\/btcpool\/tree\/master.svg?style=shield)](https:\/\/circleci.com\/gh\/btccom\/btcpool\/tree\/master)|\n|deveth|[![CircleCI](https:\/\/circleci.com\/gh\/btccom\/btcpool\/tree\/deveth.svg?style=shield)](https:\/\/circleci.com\/gh\/btccom\/btcpool\/tree\/deveth)|\n\nBTCPool is backend system of [https:\/\/pool.btc.com](https:\/\/pool.btc.com).\n\n> This is a version of BTCPool that supports more blockchains. Check the **SHA256-only** version at [master](https:\/\/github.com\/btccom\/btcpool\/tree\/master) branch.\n\nThe pool backend support these blockchains at current:\n* SHA256\n   * [Bitcoin](https:\/\/bitcoin.org\/)\n   * [BitcoinCash](https:\/\/bitcoincash.org\/)\n   * [UnitedBitcoin](https:\/\/ub.com\/)\n* Scrypt\n   * [Litecoin](https:\/\/litecoin.org\/)\n* ETHash \/ Daggerhashimoto\n   * [Ethereum](https:\/\/www.ethereum.org\/)\n   * [Ethereum Classic](https:\/\/ethereumclassic.org\/)\n* EquiHash\n   * [ZCash](https:\/\/z.cash\/)\n   * [Beam](https:\/\/www.beam.mw\/)\n   > Tips: ZCash and BEAM use different EquiHash parameters and are not compatible in mining.\n* Cuckoo Cycle\n   * [Grin](https:\/\/grin-tech.org\/)\n   > Tips: Grin supports `Cuckaroo Cycle 29` and `Cuckatoo Cycle 31` at the same time, miners can choose an algorithm to mine.\n* Blake-256\n   * [Decred](https:\/\/www.decred.org\/)\n* Tensority\n   * [Bytom](https:\/\/bytom.io\/)\n* Eaglesong\n   * [Ckb](https:\/\/www.nervos.org\/) (finished but the test is not enough)\n   > Tips: only Tested with bminer and nbminer. need to be updated after the new version of ckb is released. \n* Others\n   * ~~[Siacoin](https:\/\/www.sia.tech\/)~~ (not finished and need test)\n\nIt also support these merged mining blockchains of SHA256 blockchains:\n* SHA256 merged mining\n   * [Namecoin](https:\/\/www.namecoin.org\/)\n   * [RSK](https:\/\/www.rsk.co\/)\n   * [ElastOS](https:\/\/elastos.org\/)\n   * Other blockchains that compatible with [Bitcoin merged mining specification](https:\/\/en.bitcoin.it\/wiki\/Merged_mining_specification)\n   \nIf you want merged mine more than one chains that compatible with [Bitcoin merged mining specification](https:\/\/en.bitcoin.it\/wiki\/Merged_mining_specification), use [merged mining proxy](https:\/\/github.com\/btccom\/btcpool-go-modules\/tree\/master\/mergedMiningProxy).\n\nNote: The project is still a testbed and work in progress, all things could be changed.\n\nSee Also:\n* [BTCPool's golang modules](https:\/\/github.com\/btccom\/btcpool-go-modules)\n\n## Architecture (need update)\n\n![Architecture](docs\/btcpool.png)\n\n## Install\n\n1. Install `Zookeeper`, or see [INSTALL-ZooKeeper.md](docs\/INSTALL-ZooKeeper.md)\n  * [https:\/\/zookeeper.apache.org\/](https:\/\/zookeeper.apache.org\/)\n2. Install `Kafka`, or see [INSTALL-Kafka.md](docs\/INSTALL-Kafka.md)\n  * [https:\/\/kafka.apache.org\/](https:\/\/kafka.apache.org\/)\n3. Install `BTCPool`, see [INSTALL-BTCPool.md](docs\/INSTALL-BTCPool.md)\n\n## Upgrade\n\nUpgrading to BTCPool 2.3.0 requires additional operations on `sharelogger`, `slparser` and `statshttpd` due to incompatible sharelog format changes.\n\nSee [UPGRADE-BTCPool.md](docs\/UPGRADE-BTCPool.md) for more information.\n\n## Benchmark (outdated)\n\nWe have test 100,000 miners online Benchmark. see [Benchmark-100000.md](docs\/Benchmark-100000.md)\n\n## BTCAgent\n\nBTCAgent is a kind of stratum proxy which use customize protocol to communicate with the pool. It's very efficient and designed for huge mining farm.\n\n* [AGENT.md](docs\/AGENT.md)\n* BTCAgent's [HomePage](https:\/\/github.com\/btccom\/BTCAgent)\n\n## Testing\n\nYou could run `simulator` to test the system. It will simulate a lots of miners, need to enbale config `enable_simulator` on your Stratum Server.\n\n## License\nBTCPool is released under the terms of the MIT license. See [LICENSE](LICENSE) for more information or see [https:\/\/opensource.org\/licenses\/MIT](https:\/\/opensource.org\/licenses\/MIT).\n\n\nWelcome aboard!\n\nBTC.COM Team.\n","72":"BitcoinExchangeScript\n=====================\n\nDeprecated please look the bitcoinexchange-final project\n","73":"# Feed Open Source\n\nWe need another way to fund software. All the other ways are\n[broken or unscalable](\nhttp:\/\/dominictarr.com\/post\/71958587606\/some-thoughts-on-the-economics-of-software-development).\nWe need to align the interests of the users with developers.\nWe need to feed developers, and the software needs to be freely distributable.\n\n## The Problem\n\nSoftware only needs to be written once.  \nBugs need to be patched, but a bug only needs to be patched once.\n\nWhy do we pay for software many times, or not at all?  \nSoftware should be paid for exactly once.\n\nYou can't sell software like you sell physical items,\nsoftware is too easy to copy.\n\nBut here is something you can sell: _a promise to write software_\n\n## The Vision\n\nTake agile consulting to the crowds.\n\nWork is funded in iterations, on a fixed time basis, a week or two at a time.\nClients and developers negotiate what features they are most need in the next iteration.\nThe developers implement that, and the clients evaluate it. Repeat.\nEvery one is constantly in the loop.\n\n*feedopensource* is different to agile consulting because \"the clients\"\nare a crowd of people.\n*feedopensource* is different to crowd-funding platforms because clients\nwill have real power to influence a project, and keep it on task.\n\nA client does not commit all their money at once, so the developers\nmust keep them satisfied to receive funding in the future.\nFor the client, most of the uncertainty about the project is removed,\nbecause they see it improve at each stage.\n\nLess uncertainty means clients can fund more,\nbecause they know the value they are getting.\n\n## This is _not_ a startup.\n\nThis is not Anything as a Service.  \nThis is not an Anything-Platform.  \n\nThis is just an open source tool for feeding open source projects.  \n\n*feedopensource* has a [liberal open-source license](.\/LICENSE).\n\nYou may use *feedopensource* to fund your own projects,\nas *feedopensource* feeds itself with *feedopensource*\n\n## The Prototype\n\nThe prototype has progressed to iteration 2!\n\n[![feedopensource badge](https:\/\/feedopensource.com\/iteration\/dominictarr\/feedopensource\/18oBEV9hFdDMEct9Ys2bSAuEY4bi2KSMHi.png#1.2)](\n  https:\/\/feedopensource.com\/iteration\/dominictarr\/feedopensource\/18oBEV9hFdDMEct9Ys2bSAuEY4bi2KSMHi\n)\n\nCurrently, feedopensource can:\n* track the state of a project on github,\n* represent this as a png (embeddable in github issues) and as a web page\n  (https:\/\/feedopensource.com\/iteration\/dominictarr\/feedopensource\/1PTAwipYpP63uNrcxfm5FewxRdZyar6ceu)\n* associate a bitcoin transaction with a github user.\n\nThis is very simple, but with the support of iteration 1's \n[funders](https:\/\/feedopensource.com\/iteration\/1PTAwipYpP63uNrcxfm5FewxRdZyar6ceu)\n\n## Iteration 2\n\nTasks for iteration 2 are listed [here](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/20)\n\n### Bitcoin\n\nTransfer btc into `18oBEV9hFdDMEct9Ys2bSAuEY4bi2KSMHi` to fund iteration 2.\n\nPlease post a comment [here](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/4)\nwith your transaction id.\n\nNot sure how to buy bitcoin? [Learn how you can buy bitcoin in your country](http:\/\/howtobuybitcoins.info)\nAlso see [this issue](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/5)\n\n### Credit-card\n\nIf you would rather fund this with normal money please\ncomment with the amount you'd like to pay on\n[this issue](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/6)\n\n## The Plan\n\n`Clients` and `Developers` post issues to `Tasks` and plan `Iterations`.\n (on github or [similar](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/7))\n\n*feedopensoure* will be implemented as a bot that posts to and scrapes\/apis Github.\nThis avoids the problem of having to implement a fresh discussion platform, Notifications,\nUser system, etc!\n\nPlease comment on the [first iteration!](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/4)\n\n## The Workflow\n\nIn the future you might use *feedopensource* like this:\n\n* `Clients` post issues requesting features or bug fixes.\n  ([\"Tasks\"](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/1))\n* `Tasks` are grouped into an [Iteration](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/3)\n  (an `\"Iteration\"` is just an issue that links to a set of `Tasks` with a\n  [progress bar](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/2))\n  `Clients` and `Developers` can discuss that iteration, and decide to fund it or not.\n* progress can be tracked by posting to the `Iteration` issue, or to the Task issues.\n  as the Tasks progress (are closed) the progress bar updates, this time to show work done.\n* There will be progress bar pngs representing project status and history which can easily \n  be added into github issues and readmes.\n* Users will have a way to associate a bitcoin wallet with a github account, so they can\n  [claim their payment](https:\/\/github.com\/dominictarr\/feedopensource\/issues\/5)\n\n","74":"# bruteforce-wallet\n\nThe purpose of this program is to try to find the password of an encrypted\nPeercoin (or Bitcoin, Litecoin, etc...) wallet file (i.e. wallet.dat).\n\nIt can be used in two ways:\n\n - try all the possible passwords given a charset\n - try all the passwords in a file\n\nThere is a command line option to specify the  number of threads to use.\n\nSending a USR1 signal to a running bruteforce-wallet process makes it print\nprogress and continue.\n\n\n## Exhaustive mode\n\nThe program tries to decrypt one of the encrypted addresses in the wallet by\ntrying all the possible passwords. It is especially useful if you know\nsomething about the password (i.e. you forgot a part of your password but still\nremember most of it). Finding the password of a wallet without knowing\nanything about it would take way too much time (unless the password is really\nshort and\/or weak).\n\nThere are command line options to specify:\n\n - the minimum password length to try\n - the maximum password length to try\n - the beginning of the password\n - the end of the password\n - the character set to use (among the characters of the current locale)\n\n\n## Dictionary mode\n\nThe program tries to decrypt one of the encrypted addresses in the wallet by\ntrying all the passwords contained in a file. The file must have one password\nper line.\n\n\n## Dependencies\n\nThe program requires the OpenSSL and BerkeleyDB libraries. Installation on Debian & Ubuntu:\n\n\n\tapt install libdb-dev libssl-dev -y\n\n\n## Compilation\n\nIf you are building from the raw sources, you must first generate the\nconfiguration script:\n\n    .\/autogen.sh\n\n\nThen, build the program with the commands:\n\n    .\/configure\n    make\n\n\nTo install it on your system, use the command:\n\n    make install\n\n\n## Limitations\n\nThe program currently only works on unix-like POSIX systems (e.g. GNU\/Linux).\n\nDifferent versions of BerkeleyDB are usually not compatible with each other.\nTherefore, for the program to work, you will have to check that the BerkeleyDB\nversion you are using can read the databases created by the BerkeleyDB version\nyour wallet was created with.\n\n\n## Examples\n\nTry to find the password of an encrypted wallet file using 4 threads, trying\nonly passwords with 5 characters:\n\n    bruteforce-wallet -t 4 -l 5 -m 5 wallet.dat\n\n\nTry to find the password of an encrypted wallet file using 8 threads, trying\nonly passwords with 5 to 10 characters beginning with \"W4l\" and ending with \"z\":\n\n    bruteforce-wallet -t 8 -l 5 -m 10 -b \"W4l\" -e \"z\" wallet.dat\n\n\nTry to find the password of an encrypted wallet file using 8 threads, trying\nonly passwords with 10 characters using the character set \"P\u60c58\u016d\":\n\n    bruteforce-wallet -t 8 -l 10 -m 10 -s \"P\u60c58\u016d\" wallet.dat\n\n\nTry to find the password of an encrypted wallet file using 6 threads, trying\nthe passwords contained in a dictionary file:\n\n    bruteforce-wallet -t 6 -f dictionary.txt wallet.dat\n\n\nPrint progress info:\n\n    pkill -USR1 -f bruteforce-wallet\n\n\nPrint progress info every 30 seconds:\n\n    bruteforce-wallet -t 6 -f dictionary.txt -v 30 wallet.dat\n\n\nSave\/restore state between sessions:\n\n    bruteforce-wallet -t 6 -f dictionary.txt -w state.txt wallet.dat\n      (Let the program run for a few minutes and stop it)\n    bruteforce-wallet -t 6 -w state.txt wallet.dat\n","75":"Brainflayer\n===========\n\nBrainflayer is a Proof-of-Concept brainwallet cracking tool that uses\n[libsecp256k1](https:\/\/github.com\/bitcoin\/secp256k1) for pubkey generation.\nIt was originally released as part of my DEFCON talk about cracking brainwallets\n([slides](https:\/\/rya.nc\/dc23), [video](https:\/\/rya.nc\/b6), [why](https:\/\/rya.nc\/defcon-brainwallets.html)).\n\nThe name is a reference to [Mind Flayers](https:\/\/en.wikipedia.org\/wiki\/Illithid),\na race of monsters from the Dungeons & Dragons role-playing game. They eat\nbrains, psionically enslave people and look like lovecraftian horrors.\n\nThe current release is more than four times faster than the DEFCON release, and\nmany features have been added.\n\nIf brainflayer is useful to you, please get in touch to let me know. I'm very\ninterested in any research it's being used for, and I'm generally happy to\ncollaborate with academic groups.\n\nDisclaimer\n----------\nJust because you *can* steal someone's money doesn't mean you *should*.\nStealing would make you a jerk. Don't be a jerk.\n\nNo support will be provided at this time, and I may ignore or close issues\nrequesting support without responding.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nUsage\n-----\n\n### Basic\n\nPrecompute the bloom filter:\n\n`hex2blf example.hex example.blf`\n\nRun Brainflayer against it:\n\n`brainflayer -v -b example.blf -i phraselist.txt`\n\nor\n\n`your_generator | brainflayer -v -b example.blf`\n\n### Advanced\n\nBrainflayer's design is heavily influenced by [Unix philosophy](https:\/\/en.wikipedia.org\/wiki\/Unix_philosophy).\nIt (mostly) does one thing: hunt for tasty brainwallets. A major feature it\ndoes *not* have is generating candidate passwords\/passphrases. There are plenty\nof other great tools that do that, and brainflayer is happy to have you pipe\ntheir output to it.\n\nUnfortunately, brainflayer is not currently multithreaded. If you want to have\nit keep multiple cores busy, you'll have to come up with a way to distribute\nthe work yourself (brainflayer's -n and -k options may help). In my testing,\nbrainflayer benefits significantly from hyperthreading, so you may want to\nrun two copies per physical core. Also worth noting is that brainflayer mmaps\nits data files in shared memory, so additional brainflayer processes do not\nuse up that much additional RAM.\n\nWhile not strictly required, it is *highly* recommended to use the following\noptions:\n\n* `-m FILE` Load the ecmult table from `FILE` (generated with `ecmtabgen`)\n            rather than computing it on startup. This will allow multiple\n            brainflayer processes to share the same table in memory, and\n            signifigantly reduce startup time when using a large table.\n\n* `-f FILE` Verify check bloom filter matches against `FILE`, a list of all\n            hash160s generated with\n            `sort -u example.hex | xxd -r -p > example.bin`\n            Enough addresses exist on the Bitcoin network to cause false\n            positives in the bloom filter, this option will suppress them.\n\nBrainflayer supports a few other types of input via the `-t` option:\n\n* `-t keccak` passphrases to be hashed with keccak256 (some ethereum tools)\n\n* `-t priv` raw private keys - this can be used to support arbitrary\n            deterministic wallet schemes via an external program. Any trailing\n            data after the hex encoded private key will be included in\n            brainflayer's output as well, for reference. See also the `-I`\n            option if you want to crack a bunch of sequential keys, which has\n            special speed optimizations.\n\n* `-t warp` salts or passwords\/passphrases for WarpWallet\n\n* `-t bwio` salts or passwords\/passphrases for brainwallet.io\n\n* `-t bv2`  salts or passwords\/passphrases for brainv2 - this one is *very* slow\n            on CPU, however the parameter choices make it a great target for GPUs\n            and FPGAs.\n\n* `-t rush` passwords for password-protected rushwallets - pass the fragment (the\n            part of the url after the #) using `-r`. Almost all wrong passwords\n            will be rejected even without a bloom filter.\n\nAddress types can be specified with the `-c` option:\n\n* `-c u` uncompressed addresses\n\n* `-c c` compressed addresses\n\n* `-c e` ethereum addresses\n\n* `-c x` most signifigant bits of public point's x coordinate\n\nIt's possible to combine two or more of these, e.g. the default is `-c uc`.\n\nAn incremental private key brute force mode is available for fans of\n[directory.io](http:\/\/www.directory.io\/), try\n\n`brainflayer -v -I 0000000000000000000000000000000000000000000000000000000000000001 -b example.blf`\n\nSee the output of `brainflayer -h` for more detailed usage info.\n\nAlso included is `blfchk` - you can pipe it hex encoded hash160 to check a\nbloom filter file for. It's very fast - it can easily check millions of\nhash160s per second. Not entirely sure what this is good for but I'm sure\nyou'll come up with something.\n\nBuilding\n--------\n\nShould compile on Linux with `make` provided you have the required devel libs\ninstalled (at least openssl and gmp are required along with libsecp256k1's\nbuild dependencies). I really need to learn autotools. If you file an issue\nabout a build failure in libsecp256k1 I will close it.\n\nDependencies should install with\n\n```\napt install build-essential libgmp-dev libssl-dev\n```\n\nSupported build target is currently Ubuntu 20.04 on amd64\/x86_64. Issues with\nbuilding for other platforms probably won\u2019t be fixed. In particular, Kali Linux\nis *not* supported. Support for operating systems other than Linux would require\nextensive refactoring of Brainflayer's memory optimizations and is not happening.\n\nRedistribution of compiled `brainflayer` binaries is prohibited, and\nunauthorized binaries probably contain malware.\n\nAuthors\n-------\n\nThe bulk of Brainflayer was written by Ryan Castellucci. Nicolas Courtois and\nGuangyan Song contributed the code in `ec_pubkey_fast.c` which more than\ndoubles the speed of public key computations compared with the stock secp256k1\nlibrary from Bitcoin. This code uses a much larger table for ec multiplication\nand optimized routines for ec addition and doubling.\n","76":"# altcoin-address [![Build Status](https:\/\/secure.travis-ci.org\/ryanralph\/altcoin-address.png)](http:\/\/travis-ci.org\/ryanralph\/altcoin-address)\nFunctions for working with altcoin addresses, forked from [DefunctZombie](https:\/\/github.com\/defunctzombie\/bitcoin-address).\n\n## API\n\n### validate (address [, type])\n\n> returns true if the address (string) is a valid altcoin address for the type specified\n>\n> if no options are specified it defaults to bitcoin\n\n### get_address_type (address)\n\n> returns address type if valid base58 address, otherwise null\n\n### Address types\n\n* Bitcoin\/BTC  (bitcoin)\n* Litecoin\/LTC  (litecoin)\n* Peercoin\/PPCoin\/PPC  (peercoin)\n* Dogecoin\/DOGE (dogecoin)\n* BeaverCoin\/BVC (beavercoin)\n* Freicoin\/FRC  (freicoin)\n* Protoshares\/PTS  (protoshares)\n* Megacoin\/MEC  (megacoin)\n* Primecoin\/XPM  (primecoin)\n* Auroracoin\/AUR (auroracoin)\n* Namecoin\/NMC (namecoin)\n\nI intend to update this to include more currencies in the future. If you would like a new currency added quickly please send a pull request including tests.\n\n> This will work for both BIP-0016 P2SH addresses and regular addresses.\n>\n> To check the validity of a testnet address for any of the listed coins just append 'Testnet'\n\n### Example\n\n```javascript\nvar altcoin = require('altcoin-address');\n\nvar valid = altcoin.validate('1KFzzGtDdnq5hrwxXGjwVnKzRbvf8WVxck', 'bitcoin');\nif(valid)\n\tconsole.log('This is a valid address');\nelse\n\tconsole.log('Address INVALID');\n\n\n\/\/This should return that 'This is a valid address'\n```\n\n```javascript\nvar altcoin = require('altcoin-address');\n\nvar valid = altcoin.validate('1KFzzGtDdnq5hrwxXGjwVnKzRbvf8WVxck', 'litecoinTestnet');\nif(valid)\n      console.log('This is a valid address');\nelse\n      console.log('Address INVALID');\n\n\n\/\/As this is a invalid litecoin address response will be 'Address INVALID'\n```\n\n###Donations\n\nIf you've found this useful feel free to send me a tip\n> BTC 1E3s7YjGVWrnhxTYkjkBKtTX3c673CCm3w\n\n\n###Ports to other languages\n\nRuby: https:\/\/bitbucket.org\/noveltylab\/crypto-address\n","77":"# Glacier\nGlacier is a protocol for secure cold storage of bitcoins.\n[https:\/\/www.glacierprotocol.org](https:\/\/www.glacierprotocol.org)\n","78":"## Project\nSF Bitcoindev build a determinist web wallet forked from Carbon Wallet. Anyone can download and create a browser-only wallet to send and receive bitcoins. \n\n\n## Features\n- Web based wallet\n- BIP 32 Deterministic keys\n- Uses Bitcoinjs-lib v0.20\n- Testnet Switch with seeded bitcoin\n- Uses Helloblock.js for testnet faucet\n- A ChromeApp developer kit\n\n## Usage\n1. $ open app.html\n2. add ?testnet=1 (to use testnet)\n\n\n### Specs: It's easy and helps keep the project running!\n1. Put them in the \/spec dir\n2. Run them after making a change:\n\n    `open SpecRunner.html`\n\n\n## Security Warnings\nThis software is alpha software. Please make sure to run only on a clean web browser.\n\n\n## Authors\n* [Sidney Zhang](https:\/\/github.com\/sidazhang)\n* [Larry Kang](https:\/\/github.com\/lkang)\n* [Srinivasan Sriram](https:\/\/github.com\/ssr1ram)\n* [Karl Keefer](https:\/\/github.com\/karlkeefer)\n* [Vladimir Pekez](https:\/\/github.com\/vladimirpekez\/)\n* [Taariq Lewis](https:\/\/github.com\/taariq)\n\n\n## Contributing\nFeel free to send pull requests to have your project\/startup listed here.\n\n## Special Thanks\nSpecial thanks to the [Carbon Wallet](http:\/\/carbonwallet.com\/) team that inspired this project fork.\n\n## License\nThis web wallet is free and open-source software released under the MIT license.\n","79":"Coinorama\n=========\n\nWhat is Coinorama ?\n-------------------\nCoinorama is a monitoring framework for Bitcoin markets, network and blockchain.\nIt's been active since May 2013 as Coinorama.net and released under GNU Affero GPL v3 in 2016.\n\nThe framework includes : data collection tools, database for timeseries and a web frontend.\n\n\nLicense\n-------\n\nCoinorama is Copyright (c) 2013-2016 Nicolas BENOIT, released under the terms of the GNU Affero General Public License version 3.\nSee [COPYING](COPYING) for more information or see http:\/\/www.gnu.org\/licenses\/.\n\nThe web frontend distribution comes with : JQuery and Flot (a Javascript plotting library for jQuery) :\n * JQuery is Copyright (c) 2012 jQuery Foundation and other contributors, released under the MIT license.\n * Flot is Copyright (c) 2007-2014 IOLA and Ole Laursen, released under the MIT license.\n\n\nInstallation\n------------\n\nDependencies are the following :\n * lighttpd\n * glib-2.0\n * python 2.7\n * bitcoind (for network\/blocks data)\n\nAfter unpacking the distribution tarball :\n```sh\n$ .\/configure # add '-o' to enable compiler's optimizations\n$ make\n$ make install\n```\nThe installation will be performed in the current directory, copying all necessary tools in a 'bin\/' directory.\n\n\nRunning\n-------\n\nThe framework can be managed using a single script : *bin\/coinorama*\n\nHave a look at this script (or call it without any argument) to get its syntax.\n\nMost settings are located in [conf\/coinorama.conf](conf\/coinorama.conf).\nCheck out this file and fill in the markets you would like to monitor.\nCheck-out the content of [src\/markets\/watcher\/](src\/markets\/watcher\/) to find out which markets have a watcher.\n\n### Markets\nTo start collecting market data (for example bitstamp USD market) :\n```sh\n$ .\/bin\/coinorama watcher bitstampUSD start  # start collecting data\n$ .\/bin\/coinorama watcher bitstampUSD log    # inspect log\n$ .\/bin\/coinorama watcher bitstampUSD status # check watcher status\n$ .\/bin\/coinorama watcher bitstampUSD stop   # stop collecting data\n```\n\nYou may also use the *markets* keyword to process all markets declared in the configuration file : \n```sh\n$ .\/bin\/coinorama watcher markets start     # start collecting data for all markets\n```\n\nIf you're looking for Coinorama.net's historical data, get it from : http:\/\/openair.free.fr\/coinorama-20160119\/\n\nOnce you have collected a few minutes of data, you may start the markets database service :\n```sh\n$ .\/bin\/coinorama coinrefd start\n```\n\n### Blockchain\nBefore starting the collection of blockchain data, update the *bin\/watcher-blockchain.py* file with the RPC password configured for your Bitcoind.\nPlease note that you will also need to enable Bitcoind txindex to have accurate TX data.\n\nYou may download an initial data file from : http:\/\/nbenoit.tuxfamily.org\/projects\/coinorama\/blockchain.csv.gz\n\nUncompress it and rename\/move it as *data\/blockchain\/data.csv*\n\nTo start collecting blockchain data :\n```sh\n$ .\/bin\/coinorama watcher blockchain start\n```\n\nWhen the initial dataset is empty, it may require many hours of processing before actually reaching the current block.\nIn addition, the hashrate estimation may be broken given that timestamp of past blocks is not properly set.\n\nOnce you're ready, you may start the network\/blockchain database service :\n```sh\n$ .\/bin\/coinorama chainrefd start\n```\n\nNote that the blockchain monitoring services (watcher & database) are not mandatory to have a working Coinorama.\nHowever, you will be nagged from times to times that the blockchain data cannot be fetched.\n\n### Web frontend\nThe web frontend relies on Ajax to get updated data from the databases, while databases are connected to the web server through SCGI.\n\nA localhost configuration for lighttpd is included in 'conf\/lighttpd.conf'. It can be started with :\n```sh\n$ .\/bin\/coinorama lighttpd start\n```\n\nWhen all the steps above are OK, open your web browser : http:\/\/localhost:8080\/coinorama\n","80":"# bitcoin-proof\n\n[![NPM Package](https:\/\/img.shields.io\/npm\/v\/bitcoin-proof.svg?style=flat-square)](https:\/\/www.npmjs.org\/package\/bitcoin-proof)\n[![Build Status](https:\/\/img.shields.io\/travis\/ethers\/bitcoin-proof.svg?branch=master&style=flat-square)](https:\/\/travis-ci.org\/ethers\/bitcoin-proof)\n[![js-standard-style](https:\/\/img.shields.io\/badge\/code%20style-semistandard-brightgreen.svg?style=flat-square)](https:\/\/github.com\/Flet\/semistandard)\n[![Dependency status](https:\/\/img.shields.io\/david\/ethers\/bitcoin-proof.svg?style=flat-square)](https:\/\/david-dm.org\/ethers\/bitcoin-proof#info=dependencies)\n\nMerkle proof for a Bitcoin transaction.\n\n## Install\n\n```\nnpm install bitcoin-proof\n```\n\n## API\n\n  - [`getProof(String[] txIds, Number txIndex)`](#getproofstring-txids-number-txindex---txid-string-txindex-number-sibling-string)\n  - [`getTxMerkle({txId: String, txIndex: Number, sibling: String[]})`](#gettxmerkletxid-string-txindex-number-sibling-string---string)\n  - [`getMerkleRoot(String[] txIds)`](#getmerklerootstring-txids---string)\n\n----\n\n#####`getProof(String[] txIds, Number txIndex)` -> `{txId: String, txIndex: Number, sibling: String[]}`\n\nComputes the Merkle proof of a given transaction.\n\n  * `txIds` - array of transaction hashes (as hex string)\n  * `txIndex` - index of which transaction to compute a Merkle proof for\n\nReturns an object with the following keys:\n  * `txId` - transaction hash that the Merkle proof is computed for\n  * `txIndex` - index of `txId` among `txIds`\n  * `sibling` - sibling hashes of `txId` which comprise the Merkle proof\n\n----\n\n#####`getTxMerkle({txId: String, txIndex: Number, sibling: String[]})` -> `String`\n\nComputes the Merkle root of a given proof.\n\n  * `proof` - an object of the form returned by `getProof`\n\nReturns the Merkle root as a hex string.\n\n----\n\n#####`getMerkleRoot(String[] txIds)` -> `String`\n\nComputes the Merkle root of a set of transactions.\n\n  * `txIds` - array of transaction hashes (as hex string)\n\nReturns the Merkle root as a hex string.\n\n## Usage\n\n```javascript\nvar btcProof = require('bitcoin-proof');\n\nvar BLOCK_100K_TRANSACTIONS = [\n  '8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87',\n  'fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4',\n  '6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4',\n  'e9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d'\n];\n\nvar proofOfFirstTx = btcProof.getProof(BLOCK_100K_TRANSACTIONS, 0);\n\/\/ {\n\/\/   txId: '8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87',\n\/\/   txIndex: 0,\n\/\/   sibling: [\n\/\/     'fff2525b8931402dd09222c50775608f75787bd2b87e56995a7bdd30f79702c4',\n\/\/     '8e30899078ca1813be036a073bbf80b86cdddde1c96e9e9c99e9e3782df4ae49'\n\/\/   ]\n\/\/ }\n\nvar proofOfLastTx = btcProof.getProof(BLOCK_100K_TRANSACTIONS, 3);\n\/\/ {\n\/\/   txId: 'e9a66845e05d5abc0ad04ec80f774a7e585c6e8db975962d069a522137b80c1d',\n\/\/   txIndex: 0,\n\/\/   sibling: [\n\/\/     '6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4',\n\/\/     'ccdafb73d8dcd0173d5d5c3c9a0770d0b3953db889dab99ef05b1907518cb815'\n\/\/   ]\n\/\/ }\n```\n\n## License\n\n[MIT](LICENSE)\n","81":"<b>#Bitcoin Lightning Coin Specification<\/b>\n\nCoin Name : Bitcoin Lightning\n\nTicker : BLTG\n\nCoin Type : POS \n\nAlgorithm : Scrypt\n\nBlock Time : 90 Sec Approx\n\nBlock Size : 3MB \n\nBlock Reward: 64 BLTG increasing to 80 at block 88900\n \nTotal Coins: 70,000,000\n\nMinimum Stake Age : 6 Hour\n\nCoin Maturity : 89 Block\n\nRPC Port: 17126\n\nNetwork Port: 17127\n","82":"README.md","83":"BOP Bitcoin Server API\n======================\n\nThis package defines lowest level interfaces to the BOP Bitcoin Server.\n\nBuild\n-----\nInstall\n\n  * Maven3 \n  * JDK 7 with JCE Unlimited Strength Policy Jurisdiction \n  * Google protobuf compiler 2.5.0\n\t\nThen\n\n    git clone https:\/\/github.com\/bitsofproof\/bop-bitcoin-server-api\n\n    cd bop-bitcoin-client\n   \n    mvn package\n\nLicense\n-------\nApache License, Version 2.0. See LICENSE file.\n","84":"blackboard101\n=============\n\npython files from the blackboard 101 series on world bitcoin network.\n\nso far we have python code for our episodes on merkle roots, merkle trees and multi-signature transactions.\n\nthis code is for educational purposes only. \n","85":"nakamoto\n========\n\nNakamoto is a privacy-preserving Bitcoin light-client implementation in Rust,\nwith a focus on low resource utilization, modularity and security.\n\nThe vision for the project is to build a set of libraries targeting light\nclient functionality, that are easy to embed in any program and on any\nplatform, be it mobile or desktop. The project's small cpu, memory and code\nfootprint is made possible by its efficient runtime and minimal set of\ndependencies. The implementation language, Rust, opens up the possibility for\nprograms written in other languages (eg. Swift, Python, Java), to bind directly\nto it via a foreign function interface (FFI).\n\n---\n\n    [dependencies]\n    nakamoto = \"0.3.0\"\n\nRequires `rustc 1.53` or greater.\n\n## Design\n\nNakamoto is split into several crates, each handling a different aspect of the\nlight-client protocol. Although these crates are designed to be used in tandem,\nswapping implementations is trivial, due to the explicit boundaries between\nthem, and the use of traits. From a high-level, we have:\n\n* `nakamoto-client`: the core light-client library\n* `nakamoto-p2p`: the protocol state-machine implementation\n* `nakamoto-chain`: the block store and fork selection logic\n* `nakamoto-net-poll`: the default *poll*-based networking library\n* `nakamoto-common`: common functionality used by all crates\n* `nakamoto-node`: a standalone light-client daemon\n* `nakamoto-wallet`: a very basic watch-only wallet built on the above crates\n\nFor an overview of the above, see the [architecture diagram](docs\/architecture.svg)\nin the `docs` folder.\n\n## Status\n\nWhile the project is still in its infancy, the base functionality has been\nimplemented. Nakamoto is able to discover peers, download and verify the\nlongest chain and handle forks, while implementing the full header verification\nprotocol.\n\nClient side block filtering (BIP 157\/158) is implemented and working. See\n`nakamoto-wallet` for an example of how to use it.\n\nOnce peer-to-peer layer encryption (BIP 151) lands in Core, it will also\nbe implemented in Nakamoto.\n\nFinally, a C FFI will be implemented, to make it easy to embed the client\nin mobile applications.\n\nThough wallet functionality will slowly be added, it isn't the primary focus\nof this project, which sits one level below wallets.\n\n## Projects goals\n\n* __High assurance__: the library should be thoroughly tested using modern\n  techniques such as *property* and *model-based testing* as well as *discrete\n  event simulation* and *fuzzing*. These approaches benefit from a clean\n  separation between I\/O and protocol logic and have been shown to catch more\n  bugs than unit testing.\n\n* __Security__: as a library that may find its way into wallet implementations,\n  a primary goal is security and auditability. For this reason, we try to\n  minimize the total dependency footprint, keep the code easy to read and\n  forbid any unsafe code.\n\n* __Efficiency__: blockchain synchronization should be done as efficiently as\n  possible, with low memory, disk and bandwidth overhead. We target\n  resource-constrained environments, such as mobile.\n\n* __Privacy__: when possible, privacy-preserving techniques should be employed.\n  *Client Side Block Filtering* (BIP 157\/158) should be used over bloom\n  filters (BIP 37) to ensure user privacy and provide censorship resistance.\n\n## Running the tests\n\n    cargo test --all\n\n## Running the daemon\n\n    cargo run --release -p nakamoto-node -- --testnet\n\n## Contributing\n\nIf you'd like to contribute to the development of Nakamoto, please get in touch!\nOtherwise, do read the contribution [guidelines](CONTRIBUTING.md).\n\n## Donations\n\nTo help fund the project and ensure its ongoing development and maintenance, your\nsupport in Bitcoin is appreciated at the following address:\n\n    bc1qa47tl4vmz8j82wdsdkmxex30r23c9ljs84fxah\n\n## Motivation\n\nLooking at ecosystems that aren't light-client friendly\u2014Ethereum for example\u2014we\nsee that the vast majority of users are forced into trusting third parties when\ntransacting on the network.  This is completely counter to the idea and *raison\nd'\u00eatre* of blockchains, and poses a giant security and privacy risk.\nUnfortunately, this is due to the lackluster support for light-clients, both at\nthe protocol level, and in terms of the available implementations. Light-clients\nare necessary for the average user to be able to securely interface with a\nnetwork like Ethereum or Bitcoin.\n\nFor this purpose, Nakamoto was conceived as a client that can efficiently run\non any mobile device, with the highest standards of privacy and security\nachievable given the constraints.\n\n## License\n\nLicensed under the MIT license.\n&copy; 2020 Alexis Sellier (<https:\/\/cloudhead.io>)\n","86":"### Installation\n\n    $ git clone https:\/\/github.com\/hippich\/Faucet.git\n    $ cd Faucet\n    $ git submodule init \n    $ git submodule update\n    $ perl Makefile.PL\n    $ make installdeps\n\n### DB\n\nInstall SQLite3 DB and import schema into faucet.db:\n\n    sqlite3 faucet.db < schema.sql\n\n### Configuration\n\nCopy supplied sample config file faucet_sample.conf to \nfaucet.conf and edit it. Make sure to include correct\nlogin\/password to bitcoind, keys for reCaptcha and AddThis.\n\nYou will need to specify full path to SQLite3 DB file. (Or\nyou might want to configure it to use MySQL\/PostgreSql DB)\n\nAlso for Facebook authentication you will need to register \nnew application at http:\/\/www.facebook.com\/developers\/ and\nuse obtained application and secret IDs in this config file.\n\n### Run development server\n\nInstall Catalyst::Devel and run script\/faucet_server.pl to test \nthe application.\n\n    cpanm Catalyst::Devel\n    FAUCET_DEBUG=1 .\/script\/faucet_server.pl -r\n\n### Deployment under Apache\n\nEnable FastCGI module:\n\n    a2enmod fastcgi \n\nIn \/etc\/apache2\/sites-available\/faucet.conf:\n\n    FastCgiServer \/home\/faucet\/Faucet\/faucet_fastcgi.pl -processes 2\n    \n    <VirtualHost *:80>\n      ServerName faucet.example.com\n      DocumentRoot  \/home\/faucet\/Faucet\/root\n      Alias \/static \/home\/faucet\/Faucet\/root\/static\n      Alias \/ \/home\/faucet\/Faucet\/script\/faucet_fastcgi.pl\/\n    <\/VirtualHost>\n\nEnable newly created virtual host config:\n\n    a2ensite faucet.conf \n\nRestart Apache:\n\n    \/etc\/init.d\/apache2 restart \n\n### Installation notes\n\n - Catalyst::TraitFor::Controller::reCAPTCHA\n\n   For me it failed on one of tests so I had to force install it via:\n   \n    $ cpan -f Catalyst::TraitFor::Controller::reCAPTCHA\n\n\n### Submitting patches\n\nThis is very early code release and I expect to have some bugs and\/or \nmissing essential features. Please fork project on GitHub, fix issue \nand submit pull request back to merge into main tree.\n","87":"# Gym CryptoTrading Environment\n\n[![license](https:\/\/img.shields.io\/packagist\/l\/doctrine\/orm.svg)](https:\/\/github.com\/samre12\/deep-trading-agent\/blob\/master\/LICENSE)\n[![dep2](https:\/\/img.shields.io\/badge\/python-2.7-red.svg)](https:\/\/www.python.org\/download\/releases\/2.7\/)\n[![dep3](https:\/\/img.shields.io\/badge\/status-in%20progress-green.svg)](https:\/\/github.com\/samre12\/gym-cryptotrading\/)\n[![dep4](https:\/\/img.shields.io\/circleci\/project\/github\/RedSparr0w\/node-csgo-parser.svg)](https:\/\/github.com\/samre12\/gym-cryptotrading\/)\n\nGym Environment API based Bitcoin trading simulator with continuous observation space and discrete action space. It uses real world transactions from **CoinBaseUSD** exchange to sample *per minute closing, lowest and highest prices along with volume of the currency traded* in the particular minute interval.\n\n**Contents of this document**\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Basics](#basics)\n    - [Obsevation Space](#obs)\n    - [Action Space](#action)\n    - [Parameters](#params)\n    - [Simulator](#simulator)\n- [Important Information](#inf)\n- Environments\n    - [Realized PnL Environment](https:\/\/github.com\/samre12\/gym-cryptotrading\/wiki\/Realized-PnL-Trading-Environment)\n    - [Unrealized PnL Environment](https:\/\/github.com\/samre12\/gym-cryptotrading\/wiki\/Unrealized-PnL-Trading-Environment)\n    - [Weighted Unrealized PnL Environment](https:\/\/github.com\/samre12\/gym-cryptotrading\/wiki\/Weighted-Unrealized-PnL-Trading-Environment)\n- [Examples](#exp)\n- [Recent Updates and Breaking Changes](#changes)\n\n<a name=\"introduction\"><\/a>\n\n## Installation\n\n```bash\ngit clone https:\/\/github.com\/samre12\/gym-cryptotrading.git\ncd gym-cryptotrading\npip install -e .\n```\n\n<a name=\"usage\"><\/a>\n\n## Usage\n\nImporting the module into the current session using `import gym_cryptotrading` will register the environment with `gym` after which it can be used as any other gym environment.\n\n### Environments\n\n- `'RealizedPnLEnv-v0'`\n\n- `'UnRealizedPnLEnv-v0'`\n\n- `'WeightedPnLEnv-v0'`\n\n```python\nimport gym\nimport gym_cryptotrading\nenv = gym.make('RealizedPnLEnv-v0')\n```\n\n- Use `env.reset()` to start a new random episode.\n\n    - returns history of observations prior to the starting point of the episode, fractional remaining trades that is `[1.0]` at the start of the episode. Look [Parameters](#params) for more information.\n\n    ```python\n    state = env.reset() # use state to make initial prediction\n    ```\n\n    **Note:** Make sure to reset the environment before first use else `gym.error.ResetNeeded()` will be raised.\n\n- Use `env.step(action)` to take one step in the environment.\n\n    - returns `(observation, reward, is_terminal, fractional_remaining_trades)` in respective order\n\n    ```python\n    observation, reward, is_terminal, remaining_trades = env.step(action)\n    ```\n\n    **Note:** Calling `env.step(action)` after the terminal state is reached will raise `gym.error.ResetNeeded()`.\n\n- With the current implementation, the environment does not support `env.render()`.\n\nSetting the logging level of `gym` using `gym.logger.set_level(level)` to a value less than or equal 10 will allow to track all the logs (`debug` and `info` levels) generated by the environment.<\/br>\nThese include human readable timestamps of Bitcoin prices used to simulate an episode.<\/br>\nFor more information on `gym.logger` and setting logging levels, visit [**here**](https:\/\/github.com\/openai\/gym\/blob\/293eea787a662f501b0e4aab512d3769e830ece2\/gym\/logger.py#L11) .\n\n**Note:** *Custom loggers can also be provided to environments using* `env.env.set_logger(logger=)`\n\n\n<a name=\"basics\"><\/a>\n\n## Basics\n\n<a name=\"obs\"><\/a>\n\n### Observation Space\n\n- Observation at a time step is the relative `(closing, lowest, highest, volume)` of Bitcoin in the corresponding minute interval.\n\n- Since the price of Bitcoin varies from a few dollars to 15K dollars, the observation for time step i + 1 is normalized by the prices at time instant i.\n\nEach entry in the observation is the ratio of *increase (value greater than 1.0)* or *decrease (value lessar than 1.0)* from the price at previos time instant.\n\n<a name=\"action\"><\/a>\n\n### Action Space\n\nAt each time step, the agent can either go **LONG** or **SHORT** in a `unit` (for more information , refer to [Parameters](#params)) of Bitcoin or can stay **NEUTRAL**.<\/br>\nAction space thus becomes *discrete* with three possible actions:\n\n- `NEUTRAL` corresponds to `0`\n\n- `LONG` corresponds to `1`\n\n- `SHORT` corresponds to `2`\n\n**Note:** Use `env.action_space.get_action(action)` to lookup action names corresponding to their respective values.\n\n<a name=\"params\"><\/a>\n\n### Parameters\n\nThe basic environment is characterized with these parameters:\n\n- `history_length` lag in the observations that is used for the state representation of the trading agent.<\/br>\n\n    - every call to `env.reset()` returns a numpy array of shape `(history_length,) + shape(observation)` that corresponds to observations of length `history_length` prior to the starting point of the episode.\n\n    - trading agent can use the returned array to predict the first action\n\n    - defaults to `100`.\n\n    - supplied value must be greater than or equal to `0`\n\n- `horizon` alternatively **episode length** is the number trades that the agent does in a single episode\n\n    - defaults to `5`.\n\n    - supplied value must be greater than `0`\n\n- `unit` is the fraction of Bitcoin that can be traded in each time step\n\n    - defaults to `5e-4`.\n\n    - supplied value must be greater than `0`\n\n### Usage\n\n```python\nenv = gym.make('RealizedPnLEnv-v0')\nenv.env.set_params(history_length, horizon, unit)\n```\n\n**Note:** parameters can only be set before first reset of the environment, that is, before the first call to `env.reset()`, else `gym_cryptotrading.errors.EnvironmentAlreadyLoaded` will be raised.\n\nSome environments contain their own specific parameters due to the nature of their reward function.<\/br>\nThese parameters can be passed using `env.env.set_params(history_length, horizon, unit, **kwargs)` as keyworded arguements alongside setting *history length*, *horizon* and *unit*.\n\n<a name=\"simulator\"><\/a>\n\n### Simulator\n\n**Dataset**\n\nPer minute Bitcoin series is obtained by modifying the procedure mentioned in [this](https:\/\/github.com\/philipperemy\/deep-learning-bitcoin) repository. Transactions in the *Coinbase* exchange are sampled to generate the Bitcoin price series.\n\n- Dataset for per minute prices of Bitcoin is not continuos and complete due to the downtime of the exchanges.\n\n- Current implementation does not make any assumptions about the missing values.\n\n- It rather finds continuos blocks with lengths greater than `history_length + horizon + 1` and use them to simulate episodes. This avoids any discrepancies in results due to random subsitution of missing values\n\nSample logs generated by the simulator while preprocessing the dataset:\n\n```\nINFO: Columns found in the dataset Index([u'DateTime_UTC', u'Timestamp', u'price_open', u'price_high',\n       u'price_low', u'price_close', u'volume'],\n      dtype='object')\nINFO: Number of blocks of continuous prices found are 58880\nINFO: Number of usable blocks obtained from the dataset are 1651\nINFO: Number of distinct episodes for the current configuration are 838047\n```\n\n<a name=\"inf\"><\/a>\n\n## Important Information\n\nUpon first use, the environment downloads latest transactions dataset from the exchange which are then cached in *tempory directory* of the operating system for future use.<\/br>\n\n- A user can also update the latest transactions dataset by the following code:\n\n    ```python\n    from gym_cryptotrading.generator import Generator\n    Generator.update_gen()\n    ```\n\n    - `update_gen` should be called prior to **first reset** of the environment to reflect the latest transactions in it\n\n- If you are running the environment behind a proxy, export suitalble **http proxy settings** to allow the environment to download transactions from the exchange\n\n<a name=\"exp\"><\/a>\n\n## Examples\nComing soon.\n\n<a name=\"changes\"><\/a>\n\n## Recent Updates and Breaking Changes\n\nListing changes from [**`b9af98db728230569a18d54dcfa87f7337930314`**](https:\/\/github.com\/samre12\/gym-cryptotrading\/commit\/b9af98db728230569a18d54dcfa87f7337930314) commit. Visit [**here**](https:\/\/github.com\/samre12\/gym-cryptotrading\/tree\/b9af98db728230569a18d54dcfa87f7337930314) to browse the repository with head at this commit.\n\n- Added support for trading environments with **Realized PnL** and **Weighted Unrealized PnL** reward functions\n\n- Renamed `cryptotrading.py` to `unrealizedPnL.py` to emphasize the specific reward function of the environment\n\n- Added support for setting custom logger for an environment using `env.env.set_logger(logger=)`\n\n- Updated environments to output the number of remaining trades on each call to `env.step(action=)`\n\n### Breaking Changes\n\n- Environment with **Unrealized PnL** reward function is now built using `env = gym.make('UnrealizedPnLEnv-v0')` rather than `env = gym.make('CryptoTrading-v0')`\n\n- Instead of `remaining_trades`, `env.step(action)` now outputs `np.array([fractional_remaining_trades])`. This is to take into account more supplementary information (like **technical indicators**) in the future","88":"[![codecov](https:\/\/codecov.io\/gh\/ameijer\/bitcoin_wallet_recovery_tool\/branch\/master\/graph\/badge.svg?token=JikobBPFh5)](https:\/\/codecov.io\/gh\/ameijer\/bitcoin_wallet_recovery_tool)\n[![Java CI with Maven](https:\/\/github.com\/ameijer\/bitcoin_wallet_recovery_tool\/actions\/workflows\/maven.yml\/badge.svg?branch=master)](https:\/\/github.com\/ameijer\/bitcoin_wallet_recovery_tool\/actions\/workflows\/maven.yml)\n\n# Bitcoin Wallet Brute Force Recovery Tool\n\n## Support Development\n\nDid this tool help you rescue some bitcoin? Consider helping to support its development and say thanks with some BTC! My address is: *16nn1nbrofnQwsYuEDf78PVwBdHDcXE6H5*:\n\n![Address](address.png)\n\n### Introduction\n\nEntropy happens, and bitcoin wallets can get corrupted to the point where they cannot be recovered by the bitcoin-core software or pyWallet. This software checks the entire file for private keys, and makes no assumptions about the presence\/correctness of formatting or metadata. _As long as the bitcoin private key(s) within the file is not corrupted or encrypted, this software will find and recover the bitcoin stored within_, and exports it to an easy-to-scan WIF QR code for import into a mobile wallet.\n\n#### Design\n\nThis software establishes a 256-bit sliding window at the start of the wallet file. It then moves one byte ahead and exports the next 32 bytes, until it reaches the end of the file. Each set of 32 bytes is a potential EC keypair private key. \n\nIt then checks the balance at each private key using a web API, 150 key candidates at a time. The vast majority of the candidates will just have been generated from metadata and will have a balance of 0 bitcoin. When the program does find a positive balance, it saves the keypair. \n\nFinally, any private keys with positive bitcoin balances are exported to WIF, and image files with QR codes are generated. Simply scan these with any of the major mobile wallet programs, and the bitcoin will be immediately spend-able. \n\n### Disclaimer\n\n**I am not responsible for any consequences from the use\/misuse of this software by ANY party, and provide it for reference only. Please backup any wallets you plan to attempt a recovery on, and note that this program will store your private keys in a plaintext image on your computer. See the LICENSE for full disclaimer.**\n\n### Building \n\nTo build a shaded jar artifact for the wallet brute forcer tool, run `mvn -B package --file pom.xml`. This command will place the built artifact in the `targets\/` directory with the default filename of `wallet_brute_forcer-0.0.1-SNAPSHOT.jar`. \n\n### Releases\n\nVisit https:\/\/github.com\/ameijer\/bitcoin_wallet_recovery_tool\/releases to view released pre-built binaries and zipped source.\n\n### How to use\n\nThe software will prompt you to specify the location of the wallet file, or you can send it is as the first arg. \n\nThis wallet recovery software will output the private keys in Wallet Import Format (WIF) QR codes in the same directory as the wallet file being recovered. \n\n#### From Source\n\nRun the Main.java file in a maven-compatible Java 8 environment. \n\n#### From a Shaded Jar file\n\nRun the shaded jar file with java as so: `java -jar brute-forcer-<RELEASED_VERSION>.jar`.\n\n### Limitations\n\nThis recovery tool cannot be used on encrypted wallets. This wallet assumes private keys are directly available in the wallet, and cannot reconstruct addresses from master seeds in HD wallets, etc. \n\n#### Reliance on 3rd-party web APIs\n\nThis wallet recovery tool leverages the [Blockchain.info API](https:\/\/blockchain.info\/api) to quicky check tens of thousands of bitcoin balances. The wallet client is rate-limited when it consumes this API; please don't abuse this web resource and ruin it for all. \n\n### License \n\nThis software is licensed under the GPL license, available in the LICENSE file. \n\n## Copyright (C) 2020 Alex Meijer\n","89":"# BitCrack2\n_Hunt for Bitcoin private keys._\n\nIt is a modified version of [BitCrack](https:\/\/github.com\/brichard19\/BitCrack) by [brichard19](https:\/\/github.com\/brichard19),\nfor random and xpoint mode.\n\nThank you him for his hardwork.\n\n## Note: It's a experimental project.\n# Changes \n\n- Added random stride option, by using this option, the program run indefinitely after the end of keyspace, it starts again from starting range with the updated random stride of given bit length, it continues doing this until it found keys or you stoped it. This is like a random walk with random distance.\n- For --rstride N, N should be ```128 >= N >= 1```, here N is the bit length of the incrementor.\n- Added support for XPoint search mode.\n- Saving-Loading checkpoints are not modified for new changes.\n- OpenCL support removed.\n- Everything else is same as original BitCrack.\n  \n# Usage\n\n- For XPoint mode use x point of the public key, without ```02``` or ```03``` prefix(64 chars).\n- Don't use XPoint mode with 'uncompressed' compression type.\n- Address or XPoint file should be in text format with one address or xpoint per line.\n\n```\nBitCrack.exe --help\nBitCrack OPTIONS [TARGETS]\nWhere TARGETS is one or more addresses\n\n--help                       Display this message\n-c, --compressed             Use compressed points\n-u, --uncompressed           Use Uncompressed points\n--compression  MODE          Specify compression where MODE is\n                                 COMPRESSED or UNCOMPRESSED or BOTH\n-d, --device ID              Use device ID\n-b, --blocks N               N blocks\n-t, --threads N              N threads per block\n-p, --points N               N points per thread\n-i, --in FILE                Read addresses from FILE, one per line\n-o, --out FILE               Write keys to FILE\n-f, --follow                 Follow text output\n-m, --mode MODE              Specify search mode where MODE is\n                                 ADDRESS or XPOINT\n--list-devices               List available devices\n--keyspace KEYSPACE          Specify the keyspace:\n                                 START:END\n                                 START:+COUNT\n                                 START\n                                 :END\n                                 :+COUNT\n                             Where START, END, COUNT are in hex format\n--stride N                   Increment by N keys at a time\n--rstride N                  Random stride bits[1 to 128], continue after end of range by setting up new random stride\n--share M\/N                  Divide the keyspace into N equal shares, process the Mth share\n--continue FILE              Save\/load progress from FILE\n-v, --version                Show version\n```\n\n# Address Search Mode \nFor puzzle ```35```, ```36``` and ```37``` with ```--rstride``` of ```5``` bit\n```\nBitCrack.exe -b 64 -t 256 -p 1024 --rstride 5 --keyspace 400000000:1FFFFFFFFF 1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb 1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1 14iXhn8bGajVWegZHJ18vJLHhntcpL4dex\n[2021-07-14.17:01:04] [Info] Compression : compressed\n[2021-07-14.17:01:04] [Info] Starting at : 400000000 (35 bit)\n[2021-07-14.17:01:04] [Info] Ending at   : 1FFFFFFFFF (37 bit)\n[2021-07-14.17:01:04] [Info] Range       : 1BFFFFFFFF (37 bit)\n[2021-07-14.17:01:04] [Info] Initializing GeForce GTX 1650\n[2021-07-14.17:01:04] [Info] Generating 16,777,216 starting points (640.0MB)\n[2021-07-14.17:01:09] [Info] 10.0%  20.0%  30.0%  40.0%  50.0%  60.0%  70.0%  80.0%  90.0%  100.0%\n[2021-07-14.17:01:11] [Info] Done\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 78E000000 (35 bit), C: 12.695313 %] [I: 1A (5 bit), 3] [T: 3] [S: 306.85 MK\/s] [12,096,372,736 (34 bit)] [00:00:50]\n[2021-07-14.17:02:05] [Info] Found key for address '1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1'. Written to 'Found.txt'\n[2021-07-14.17:02:05] [Info] Address     : 1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1\n                             Private key : 9DE820A7C\n                             Compressed  : yes\n                             Public key  : 02B3E772216695845FA9DDA419FB5DACA28154D8AA59EA302F05E916635E47B9F6\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 418000000 (35 bit), C: 0.334821 %] [I: 18 (5 bit), 12] [T: 2] [S: 30.74 MK\/s] [57,327,747,072 (36 bit)] [00:04:13] 1]\n[2021-07-14.17:05:31] [Info] Found key for address '1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb'. Written to 'Found.txt'\n[2021-07-14.17:05:31] [Info] Address     : 1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb\n                             Private key : 4AED21170\n                             Compressed  : yes\n                             Public key  : 02F6A8148A62320E149CB15C544FE8A25AB483A0095D2280D03B8A00A7FEADA13D\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 1497000000 (37 bit), C: 59.249442 %] [I: 1F (5 bit), 17] [T: 1] [S: 306.85 MK\/s] [86,939,533,312 (37 bit)] [00:06:27]\n[2021-07-14.17:07:41] [Info] Found key for address '14iXhn8bGajVWegZHJ18vJLHhntcpL4dex'. Written to 'Found.txt'\n[2021-07-14.17:07:41] [Info] Address     : 14iXhn8bGajVWegZHJ18vJLHhntcpL4dex\n                             Private key : 1757756A93\n                             Compressed  : yes\n                             Public key  : 027D2C03C3EF0AEC70F2C7E1E75454A5DFDD0E1ADEA670C1B3A4643C48AD0F1255\n\n\n[2021-07-14.17:07:41] [Info] No targets remaining\n```\n\n# XPoint Search Mode \nFor puzzle ```35```, ```36``` and ```37``` with ```--rstride``` of ```5``` bit\n```\nBitCrack.exe -b 64 -t 256 -p 1024 --rstride 5 -m xpoint --keyspace 400000000:1fffffffff f6a8148a62320e149cb15c544fe8a25ab483a0095d2280d03b8a00a7feada13d b3e772216695845fa9dda419fb5daca28154d8aa59ea302f05e916635e47b9f6 7d2c03c3ef0aec70f2c7e1e75454a5dfdd0e1adea670c1b3a4643c48ad0f1255\n[2021-07-18.17:31:54] [Info] Compression : compressed\n[2021-07-18.17:31:54] [Info] Seach mode  : XPOINT\n[2021-07-18.17:31:54] [Info] Starting at : 400000000 (35 bit)\n[2021-07-18.17:31:54] [Info] Ending at   : 1FFFFFFFFF (37 bit)\n[2021-07-18.17:31:54] [Info] Range       : 1BFFFFFFFF (37 bit)\n[2021-07-18.17:31:54] [Info] Initializing GeForce GTX 1650\n[2021-07-18.17:31:55] [Info] Generating 16,777,216 starting points (640.0MB)\n[2021-07-18.17:31:59] [Info] 10.0%  20.0%  30.0%  40.0%  50.0%  60.0%  70.0%  80.0%  90.0%  100.0%\n[2021-07-18.17:32:01] [Info] Done\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 962000000 (36 bit), C: 19.224330 %] [I: 1A (5 bit), 3] [T: 3] [S: 477.25 MK\/s] [10,787,749,888 (34 bit)] [00:00:33]\n[2021-07-18.17:32:36] [Info] Found key for address '1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1'. Written to 'Found.txt'\n[2021-07-18.17:32:36] [Info] Address     : 1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1\n                             Private key : 9DE820A7C\n                             Compressed  : yes\n                             Public key  : 02B3E772216695845FA9DDA419FB5DACA28154D8AA59EA302F05E916635E47B9F6\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 1500000000 (37 bit), C: 60.714286 %] [I: 11 (5 bit), 5] [T: 2] [S: 471.95 MK\/s] [24,847,056,896 (35 bit)] [00:01:15]\n[2021-07-18.17:33:19] [Info] Found key for address '14iXhn8bGajVWegZHJ18vJLHhntcpL4dex'. Written to 'Found.txt'\n[2021-07-18.17:33:19] [Info] Address     : 14iXhn8bGajVWegZHJ18vJLHhntcpL4dex\n                             Private key : 1757756A93\n                             Compressed  : yes\n                             Public key  : 027D2C03C3EF0AEC70F2C7E1E75454A5DFDD0E1ADEA670C1B3A4643C48AD0F1255\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 418000000 (35 bit), C: 0.334821 %] [I: 18 (5 bit), 14] [T: 1] [S: 27.28 MK\/s] [69,189,238,784 (37 bit)] [00:03:42] 0]\n[2021-07-18.17:35:50] [Info] Found key for address '1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb'. Written to 'Found.txt'\n[2021-07-18.17:35:50] [Info] Address     : 1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb\n                             Private key : 4AED21170\n                             Compressed  : yes\n                             Public key  : 02F6A8148A62320E149CB15C544FE8A25AB483A0095D2280D03B8A00A7FEADA13D\n\n\n[2021-07-18.17:35:50] [Info] No targets remaining\n```\n\n## Attempting puzzle ```160``` with ```--rstride``` of ```124``` bit in xpoint search mode\n```\nBitCrack.exe -b 64 -t 256 -p 1024 --rstride 124 --mode xpoint --keyspace 8000000000000000000000000000000000000000:ffffffffffffffffffffffffffffffffffffffff e0a8b039282faf6fe0fd769cfbc4b6b4cf8758ba68220eac420e32b91ddfa673\n[2021-07-20.00:33:10] [Info] Compression : compressed\n[2021-07-20.00:33:10] [Info] Seach mode  : XPOINT\n[2021-07-20.00:33:10] [Info] Starting at : 8000000000000000000000000000000000000000 (160 bit)\n[2021-07-20.00:33:10] [Info] Ending at   : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF (160 bit)\n[2021-07-20.00:33:10] [Info] Range       : 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF (159 bit)\n[2021-07-20.00:33:10] [Info] RStride     : 124 bit\n[2021-07-20.00:33:10] [Info] Initializing GeForce GTX 1650\n[2021-07-20.00:33:10] [Info] Generating 16,777,216 starting points (640.0MB)\n[2021-07-20.00:33:15] [Info] 10.0%  20.0%  30.0%  40.0%  50.0%  60.0%  70.0%  80.0%  90.0%  100.0%\n[2021-07-20.00:33:25] [Info] Done\n[DEV: GeForce GTX 1650 3435\/4096MB] [K: 9CA2365A12561A658624835BA2ADC0CB68000000 (160 bit), C: 22.370033 %] [I: A93D77EBBC8A07840546A2705CAB6C8 (124 bit), 9] [T: 1] [S: 453.69 MK\/s] [384,886,112,256 (39 bit)] [00:16:07]\n```\n\n## with xpoints file:\nFor puzzle ```1``` to ```37``` with ```--stride``` of ```1```\n```\nBitCrack.exe -b 64 -t 256 -p 1024 --stride 1 -m xpoint --keyspace 1:1fffffffff -i \"puzzle-1-37-xpoints.txt\"\n[2021-07-18.16:57:07] [Info] Compression : compressed\n[2021-07-18.16:57:07] [Info] Seach type  : XPOINT\n[2021-07-18.16:57:07] [Info] Starting at : 1 (1 bit)\n[2021-07-18.16:57:07] [Info] Ending at   : 1FFFFFFFFF (37 bit)\n[2021-07-18.16:57:07] [Info] Range       : 1FFFFFFFFE (37 bit)\n[2021-07-18.16:57:07] [Info] Initializing GeForce GTX 1650\n[2021-07-18.16:57:07] [Info] Generating 16,777,216 starting points (640.0MB)\n[2021-07-18.16:57:12] [Info] 10.0%  20.0%  30.0%  40.0%  50.0%  60.0%  70.0%  80.0%  90.0%  100.0%\n[2021-07-18.16:57:14] [Info] Done\n[2021-07-18.16:57:14] [Info] Loading xpoints from 'G:\\BTCPUBKEYS\\puzzle-1-37-pubkeys.txt'\n[2021-07-18.16:57:14] [Info] 37 xpoints loaded (0.0MB)\n[2021-07-18.16:57:14] [Info] Allocating bloom filter (0.0MB)\n\n[2021-07-18.16:57:14] [Info] Found key for address '1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH\n                             Private key : 1\n                             Compressed  : yes\n                             Public key  : 0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1CUNEBjYrCn2y1SdiUMohaKUi4wpP326Lb'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1CUNEBjYrCn2y1SdiUMohaKUi4wpP326Lb\n                             Private key : 3\n                             Compressed  : yes\n                             Public key  : 02F9308A019258C31049344F85F89D5229B531C845836F99B08601F113BCE036F9\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '19ZewH8Kk1PDbSNdJ97FP4EiCjTRaZMZQA'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 19ZewH8Kk1PDbSNdJ97FP4EiCjTRaZMZQA\n                             Private key : 7\n                             Compressed  : yes\n                             Public key  : 025CBDF0646E5DB4EAA398F365F2EA7A0E3D419B7E0330E39CE92BDDEDCAC4F9BC\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1EhqbyUMvvs7BfL8goY6qcPbD6YKfPqb7e'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1EhqbyUMvvs7BfL8goY6qcPbD6YKfPqb7e\n                             Private key : 8\n                             Compressed  : yes\n                             Public key  : 022F01E5E15CCA351DAFF3843FB70F3C2F0A1BDD05E5AF888A67784EF3E10A2A01\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1E6NuFjCi27W5zoXg8TRdcSRq84zJeBW3k'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1E6NuFjCi27W5zoXg8TRdcSRq84zJeBW3k\n                             Private key : 15\n                             Compressed  : yes\n                             Public key  : 02352BBF4A4CDD12564F93FA332CE333301D9AD40271F8107181340AEF25BE59D5\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1PitScNLyp2HCygzadCh7FveTnfmpPbfp8'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1PitScNLyp2HCygzadCh7FveTnfmpPbfp8\n                             Private key : 31\n                             Compressed  : yes\n                             Public key  : 03F2DAC991CC4CE4B9EA44887E5C7C0BCE58C80074AB9D4DBAEB28531B7739F530\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1M92tSqNmQLYw33fuBvjmeadirh1ysMBxK'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1M92tSqNmQLYw33fuBvjmeadirh1ysMBxK\n                             Private key : E0\n                             Compressed  : yes\n                             Public key  : 038BC89C2F919ED158885C35600844D49890905C79B357322609C45706CE6B514\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1LeBZP5QCwwgXRtmVUvTVrraqPUokyLHqe'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1LeBZP5QCwwgXRtmVUvTVrraqPUokyLHqe\n                             Private key : 202\n                             Compressed  : yes\n                             Public key  : 03A7A4C30291AC1DB24B4AB00C442AA832F7794B5A0959BEC6E8D7FEE802289DCD\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1PgQVLmst3Z314JrQn5TNiys8Hc38TcXJu'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1PgQVLmst3Z314JrQn5TNiys8Hc38TcXJu\n                             Private key : 483\n                             Compressed  : yes\n                             Public key  : 038B05B0603ABD75B0C57489E451F811E1AFE54A8715045CDF4888333F3EBC6E8B\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1Pie8JkxBT6MGPz9Nvi3fsPkr2D8q3GBc1'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1Pie8JkxBT6MGPz9Nvi3fsPkr2D8q3GBc1\n                             Private key : 1460\n                             Compressed  : yes\n                             Public key  : 03AADAAAB1DB8D5D450B511789C37E7CFEB0EB8B3E61A57A34166C5EDC9A4B869D\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1McVt1vMtCC7yn5b9wgX1833yCcLXzueeC'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1McVt1vMtCC7yn5b9wgX1833yCcLXzueeC\n                             Private key : 4C\n                             Compressed  : yes\n                             Public key  : 0296516A8F65774275278D0D7420A88DF0AC44BD64C7BAE07C3FE397C5B3300B23\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1CQFwcjw1dwhtkVWBttNLDtqL7ivBonGPV'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1CQFwcjw1dwhtkVWBttNLDtqL7ivBonGPV\n                             Private key : 1D3\n                             Compressed  : yes\n                             Public key  : 0243601D61C836387485E9514AB5C8924DD2CFD466AF34AC95002727E1659D60F7\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1DBaumZxUkM4qMQRt2LVWyFJq5kDtSZQot'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1DBaumZxUkM4qMQRt2LVWyFJq5kDtSZQot\n                             Private key : A7B\n                             Compressed  : yes\n                             Public key  : 038B00FCBFC1A203F44BF123FC7F4C91C10A85C8EAE9187F9D22242B4600CE781C\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1BDyrQ6WoF8VN3g9SAS1iKZcPzFfnDVieY'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1BDyrQ6WoF8VN3g9SAS1iKZcPzFfnDVieY\n                             Private key : C936\n                             Compressed  : yes\n                             Public key  : 029D8C5D35231D75EB87FD2C5F05F65281ED9573DC41853288C62EE94EB2590B7A\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1GnNTmTVLZiqQfLbAdp9DVdicEnB5GoERE'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1GnNTmTVLZiqQfLbAdp9DVdicEnB5GoERE\n                             Private key : 3080D\n                             Compressed  : yes\n                             Public key  : 02CE4A3291B19D2E1A7BF73EE87D30A6BDBC72B20771E7DFFF40D0DB755CD4AF1\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '14oFNXucftsHiUMY8uctg6N487riuyXs4h'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 14oFNXucftsHiUMY8uctg6N487riuyXs4h\n                             Private key : 1BA534\n                             Compressed  : yes\n                             Public key  : 031A746C78F72754E0BE046186DF8A20CDCE5C79B2EDA76013C647AF08D306E49E\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1QCbW9HWnwQWiQqVo5exhAnmfqKRrCRsvW'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1QCbW9HWnwQWiQqVo5exhAnmfqKRrCRsvW\n                             Private key : 68F3\n                             Compressed  : yes\n                             Public key  : 02FEA58FFCF49566F6E9E9350CF5BCA2861312F422966E8DB16094BEB14DC3DF2C\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1ErZWg5cFCe4Vw5BzgfzB74VNLaXEiEkhk'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1ErZWg5cFCe4Vw5BzgfzB74VNLaXEiEkhk\n                             Private key : 2930\n                             Compressed  : yes\n                             Public key  : 03B4F1DE58B8B41AFE9FD4E5FFBDAFAEAB86C5DB4769C15D6E6011AE7351E54759\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1CfZWK1QTQE3eS9qn61dQjV89KDjZzfNcv'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1CfZWK1QTQE3eS9qn61dQjV89KDjZzfNcv\n                             Private key : 2DE40F\n                             Compressed  : yes\n                             Public key  : 023ED96B524DB5FF4FE007CE730366052B7C511DC566227D929070B9CE917ABB43\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1HsMJxNiV7TLxmoF6uJNkydxPFDog4NQum'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1HsMJxNiV7TLxmoF6uJNkydxPFDog4NQum\n                             Private key : D2C55\n                             Compressed  : yes\n                             Public key  : 033C4A45CBD643FF97D77F41EA37E843648D50FD894B864B0D52FEBC62F6454F7C\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1L2GM8eE7mJWLdo3HZS6su1832NX2txaac'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1L2GM8eE7mJWLdo3HZS6su1832NX2txaac\n                             Private key : 556E52\n                             Compressed  : yes\n                             Public key  : 03F82710361B8B81BDEDB16994F30C80DB522450A93E8E87EEB07F7903CF28D04B\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1rSnXMr63jdCuegJFuidJqWxUPV7AtUf7'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1rSnXMr63jdCuegJFuidJqWxUPV7AtUf7\n                             Private key : DC2A04\n                             Compressed  : yes\n                             Public key  : 036EA839D22847EE1DCE3BFC5B11F6CF785B0682DB58C35B63D1342EB221C3490C\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1NWmZRpHH4XSPwsW6dsS3nrNWfL1yrJj4w'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1NWmZRpHH4XSPwsW6dsS3nrNWfL1yrJj4w\n                             Private key : 5749F\n                             Compressed  : yes\n                             Public key  : 0385663C8B2F90659E1CCAB201694F4F8EC24B3749CFE5030C7C3646A709408E19\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1HduPEXZRdG26SUT5Yk83mLkPyjnZuJ7Bm'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1HduPEXZRdG26SUT5Yk83mLkPyjnZuJ7Bm\n                             Private key : 1764F\n                             Compressed  : yes\n                             Public key  : 033F688BAE8321B8E02B7E6C0A55C2515FB25AB97D85FDA842449F7BFA04E128C3\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '15JhYXn6Mx3oF4Y7PcTAv2wVVAuCFFQNiP'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 15JhYXn6Mx3oF4Y7PcTAv2wVVAuCFFQNiP\n                             Private key : 1FA5EE5\n                             Compressed  : yes\n                             Public key  : 0357FBEA3A2623382628DDE556B2A0698E32428D3CD225F3BD034DCA82DD7455A\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '1JVnST957hGztonaWK6FougdtjxzHzRMMg'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 1JVnST957hGztonaWK6FougdtjxzHzRMMg\n                             Private key : 340326E\n                             Compressed  : yes\n                             Public key  : 024E4F50A2A3ECCDB368988AE37CD4B611697B26B29696E42E06D71368B4F3840F\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '128z5d7nN7PkCuX5qoA4Ys6pmxUYnEy86k'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 128z5d7nN7PkCuX5qoA4Ys6pmxUYnEy86k\n                             Private key : 6AC3875\n                             Compressed  : yes\n                             Public key  : 031A864BAE3922F351F1B57CFDD827C25B7E093CB9C88A72C1CD893D9F90F44ECE\n\n\n[2021-07-18.16:57:14] [Info] Found key for address '12jbtzBb54r97TCwW3G1gCFoumpckRAPdY'. Written to 'Found.txt'\n[2021-07-18.16:57:14] [Info] Address     : 12jbtzBb54r97TCwW3G1gCFoumpckRAPdY\n                             Private key : D916CE8\n                             Compressed  : yes\n                             Public key  : 03E9E661838A96A65331637E2A3E948DC0756E5009E7CB5C36664D9B72DD18C0A7\n\n\n[2021-07-18.16:57:15] [Info] Found key for address '19EEC52krRUK1RkUAEZmQdjTyHT7Gp1TYT'. Written to 'Found.txt'\n[2021-07-18.16:57:15] [Info] Address     : 19EEC52krRUK1RkUAEZmQdjTyHT7Gp1TYT\n                             Private key : 17E2551E\n                             Compressed  : yes\n                             Public key  : 026CAAD634382D34691E3BEF43ED4A124D8909A8A3362F91F1D20ABAAF7E917B36\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 2D000001 (30 bit), C: 0.549316 %] [I: 1 (1 bit), 1] [T: 8] [S: 416.65 MK\/s] [754,974,720 (30 bit)] [00:00:00]\n[2021-07-18.16:57:16] [Info] Found key for address '1LHtnpd8nU5VHEMkG2TMYYNUjjLc992bps'. Written to 'Found.txt'\n[2021-07-18.16:57:16] [Info] Address     : 1LHtnpd8nU5VHEMkG2TMYYNUjjLc992bps\n                             Private key : 3D94CD64\n                             Compressed  : yes\n                             Public key  : 03D282CF2FF536D2C42F105D0B8588821A915DC3F9A05BD98BB23AF67A2E92A5B\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 60000001 (31 bit), C: 1.171875 %] [I: 1 (1 bit), 1] [T: 7] [S: 468.07 MK\/s] [1,610,612,736 (31 bit)] [00:00:01]\n[2021-07-18.16:57:18] [Info] Found key for address '1LhE6sCTuGae42Axu1L1ZB7L96yi9irEBE'. Written to 'Found.txt'\n[2021-07-18.16:57:18] [Info] Address     : 1LhE6sCTuGae42Axu1L1ZB7L96yi9irEBE\n                             Private key : 7D4FE747\n                             Compressed  : yes\n                             Public key  : 0387DC70DB1806CD9A9A76637412EC11DD998BE666584849B3185F7F9313C8FD28\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 93000001 (32 bit), C: 1.794434 %] [I: 1 (1 bit), 1] [T: 6] [S: 468.07 MK\/s] [2,466,250,752 (32 bit)] [00:00:03]\n[2021-07-18.16:57:21] [Info] Found key for address '1FRoHA9xewq7DjrZ1psWJVeTer8gHRqEvR'. Written to 'Found.txt'\n[2021-07-18.16:57:21] [Info] Address     : 1FRoHA9xewq7DjrZ1psWJVeTer8gHRqEvR\n                             Private key : B862A62E\n                             Compressed  : yes\n                             Public key  : 029C58240E50E3BA3F833C82655E8725C037A2294E14CF5D73A5DF8D56159DE69\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 18D000001 (33 bit), C: 4.846191 %] [I: 1 (1 bit), 1] [T: 5] [S: 436.72 MK\/s] [6,660,554,752 (33 bit)] [00:00:12]\n[2021-07-18.16:57:29] [Info] Found key for address '187swFMjz1G54ycVU56B7jZFHFTNVQFDiu'. Written to 'Found.txt'\n[2021-07-18.16:57:29] [Info] Address     : 187swFMjz1G54ycVU56B7jZFHFTNVQFDiu\n                             Private key : 1A96CA8D8\n                             Compressed  : yes\n                             Public key  : 03A355AA5E2E09DD44BB46A4722E9336E9E3EE4EE4E7B7A0CF5785B283BF2AB579\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 322000001 (34 bit), C: 9.790039 %] [I: 1 (1 bit), 1] [T: 4] [S: 458.90 MK\/s] [13,455,327,232 (34 bit)] [00:00:27]\n[2021-07-18.16:57:44] [Info] Found key for address '1PWABE7oUahG2AFFQhhvViQovnCr4rEv7Q'. Written to 'Found.txt'\n[2021-07-18.16:57:44] [Info] Address     : 1PWABE7oUahG2AFFQhhvViQovnCr4rEv7Q\n                             Private key : 34A65911D\n                             Compressed  : yes\n                             Public key  : 033CDD9D6D97CBFE7C26F902FAF6A435780FE652E159EC953650EC7B1004082790\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 485000001 (35 bit), C: 14.123535 %] [I: 1 (1 bit), 1] [T: 3] [S: 472.21 MK\/s] [19,411,238,912 (35 bit)] [00:00:40]\n[2021-07-18.16:57:57] [Info] Found key for address '1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb'. Written to 'Found.txt'\n[2021-07-18.16:57:57] [Info] Address     : 1PWCx5fovoEaoBowAvF5k91m2Xat9bMgwb\n                             Private key : 4AED21170\n                             Compressed  : yes\n                             Public key  : 02F6A8148A62320E149CB15C544FE8A25AB483A0095D2280D03B8A00A7FEADA13D\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 9DB000001 (36 bit), C: 30.798340 %] [I: 1 (1 bit), 1] [T: 2] [S: 472.21 MK\/s] [42,328,915,968 (36 bit)] [00:01:29]\n[2021-07-18.16:58:45] [Info] Found key for address '1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1'. Written to 'Found.txt'\n[2021-07-18.16:58:45] [Info] Address     : 1Be2UF9NLfyLFbtm3TCbmuocc9N1Kduci1\n                             Private key : 9DE820A7C\n                             Compressed  : yes\n                             Public key  : 02B3E772216695845FA9DDA419FB5DACA28154D8AA59EA302F05E916635E47B9F6\n\n[DEV: GeForce GTX 1650 3334\/4096MB] [K: 173C000001 (37 bit), C: 72.607422 %] [I: 1 (1 bit), 1] [T: 1] [S: 473.37 MK\/s] [99,790,880,768 (37 bit)] [00:03:31]\n[2021-07-18.17:00:48] [Info] Found key for address '14iXhn8bGajVWegZHJ18vJLHhntcpL4dex'. Written to 'Found.txt'\n[2021-07-18.17:00:48] [Info] Address     : 14iXhn8bGajVWegZHJ18vJLHhntcpL4dex\n                             Private key : 1757756A93\n                             Compressed  : yes\n                             Public key  : 027D2C03C3EF0AEC70F2C7E1E75454A5DFDD0E1ADEA670C1B3A4643C48AD0F1255\n\n\n[2021-07-18.17:00:48] [Info] No targets remaining\n```\n\n\n\n# Building\n### Windows\n- Microsoft Visual Studio Community 2019\n- CUDA version 10.0\n## Linux\n- Install libgmp: ```sudo apt install -y libgmp-dev```\n\n- Edit the makefile and set up the appropriate CUDA SDK and compiler paths for nvcc.\n\n    ```make\n    CUDA       = \/usr\/local\/cuda-11.0\n    CXXCUDA    = \/usr\/bin\/g++\n    ```\n - To build with CUDA: pass CCAP value according to your GPU compute capability\n    ```sh\n    $ cd BitCrack\n    $ make CCAP=75 all\n    ```\n\n# License\nBitCrack is licensed under MIT License.\n\n## Donation\n- BTC: bc1qwnd4jqe0ulldr7rn8dk8mpkytm7jz068mpau9w\n- ETH: 0x16DD2B876C91d168cBAF7c18b78b9d0aDc011365\n\n## __Disclaimer__\nALL THE CODES, PROGRAM AND INFORMATION ARE FOR EDUCATIONAL PURPOSES ONLY. USE IT AT YOUR OWN RISK. THE DEVELOPER WILL NOT BE RESPONSIBLE FOR ANY LOSS, DAMAGE OR CLAIM ARISING FROM USING THIS PROGRAM.","90":"========\nBITRADER\n========\n\nBitcoin Arbitrage utilities. Telegram bot included for free!\n\n- 2017-11-05: Version 0.12.0 released! Bot now sends pretty graphs if you ask for \/status :-)\n- 2017-06-14: Now also supports Ethereum and Litecoin!\n\nQuickstart\n==========\n\n1. Download code and install dependencies\n-----------------------------------------\n\n.. code-block:: bash\n\n    git clone https:\/\/github.com\/jr-minnaar\/bitrader.git\n    cd bitrader\n    python3 -m venv venv\n    source venv\/bin\/activate\n    pip install -e .\n    cp .env-example .env\n\n\n2. Configure secrets\n--------------------\n\n- Get your Telegram Bot token: https:\/\/core.telegram.org\/bots#3-how-do-i-create-a-bot\n- Sign up with `Kraken <https:\/\/www.kraken.com>`_ and get your API key under Settings > API.\n- Do the same for `Luno <https:\/\/www.luno.com>`_.\n\nEdit the .env file and add all the relevant keys and tokens as indicated by the example .env file.\n\n3. Run the bot\n--------------\n\n.. code-block:: bash\n\n    arbot\n\nNo parameters needed! Then type \/start in chat with your brand new Bitcoin Arbitrage bot.\n\n4. Profit!!!\n------------\n\n\n\n\n","91":"Bitcoin Webskin \n\nan open source PHP web interface to bitcoind and namecoind\n\nCopyright (c) 2011 14STzHS8qjsDPtqpQgcnwWpTaSHadgEewS\n\nhttp:\/\/webskin.bitcoincommons.org\/\nhttps:\/\/github.com\/zamgo\/bitcoin-webskin\n\n---------------------------------------------------------------------\nVersion 0.0.2 - Prototype release\n\nThis is an early release of Bitcoin Webskin.  \n\nThis is development software. \nThis software has many bugs, security holes, and missing functionality. \nThis software is NOT ready for production use.\nBut it is ready for testnet use!\n\n---------------------------------------------------------------------\nQuicky Install Instructions:\n\n- Download latest files from \n  https:\/\/github.com\/zamgo\/bitcoin-webskin\n\n- put the files in a web-accessible directory\n\n- copy config.sample.php to config.php, \n  and fill in correct info for your system\n\n- setup bitcoind to allow access.  Sync your user\/pass\/host settings \n  of bitcoin.conf file and bitcoin-webskin\/config.php\n\n- run bitcoind\n\n- load the top level index.php file in your browser\n\n\nFiles:\n\n\/index.php\n\/config.php\n\/license.txt \n\/readme.txt\n\/libs\/bitcoin-webskin.php - the main controller\n\/libs\/bitcoin-interface.php - interface definition for bitcoind methods\n\/plugins\/jsonRPCClient.php - json RPC client with webskin interface\n\/plugins\/test.php - the debug interface\n\/plugins\/mtgox.php - plugin to mtgox json public api\n\/skins\/simple\/*.php\t- the simple html skin\n\n\n---------------------------------------------------------------------\nMaking a new skin:\n\n- copy the full \/skins\/simple\/ directory to \/skins\/YOUR.NEW.SKIN\/\n- edit \/libs\/bitcoin-webskin.php, __construct() function, \n- change $this->skin = 'simple';  to $this->skin = 'YOUR.NEW.SKIN';\n- edit the template PHP files in \/skins\/YOUR.NEW.SKIN\/ \n  for your desired design\n\n\n---------------------------------------------------------------------\nMaking a new bitcoin interface:\n\n- create new php class in \/plugins\/ that implements the \n  Bitcoin interface (see \/libs\/bitcoin-interface.php)\n- edit \/libs\/bitcoin-webskin.php, open_wallet() function, replace:\n\t\tinclude_once('plugins\/jsonRPCClient.php');\n\t\t$this->wallet = new jsonRPCClientControler;\n  with an include of your new interface file, and set $this->wallet.\n\n\n---------------------------------------------------------------------\nDonating to this project:\n\n- bitcoin: 14STzHS8qjsDPtqpQgcnwWpTaSHadgEewS\n\n  and\/or \n\n- namecoin: NAGPRdQtxPazbjxK9KGe143fwsP1axQxDC\n\n","92":"Dumb Block Explorer\n=====================================\n\nA trivial block explorer written in a single PHP file.\n\nDemo\n-------\nhttps:\/\/bitcointools.jonasschnelli.ch\/explorer\/\n\nFeatures\n-------\n* Works wirth Bitcoin Core with enabled REST interface (-rest)\n* Works with or without txindex\n* Works with pruning\n* Does UTXO lookups\n\nInstall\n-------\n* Place the `index.php` script into a php enabled http docs directory\n* Run Bitcoin Core with rest and txindex (optional) `-txindex -rest`\n* Edit the index.php config section\n\nNice links\n-------\n\nUse `mod_rewrite` use a propper URL scheme (\/block\/<hash>), etc.\nApache users can place a `.htaccess` file into the same folder as the PHP script.\n\n```\nRewriteEngine On\nRewriteRule ^testnet$ index.php?testnet=1 [L,QSA]\nRewriteRule ^testnet\/$ index.php?testnet=1 [L,QSA]\nRewriteRule ^testnet\/tx\/([a-fA-F0-9]*)$ index.php?testnet=1&tx=$1 [L,QSA]\nRewriteRule ^testnet\/tx\/([a-fA-F0-9]*)\/n\/([a-fA-F0-9]*)$ index.php?testnet=1&tx=$1&n=$2 [L,QSA]\nRewriteRule ^testnet\/block\/([a-fA-F0-9]*)$ index.php?testnet=1&block=$1 [L,QSA]\nRewriteRule ^tx\/([a-fA-F0-9]*)$ index.php?tx=$1 [L,QSA]\nRewriteRule ^tx\/([a-fA-F0-9]*)\/n\/([0-9]*)$ index.php?tx=$1&n=$2 [L,QSA]\nRewriteRule ^block\/([a-fA-F0-9]*)$ index.php?block=$1 [L,QSA]\n```\n","93":"# Kryptsy\n\n### Features\n\n* \ud83e\udde0 Supports [TOR](https:\/\/www.torproject.org\/) a free & anonymous open-source software for enabling anonymous communication.\n* \ud83d\udeab No Javascript.\n* \u269b\ufe0f Supports multiple digital currencies (eg. Bitcoin, Litecoin, Dogecoin etc.).\n* \ud83d\ude4a Anonymous login with no sign up required.\n* \ud83d\udcd6 Powerful admin dashboard and management tools.\n* \ud83d\udca1 Usability and scalability.\n* \ud83d\udd27 Highly configurable and extendable.\n* \ud83d\udd10 Industry standard security out of the box.\n* \ud83d\udcac Active community behind.\n\n### Requirements\n\n* Linux\n* Git 1.7.10+\n* Sqlite\n* Mustache\n* PhpLiteAdmin v1.9.8.2\n* Apache2\n* RedBean\n\n** More details are in the [doc](doc).\n\n### Getting started\n\n* [Setup on Mac OS X](doc\/setup-local-osx.md)\n* [Setup on Ubuntu](doc\/setup-local-ubuntu.md)\n* [Deploy production server](doc\/deploy-production-server.md)\n\n## Installation\n\n* <p>Sign up with <a target=\"_blank\" href=\"https:\/\/m.do.co\/c\/397fb2277475\">Digital Ocean<\/a><img width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" \/><\/p>\n* Install LAMP https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04\n* Edit the configuration file `sudo nano \/base\/init.php`\n* Install Litecoin & start the Litecoin Daemon `sudo litecoind`\n* Edit the configuration file `sudo nano \/vendor\/sql\/phpliteadmin.conf.php`\n* Access PhpLiteAdmin Dashboard http:\/\/example.com\/vendor\/sql\/phpliteadmin.php\n","94":"Move files in public_html into your WHMCS installation root.\nFile found at modules\/gateways\/callback\/bitcoin.php should be ran as a cron job.  Run it as frequently as you want to check for payments.  When payments match invoice amount, invoice is marked as Paid. Bitcoin receiving address is marked on invoice as transaction.\n\nFeatures unique payment address and account (accounts are named after %userid%-%invoiceid%) for each invoice.\nConnects to bitcoind rpc instance.  Currently only over http.\n\nFuture developments:\nWHMCS bitcoin module add on for reviewing bitcoin wallet and sending credits back to clients from admin.\n\n\ndonations can be made to:\n1GLXbvBtipcPkJ2UhMp4y3pY5i1kNYD9Bt","95":"# Payment channel server\n\nWARNING: This is \"alpha\" quality demo software.\n\n## Included programs\n\n* `serverd`: Payment channel server. Run with `--init` to create db.\n* `serveradm`: Server administration utility.\n* `servercli`: Client utility, a thin wrapper over the RPC calls\n\nRun with `--help` to get a command line summary.\n\nRun the utilities with no arguments, to obtain a list of commands.\n\nServer events are logged via the flexible `'winston'` module.\n\nSee comments in `example-serverd.cfg` for further server configuration.\n\n## Calling the JSON RPC server over HTTP:\n\n```\nPOST http:\/\/localhost:12882 \n\n{\n  \"method\": \"\"\n  \"params\": [\n    {\n      \/\/ Required params here (see below)\n    }\n  ]\n}\n```\n\nWhere \"method\" can be one of:\n* `\"channel.open\"`\n* `\"channel.setRefund\"`\n* `\"channel.commit\"`\n* `\"channel.pay\"`\n\n### `\"channel.open\"`\n\n#### POST data\n\n`\"params\"` can be an empty array\n\n#### result\n\n```\n{\n  \"pubkey\": , \/\/ pub key of the server for this channel (also: \"channel.id\" for later\"\n  \"timelock.min\": , \/\/ earliest time the refund transaction can be processed\n  \"timelock.max\": , \/\/ latest time the refund transaction can be processed\n  \"timelock.prefer\": , \/\/ preferred time the refund transaction should be processed\n}\n```\n\n### `\"channel.setRefund\"`\n\n#### POST data\n\n```\n\"params\": {\n  \"channel.id\": , \/\/ The id returned from \"channel.open\"\n  \"pubkey\": , \/\/ pubkey of client\n  \"tx\": , \/\/ the refund transaction, hex encoded (unsigned)\n  \"txInIdx\": \/\/ the input id of the T1 transaction (that the server doesn't yet know about)\n}\n```\n\n#### result\n\n```\n{\n  \"signature\": \/\/ the hex encoded signature from when the server signed T1\n}\n```\n\n### `\"channel.commit\"`\n\n#### POST data\n\n```\n\"params\": {\n  \"channel.id\": , \/\/ The id returned from \"channel.open\"\n  \"tx.commit\": , \/\/ The hex encoded signature from when the client signed T1 (committing to the agreement)\n  \"tx.firstPayment\": , \/\/ The signed transaction (T3) for the first payment, which is just a full refund payment to the client\n}\n```\n\n#### result\n\n```\ntrue \/\/ on success\n```\n\n### `\"channel.pay\"`\n\n#### POST data\n\n```\n\"params\": {\n  \"channel.id\": , \/\/ The id returned from \"channel.open\"\n  \"signature\": \/\/ the hex encoded signature from when the client resigned T3 with the new amount\n  \"amount\": , \/\/ The new amount the client wants to pay to the server in T3\n}\n```\n\n#### result\n\n```\ntrue \/\/ on success\n```\n","96":"","97":"## Awesome Blockchain Articles \n\nA collection of awesome blockchain articles. Good learning resources about blockchain. \u5e72\u8d27\u96c6\u5408\uff0c\u5165\u95e8\u533a\u5757\u94fe\u6280\u672f\u770b\u8fd9\u91cc\u5c31\u591f\u4e86\uff08\u53ef\u52a0Q\u7fa4 **680127749**\uff0c\u5907\u6ce8\u8bf4\u660e\u52a0\u7fa4\u6765\u6e90\uff0c\u672c\u6587\u6301\u7eed\u66f4\u65b0\u4e2d...\uff09\n\n\u5173\u6ce8\u6211\u7684[blog](https:\/\/juejin.im\/user\/5bae185ae51d450e452ac85e\/posts)\n\n\n\n### \u5165\u95e8\u79d1\u666e\n\n- [\u4e3a\u4e86\u641e\u61c2\u4ec0\u4e48\u662f\u533a\u5757\u94fe\uff0c\u6211\u90fd\u5feb\u6291\u90c1\u4e86](https:\/\/mp.weixin.qq.com\/s\/AG9D9GdkD8Dvfa6mvZsCYA)\n\n\n- [\u533a\u5757\u94fe\u5165\u95e8\u6559\u7a0b](http:\/\/www.ruanyifeng.com\/blog\/2017\/12\/blockchain-tutorial.html)\n\n- [\u6bd4\u7279\u5e01\u5165\u95e8\u6559\u7a0b](http:\/\/www.ruanyifeng.com\/blog\/2018\/01\/bitcoin-tutorial.html)\n\n- [\u52a0\u5bc6\u8d27\u5e01\u7684\u672c\u8d28](http:\/\/mp.weixin.qq.com\/s\/NgYXya3FMQ4TJa8U5bwS_A)\n\n\n- [\u6559\u5973\u670b\u53cb\u8bfb\u61c2\u533a\u5757\u94fe](http:\/\/mp.weixin.qq.com\/s\/WtsVpHxlhjbbQFDHBTd92w)\n- [1\u5206\u949f\u4e86\u89e3\u201c\u533a\u5757\u94fe\u5206\u53c9\u201d\u7684\u672c\u8d28](http:\/\/mp.weixin.qq.com\/s\/cWCiYbg7-1e-r4qLTiUIpw)\n\n\n- [\u4ece\u6982\u5ff5\u5230\u5e95\u5c42\u6280\u672f\uff0c\u4e00\u7bc7\u6587\u770b\u61c2\u91cd\u5851\u4e16\u754c\u7684\u533a\u5757\u94fe](https:\/\/mp.weixin.qq.com\/s?__biz=MzU1NDA4NjU2MA==&mid=2247486406&idx=1&sn=8dd0dbbe53f21461acb2d3088ced683e&chksm=fbe9b209cc9e3b1ff688bbb745ff83335ab033605493d5add44d2defe608b378d887088b7222&scene=27#wechat_redirect)\n- [\u4e0d\u8c08\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5230\u5e95\u5982\u4f55\u4ece\u6280\u672f\u89d2\u5ea6\u7406\u89e3\u533a\u5757\u94fe\uff1f](https:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486412&idx=1&sn=09c76bf6b2c8b6c4c24ae6b4a69a42e6&chksm=96c9bdaca1be34ba3feba2b5aaf16e1128fdd50046860c7f9d95483eae294601c8b06f33a8f9&scene=27#wechat_redirect)\n- [\u7528\u4e24\u6027\u5173\u7cfb\u89e3\u91ca\u533a\u5757\u94fe\uff1a\u4f60\u548c\u524d\u4efb\u5e72\u7684\u90a3\u4e9b\u4e8b\uff0c\u73b0\u4efb\u90fd\u77e5\u9053](http:\/\/view.inews.qq.com\/a\/TEC201801160243663M)\n- [\u533a\u5757\u94fe\u768412\u4e2a\u6280\u672f\u7406\u89e3\u8bef\u533a\uff0c\u4f60\u77e5\u9053\u6709\u54ea\u4e9b\uff1f](http:\/\/view.inews.qq.com\/a\/TEC2018021200321202)\n- [\u8001\u77ff\u5de5\u5343\u5b57\u7ec8\u6781\u6307\u5357\uff1a\u53bb\u4e2d\u5fc3\u5316\u3001\u5206\u5e03\u5f0f\u5b58\u50a8\u3001\u54c8\u5e0c\u51fd\u6570\u52a0\u5bc6\u90fd\u662f\u5565](http:\/\/view.inews.qq.com\/a\/20180131A014SV00)\n- [\u4ec0\u4e48\u662f\u667a\u80fd\u5408\u7ea6](https:\/\/ethfans.org\/wikis\/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6)\n- [\u5173\u4e8e\u94b1\u5305\u7684\u57fa\u7840\u5bc6\u7801\u5b66](https:\/\/ethfans.org\/aaaaaashu\/articles\/602)\n- [\u533a\u5757\u94fe\u7684\u90a3\u4e9b\u4e8b\uff0c\u4f60\u77e5\u9053\u548c\u4e0d\u77e5\u9053\u7684\u90fd\u5728\u8fd9\u91cc\uff01](https:\/\/m.aliyun.com\/yunqi\/articles\/361909?utm_content=m_40142) \n- [\u4ec0\u4e48\u662f\u52a0\u5bc6\u7ecf\u6d4e\u5b66\uff1f \u521d\u5b66\u8005\u7ec8\u6781\u6307\u5357](https:\/\/mp.weixin.qq.com\/s\/ftFRNtzlhlnYKVsDvdQb7g)\n- [\u4e00\u7bc7\u6587\u7ae0\u5feb\u901f\u7406\u89e3\u533a\u5757\u94fe\u6280\u672f\u539f\u7406](http:\/\/mp.weixin.qq.com\/s\/5D0PLhRz3NdUZNFgllM2iQ)\n\n\n#### \u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\u7cfb\u5217\uff0c\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u533a\u5757\u94fe\u7684\u76f8\u5173\u540d\u8bcd\n\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u4ec0\u4e48\u662f\u533a\u5757\u94fe](https:\/\/www.bianews.com\/detail?id=10193&type=1)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u533a\u5757\u94fe\u5177\u6709\u54ea\u4e9b\u7279\u6027\uff1f](https:\/\/www.bianews.com\/detail?id=10238&type=1)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u4e0d\u540c\u6807\u51c6\u4e0b\uff0c\u533a\u5757\u94fe\u7684\u7c7b\u578b\u5212\u5206](http:\/\/bianews.com\/detail?id=10315&type=1)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u533a\u5757\u94fe\u7684\u7c7b\u578b\u548c\u5c42\u7ea7\u7ed3\u6784](http:\/\/mp.weixin.qq.com\/s\/oo5l88ciG0OC29bDdLiiDA)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u94fe\u5f0f\u7ed3\u6784\u4ecb\u7ecd](http:\/\/mp.weixin.qq.com\/s\/vSRwMI8Y7zEpXCznxfvFfA)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u533a\u5757\u94fe\u7684\u5b9a\u4e49\u4e0e\u7279\u6027](http:\/\/mp.weixin.qq.com\/s\/U0BYSwb3vBl3dwpXJUmE-A)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u76f8\u5173\u540d\u8bcd\u4ecb\u7ecd](http:\/\/mp.weixin.qq.com\/s\/1pYLBYDDxqgXdKCg5kc0yQ)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u76f8\u5173\u540d\u8bcd\u4ecb\u7ecdII](http:\/\/mp.weixin.qq.com\/s\/vdLOEUUhLsCFqP9Zy9iRSg)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u5171\u8bc6\u673a\u5236\u7684\u76f8\u5173\u5b9a\u4e49\u4ecb\u7ecd\u2160](http:\/\/mp.weixin.qq.com\/s\/m7dwExhR2BvTTCv2mrFhxg)\n- [\u533a\u5757\u94fe\u5c0f\u77e5\u8bc6\uff1a\u5171\u8bc6\u673a\u5236\u7684\u76f8\u5173\u5b9a\u4e49\u4ecb\u7ecd\u2161](http:\/\/mp.weixin.qq.com\/s\/7zNYMIEiwIEusMl4kHpJdg)\n\n#### \u63ed\u79d8\u6bd4\u7279\u5e01\u7cfb\u5217\n\n- [\u63ed\u79d8\u6bd4\u7279\u5e01\u548c\u533a\u5757\u94fe\uff08\u4e00\uff09\uff1a\u4ec0\u4e48\u662f\u533a\u5757\u94fe\uff1f](http:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486444&amp;idx=1&amp;sn=4d90f461b5ca0d0576a16b15ce10c189&source=41#wechat_redirect)\n- [\u63ed\u79d8\u6bd4\u7279\u5e01\u548c\u533a\u5757\u94fe\uff08\u4e8c\uff09\uff1a\u6316\u77ff\u7684\u672c\u8d28\u662f\u4ec0\u4e48\uff1f](http:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486443&amp;idx=1&amp;sn=30359caeeec5fb522c68c1bd9aaee54b&source=41#wechat_redirect)\n- [\u63ed\u79d8\u6bd4\u7279\u5e01\u548c\u533a\u5757\u94fe\uff08\u4e09\uff09\uff1a\u6bd4\u7279\u5e01\u7684\u79c1\u94a5\u3001\u516c\u94a5\u4e0e\u5730\u5740](http:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486442&amp;idx=1&amp;sn=010e9433a342d592b12aba491980992b&source=41#wechat_redirect)\n- [\u63ed\u79d8\u6bd4\u7279\u5e01\u548c\u533a\u5757\u94fe\uff08\u56db\uff09\uff1a\u6bd4\u7279\u5e01\u7684\u4ea4\u6613](https:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486431&idx=1&sn=b44ac20769bf06e2eae03b7988777c26&chksm=96c9bdbfa1be34a9bb993724ddc27f500e3f5f3fe63d4e4747498b1d730b759e6095cabaed2f&scene=27#wechat_redirect)\n\n#### \u7a0b\u5e8f\u733f\u5165\u95e8\u5fc5\u8bfb\n\n- [\u4eba\u624d\u7a00\u7f3a\u7684\u533a\u5757\u94fe\uff0c\u7a0b\u5e8f\u5458\u8f6c\u578b\u5165\u95e8\u5fc5\u770b\u8fd9\u56db\u9879\u6280\u80fd](https:\/\/mp.weixin.qq.com\/s\/FMTw5WgOpfNSdvTUzq8IMA)\n- [\u521a\u5165\u95e8\u533a\u5757\u94fe\u7684\u7a0b\u5e8f\u5458\u5e94\u8be5\u770b\u4e9b\u4ec0\u4e48\uff1f](https:\/\/mp.weixin.qq.com\/s\/13UNWOe0W7bYUs8Q7piEUA)\n- [\u5982\u4f55\u5411\u5f31\u667a\u7a0b\u5e8f\u5458\u89e3\u91ca\u533a\u5757\u94fe](https:\/\/mp.weixin.qq.com\/s\/5Av0f8Cm_HU2sW_m1IgHKg)\n- [\u5982\u4f55\u5728 5 \u5206\u949f\u5185\u8bfb\u61c2\u533a\u5757\u94fe\u7684\u67b6\u6784\u601d\u7ef4\uff1f](http:\/\/mp.weixin.qq.com\/s\/Gf7ux-4SU1LMN_28drDjxw)\n- [\u6bd4\u7279\u5e01\u7684\u201c\u533a\u5757\u201d\u4e2d\u85cf\u6709\u4ec0\u4e48\u79d8\u5bc6\uff1a\u533a\u5757\u94fe\"\u533a\u5757\"\u7ed3\u6784\u89e3\u6790](http:\/\/mp.weixin.qq.com\/s\/ZvlW1OXTQU6Dh8iQFf_HmA)\n\n\n### \u4e0d\u60f3\u770b\u6587\u6863\uff0c\u90a3\u5c31\u770b\u770b\u89c6\u9891\u5427\n\n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u7b2c\u4e00\u96c6](https:\/\/mp.weixin.qq.com\/s\/Sf24To-WmnSYVJ8hzMljhQ) \u4e00\u5207\u7684\u5f00\u59cb\n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u7b2c\u4e8c\u96c6](https:\/\/mp.weixin.qq.com\/s\/cl5BkFPtsaw1C6aGVj51fg) \u77ff\u573a\u4e0e\u77ff\u5de5 \n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u7b2c\u4e09\u96c6](https:\/\/mp.weixin.qq.com\/s\/h6gm6fkzdLOkRgajsX7baA) \u6bd4\u7279\u5e01\u7684\u81ea\u6211\u63a2\u7d22\n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u7b2c\u4e94\u96c6](https:\/\/mp.weixin.qq.com\/s\/pmWBPh8TTeiBJu7hDK44oQ) \u5d1b\u8d77\u7684\u533a\u5757\u94fe \n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u7b2c\u4e94\u96c6](https:\/\/mp.weixin.qq.com\/s\/DYLHvahnM_mfg8py9lxeUA) \u4ee5\u592a\u574a\n- [TC\u5267\u573a\uff1a\u300a\u4fe1\u4efb\u91cd\u5851\uff1a\u6bd4\u7279\u5e01\u4e0e\u533a\u5757\u94fe\u300b\u6700\u7ec8\u96c6](https:\/\/mp.weixin.qq.com\/s\/6RoyCedsxyOMRTJHBotKNA) \u5408\u4f5c\uff1f\u8fd8\u662f\u9769\u547d\uff1f\n\n### \u8fdb\u9636\u653b\u7565\n\n- [\u679c\u65ad\u6536\u85cf\uff01\u8fd9\u662f\u5168\u7403\u6700\u6743\u5a01\u7684\u533a\u5757\u94fe\u884c\u4e1a\u62a5\u544a\uff08\u9644\u4e2d\u6587\u5b8c\u6574\u7248\u4e0b\u8f7d\u624b\u518c\uff09](https:\/\/mp.weixin.qq.com\/s\/myX1_4Z8Z1XFtJ4Q6YDLTg)\n- [\u5173\u4e8e\u533a\u5757\u94fe\uff0c\u4f60\u7edd\u4e0d\u80fd\u5ffd\u89c6\u76844\u4e2a\u5b89\u5168\u95ee\u9898\u548c5\u62db\u5e94\u5bf9\u65b9\u6cd5\uff01](https:\/\/mp.weixin.qq.com\/s\/TAH6uEdctyti5Uwcr-qc0g)\n\n\n- [\u5982\u4f55\u6210\u4e3a\u4e00\u540d\u533a\u5757\u94fe\u5de5\u7a0b\u5e08\uff1f | \u9644\u5b66\u4e60\u8d44\u6e90](https:\/\/mp.weixin.qq.com\/s\/_UjgFkC_ins2svFPvduvhw)\n- [\u6df1\u5165\u7406\u89e3\u6bd4\u7279\u5e01\u4ea4\u6613\u7684\u811a\u672c](http:\/\/mp.weixin.qq.com\/s\/tbU9Pg0vQkA7JdKSgNyPAQ)\n- [\u533a\u5757\u94fe: \u66b4\u5bcc\u7684\u6377\u5f84\u4e0e\u7a0b\u5e8f\u5458\u7684\u821e\u53f0](https:\/\/mp.weixin.qq.com\/s?__biz=MzU1NDA4NjU2MA==&mid=2247487888&idx=1&sn=931b65213c5f893047ad4edfb60b1a2e&chksm=fbe9a85fcc9e2149db6f60a7f8bbe5fe2326a33a3177c10f98693fc301418ee907544b18f2cc&scene=27#wechat_redirect)\n- [\u533a\u5757\u94fe\u6280\u672f\u4e0e\u5fae\u670d\u52a1\u67b6\u6784\u4e4b\u95f4\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f](https:\/\/mp.weixin.qq.com\/s?__biz=MzIwMzg1ODcwMw==&mid=2247486248&idx=1&sn=9d546966dce0d4934e2b1c55f5b5fd89&chksm=96c9bd48a1be345ed441cc61795d474fa0771db4c3a273bec02f6dec28004e805bb808778d5e&scene=27#wechat_redirect)\n- [\u533a\u5757\u94fe\uff1a\u4e2d\u95f4\u4ef6\u7684\u4e0b\u4e00\u4ef6\u5927\u4e8b](http:\/\/www.infoq.com\/cn\/articles\/blockchain-middleware)\n- [\u5341\u5e74\u5927\u6570\u636e\uff0c\u5341\u5e74\u533a\u5757\u94fe\uff0c\u4e24\u6280\u672f\u5982\u4f55\u5171\u751f\u6f14\u8fdb?](https:\/\/mp.weixin.qq.com\/s?__biz=MzU1NDA4NjU2MA==&mid=2247487002&idx=1&sn=324c8dc2a2ca5b33ec85230bbda80969&chksm=fbe9b7d5cc9e3ec33b7a4e47c97617fa24222972ffe5ba1436b90e0641c47608931f5d62be18&scene=27#wechat_redirect)\n- [\u6d45\u8c08\u533a\u5757\u94fe\u4e2d\u7684\u673a\u5668\u5b66\u4e60](https:\/\/mp.weixin.qq.com\/s?__biz=MzU1NDA4NjU2MA==&mid=2247486111&idx=2&sn=61d1f672ea9b8a167868ae30107730b5&chksm=fbe9b350cc9e3a46a8e8f28fb0c13d374b122f54af8091058e5bab7d17bbe9e9cacbecb7d7e0&scene=27#wechat_redirect)\n- [\u4e00\u4f4dAI\u7814\u7a76\u5458+\u533a\u5757\u94fe\u521b\u4e1a\u8005\u7684\u7ec8\u6781\u5c55\u671b\uff1aAI DAO\u5c06\u7edf\u6cbb\u4e16\u754c](http:\/\/www.infoq.com\/cn\/news\/2017\/01\/AI-DAO-rule-world)\n- [\u5e72\u8d27 | \u6743\u76ca\u8bc1\u660e FAQ\uff08\u5b8c\u6574\u7248\uff09](https:\/\/ethfans.org\/posts\/Proof-of-Stake-FAQ-new-2018-3-15)\n- [\u706b\u5e01CTO\u5de8\u5efa\u534e\u8bbf\u8c08\uff1a\u6570\u5b57\u8d27\u5e01\u4ea4\u6613\u5e73\u53f0\u7684\u57fa\u7840\u67b6\u6784\u548c\u6280\u672f\u6311\u6218](http:\/\/www.infoq.com\/cn\/articles\/huobi-cto-interview)\n- [\u4ece\u62dc\u5360\u5ead\u95ee\u9898\uff0c\u8c08\u533a\u5757\u94fe\u6280\u672f\u5b9e\u73b0\u53ca\u653f\u52a1\u5e94\u7528](https:\/\/mp.weixin.qq.com\/s\/XUSiqTLuQHIcR6uQ4qjutg)\n- [\u533a\u5757\u94fe\u5e38\u7528\u67b6\u6784\u662f\u4ec0\u4e48\uff1f\u5b83\u548c\u4fdd\u9669\u4e1a\u53c8\u5982\u4f55\u7ed3\u5408\uff1f](https:\/\/mp.weixin.qq.com\/s\/mKjEb6TFYzNWexVt9aXCxA)\n- [\u6df1\u5ea6\u89e3\u6790\u533a\u5757\u94fe\u67b6\u6784\u3001\u8de8\u94fe\u548c\u6f14\u8fdb](https:\/\/mp.weixin.qq.com\/s\/UZzSUhyxsCGAX8K2A9aTcA)\n- [\u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u3001Fabric\u2026\u4f60\u77e5\u9053\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u5417\uff1f\u4e0d\u61c2\u7684\u8fdb](http:\/\/mp.weixin.qq.com\/s\/u23PW3FGbnJ_3V3oq2Ickg)\n- [\u5982\u4f55\u89e3\u51b3\u201c\u53cc\u82b1\u653b\u51fb\u201d\uff1a\u6bd4\u7279\u5e01\u7684SPV\u673a\u5236](http:\/\/mp.weixin.qq.com\/s\/QCeysL8lYHh-fT9tvuaZJQ)\n\n### \u8981\u5b66\u4e60\u533a\u5757\u94fe\u6280\u672f\uff0c\u81ea\u5df1\u52a8\u624b\u5199\u4e00\u4e2a\u5427\n\n- [Learn Blockchains by Building One](https:\/\/hackernoon.com\/learn-blockchains-by-building-one-117428612f46) \n\n  [\u82f1\u6587\u4e0d\u884c\uff1f\u4e2d\u6587\u7248\u770b\u8fd9\u91cc](https:\/\/mp.weixin.qq.com\/s\/vvkvjlTUJJbsHM2792tEqA)\n\n\n- [200\u884c\u4ee3\u7801\u641e\u61c2\u533a\u5757\u94fe](http:\/\/mp.weixin.qq.com\/s\/9g-c3_YR4MJ3JWzrQN_b6A)\n\n\n- [\u5982\u4f55\u6210\u4e3a\u533a\u5757\u94fe\u5f00\u53d1\u8005\uff1a\u901f\u6210\u8bfe\uff01](https:\/\/ethfans.org\/posts\/blockchain-developer-crash-course)\n- [\u533a\u5757\u94fe\u5f00\u53d1\u5b9e\u6218\uff1a\u5982\u4f55\u4ece\u96f6\u6253\u9020\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528](https:\/\/mp.weixin.qq.com\/s\/3HVo0UWPRQ_VUteP8WwrTg)\n- [\u6765\u6765\u6765\u6559\u4f60\u4ec5\u752815\u5206\u949f\u5728\u4ee5\u592a\u574a\u7f16\u5199\u4e00\u4e2a\u533a\u5757\u94feWeb\u5e94\u7528](https:\/\/mp.weixin.qq.com\/s\/z8RhtH65w4ES7z5U7l1E9g)\n- [CryptoKitties\u6e90\u7801\u8be6\u89e3\uff1a\u624b\u628a\u624b\u6559\u4f60\u64b8\u51fa\u81ea\u5df1\u7684\u533a\u5757\u94fe\u6e38\u620f](http:\/\/mp.weixin.qq.com\/s\/AdrYhQa-m3eh74t1TGwfMg)\n- [\u4e00\u6587\u770b\u61c2\u600e\u6837\u7528 Python \u521b\u5efa\u6bd4\u7279\u5e01\u4ea4\u6613](https:\/\/mp.weixin.qq.com\/s\/3FTkvhu1k2t9KC_2009hTA)\n\n### \u5567\u5567\uff0c\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u533a\u5757\u94fe\u53ef\u4ee5\u8d5a\u94b1\u5417\uff1f\n\n- [\u7a0b\u5e8f\u5458\u5c0f\u767d\u5165\u884c\u533a\u5757\u94fe\u7684\u516d\u79cd\u65b9\u5f0f](http:\/\/mp.weixin.qq.com\/s\/ss2nqYrf8OQvDMJa_O8NYg)\n- [\u7eaf\u5e72\u8d27\uff01\u4ee5\u592a\u574aDApp\u8d5a\u94b1\u7684\u516d\u79cd\u65b9\u6cd5](http:\/\/mp.weixin.qq.com\/s\/7HEf8x_tXQHo5292MG77yA)\n- [\u4ee5\u592a\u574a\u6316\u77ff\u7684\u5229\u6da6\u7a76\u7adf\u6709\u591a\u5927\uff1f](http:\/\/mp.weixin.qq.com\/s\/GbaKPPXQJZOowzHP0BPrFg)\n\n\n### \u6c89\u6dc0\u79ef\u7d2f\uff0c\u662f\u65f6\u5019\u9759\u4e0b\u5fc3\u6765\u770b\u770b\u4e66\u4e86\n\n#### \u6bd4\u7279\u5e01\u548c\u4ee5\u592a\u574a\u6838\u5fc3\u6280\u672f\u6587\u6863\u770b\u8fd9\u91cc\u5c31\u591f\u4e86\n\n- \u6bd4\u7279\u5e01\u767d\u76ae\u4e66 [\u82f1\u6587\u7248](https:\/\/bitcoin.org\/bitcoin.pdf) [\u4e2d\u6587\u7248](http:\/\/www.8btc.com\/wiki\/bitcoin-a-peer-to-peer-electronic-cash-system)\n- \u4ee5\u592a\u574a\u767d\u76ae\u4e66 [\u82f1\u6587\u7248](https:\/\/github.com\/ethereum\/wiki\/wiki\/White-Paper) [\u4e2d\u6587\u7248](https:\/\/ethfans.org\/posts\/ethereum-whitepaper)\n- [\u4ee5\u592a\u574a\u9ec4\u76ae\u4e66](http:\/\/gavwood.com\/paper.pdf) \n- [\u4ee5\u592a\u574a\u7d2b\u76ae\u4e66](https:\/\/ethfans.org\/posts\/219) \n- [\u4ee5\u592a\u574a\u8bbe\u8ba1\u539f\u7406](http:\/\/ethfans.org\/posts\/510)\n- [\u8fd9\u91cc\u662f\u5173\u4e8e\u4ee5\u592a\u574a\u6700\u6743\u5a01\u7684\u6280\u672f\u6587\u6863](https:\/\/github.com\/ethereum\/wiki\/wiki)\n- [\u6bd4\u7279\u5e01wiki\u6587\u6863](https:\/\/zh-cn.bitcoin.it\/wiki\/%E9%A6%96%E9%A1%B5) \n\n#### \u8bfb\u672c\u4e66\n\n- [\u770b\u4e00\u672c\u4e66\u7cbe\u901a\u6bd4\u7279\u5e01](http:\/\/zhibimo.com\/books\/wang-miao\/mastering-bitcoin) \n- [\u533a\u5757\u94fe\u6280\u672f\u6307\u5357](https:\/\/www.gitbook.com\/book\/yeasy\/blockchain_guide\/details)\n- [\u533a\u5757\u94fe\u5f00\u53d1\u6307\u5357](https:\/\/yuedu.baidu.com\/ebook\/dba5c99c8662caaedd3383c4bb4cf7ec4afeb619)\n\n### \u4ece\u6e90\u7801\u4e2d\u5b66\u4e60\n\n- [\u6bd4\u7279\u5e01\u6838\u5fc3](https:\/\/github.com\/bitcoin\/bitcoin)\n- [\u4ee5\u592a\u574a\u94b1\u5305](https:\/\/github.com\/ethereum\/go-ethereum)\n- [\u6bd4\u7279\u5e01\u7f51\u7edc\u6e90\u4ee3\u7801\u5206\u6790](book\/\u6bd4\u7279\u5e01\u7f51\u7edc\u6e90\u4ee3\u7801\u5206\u6790.pdf)\n\n\n### \u6280\u672f\u65e0\u7720\u7fa4\uff0c\u4e00\u8d77\u5439\u5439\u6c34\n\n![\u6280\u672f\u65e0\u7720\u7fa4](\/img\/blockchain_qrcode.png)\n\n\u7535\u62a5\u7fa4\u7ec4 [\u533a\u5757\u94fe\u65e0\u7720\u7fa4](https:\/\/t.me\/blockchainsleepless)\n\n","98":"# Ethereum Atomic Swap\n\nCreated by: www.altcoinexchange.com\n\nThis is Ethereum version of atomic swap compatible for use with existing Bitcoin, Litecoin, Vertcoin and Particl in this repo: https:\/\/github.com\/decred\/atomicswap\n\nDo not use this on mainnet since it's not yet properly audited and still in testing. Documentation and web3 client command line tool coming soon. Contributions and issues are welcome.\n\nContract is deployed to: https:\/\/rinkeby.etherscan.io\/address\/0x6d5ae9dd8f1a2582deb1b096915313459f11ba70\n\nTelegram conversation: https:\/\/t.me\/altcoinexchange\n","99":"","100":"Copyright (c) 2012-2017, The CryptoNote developers, The Bytecoin developers, The Forknote developers  \nCopyright (c) 2017-2018, The BitcoiNote developers\n\n# BitcoiNote GUI Wallet\n\nThis is a GUI wallet for usage with the BitcoiNote (BTCN) cryptocurrency.\n\n## Build\n\nCurrently, build is supported out of the box only on Linux (tested with Ubuntu 16.04) and Windows (64-bit only). Mac OS should theoretically work but is untested.\n\n\nYou first need to clone the BitcoiNote Core repository. Then, create a symlink named `cryptonote` to the repository you just cloned.\n\n### Linux\n\nTested only with Ubuntu 16.04.\n\nDependencies: GCC 4.7.3 or later, CMake 2.8.6 or later, Boost 1.58 and Qt5 (<5.8).\n\nYou may download them from:  \n[http:\/\/gcc.gnu.org\/](http:\/\/gcc.gnu.org\/)  \n[http:\/\/www.cmake.org\/](http:\/\/www.cmake.org\/)  \n[http:\/\/www.boost.org\/](http:\/\/www.boost.org\/)  \n[https:\/\/www.qt.io\/](https:\/\/www.qt.io\/)  \nAlternatively, it may be possible to install them using a package manager.\n\nTo create the symlink to the core directory, use:\n\n```\nln -s ..\/Bitcoinote-Core cryptonote\n```\n\nTo build, run the following commands in the project's root directory:\n\n```\nmkdir build\ncd build\ncmake -DPORTABLE=1 ..\nmake\n```\n\nThe resulting executables can be found in `build` directory which will be created. (For Windows, look in subfolder `Release` or `Debug` respectively.)\n\n### Windows 64bit\n\nDependencies:\n```\nQt5 version < 5.8 (Tested with 5.6)\nlibboost 1.58 or greater (Tested with 1.65.1)\ncmake 2.8.6 or greater (Tested with 3.10.2)\nMicrosoft Visual Studio 2013 (Tested with VS2015)\nVisual C++ Build Tools v120 (Tested with v140)\n```\n\nTo create the symlink to the core directory, use:\n\n```\nmklink \/D cryptonote ..\\Bitcoinote-Core\n```\n\nTo build, run the following commands in the project's root directory, but make sure to substitute the Visual Studio version for the one that you use, and that the `CMAKE_PREFIX_PATH` points to your Qt files, and to replace the VCTargetsPath with one that works for you:\n\n```\nmkdir build\ncd build\nset PATH=\"c:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.15063.0\\x64\";%PATH%\nset VCTargetsPath=C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\v140\ncmake -G \"Visual Studio 14 Win64\" -DCMAKE_PREFIX_PATH=\"C:\\Qt\\5.6\\msvc2015_64\" -DPORTABLE=1 -DCMAKE_BUILD_TYPE=Release ..\nmsbuild Bitcoinote.sln \/m \/p:Configuration=Release\n```\n\nIn your build folder there should now be a new folder named `Release`, with the binaries.\nYou still need to copy some library files into that folder (replace `<Qt>` with the path to your Qt files):\n\n```\n<Qt>\\bin\\Qt5Core.dll\n<Qt>\\bin\\Qt5Gui.dll\n<Qt>\\bin\\Qt5Network.dll\n<Qt>\\bin\\Qt5Widgets.dll\nC:\\Windows\\System32\\msvcp140.dll\nC:\\Windows\\System32\\msvcrt.dll\nC:\\WINDOWS\\system32\\ucrtbase.dll\nC:\\WINDOWS\\system32\\vcruntime140.dll\n```\n\nTo compile the debug version, omit the `\/p:Configuration=Release` parameter. Then you need to copy the debug dlls instead of the normal ones. These have the same name, only with a `d` at the end (e.g. `Qt5Cored.dll`), and are in the same location, except for `ucrtbased.dll` which you can find in `C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\ucrt\\ucrtbased.dll`.\n\n### macOS\n\nTested only with macOS High Sierra 10.13.6.\n\nDependencies: `clang 9.1.0` or later, `CMake 3.5.2` or later, `Boost 1.67` or later and `Qt5` (tested with `Qt 5.10.1`).\n\n* Use [Homebrew](https:\/\/brew.sh\/) to install `cmake` and `boost`.\n* Use [qt.io](https:\/\/www.qt.io\/) to install QtCreator.\n\nTo create the symlink to the core directory, use:\n\n```\nln -s ..\/Bitcoinote-Core cryptonote\n```\n\nTo build, open the `CMakeLists.txt` in QtCreator. Also you can turn on `PORTABLE` flag in the project settings tab.\n\nThe resulting package `Bitcoinote.app` can be found in `build` directory which will be created.\nIn order to run it on other machines you should run the following command (exchange the path with the path where you installed Qt):\n\n`$ ~\/Qt\/5.10.1\/clang_64\/bin\/macdeployqt Bitcoinote.app`\n\nThis command will find all required dependencies and copy them into the `Bitcoinote.app` directory.\n\nTo build `.dmg` file we recommend to use [node-appdmg](https:\/\/github.com\/LinusU\/node-appdmg) project.\nJust place the `BitcoinoteDmg.json`, `Bitcoinote.icns` and `Bitcoinote.app` in one directory and run the following command:\n\n`$ appdmg BitcoinoteDmg.json Bitcoinote.dmg`\n\n## Usage Notes\n\nTo run the GUI wallet, the BitcoiNote Core daemon is not required to run. If a daemon already runs, it will be used - otherwise the wallet will use its own \"internal daemon\" instead.\n\nNote that mining without a mining pool is **not** possible with this wallet. For direct mining, use the `miner` tool from BitcoiNote Core instead.\n\n**Important:** The GUI wallet uses a new format for wallet files. Wallet files created by the GUI wallet cannot be read by the BitcoiNote Core command-line wallet. Furthermore, when you open a wallet file created by the BitcoiNote Core command-line wallet in the GUI wallet, it will **automatically convert it** to the new format, and afterwards it will **no longer be readable** by the BitcoiNote Core command-line wallet! When a wallet file is converted, a backup file (`<name>.wallet.backup`) with the old format is created next to the wallet file. Don't throw away the backup file if you intend to use the command-line wallet in the future.\n","101":"## Time Series Prediction with LSTM Neural Network\n\nThis is part of a project working with time series to build a predictive model around bitcoin prices. Stocks and cryptocurrency data is noisy and likely unpredictable with small amounts of data, so this is more an exercise in experimentation than a serious attempt to gain any advantage in the market.\n  \nTicker data is collected on 15 second intervals, and predicted 5 minutes into the future. In addition to ticker data, a second data file contains features collected using the [Bitcoin Developer Websocket API](https:\/\/blockchain.info), which provides streaming data on new transactions and blocks. Features are organized into epochs and normalized to zero mean and unit variance.\n\nSeveral variations of network architecture can be used to model the data with small modifications to the layers. In its current form, the model uses a Long Short Term Memory (LSTM) combined with a stacked neural network and dropout. LSTMs can learn long term dependencies, usually in the context of sequences of speech or text, and likewise seemed like a logical choice with which to build a time series predictor.   \n\nThe graph for this configuration is as follows:\n\n![lstm graph] (img\/lstm_dnn_graph.png)\n\nThis uses the development branch of Tensorflow, currently version [0.11.0rc0](https:\/\/www.tensorflow.org\/)\n\nMore data is needed to adequately assess results, and more error metrics will be pushed soon. For now, results look something like this after 2000 epochs, omitting the optional DNN:\n\n```\nTraining Error: 0.85 RMSE\nTest Error: 0.82 RMSE\n\nLoss: 0.665656\ndone in 4.848s.\nOverall time: 794.409s\n```\n\n![results graph] (img\/time_series_LSTM_001.png)\n\nDirectories and scripts:\n\ntime_series_lstm.py - main program\nutils\/cleaner.py - cleans the two datasets and fills in missing data with redundant data source\nutils\/data_loader.py - loads and formats raw data into dataframes\nutils\/data_splitter.py - spilts into training, test, and optional validation sets\n\nTo run:\n\ninstall dependencies\n- Tensorflow\n- Numpy\n- Pandas\n- Matplotlib\n    \nThen run:\n\n```\npython3 time_series_lstm.py\n```\n\nThen send donations to:\n```\n3DrXNQydchoC7aaNHa4F4BSNCL2YyZJAjn\n``` \n\nLicense (MIT)\u00b6\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","102":"ZeroReserve\n===========\n\nFriend 2 Friend Payment and Bitcoin exchange\n\n[For Windows, there is a precompiled ZeroReserve \/ Retroshare bundle](https:\/\/mega.co.nz\/#!MVIykABI!fFkRbtdOQDfrIKc0Kke2yfFpS6T17z7q6YxelQ6BJMc). You can install that and the Satoshi client as described below. Then proceed with the [Setup](https:\/\/github.com\/zeroreserve\/ZeroReserve\/wiki\/Getting-started-with-Zero-Reserve).\n\n\nPrerequisite for building is\n* a successful RetroShare build. http:\/\/retroshare.sourceforge.net\/\n* sqlite3 http:\/\/www.sqlite.org\/ (use package from your distro, see below)\n* jsoncpp version 0.6rc or higher: svn co http:\/\/svn.code.sf.net\/p\/jsoncpp\/code\/trunk\/jsoncpp (included in Debian)\n* libcurl http:\/\/curl.haxx.se\/ (use package from your distro, see below)\n* Boost http:\/\/www.boost.org (use package from your distro, see below)\n\nFirst, you need to build Retroshare. [Use these build instructions](http:\/\/retroshare.sourceforge.net\/wiki\/index.php\/UnixCompile). Note: there is no need to build retroshare-nogui.\n\nOn most Linux Distros, Boost, sqlite, curl and jsoncpp are included. On Debian 7, simply do\n\n```\n# apt-get install libjsoncpp-dev libsqlite3-dev libcurl4-openssl-dev libboost-all-dev\n```\n\nTo build Zero Reserve, checkout the sources to the plugins directory of Retroshare and build with:\n```\n$ cd retroshare-code\/plugins\n$ git clone git:\/\/github.com\/zeroreserve\/ZeroReserve.git\n$ cd ZeroReserve\n$ qmake && make clean && make\n```\n\nTo install on Windows, drop the resulting DLL into the\n%APPDATA%\\Retroshare\\extensions directory.\n\nTo install on Linux or MacOS, drop the resulting shared object into\n~\/.retroshare\/extensions\n\nIf you want DHT, run the following command, replacing $ID with your id (a hex string looking like \"3f40a66fa91aba29487cc6ac938d0687\"). If you don't know what DHT is, you also want run this command:\n\n```\n$ echo \"85.10.202.165 28839\" > ~\/.retroshare\/$ID\/bdboot.txt\n```\n\n###Satoshi Client (Bitcoin Core)\nRunning ZeroReserve requires a running [Satoshi Client](https:\/\/bitcoin.org\/en\/download) first:\n```\n$ .\/bitcoind\nor\n$ .\/bitcoin-qt -server     # that shows the GUI *and* permits json-rpc conncetions\n\n```\nOn first startup, the Satoshi client creates the directory structure for the blockchain in\n$HOME\/.bitcoin on Unix and %APPDATA%\\Bitcoin on Windows. Create a suitable bitcoin.conf in\nthis directory. This is an example bitcoin.conf with all entries required:\n```\ntestnet=1\nrpcuser=anu\nrpcpassword=mysupersecretpassword\nrpcport=18332\n```\n\n\n\nThis is experimental software. Use at your own risk. At this stage, leave TestNet\non. Don't enable real currencies.\n\nBuilding and running on MacOS may or may not work at this point. \n","103":"# Blixt Lightning Wallet\n\n<a href=\"https:\/\/play.google.com\/apps\/testing\/com.blixtwallet\"><img alt=\"Get it on Google Play\" height=\"52\" src=\"https:\/\/blixtwallet.github.io\/assets\/images\/google-play-badge-2.png\" \/><\/a>&nbsp;\n<a href=\"https:\/\/testflight.apple.com\/join\/EXvGhRzS\"><img alt=\"Download on the App Store\" height=\"52\" src=\"https:\/\/blixtwallet.github.io\/assets\/images\/appstore-badge.svg\" \/><\/a>\n\nBlixt Wallet is an open source Lightning Bitcoin Wallet for Android with focus on usability and user experience,\npowered by lnd and Neutrino SPV.\n\n<p>\n  <img alt=\"Blixt Lightning Wallet screenshot\" src=\"blixt-wallet-screenshot.png\" width=\"390\" \/>\n<\/p>\n\n## Features\n\n- [x] Embedded lnd with Neutrino\n- [x] Descriptive and clean transaction log\n- [x] Receive payments\n- [x] Autopilot\n- [x] Pincode\n- [x] Fingerprint\n- [x] Optional Recipient\/Sender name that will be displayed on transactions\n- [x] Optional \"Payer\" field for bookkeeping when creating invoice\n- [x] Scheduled sync of chain background job\n- [x] Local channel backup\n- [x] [LNURL](https:\/\/github.com\/btcontract\/lnurl-rfc) support (all sub-protocols: pay, channel, auth and withdraw)\n- [x] Channel backup to Google Drive (Android) and iCloud (iOS)\n- [x] [WebLN](https:\/\/webln.dev\/) browser\n- [x] Support for [Multi-Part Payments (MPP)](https:\/\/lightning.engineering\/posts\/2020-05-07-mpp\/)\n- [x] Integrated Tor support\n- [x] Sending to Lightning Address\n- [ ] Automatically open channels when needed ([LSP](https:\/\/github.com\/hsjoberg\/dunder-lsp))\n- [ ] Receiving via Lightning Address by [Lightning Box](https:\/\/github.com\/hsjoberg\/lightning-box)\n- [ ] NFC\n\n## Known Bugs\n\nThe wallet uses lnd that is young and might have bugs. Check [lnd bug list here](https:\/\/github.com\/lightningnetwork\/lnd\/issues?q=is%3Aissue+is%3Aopen+label%3Abug).\n\n## Build Steps\n\nBlixt targets three platforms right now: Web, Android and iOS.\n\nThe web target is only used for prototyping and is not a real wallet.\n\n### Web\n\nThe easiest way get started is to build the web version, because you only need NodeJS and Yarn installed.\nFor the other targets you need to install their respective toolchains and also [golang](https:\/\/golang.org) &amp; [gomobile](https:\/\/pkg.go.dev\/golang.org\/x\/mobile#section-readme) in order to build lnd for Blixt.\n\nThe web version is not used as a real wallet and is only for fast prototyping.\nIt's useful if you want to make design and GUI changes.\n\n- Install [Node](https:\/\/nodejs.org) and [Yarn](https:\/\/classic.yarnpkg.com)\n- Install Node packages: `yarn`\n- Generate proto files: `yarn gen-proto`\n- Start the web server: `yarn web`\n\n### Android\n\n- Install [Node](https:\/\/nodejs.org), [Yarn](https:\/\/classic.yarnpkg.com) and [Android Studio + Android SDK (including NDK)](https:\/\/developer.android.com\/studio\/)\n- If needed, install an emulated android device inside Android Studio\n- Download lnd binary from [from the latest Blixt Wallet release](https:\/\/github.com\/hsjoberg\/blixt-wallet\/releases) and put it in `android\/lndmobile`. Alternatively build lnd for Android by following the steps in [build-android-aar.md](build-android-aar.md)\n- Get the tor sub-module: `git submodule update --init`\n- Install Node packages: `yarn`\n- Compile the Tor Android lib: `yarn build-tor-lib`\n- Generate proto files: `yarn gen-proto`\n\nTo start the application:\n- Run: `yarn start-metro`\n- Run: `yarn android:mainnet-debug` or `yarn android:testnet-debug`\n\n### iOS\n\nTo build the iOS version, macOS is required. You also need an Apple Developer account, although you do not need to be enrolled in the Developer Program.\n\n- Install [XCode](https:\/\/developer.apple.com\/xcode), [Node](https:\/\/nodejs.org) and [Yarn](https:\/\/classic.yarnpkg.com)\n- Build lnd for iOS by following the steps in [build-ios-framework.md](build-ios-framework.md)\n- Install Node packages: `yarn`\n- Generate proto files: `yarn gen-proto`\n- Install CocoaPods libs: `cd ios && pod install`\n- Setup team signing:\n  - Open ios\/BlixtWallet\/BlixtWallet.xcworkspace with XCode\n  - Login with your Apple Developer account if XCode asks you to\n  - Click on BlixtWallet in the left column\n  - Click on the Signing &amp; Capabilities tab\n  - Choose your Team in the dropdown and choose a new unique Bundle Identifier (cannot be the same as the ones released on the App Store). Do this for every configuration\n\nTo start the application:\n- Run: `yarn start-metro`\n- Run: `yarn ios:mainnet-debug --device \"<your device name>\"` or build from XCode\n\n## Commit and Code-Style\n\nFollow the code style of the file you are working in.\nFor commits, make descriptive and atomic git commits.\n\n## License\n\nMIT\n","104":"# Slack Bitcoin Tipbot\n\nReward teammates in slack with bitcoin! Recognize greatness on your team with the future of currency.\n\n<img src=\"http:\/\/i.imgur.com\/tayZDCq.gif\" width=\"750\">\n\n## Usage\n\n```\nUsage: tip @user [amount]\n\nTipping\n\n  tip @bob            # send @bob 10 bits\n  tip @bob 1000       # send @bob 1000 bits\n  tip @bob 5 USD      # send @bob 5 U.S. dollars in bitcoin\n\nOther Commands\n\n  @tipbot balance <currency>                   # shows your balance, 'bal' also works\n  @tipbot deposit                              # show a bitcoin address to add more funds\n  @tipbot withdraw <amount> <address|email>    # withdraw to a bitcoin or email address\n  @tipbot send <amount> <address|email>        # same as withdraw\n  @tipbot leaderboard <currency>               # see who has what, 'rank' also works\n\nIn direct message chat, you can issue these commands without prefixing '@tipbot ...'.\n```\n\nYou can also tip people with reactions to their messages. Try 1bit <img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/1bit.png\" width=\"22\" height=\"22\">, 10bits <img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/10bits.png\" width=\"22\" height=\"22\">, 100bits <img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/100bits.png\" width=\"22\" height=\"22\">, and 1000bits <img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/1000bits.png\" width=\"22\" height=\"22\">.\n\n\n## Installation\n\nIt takes 5-10 minutes to get a hosted copy of slack-tipbot up and running. Do you trust me? Ok, let's get started...:smiley_cat:\n\n### 1. Create the slack bot\n\n<a href=\"https:\/\/my.slack.com\/services\/new\/bot\" target='_blank'>Add a new bot in slack<\/a> for your team.\n\nGive it a name, such as \"tipbot\". Then choose an emoji for it such as :money_mouth_face:.\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/screen1.png\" width=\"750\">\n\nClick \"Save Integration\". Leave this window open. You'll be needing that API token in a moment.\n\n### 2. Create a Coinbase account\n\nCoinbase allows you to create a separate wallet for each slack user and transfer tiny amounts between them with zero fees (off blockchain), which is perfect for tipping.\n\nIf you already have a Coinbase account it is recommended to make a new one, since this app will create a lot of new wallets (one per user)!\n\n<a href=\"https:\/\/www.coinbase.com\/signup\" target=\"_blank\">Create A Coinbase Account<\/a>\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/screen2.png\" width=\"600\">\n\nVerify your email and skip the quick start.\n\n<a href=\"https:\/\/www.coinbase.com\/settings\/api\" target=\"_blank\">Create a Coinbase API Key<\/a> by clicking \"New API Key\".\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/screen3.png\" width=\"450\" style=\"float: right;\">\n\nUnder accounts check the box for `all`, and under permissions check the box for `wallet:accounts:create`, `wallet:accounts:read`, `wallet:addresses:create`, `wallet:transactions:transfer`, and `wallet:transactions:send`.\n\nLeave the rest of the settings blank and click \"Create\". You'll then need to \"Enable\" the key and click it to reveal the full key and secret. We'll use these in a moment.\n\nFinally, it's a good idea to *fund your Coinbase account* with at least a few dollars of bitcoin. By default every new user in slack (when they first interact with tipbot) will get 100 bits in their account. This greatly increases adoption\/usage of tipbot since there is nothing people need to set up to do their first few tips.\n\nIf you have an existing Coinbase account, you can send some bitcoin to this new account via email or bitcoin address.\n\n### 3. Deploy the app\n\nTipbot runs on the free tier of Heroku. The easiest way to deploy it is with the Heroku deploy button.\n\n<a href=\"https:\/\/heroku.com\/deploy\"><img src=\"https:\/\/www.herokucdn.com\/deploy\/button.svg\" target=\"_blank\"><\/a>\n\nAdd an app name if you'd like (optional).\n\nThen fill in the config variables that you generated in step 1 (SLACK_API_TOKEN) and step 2 (COINBASE_API_KEY and COINBASE_API_SECRET).\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/screen4.png\" width=\"450\">\n\nFinally, click \"Deploy for Free\"!\n\n### 4. Test it out!\n\nThe `@tipbot` user should appear in your company Slack.\n\nTry sending a direct message to `@tipbot` in private chat, or `\/invite @tipbot` to any channel or group. Use `@tipbot help` for a list of commands or try using the `tip @user 10` command.\n\n### 5. Add custom emoji\n\nTo get reaction tipping working, you should [add some custom emoji in Slack](https:\/\/my.slack.com\/customize\/emoji).\n\nWe recommend the following images to associate with each name.\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/1bit.png\" width=\"22\" height=\"22\"> 1bit\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/10bits.png\" width=\"22\" height=\"22\"> 10bits\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/100bits.png\" width=\"22\" height=\"22\"> 100bits\n\n<img src=\"https:\/\/raw.githubusercontent.com\/barmstrong\/slack-tipbot\/master\/images\/1000bits.png\" width=\"22\" height=\"22\"> 1000bits\n\nThese are located in the [images folder on github](https:\/\/github.com\/barmstrong\/slack-tipbot\/tree\/master\/images) for easy downloading.\n\nYou can use any custom images you'd like linked to those names, and they will work. Or modify the source code to support other emoji reactions.\n\n## Troubleshooting\n\nUse the `heroku logs -t` command to see what is going on, any error messages, etc. [Open an issue](https:\/\/github.com\/barmstrong\/slack-tipbot\/issues\/new) if you encounter problems.\n\n## Heroku Idling\n\nHeroku free tier applications will idle when not in use. Either pay $7 a month for the hobby dyno or use [UptimeRobot](http:\/\/uptimerobot.com\/), [Pingdom](https:\/\/www.pingdom.com\/), or similar to prevent your instance from sleeping.\n\n## Contributing\n\nPull requests are welcome. I'm curious what improvements\/modifications people can make. What else should it support? With Slack's popularity, this has the potential to introduce thousands (millions?) of new people to bitcoin, given the ease of getting started. It takes just one person to add it to a team.\n\n## History\nSlack Tipbot was created during the Coinbase hackathon in early December 2015. If you're interested in learning more about working at Coinbase [send us a note](https:\/\/www.coinbase.com\/careers). We'd like the world to have an open payment network.\n\n## Shout Outs\n\nThis project makes heavy use of the [slack-ruby-client](https:\/\/github.com\/dblock\/slack-ruby-client) by @dblock. Thank you!\n","105":"# BCTip - Printable Bitcoin Tips\n\nPython\/Django project, runs on [www.bctip.org](https:\/\/www.bctip.org\/)\n\n## Installation\n1. Create virtual env\n2. pip install -r requirements.txt\n3. Run Libre Office in background, like: ```soffice '--accept=socket,host=127.0.0.1,port=2002;urp;StarOffice.NamingService' --headless --invisible```\n4. Start Django celery\n5. Create templates in core\/templates-odt (see README)\n6. Run utils\/return_expired.py via cron once a day\n","106":"# Backtrader Binance Bot\nA example of bot using Backtrader to trade Bitcoins in [Binance Exchange](https:\/\/www.binance.com\/?ref=35723227).\n\nThis project is not maintained, it is just an example of backtrader usage. **Do not use it in production**!\n\nPresentation in [TDC Belo Horizonte 2019](http:\/\/www.thedevelopersconference.com.br\/tdc\/2019\/belohorizonte\/trilha-python) (pt-BR)\n- https:\/\/slides.com\/rodrigo73\/criptomoedas-tdc-2019\n\n### Installation\n\nActivating [Virtualenv](https:\/\/virtualenv.pypa.io\/en\/latest\/)\n```\nmake init\nsource venv\/bin\/activate\n```\n\nInstalling dependencies\n```\nmake install\n```\n\nStart application\n```\n.\/main.py\n```\n\n## Results\n\n![alt text](screenshot.png \"Backtrader Simulation\")\n\n\n```\nStarting Portfolio Value: 100000.00\nFinal Portfolio Value: 119192.61\n\nProfit 19.193%\nTrade Analysis Results:\n               Total Open     Total Closed   Total Won      Total Lost     \n               0              10             7              3              \n               Strike Rate    Win Streak     Losing Streak  PnL Net        \n               1              5              2              19192.61       \nSQN: 1.75\n```\n","107":"# Seed Savior\n\nA tool for recovering BIP39 seed phrases.\n\nFor more context and background, please see our blog post https:\/\/medium.com\/kzen-networks\/the-wallet-seed-saviors-2cad8ae542f3 \n\nThe tool is based on the bip39 project by Ian Coleman https:\/\/github.com\/iancoleman\/bip39\n\n## Online Version\n\nhttps:\/\/kzen-networks.github.io\/mnemonic-recovery\/src\/index.html\n\n## Standalone offline version\n\nDownload `mnemonic-standalone.html`\n\nOpen the file in a browser by double clicking it.\n\nThis can be compiled from source using the command `python compile.py`\n\n## Usage\n\nEnter your seed phrase into the 'BIP39 Phrase' field. If a word is missing or unknown, please type \"?\" instead and the tool will find all relevant options. If a word is wrong, the tool will try to suggest the closest option. \n\nThe tool will suggest all relevant options for the missing word and the derived public addresses for Bitcoin anmd Ethereum. To find out if one of the suggested addresses is actually the right one, you can click on the suggested address  tocheck the address' transaction history on a block explorer.\n\n## Demo\n\nIn this demo we enter \"phrase brief ceiling dream rack install fault insane panic surround glory ? library brother hill sauce access child notice picnic dinner panda purity poem\"\n\nThe tool suggests several options for the missing word and the relevant one will be \"asset\". We can verify that by clicking on the link of the dervied Ethereum address (\"0x2dfF20b40504f99c6314ac30e8DF5c02dd8058e7\" listed in the \"BIP44 ETH Address\" column) and checking the address has transaction history.\n\n![Demo](\/src\/img\/seed%20demo%20annotated.gif \"Demo\")\n\n\n## Making changes\n\nPlease do not make modifications to `mnemonic-standalone.html`, since they will\nbe overwritten by `compile.py`.\n\nMake changes in `src\/*`.\n\nChanges are applied during release using the command `python compile.py`, so\nplease do not commit changes to `mnemonic.html`\n\n\n\n# License\n\nThis Seed Svior tool is released under the terms of the MIT license. See LICENSE for\nmore information or see https:\/\/opensource.org\/licenses\/MIT.\n","108":"Distributed binaries may or may not have one or more of the following features \r\nenabled.\r\n\r\n\r\n*********************\r\n* REMOTE MINER SERVER\r\n*********************\r\nPlace a text file named banned.txt with IP addresses of banned clients in the \r\nbitcoin working directory.  One IP address should be entered per line, so each\r\nIP address is separated by a newline.\r\n\r\nRemote miner server arguments\r\n\r\n-remoteserver\r\n\tTurns on the remote server.\r\n\t\r\n-remotebindaddr=x.x.x.x\r\n\tBind server to specific adapter.  The default is 127.0.0.1.  Note that this \r\n\twill only accept connections from the local computer.\r\n\t\r\n-remotebindport=xxxxx\r\n\tBind server to specific port.  The default is 8335.\r\n\t\r\n-remotepassword=xxxxx\r\n\tSet a password to access the server.  The default is a blank password.\r\n\t\r\n-distributiontype=connected|contributed\r\n\tSets method used to distribute bitcoins.  \"connected\" will distribute coins\r\n\tonly to those clients that were connected when the block being solved was\r\n\tcreated.  The distribution is based on each connected clients calculated hash \r\n\trate against the total hash rate at the time a new block is created. \r\n\t\"contributed\" will accrue all hashes sent to the server for a given address \r\n\tsince the last generated block.  A client may freely disconnect and reconnect \r\n\tand will continue accumulating hashes to whatever address the client specified.\r\n\tThe distribution of coins with this method is based on the hashes accrued by \r\n\teach address against the total hashes accured by everyone.  The server will\r\n\tsave the values when it shuts down and load them back up on startup.\r\n\t\r\n-resethashescontributed\r\n\tResets the count of hashes contributed from each address.\r\n\r\n\r\n*********************\r\n* REMOTE MINER CLIENT \r\n*********************\r\n(ARGUMENTS MAY BE COMBINED WITH CUDA\/OPENCL ARGUMENTS)\r\nRemote miner client arguments\r\n\r\n-server=x.x.x.x\r\n\tThe address of the server to connect to.  The default is 127.0.0.1.\r\n\t\r\n-port=xxxxx\r\n\tThe port of the server.  The default is 8335.\r\n\t\r\n-password=xxxxx\r\n\tThe password to use when connecting to the server.  The default is a blank \r\n\tpassword.\r\n\t\r\n-address=xxxxxxx\r\n\tThe bitcoin address you want generated coins sent to.  The default is blank.  \r\n\tIf the server is using the \"connected\" ditribution type, a blank address will \r\n\tmake the client's share of generated coins be kept by the server.  If the \r\n\tserver is using the \"contributed\" distribution type, a blank address will\r\n\tmean the client contributes as normal, but the contribution is ignored when\r\n\tdetermining how to distribute any coins.\r\n\r\n-threads=x\r\n\tStart this number of miner threads.  The default value is the number of cores\r\n\ton your processor if using a CPU miner, or 1 if using a GPU miner.\r\n\r\n\r\n*********************\r\n* RPC MINER CLIENT \r\n*********************\r\n(ARGUMENTS MAY BE COMBINED WITH CUDA\/OPENCL ARGUMENTS)\r\nRPC miner client arguments\r\n\r\n-url=http:\/\/example.com:8332\r\n\tThe URL of the RPC server.\r\n\t\r\n-user=username\r\n\tThe username used to connect to the RPC server.\r\n\t\r\n-password=password\r\n\tThe password used to connect to the RPC server.\r\n\t\r\n-threads=x\r\n\tStart this number of miner threads.  The default value is the number of cores\r\n\ton your processor if using a CPU miner, or 1 if using a GPU miner.\r\n\t\r\n-workrefreshms=xxxx\r\n\tWork will be refreshed from the server this often.  Each thread that is \r\n\tstarted needs its own work.  The default value is 4000ms.  If you have a\r\n\tfast miner, or are using lots of threads, you might want to reduce this.\r\n\r\n-statsurl=http:\/\/example.com\/stats\/json\r\n\tThe URL of a server that will respond with a json object of the server stats.\r\n\tCurrently, only slush's server stats are available.  The stats will be\r\n\tprinted by the client every minute.  Not specifying a url will result in no\r\n\tstats being displayed.\r\n\r\n\r\n*********************\r\n* CUDA MINER\r\n*********************\r\nCUDA miner arguments\r\n\r\n-gpu=X\r\n\tTurns on GPU processing on specific GPU device.  Indexes start at 0.  If you \r\n\tjust use -gpu without =X it will pick the device with the max GFlops.\r\n\r\n-aggression=X\r\n\tSpecifies how many hashes (2^(X-1)) per kernel thread will be calculated.  \r\n\tThe default is 6.  It starts at 1 and goes to 32, with each successive\r\n\tnumber meaning double the number of hashes.  Sane values are 1 to 12 or\r\n\tmaybe 14 if you have some super card.\r\n\r\n-gpugrid=X\r\n\tSpecifies what the grid size of the kernel should be.  Useful for fine tuning \r\n\thash rate.\r\n\r\n-gputhreads=X\r\n\tSpecifies how many threads per kernel invocation should run.  Useful for fine \r\n\ttuning hash rate.\r\n\r\n-port=X\r\n\tSpecifies the port that bitcoin will listen on.  (When run in GUI or daemon)\r\n\r\n-rpcport=X\r\n\tSpecifies the port that the rpc server will listen on.  (When run in GUI or daemon)\r\n\r\n\r\n\r\n*********************\r\n* OPENCL MINER\r\n*********************\r\nMake sure bitcoinmineropencl.cl is in the bitcoin working directory for the server and \r\nrpc miner, and remotebitcoinmineropencl.cl for the remote miner.\r\n\r\nOpenCL miner arguments\r\n\r\n-platform=X\r\n\tUse specific OpenCL platform at index X.  Indexes start at 0.  Default is 0.\r\n\t\r\n-gpu=X\r\n\tTurns on GPU processing on specific GPU device on specified platform.\r\n\tIndexes start at 0.  If you just use -gpu without =X it will pick the first \r\n\tdevice found.\r\n\r\n-aggression=X\r\n\tSpecifies how many hashes (2^(X-1)) per kernel thread will be calculated.  \r\n\tThe default is 6.  It starts at 1 and goes to 32, with each successive\r\n\tnumber meaning double the number of hashes.  Sane values are 1 to 12 or\r\n\tmaybe 14 if you have some super card.\r\n\r\n-gpugrid=X\r\n\tSpecifies what the grid size of the kernel should be.  Useful for fine tuning \r\n\thash rate.\r\n\r\n-gputhreads=X\r\n\tSpecifies how many threads per kernel invocation should run.  Useful for fine \r\n\ttuning hash rate.\r\n\r\n-port=X\r\n\tSpecifies the port that bitcoin will listen on.  (When run in GUI or daemon)\r\n\r\n-rpcport=X\r\n\tSpecifies the port that the rpc server will listen on.  (When run in GUI or daemon)\r\n","109":"# Bitcoin Computer Bitcore\n\n## About Bitcoin Computer Bitcore\n\nBitcoin Computer Bitcore is a community driven effort to produce a readable, reliable and modern Javascript implementation of Bitcoin. Most current Javascript Bitcoin implementations do not adhere to modern coding standards and are very hard to read as a consequence. We want to create a Bitcoin implementation that every JavaScript programmer can read and understand.\n\nIn step one, we want to get the entire codebase to comply with the [Airbnb JavaScript Style Guide](https:\/\/github.com\/airbnb\/javascript). Step two will be to port the code base to ES6. Step three will be to statically typecheck the entire codebase with Facebook\u2019s Flow. We suspect we will uncover bugs in the process.\n\nWe are looking for contributors. You do not have to be a Bitcoin protocol expert to contribute. All you need to be is a good Javascript programmer. If you want to help, check out [CONTRIBUTING.md](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/CONTRIBUTING.md) or email [clemens@bitcoincomputer.io](mailto:clemens@bitcoincomputer.io).\n\n## Installation\n\n### Using NPM\n\n```s\n$ npm install --save bitcoin-computer-bitcore\n```\n\n## Examples\n\nYou can find many useful, up-to-date examples to get you started right away by following the provided\nexamples:\n\n- [Generate a random address](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#generate-a-random-address)\n- [Generate a address from a SHA256 hash](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#generate-a-address-from-a-sha256-hash)\n- [Translate an address to any Bitcoin Cash address format](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#translate-an-address-to-any-bitcoin-cash-address-format)\n- [Read an address from any Bitcoin Cash address format](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#read-an-address-from-any-bitcoin-cash-address-format)\n- [Import an address via WIF](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#import-an-address-via-wif)\n- [Create a Transaction](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#create-a-transaction)\n- [Verify a Bitcoin message](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#verify-a-bitcoin-message)\n- [Sign a Bitcoin message](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#sign-a-bitcoin-message)\n- [Create an OP RETURN transaction](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#create-an-op-return-transaction)\n- [Create a 2-of-3 multisig P2SH address](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#create-a-2-of-3-multisig-p2sh-address)\n- [Spend from a 2-of-2 multisig P2SH address](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/docs\/examples.md#spend-from-a-2-of-2-multisig-p2sh-address)\n\n## Security\n\nBitcoin Computer Bitcore is a fork of [bitcore-lib](https:\/\/github.com\/bitpay\/bitcore-lib\/), which is used in production at Bitpay Inc. and many other [projects](http:\/\/bitcore.io#projects). If you find a security issue, please email [clemens@bitcointoken.com](mailto:clemens@bitcointoken.com).\n\n## Contributing\n\nThis is an open-source project, and any form of contribution is welcome. Feel free to create an issue in case you would like to share ideas for improvement, or would like to report a bug. Also, please send pull requests for bug fixes or code optimization. For more information on how to contribute, please refer to our [CONTRIBUTING](CONTRIBUTING.md) file.\n\n## Development\n\nTo get started with development, you should first clone the repository and install any dependencies:\n\n```s\n$ git clone https:\/\/github.com\/bitcoin-computer\/bitcoin-computer-bitcore\n$ cd bitcoin-computer-bitcore\n$ yarn install\n```\n\nNext, you can check everything is installed correctly by running the full test-suite and verifying that all tests are completed successfully.\n\n```s\n$ npm test\n```\n\n## Progress\n\n| File                                    |               Airbnb Style Guide                |                           ES6                           |                          Flow                           |\n| --------------------------------------- | :---------------------------------------------: | :-----------------------------------------------------: | :-----------------------------------------------------: |\n| address.js                              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| block\/block.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| block\/blockheader.js                    | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| block\/index.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| block\/merkleblock.js                    | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| crypto\/bn.js                            | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| crypto\/ecdsa.js                         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| crypto\/hash.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| crypto\/point.js                         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| crypto\/random.js                        | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |   ![not done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')   |\n| crypto\/signature.js                     | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| encoding\/base58.js                      | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| encoding\/base58check.js                 | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| encoding\/bufferreader.js                | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| encoding\/bufferwriter.js                | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| encoding\/varint.js                      | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| errors\/index.js                         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| errors\/spec.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| hdprivatekey.js                         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| hdpublickey.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| message.js                              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/index.js                       | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/mnemonic.js                    | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/pbkdf2.js                      | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/chinese.js               | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/english.js               | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/french.js                | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/index.js                 | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/italian.js               | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/japanese.js              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| mnemonic\/words\/spanish.js               | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| networks.js                             | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| opcode.js                               | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| privatekey.js                           | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| publickey.js                            | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| script\/index.js                         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| script\/interpreter.js                   | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| script\/script.js                        | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/index.js                    | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/index.js              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/input.js              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/multisig.js           | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/multisigscripthash.js | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/publickey.js          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/publickeyhash.js      | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/input\/scripthash.js         | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/output.js                   | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/sighash.js                  | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/signature.js                | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/transaction.js              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| transaction\/unspentoutput.js            | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') |     ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done')     | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| unit.js                                 | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| uri.js                                  | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| util\/buffer.js                          | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| util\/js.js                              | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n| util\/preconditions.js                   | ![done](https:\/\/i.imgur.com\/RXSkZTD.png 'Done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') | ![not done](https:\/\/i.imgur.com\/MleS2Jt.png 'Not done') |\n\n## License\n\nCode released under [the MIT license](https:\/\/github.com\/bitcoin-computer\/bitcoin-source\/blob\/master\/LICENSE).\n","110":"# LightningPay\nBitcoin Lightning Network Payment .NET library\n\n## Features\n\n- [x] Get balance ([Documentation](documentation\/client.md#get-wallet-balance))\n- [x] Create an invoice ([Documentation](documentation\/client.md#create-an-invoice))\n- [x] Check payment ([Documentation](documentation\/client.md#check-invoice-payment))\n- [x] Pay an invoice ([Documentation](documentation\/client.md#pay))\n\n## Packages\n\n- `LightningPay.Abstractions` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.Abstractions.svg)](https:\/\/www.nuget.org\/packages\/LightningPay.Abstractions) : Interfaces and model used by `LightningPay` \n- `LightningPay` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.svg)](https:\/\/www.nuget.org\/packages\/LightningPay) : Core library with all Lightning clients\n- `LightningPay.DependencyInjection` [![NuGet](https:\/\/img.shields.io\/nuget\/v\/LightningPay.DependencyInjection.svg)](https:\/\/www.nuget.org\/packages\/LightningPay.DependencyInjection) : Extension methods for .NET DI\n\nSee [Which package to use ?](documentation\/packages.md) for more details.\n\n## Integration\n\nConnect to your lightning nodes : \n\n- [x] LND ([Documentation](documentation\/client-lnd.md))\n- [x] C-Lightning ([Documentation](documentation\/client-clightning.md))\n- [x] Eclair  ([Documentation](documentation\/client-eclair.md))\n- [ ] Charge (Not supported yet)\n\nOr with custodial solution for lightning (without having a node  of your own) : \n\n- [x] LNDHub \/ BlueWallet ([Documentation](documentation\/client-lndhub.md))\n- [x] LNBits ([Documentation](documentation\/client-lnbits.md))\n\n## Extensible\n\nWith `LightningPay`, you can easly extend your client by add extension methods to the `ILightningClient` interface.\n\nSee the [full documentation here](\/documentation\/extensions.md).\n\n## Samples\n\nNeed for code samples ? Go here : [Lightning samples](samples\/)\n\n## Documentation\n\n[Lightning Documentation](documentation\/)\n\n## Local test\n\nYou can use our [docker-compose file](docker\/) to test the `LightningPay` clients.\n\n## Continuous Integration\n\n[LightningPay build reports](https:\/\/dev.azure.com\/NiawaCorp\/LightningPay\/_build?definitionId=24)\n\n## Contributing\n\nWe appreciate new contributions.\n\n- Non developer : You found a bug or have an suggestion for a new feature ? Don't hesitate to create an issue\n- Developer : develop branch is the principal branch for development. This branch is protected. You must create a pull request and target this branch for code validation.\n\n## Credits\n\nMany thanks to the [BTCPayServer.Lightning](https:\/\/github.com\/btcpayserver\/BTCPayServer.Lightning) project that inspiring us.","111":"Tip4commit\n==========\n\n[![tip for next commit](https:\/\/tip4commit.com\/projects\/307.svg)](https:\/\/tip4commit.com\/projects\/307)\n[![Build Status](https:\/\/travis-ci.org\/tip4commit\/tip4commit.svg?branch=master)](https:\/\/travis-ci.org\/tip4commit\/tip4commit)\n\nDonate bitcoins to open source projects or receive tips for code contributions.\n\nName | Link\n----|----|\nOfficial site | https:\/\/tip4commit.com\/\nDiscussions | https:\/\/bitcointalk.org\/index.php?topic=315802.0\nFAQs | https:\/\/github.com\/tip4commit\/tip4commit\/wiki\/FAQ\nIssues | https:\/\/github.com\/tip4commit\/tip4commit\/issues\nTwitter | https:\/\/twitter.com\/tip4commit\n\nDevelopers\n==========\n\nIf you would like to contribute to the development of tip4commit, you can find the contribution guidelines and installation instructions in the [developer README](https:\/\/github.com\/tip4commit\/tip4commit\/wiki\/Developer-README)\n\n\nLicense\n=======\n\n[MIT License](https:\/\/github.com\/tip4commit\/tip4commit\/blob\/master\/LICENSE)\n","112":"# React Bitcoin Monitor\n\nAn app that monitors changes in the _Bitcoin Price Index (BPI)_.\n\nBy default, the BPI will be shown for _USD_, _GBP_, and _EUR_. Optionally, one can select ones own currency to display in addition to the 3 aforementioned currencies.\n\n_Bitcoin Monitor_ makes use of the _[CoinDesk Bitcoin Price Index API]_. Go [here](https:\/\/www.coindesk.com\/price\/) for more price information by CoinDesk.\n\nGo **[here](http:\/\/react-bitcoin-monitor.drminnaar.me\/)** for live demo.\n\nThe application is composed of the following components:\n\n* Header - A heading that displays application title\n\n* BitcoinMonitor - The primary (root) component that manages state for itself and all underlying components. It is also responsible for connecting to _BitcoinService_ to retrieve _Bitcoin Price Index_ data.\n\n* Display - Displays the _Bitcoin Price Index_ data for USD, GBP, and EUR as a default. Also allows one to select a currency as a fourth price to monitor.\n\n* Indicator - Used by the _Display_ component, it displays an indicator that shows if the current price is up or down from previous price.\n\nComponent Diagram\n![Component Diagram](https:\/\/user-images.githubusercontent.com\/33935506\/34460739-2e3b6a84-ee20-11e7-8808-a654fbdaaf55.png)\n\nThe following services are used to obtain _Bitcoin Price Index_ data:\n\n* BitcoinService\n\n  A wrapper that is responsible for integrating with the [CoinDesk Bitcoin Price Index API]\n\nService Diagram\n![react-bitcoin-monitor-services](https:\/\/user-images.githubusercontent.com\/33935506\/34460740-2e7c490a-ee20-11e7-936e-60c637b630da.png)\n\nFeatures:\n\n* Show BPI for USD, GBP, and EUR\n* Show BPI for any custom selected currency\n\nThis project also demonstrates:\n\n* a typcial React project layout structure\n* babel setup and configuration\n* webpack setup and configuration\n* eslint setup and configuration\n* SCSS setup and configuration\n* [CoinDesk Bitcoin Price Index API] integration\n\n**Screenshots:**\n\n... | ...\n---|---\n![](https:\/\/user-images.githubusercontent.com\/33935506\/34460771-4309303a-ee21-11e7-8a41-867a266e092c.png) | ![](https:\/\/user-images.githubusercontent.com\/33935506\/34460772-4337f320-ee21-11e7-9cc5-aa3b78f5f6b0.png)\n![](https:\/\/user-images.githubusercontent.com\/33935506\/34460773-436739be-ee21-11e7-9604-8450e09ee9cc.png) | ![](https:\/\/user-images.githubusercontent.com\/33935506\/34460774-43a80264-ee21-11e7-8323-fbee96ccce35.png)\n\n---\n\n## Developed With\n\n* [Visual Studio Code](https:\/\/code.visualstudio.com\/) - A source code editor developed by Microsoft for Windows, Linux and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring\n* [Node.js](https:\/\/nodejs.org\/en\/) - Javascript runtime\n* [React](https:\/\/reactjs.org\/) - A javascript library for building user interfaces\n* [Babel](https:\/\/babeljs.io\/) - A transpiler for javascript\n* [Webpack](https:\/\/webpack.js.org\/) - A module bundler\n* [SCSS](http:\/\/sass-lang.com\/) - A css metalanguage\n* [Bootstrap 4](https:\/\/getbootstrap.com\/) - Bootstrap is an open source toolkit for developing with HTML, CSS, and JS\n* [Axios](https:\/\/github.com\/axios\/axios) - Promise based HTTP client for the browser and node.js\n* [CoinDesk Bitcoin Price Index API] - Provides Bitcoin Price Index data\n* [Surge] - Static web publishing for Front-End Developers\n\n---\n\n## Related Projects\n\n* [react-starter]\n\n  A basic template that consists of the essential elements that are required to start building a React application\n\n* [react-clicker]\n\n  A basic React app that allows one to increase, decrease, or reset a counter\n\n* [react-clock-basic]\n\n  A basic clock that displays the current date and time\n\n* [react-timer-basic]\n\n  A basic timer that will start a countdown based on an input of time in seconds\n\n* [react-timer-advanced]\n\n   A countdown timer that offers an advanced UI experience\n\n* [react-masterminds]\n\n  A basic game of guessing a number with varying degrees of difficulty\n\n* [react-movie-cards]\n\n  A basic application that displays a list of movies as a list of cards\n\n* [react-calculator-standard]\n\n  A calculator that provides the essential arithmetic operations, an expression builder, and a complete history of all expressions\n\n* [react-weather-standard]\n\n  A weather application that displays the current weather, daily forecasts, and hourly forecasts based on your current geolocation\n\n---\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nThe following software is required to be installed on your system:\n\n* Node 8.x\n* Npm 3.x\n\nType the following commands in the terminal to verify your node and npm versions\n\n```bash\nnode -v\nnpm -v\n```\n\n### Install\n\nFollow the following steps to get development environment running.\n\n* Clone _'react-bitcoin-monitor'_ repository from GitHub\n\n  ```bash\n  git clone https:\/\/github.com\/drminnaar\/react-bitcoin-monitor.git\n  ```\n\n   _OR USING SSH_\n\n  ```bash\n  git clone git@github.com:drminnaar\/react-bitcoin-monitor.git\n  ```\n\n* Install node modules\n\n   ```bash\n   cd react-bitcoin-monitor\n   npm install\n   ```\n\n### Build\n\n* Build application\n\n  This command will also run ESLint as part of build process.\n\n  ```bash\n  npm run build\n  ```\n\n* Build application and start watching for changes\n\n  This command will also run ESLint as part of build process.\n\n  ```bash\n  npm run build:watch\n  ```\n\n### Run ESlint\n\n* Lint project using ESLint\n\n  ```bash\n  npm run lint\n  ```\n\n* Lint project using ESLint, and autofix\n\n  ```bash\n  npm run lint:fix\n  ```\n\n### Run\n\n* Run start\n\n  This will run the _'serve'_ npm task\n\n  ```bash\n  npm start\n  ```\n\n* Run webpack dev server\n\n  ```bash\n  npm run serve:dev\n  ```\n\n* Alternatively run live-server (simple development http server with live reload capability)\n\n  ```bash\n  npm run serve\n  ```\n\n---\n\n## Versioning\n\nI use [SemVer](http:\/\/semver.org\/) for versioning. For the versions available, see the [tags on this repository](https:\/\/github.com\/drminnaar\/react-bitcoin-monitor\/tags).\n\n## Authors\n\n* **Douglas Minnaar** - *Initial work* - [drminnaar](https:\/\/github.com\/drminnaar)\n\n[CoinDesk Bitcoin Price Index API]: https:\/\/www.coindesk.com\/api\/\n[Surge]: https:\/\/surge.sh\/\n[react-starter]: https:\/\/github.com\/drminnaar\/react-starter\n[react-clicker]: https:\/\/github.com\/drminnaar\/react-clicker\n[react-clock-basic]: https:\/\/github.com\/drminnaar\/react-clock-basic\n[react-timer-basic]: https:\/\/github.com\/drminnaar\/react-timer-basic\n[react-timer-advanced]: https:\/\/github.com\/drminnaar\/react-timer-advanced\n[react-masterminds]: https:\/\/github.com\/drminnaar\/react-masterminds\n[react-movie-cards]: https:\/\/github.com\/drminnaar\/react-movie-cards\n[react-calculator-standard]: https:\/\/github.com\/drminnaar\/react-calculator-standard\n[react-weather-standard]: https:\/\/github.com\/drminnaar\/react-weather-standard\n","113":"This is a Bitcoin qt wrapper for .NET. It is written in C#.\n\nIt is made in june 2013 containing all methods in the Bitcoin-qt API (few exceptions such as multi-signature addresses).\n\nBesides the C# wrapper which can be used in any kind of project, there is a MVC 4 project using the Bitcoin wrapper. Here the methods are called using jQuery (AJAX), to show how to get information from the running Bitcoin server to the client.\n\nTutorial can be found at http:\/\/www.larsholdgaard.com\/bitcoin","114":"# bitcoin-protocol\n\n[![npm version](https:\/\/img.shields.io\/npm\/v\/bitcoin-protocol.svg)](https:\/\/www.npmjs.com\/package\/bitcoin-protocol)\n[![Build Status](https:\/\/travis-ci.org\/mappum\/bitcoin-protocol.svg?branch=master)](https:\/\/travis-ci.org\/mappum\/bitcoin-protocol)\n[![Dependency Status](https:\/\/david-dm.org\/mappum\/bitcoin-protocol.svg)](https:\/\/david-dm.org\/mappum\/bitcoin-protocol)\n\n**Bitcoin network protocol streams**\n\nThis module encodes and decodes low-level network protocol data using streams.\n\nYou may want a higher-level module like [bitcoin-net](https:\/\/github.com\/mappum\/bitcoin-net\/), which some things for you such as connection handshakes, sending keepalive pings, etc.\n\n## Usage\n\n`npm install bitcoin-protocol`\n\n```js\nvar net = require('net')\nvar bp = require('bitcoin-protocol')\n\nvar decoder = bp.createDecodeStream()\ndecoder.on('data', function (message) { console.log(message) })\n\nvar encoder = bp.createEncodeStream()\n\nvar socket = net.connect(8333, '127.0.0.1', function () {\n  socket.pipe(decoder)\n  encoder.pipe(socket)\n\n  encoder.write({\n    magic: 0xd9b4bef9,\n    command: 'version',\n    payload: {\n      version: 70012,\n      services: Buffer(8).fill(0),\n      timestamp: Math.round(Date.now() \/ 1000),\n      receiverAddress: {\n        services: Buffer('0100000000000000', 'hex'),\n        address: '0.0.0.0',\n        port: 8333\n      },\n      senderAddress: {\n        services: Buffer(8).fill(0),\n        address: '0.0.0.0',\n        port: 8333\n      },\n      nonce: Buffer(8).fill(123),\n      userAgent: 'foobar',\n      startHeight: 0,\n      relay: true\n    }\n  })\n})\n```\n\n### Methods\n\n#### `createDecodeStream([opts])`\n\nCreates a stream which parses raw network bytes written to it and outputs message objects.\n\nOpts may contain:\n```js\n{\n  magic: Number\n  \/\/ If provided, the decoder will check if messages' \"magic\" field matches\n  \/\/ this value. If it does not match, the stream will emit an error.\n}\n```\n\n#### `createEncodeStream([opts])`\n\nCreates a stream which encodes message objects to raw network bytes.\n\nOpts may contain:\n```js\n{\n  magic: Number\n  \/\/ If provided, the encoder will automatically add the \"magic\" field to each\n  \/\/ message written to it.\n}\n```\n\n### Format\n\n**Decoder**\n\nEmitted by the decoder:\n```js\n{\n  magic: Number,\n  command: String,\n  length: Number,\n  checksum: Buffer, \/\/ 8 bytes,\n  payload: Object \/\/ see below for detailed payload formats\n}\n```\n\n**Encoder**\n\nWritten to the encoder:\n```js\n{\n  magic: Number, \/\/ optional if you set this in the options\n  command: String,\n  payload: Object \/\/ see below for detailed payload formats\n}\n```\n\n### Payload Reference\n\nThe formats for the objects used as message payloads for the various commands are as follows. See [the wiki](https:\/\/en.bitcoin.it\/wiki\/Protocol_documentation) for more information about these messages.\n\n#### `version`\n```js\n{\n  version: Number,\n  services: Buffer, \/\/ 8 bytes\n  timestamp: Number,\n  receiverAddress: {\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  senderAddress: {\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  nonce: Buffer, \/\/ 8 bytes\n  userAgent: String,\n  startHeight: Number,\n  relay: Boolean\n}\n```\n\n#### `verack`, `getaddr`, `mempool`, `filterclear`, `sendheaders`\n```js\n\/\/ no payload needed\n```\n\n#### `addr`\n```js\n[\n  {\n    time: Number,\n    services: Buffer, \/\/ 8 bytes\n    address: String, \/\/ ipv4 or ipv6\n    port: Number\n  },\n  ...\n]\n```\n\n#### `inv`, `getdata`, `notfound`\n```js\n[\n  {\n    type: Number,\n    hash: Buffer \/\/ 32 bytes\n  },\n  ...\n]\n```\n\n#### `getblocks`, `getheaders`\n```js\n{\n  version: Number,\n  locator: [\n    Buffer \/\/ 32 bytes\n  ],\n  hashStop: Buffer \/\/ 32 bytes\n}\n```\n\n#### `tx`\n```js\n{\n  version: Number,\n  ins: [\n    {\n      hash: Buffer, \/\/ 32 bytes\n      index: Number,\n      script: Buffer, \/\/ varying length\n      sequence: Number\n    },\n    ...\n  ],\n  outs: [\n    {\n      value: BN, \/\/ from 'bn.js' package\n      script: Buffer \/\/ varying length\n    },\n    ...\n  ],\n  locktime: Number\n}\n```\n\n#### `block`\n```js\n{\n  header: {\n    version: Number,\n    prevHash: Buffer, \/\/ 32 bytes\n    merkleRoot: Buffer, \/\/ 32 bytes\n    timestamp: Number,\n    bits: Number,\n    nonce: Number,\n  },\n  transactions: [\n    {}, \/\/ same format as 'tx' message\n    ...\n  ]\n}\n```\n\n#### `headers`\n```js\n[\n  {\n    header: {\n      version: Number,\n      prevHash: Buffer, \/\/ 32 bytes\n      merkleRoot: Buffer, \/\/ 32 bytes\n      timestamp: Number,\n      bits: Number,\n      nonce: Number,\n    },\n    nTransactions: Number\n  },\n  ...\n]\n```\n\n#### `ping`, `pong`\n```js\n{\n  nonce: Buffer \/\/ 8 bytes\n}\n```\n\n#### `reject`\n```js\n{\n  message: String,\n  ccode: Number,\n  reason: String,\n  data: Buffer \/\/ varying length\n}\n```\n\n#### `filterload`\n```js\n{\n  data: Buffer, \/\/ varying length\n  nHashFuncs: Number,\n  nTweak: Number,\n  nFlags: Number\n}\n```\n\n#### `filteradd`\n```js\n{\n  data: Buffer \/\/ varying length\n}\n```\n\n#### `merkleblock`\n```js\n{\n  header: {\n    version: Number,\n    prevHash: Buffer, \/\/ 32 bytes\n    merkleRoot: Buffer, \/\/ 32 bytes\n    timestamp: Number,\n    bits: Number,\n    nonce: Number\n  },\n  numTransactions: Number,\n  hashes: [\n    Buffer \/\/ 32 bytes\n  ],\n  flags: Buffer \/\/ varying length\n}\n```\n\n#### `alert`\n```js\n{\n  payload: Buffer, \/\/ varying length\n  signature: Buffer \/\/ varying length\n}\n```\n","115":"# LBRYcrd - The LBRY blockchain\n\n[![Build Status](https:\/\/travis-ci.org\/lbryio\/lbrycrd.svg?branch=master)](https:\/\/travis-ci.org\/lbryio\/lbrycrd)\n[![MIT licensed](https:\/\/img.shields.io\/dub\/l\/vibe-d.svg?style=flat)](https:\/\/github.com\/lbryio\/lbry-desktop\/blob\/master\/LICENSE)\n\nLBRYcrd uses a blockchain similar to bitcoin's to implement an index and payment system for content on the LBRY network. It is a fork of [bitcoin core](https:\/\/github.com\/bitcoin\/bitcoin). In addition to the libraries used by bitcoin, LBRYcrd also uses [icu4c](https:\/\/github.com\/unicode-org\/icu\/tree\/master\/icu4c).\n\nPlease read the [lbry.tech overview](https:\/\/lbry.tech\/overview) for a general understanding of the LBRY pieces. From there you could read the [LBRY spec](https:\/\/spec.lbry.com\/) for specifics on the data in the blockchain.\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n   1. [Examples](#examples)\n   2. [Data directory](#data-directory)\n3. [Running from Source](#running-from-source)\n   1. [Ubuntu with pulled static dependencies](#ubuntu-with-pulled-static-dependencies)\n   2. [Ubuntu with local shared dependencies](#ubuntu-with-local-shared-dependencies)\n   3. [MacOS (cross-compiled)](<#macos-(cross-compiled)>)\n   4. [MacOS with local shared dependencies](#macos-with-local-shared-dependencies)\n   5. [Windows (cross-compiled)](<#windows-(cross-compiled)>)\n   6. [Use with CLion](#use-with-clion)\n4. [Contributing](#contributing)\n   - [Testnet](#testnet)\n5. [Mailing List](#mailing-list)\n6. [License](#license)\n7. [Security](#security)\n8. [Contact](#contact)\n\n## Installation\n\nLatest binaries are available from https:\/\/github.com\/lbryio\/lbrycrd\/releases. There is no installation procedure; the CLI binaries will run as-is and will have any uncommon dependencies statically linked into the binary. The QT GUI is not supported. LBRYcrd is distributed as a collection of executable files; traditional installers are not provided.\n\n## Usage\n\nThe `lbrycrdd` executable will start a LBRYcrd node and connect you to the LBRYcrd network. Use the `lbrycrd-cli` executable\nto interact with lbrycrdd through the command line. Command-line help for both executables are available through\nthe \"--help\" flag (e.g. `lbrycrdd --help`). Examples:\n\n#### Examples\n\nRun `.\/lbrycrdd -server -daemon` to start lbrycrdd in the background.\n\nRun `.\/lbrycrd-cli -getinfo` to check for some basic information about your LBRYcrd node.\n\nRun `.\/lbrycrd-cli help` to get a list of all commands that you can run. To get help on specific commands run `.\/lbrycrd-cli [command_name] help`\n\nTest locally:\n\n```sh\n.\/lbrycrdd -server -regtest -txindex  # run this in its own window\n.\/lbrycrd-cli -regtest generate 120   # mine 20 spendable coins\n.\/lbrycrd-cli -regtest claimname my_name deadbeef 1 # hold a name claim with 1 coin\n.\/lbrycrd-cli -regtest generate 1     # get that claim into the block\n.\/lbrycrd-cli -regtest listnameclaims # show owned claims\n.\/lbrycrd-cli -regtest getclaimsforname my_name # show claims under that name\n.\/lbrycrd-cli -regtest stop           # kill lbrycrdd\nrm -fr ~\/.lbrycrd\/regtest\/            # destroy regtest data\n```\n\nFor further understanding of a \"regtest\" setup, see the local stack setup instructions here: https:\/\/lbry.tech\/resources\/regtest-setup\n\nThe CLI help is also browsable online at https:\/\/lbry.tech\/api\/blockchain\n\n#### Data directory\n\nLbrycrdd will use the below default data directories (changeable with -datadir):\n\n```sh\nWindows:  %APPDATA%\\lbrycrd\nMac:      ~\/Library\/Application Support\/lbrycrd\nUnix:     ~\/.lbrycrd\n```\n\nThe data directory contains various things such as your default wallet (wallet.dat), debug logs (debug.log), and blockchain data. You can optionally create a configuration file lbrycrd.conf in the default data directory which will be used by default when running lbrycrdd.\n\nFor a list of configuration parameters, run `.\/lbrycrdd --help`. Below is a sample lbrycrd.conf to enable JSON RPC server on lbrycrdd.\n\n```sh\nrpcuser=lbry\nrpcpassword=xyz123456790\ndaemon=1\nserver=1\ntxindex=1\n```\n\n## Running from Source\n\nThe easiest way to compile is to utilize the Docker image that contains the necessary compilers: lbry\/build_lbrycrd. This will allow you to reproduce the build as made on our build servers. In this sample we map a local lbrycrd folder and a local ccache folder inside the image:\n```sh\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\ndocker run -v \"$(pwd):\/lbrycrd\" --rm -v \"${HOME}\/ccache:\/ccache\" -w \/lbrycrd -e CCACHE_DIR=\/ccache lbry\/build_lbrycrd packaging\/build_linux_64bit.sh\n```\n\nSome examples of compiling directly:\n\n#### Ubuntu with pulled static dependencies\n\n```sh\nsudo apt install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/packaging\/build_linux_64bit.sh\n.\/src\/test\/test_lbrycrd\n\n```\n\nOther Linux distros would be similar. The build shell script is fairly trivial; take a peek at its contents.\n\n#### Ubuntu with local shared dependencies\n\nNote: using untested dependencies may lead to conflicting results.\n\n```sh\nsudo add-apt-repository ppa:bitcoin\/bitcoin\nsudo apt-get update\nsudo apt-get install libdb4.8-dev libdb4.8++-dev libicu-dev libssl-dev libevent-dev \\\n                     build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\n# optionally include libminiupnpc-dev libzmq3-dev\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/autogen.sh\n.\/configure --enable-static --disable-shared --with-pic --without-gui CXXFLAGS=\"-O3 -march=native\"\nmake -j$(nproc)\n.\/src\/lbrycrdd -server ...\n\n```\n\n#### MacOS (cross-compiled)\n\n```sh\nsudo apt-get install clang llvm git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n# download MacOS SDK from your favorite source\nmkdir depends\/SDKs\ntar ... extract SDK to depends\/SDKs\/MacOSX10.11.sdk\n.\/packaging\/build_darwin_64bit.sh\n\n```\n\nLook in packaging\/build_darwin_64bit.sh for further understanding.\n\n#### MacOS with local shared dependencies\n\n```sh\nbrew install boost berkeley-db@4 icu4c libevent\n# fix conflict with gawk pulled first:\nbrew reinstall readline\nbrew reinstall gawk\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\/depends\nmake NO_QT=1\ncd ..\n.\/autogen.sh\nCONFIG_SITE=$(pwd)\/depends\/x86_64-apple-darwin15.6.0\/share\/config.site .\/configure --enable-static --disable-shared --with-pic --without-gui --enable-reduce-exports CXXFLAGS=-O2\nmake -j$(sysctl -n hw.ncpu)\n\n```\n\n#### Windows (cross-compiled)\n\nCompiling on MS Windows (outside of WSL) is not supported. The Windows build is cross-compiled from Linux like so:\n\n```sh\nsudo apt-get install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n\nupdate-alternatives --set x86_64-w64-mingw32-g++ \/usr\/bin\/x86_64-w64-mingw32-g++-posix\n\ngit clone https:\/\/github.com\/lbryio\/lbrycrd.git\ncd lbrycrd\n.\/packaging\/build_windows_64bit.sh\n\n```\n\nIf you encounter any errors, please check `doc\/build-*.md` for further instructions. If you're still stuck, [create an issue](https:\/\/github.com\/lbryio\/lbrycrd\/issues\/new) with the output of that command, your system info, and any other information you think might be helpful. The scripts in the packaging folder are simple and will grant extra light on the build process as needed.\n\n#### Use with CLion\n\nCLion has not traditionally supported Autotools projects, although some progress on that is now in the works. We do include a cmake build file for compiling lbrycrd. See contrib\/cmake. Alas, CLion doesn't support external projects in cmake, so that particular approach is also insufficient. CLion does support \"compile_commands.json\" projects. Fortunately, this can be easily generated for lbrycrd like so:\n\n```sh\npip install --user compiledb\n.\/autogen.sh && .\/configure --enable-static=no --enable-shared --with-pic --without-gui CXXFLAGS=\"-O0 -g\" CFLAGS=\"-O0 -g\" # or whatever normal lbrycrd config\ncompiledb make -j10\n```\n\nThen open the newly generated compile_commands.json file as a project in CLion. Debugging is supported if you compiled with `-g`. To enable that you will need to create a target in CLion by going to File -> Settings -> Build -> Custom Build Targets. Add an empty target with your choice of name. From there you can go to \"Edit Configurations\", typically found in a drop-down at the top of the editor. Add a Custom Build Application, select your new target, select the compiled file (i.e. test_lbrycrd or lbrycrdd, etc), and then add any necessary command line parameters. Ensure that there is nothing in the \"Before launch\" section.\n\n## Contributing\n\nContributions to this project are welcome, encouraged, and compensated. For more details, see [https:\/\/lbry.tech\/contribute](https:\/\/lbry.tech\/contribute)\n\nWe follow the same coding guidelines as documented by Bitcoin Core, see [here](\/doc\/developer-notes.md). To run an automated code formatting check, try:\n`git diff -U0 master -- '*.h' '*.cpp' | .\/contrib\/devtools\/clang-format-diff.py -p1`. This will check any commits not on master for proper code formatting.\nWe try to avoid altering parts of the code that is inherited from Bitcoin Core unless absolutely necessary. This will make it easier to merge changes from Bitcoin Core. If commits are expected not to be merged upstream (i.e. we broke up a commit from Bitcoin Core in order to use a single feature in it), the commit message must contain the string \"NOT FOR UPSTREAM MERGE\".\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Releases](https:\/\/github.com\/lbryio\/lbrycrd\/releases) are created\nregularly to indicate new official, stable release versions.\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money. Developers are strongly encouraged to write [unit tests](\/src\/test\/README.md) for new code and to\nsubmit new unit tests for old code. Unit tests are compiled by default and can be run with `src\/test\/test_lbrycrd`\n\nThe Travis CI system makes sure that every pull request is built, and that unit and sanity tests are automatically run. See https:\/\/travis-ci.org\/lbryio\/lbrycrd\n\n### Testnet\n\nTestnet is maintained for testing purposes and can be accessed using the command `.\/lbrycrdd -testnet`. If you would like to obtain testnet credits, please contact brannon@lbry.com or grin@lbry.com .\n\nIt is easy to solo mine on testnet. (It's easy on mainnet too, but much harder to win.) For instructions see  [SGMiner](https:\/\/github.com\/lbryio\/sgminer-gm) and [Mining Contributions](https:\/\/github.com\/lbryio\/lbrycrd\/tree\/master\/contrib\/mining) \n\n## Mailing List\n\nWe maintain a mailing list for notifications of upgrades, security issues, and soft\/hard forks. To join, visit [https:\/\/lbry.com\/forklist](https:\/\/lbry.com\/forklist).\n\n## License\n\nThis project is MIT licensed. For the full license, see [LICENSE](LICENSE).\n\n## Security\n\nWe take security seriously. Please contact [security@lbry.com](mailto:security@lbry.com) regarding any security issues.\nOur PGP key is [here](https:\/\/lbry.com\/faq\/pgp-key) if you need it.\n\n## Contact\n\nThe primary contact for this project is [@BrannonKing](https:\/\/github.com\/BrannonKing) (brannon@lbry.com)\n","116":"Check out https:\/\/coinbuddy.co\/coins to track which exchanges support your favorite coin\n# Cryptocurrency\n\n| Name          | Description                                              | Pros                                                                  | Cons                                             | Where to buy                                                           | Similar to | Category |\n|---------------|----------------------------------------------------------|-----------------------------------------------------------------------|--------------------------------------------------|------------------------------------------------------------------------|------------|----------|\n| [Bitcoin (BTC)](https:\/\/bitcoin.org\/en\/) | Bitcoin is a cryptocurrency and a digital payment system | \u2022 Most widely accepted cryptocurrency in the world  | \u2022 Slow transaction time <br\/> \u2022 Not as decentralized as people think due to the fact that majority of miners are Chinese | [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481)     | Litecoin   | Currency |\n| [Ethereum (ETH)](https:\/\/www.ethereum.org\/) | Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference. | \u2022 Programmable money <br\/> \u2022 Smart contracts<br\/> \u2022 Ability to issue your own tokens \u2022 Huge community - Ethereum Enterprise Alliance consists of companies like Microsoft, Intel, and more \t| \u2022 Higher inflation than bitcoin <br\/>\u2022 Scalability is still a challenge-entire blockchain can be clogged if faced with a large number of concurrent transactions  \t| [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481) \t| Waves | Platform\n| [Ripple (XRP)](https:\/\/ripple.com\/) \t| Ripple is a real-time gross settlement system (RTGS), currency exchange and remittance network operated by Ripple. \t| \u2022 Math-based currency <br\/>\u2022 Free from DoS attacks<br\/>\u2022 Its settlement infrastructure is used by the banks \t| \u2022 Founders of Ripple control ~60% of XRP\t| [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) \t| Stellar \t| Payment Network\n| [Litecoin (LTC)](https:\/\/litecoin.org\/) | Litecoin is a peer-to-peer Internet currency that enables instant, near-zero cost payments to anyone in the world. | \u2022 Faster transaction time than bitcoin. <br\/>\u2022 Also can handle more transactions than bitcoin. <br\/>\u2022 Segwit-ready | \u2022 Weak marketing | [Coinbase](https:\/\/www.coinbase.com\/join\/52893754c1edbc9eee000481) | Bitcoin | Currency\n| [Ethereum Classic (ETC)](https:\/\/ethereumclassic.github.io\/) | Ethereum Classic is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference. | \u2022 Continuation of the original Ethereum blockchain - the classic version preserving untampered history | \u2022 Community of developers vehemently against Ethereum | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Ethereum | Currency\n| [Dash (DASH)](https:\/\/www.dash.org\/) | Dash (formerly known as Darkcoin and XCoin) is an open source peer-to-peer cryptocurrency that offers instant transactions (InstantSend), private transactions (PrivateSend) and token fungibility. | \u2022 Instantaneous transaction time about 1.2 seconds <br\/>\u2022 Private transaction possible with privatesend<br\/>\u2022 Low transaction fee | \u2022 Core team is secretive about their roadmaps <br\/>\u2022 Decentralized governance is immature - few masternode owners make the decision | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Stellar, NEM, Ripple | Payment Network\n| [NEM (XEM)](https:\/\/www.nem.io\/) | NEM has a stated goal of a wide distribution model and has introduced new features to blockchain technology such as its proof-of-importance (POI) algorithm, multisignature accounts, encrypted messaging, and an Eigentrust++ reputation system. | \u2022 Unique proof-of-importance (POI) algorithm <br\/> \u2022 Variety of usecases - can send payments and messages securely globally and is recognized by some Japanese banks <br\/> \u2022 Incredibly scalable - 3000 transactions\/sec\/ <br\/>\u2022 Low transaction fee - 0.01% fee | \u2022 No private transactions <br\/>\u2022 No mining available <br\/> \u2022 Unclear roadmap <br\/> \u2022 Lack of enterprise features <br\/> \u2022 No substantial development updates recently | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Stellar, Dash, Ripple | Payment Network, Platform\n| [Iota (MIOTA)](https:\/\/iota.org\/) | Iota is a cryptocurrency that aims to establish itself as the fuel for efficient machine-to-machine (M2M) transactions | \u2022 No transaction cost <br\/>\u2022Scalability due to \"Tangle\" which forces every new transaction to verify two previous transactions<br\/>\u2022 Offline transaction | \u2022 All the tokens are premined <br\/>\u2022Lack of marketing talent in the team.| [Bitfinex](https:\/\/www.bitfinex.com\/?ref=coingenius.io) | Ethereum | Platform\n| [Monero (XMR)](https:\/\/getmonero.org) | Monero (XMR) is a privacy-focused cryptocurrency that is not based on Bitcoin's code. |  \u2022 Untraceable payments & Unlinkable transactions <br\/> \u2022 Second most used cryptocurrency in the dark web. <br\/>\u2022 Cryptonote-based | \u2022 Untraceability makes it challenging to go mainstream | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Bytecoin, Zcash | Currency\n| [EOS (EOS)](https:\/\/eos.io\/) | EOS.IO is software that introduces a blockchain architecture designed to enable vertical and horizontal scaling of decentralized applications (the \u201cEOS.IO Software\u201d). The software provides accounts, authentication, databases, asynchronous communication and the scheduling of applications across multiple CPU cores and\/or clusters. | \u2022 Allows developers to develop on the blockchain without the hassle of dealing with account recovery, permissions, etc<br\/>\u2022 Much more scalable - millions of transactions\/sec<br\/>\u2022 No need to spend tokens to rent the computing power on EOS <br\/> \u2022 Experienced founder behind the team who contributed to Bitshares and Steem |  \u2022 No mining available <br\/> \u2022 Founder is known for abandoning projects <br\/> \u2022 DPoS can result in centralization | [Kraken](https:\/\/www.kraken.com\/?ref=coingenius.io) | Iota, Ethereum | Platform\n| [Bitshares (BTS)](https:\/\/bitshares.org\/) | BitShares offers a stack of financial services including exchange and banking on a blockchain. | \u2022 Allows for trading on its decentralized exchange <br\/> \u2022 Extremely fast transaction time - handles tens of thousands\/sec <br\/> \u2022 Allows for creation of smartcoins and user-issued assets akin to Waves' custom tokens | \u2022 Declining developer interest. Main developer left to work for Steem | [Poloniex](https:\/\/poloniex.com\/) | Waves, Lykke | Decentralized Exchange\n| [Stratis (STRAT)](https:\/\/stratisplatform.com\/) | Stratis offers full service capabilities for the development, deployment and management of blockchain applications and solutions utilizing C# on the .Net framework. | \u2022 Block chain as a service. (Private & public blockchains for corps) <br\/> \u2022 Segwit-ready. <br\/> \u2022 Master nodes provide extra services like making the network transactions more private, enabling instant transactions, etc. <br\/> \u2022 Smart contracts using C# | \u2022 No actual corporate customers as of May 30th 2017 <br\/> \u2022 Smart contracts available only on sidechains| [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Lisk | Platform\n| [Zcash (ZEC)](https:\/\/z.cash\/) | Zcash is the first open, permissionless cryptocurrency that can fully protect the privacy of transactions using zero-knowledge cryptography. | \u2022 Untraceable payments & Unlinkable transactions | \u2022 20% of block reward goes to the developers. | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Bytecoin, Monero | Currency\n| [Bitconnect (BCC)](https:\/\/bitconnect.co\/?ref=coingenius) | BitConnect is an open source all in one bitcoin and crypto community platform designed to provide multiple investment opportunities with cryptocurrency education where it is entirely possible to find the independence we all desire, in a community of like-minded, freedom loving individuals who, like you, are seeking the possibility of income stability in a very unstable world. | \u2022 Allows crypto investors to lend bitconnect coin and make passive income | \u2022 Has a chance of being a massive Ponzi Scheme - volatility bot that trades on your behalf never loses money, which is nearly impossible <br\/>\u2022 No whitepaper | [Livecoin](https:\/\/www.livecoin.net\/?ref=coingenius.io) | N\/A | Lending Network\n| [Waves (WAVES)](https:\/\/wavesplatform.com\/) | Crypto-platform for asset\/custom token issuance, transfer and trading on blockchain | \u2022 Allows for trading on its decentralized exchange <br\/> \u2022 Straightforward custom token creation process <br\/> \u2022 Fast transactions and future-proof scaling. <br\/> \u2022 Friendly community | \u2022 Many fake coins created as a result of easy creation process | [Bittrex](https:\/\/bittrex.com) | Bitshares, Lykke | Decentralized Exchange\n| [Steem (STEEM)](https:\/\/steem.io\/)| Steem is a blockchain-based social media platform where anyone can earn rewards. | \u2022 Content creators on steemit.com get rewarded when their posts get upvoted | \u2022 Vulnerable to voting manipulation via sybil attack | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | AMP Synereo | Currency\n| [Antshares (ANS\/NEO)](https:\/\/www.antshares.org\/) | As China's first ever original and open source public chain project, Antshares serves as a smart assets platform. Smart assets are the combination of smart contract of blockchain and digital assets. Antshares allows for a smarter way for assets registration, issuance, and circulation. | \u2022 Ethereum for China <br\/> \u2022 Quantum-proof <br\/> \u2022 More parallelizable virtual machine <br\/> \u2022 More programming language support than ethereum <br\/> \u2022Partnership with Microsoft | \u2022 People online are reporting issues with its online wallet not syncing | [Bittrex](https:\/\/bittrex.com) | Ethereum | Platform\n| [Gnosis (GNO)](https:\/\/gnosis.pm\/) | Based on Ethereum \u2014 The next generation blockchain network. Speculate on anything with an easy-to-use prediction market. | \u2022 Can create a customizable prediction market app | \u2022 No known Gnosis-powered apps | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Augur | Platform\n| [Golem (GNT)](https:\/\/golem.network\/) | Golem is a global, open sourced, decentralized supercomputer that anyone can access. It's made up of the combined power of user's machines, from personal laptops to entire datacenters. | \u2022 You get rewarded for renting out computing power | \u2022 No Mining available | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Siacoin | Computing Network\n| [Bytecoin (BCN)](https:\/\/bytecoin.org\/)| Bytecoin allows safe and secure transactions around the globe and offers the convenience of instant fee-free money transactions. | \u2022 Free instant international payments. <br\/> \u2022 Unntraceable payment <br\/> \u2022 Cryptonote-based | \u2022 80%+ were premined prior to public release | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Monero, Zcash | Payment Network\n| [Siacoin (SC)](http:\/\/sia.tech\/) | Sia is a decentralized network of datacenters that, taken together, comprise the world's fastest, cheapest, and most secure cloud storage platform. | \u2022 You get rewarded for renting out your computer storage <br\/> \u2022 Files are split across the network & encrypted so no need to worry about privacy | \u2022 Low adoption | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Golem, Storj | Storage Network\n| [Dogecoin (DOGE)](http:\/\/dogecoin.com\/) | Dogecoin is a cryptocurrency featuring a likeness of the Shiba Inu dog from the \"Doge\" Internet meme as its logo. | \u2022 Easy to send payments online | \u2022 Coin is not taken seriously. <br\/> \u2022 No unique technical feature | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Steem | Currency\n| [Stellar Lumens (XLM)](https:\/\/www.stellar.org\/) | Stellar is a platform that connects banks, payments systems, and people. | \u2022 Instant payment (2-5 seconds) <br\/> \u2022 Customizable payment infrastructure| \u2022 No mining available. 90% of Lumens are owned by the founders | [Bittrex](https:\/\/bittrex.com), [Poloniex](https:\/\/poloniex.com\/) | Ripple | Payment Network \n\n## More Resources\n\n-  **[kennethreitz\/awesome-coins](https:\/\/github.com\/kennethreitz\/awesome-coins)** (GitHub Repo)\n","117":"# Lightning Charge\n\n[![build status](https:\/\/api.travis-ci.org\/ElementsProject\/lightning-charge.svg)](https:\/\/travis-ci.org\/ElementsProject\/lightning-charge)\n[![npm release](https:\/\/img.shields.io\/npm\/v\/lightning-charge.svg)](https:\/\/www.npmjs.com\/package\/lightning-charge)\n[![docker release](https:\/\/img.shields.io\/docker\/pulls\/shesek\/lightning-charge.svg)](https:\/\/hub.docker.com\/r\/shesek\/lightning-charge\/)\n[![MIT license](https:\/\/img.shields.io\/github\/license\/elementsproject\/lightning-charge.svg)](https:\/\/github.com\/ElementsProject\/lightning-charge\/blob\/master\/LICENSE)\n[![Pull Requests Welcome](https:\/\/img.shields.io\/badge\/PRs-welcome-brightgreen.svg)](http:\/\/makeapullrequest.com)\n[![IRC](https:\/\/img.shields.io\/badge\/chat-on%20freenode-brightgreen.svg)](https:\/\/webchat.freenode.net\/?channels=lightning-charge)\n\n\nA drop-in solution for accepting lightning payments, built on top of [c-lightning](https:\/\/github.com\/ElementsProject\/lightning).\n\n- Simple HTTP REST API, optimized for developer friendliness and ease of integration. Near-zero configuration.\n\n- Supports invoice metadata, fiat currency conversion, long polling, web hooks, websockets and server-sent-events.\n\n- Built-in checkout page, can be iframed or redirected to.\n\n:zap: radically low fees :zap: nano payments :zap: instant confirmations :zap:\n\n## Getting Started\n\nSetup [c-lightning](https:\/\/github.com\/ElementsProject\/lightning#getting-started) and nodejs (v7.6 or newer), then:\n\n```bash\n$ npm install -g lightning-charge\n\n$ charged --api-token mySecretToken # defaults: --ln-path ~\/.lightning\/testnet --db-path .\/charge.db --port 9112\n\n```\n\n> Note: if you're running into permission issues, try following\n[these instructions](https:\/\/docs.npmjs.com\/getting-started\/fixing-npm-permissions#option-two-change-npms-default-directory).\n\nThat's it! The Lightning Charge REST API is now running and ready to process payments.\nYou can access it at `http:\/\/localhost:9112` using the API access token configured with `--api-token`.\n\nConfiguration options may alternatively be provided using environment variables:\n\n```bash\n$ LN_PATH=~\/.lightning\/testnet DB_PATH=charge.db API_TOKEN=mySecretToken PORT=9112 charged\n```\n\nListens for connections on `127.0.0.1` by default. Set `-i 0.0.0.0` to bind on all available interfaces.\nNote that Charge does not have TLS encryption and should not normally be exposed directly to the public\ninternet. For remote access, you should setup an SSH tunnel or a TLS-enabled reverse proxy like nginx.\n\nSee `$ charged --help` for the full list of available options.\n\n### Deploy with Docker\n\nTo deploy Lightning Charge with Docker, run these commands:\n\n```bash\n$ mkdir data # make sure to create the folder _before_ running docker\n$ docker run -it -u `id -u` -v `pwd`\/data:\/data -p 9735:9735 -p 9112:9112 \\\n             shesek\/lightning-charge --api-token mySecretToken\n```\n\nThis will start `bitcoind`, `lightningd` and `charged` and hook them up together.\nYou will then be able to access the REST API at `http:\/\/localhost:9112` using `mySecretToken`.\n\nRuns in `testnet` mode by default, set `NETWORK` to override.\n\nIf you want to experiment in `regtest` mode and don't care about persisting data, this should do:\n\n```bash\n$ docker run -it -e NETWORK=regtest -p 9112:9112 shesek\/lightning-charge --api-token mySecretToken\n```\n\nTo connect to an existing `lightningd` instance running on the same machine,\nmount the lightning data directory to `\/etc\/lightning` (e.g. `-v $HOME\/.lightning:\/etc\/lightning`).\nConnecting to remote lightningd instances is currently not supported.\n\nTo connect to an existing `bitcoind` instance running on the same machine,\nmount the bitcoin data directory to `\/etc\/bitcoin` (e.g. `-v $HOME\/.bitcoin:\/etc\/bitcoin`).\nTo connect to a remote bitcoind instance, set `BITCOIND_URI=http:\/\/[user]:[pass]@[host]:[port]`\n(or use `__cookie__:...` as the login for cookie-based authentication).\n\n### Deploy to Azure\n\n[One-click deployment on Azure](https:\/\/github.com\/NicolasDorier\/lightning-charge-azure)\n(by [@NicolasDorier](https:\/\/github.com\/NicolasDorier)).\n\nAn instructional video is [available here](https:\/\/www.youtube.com\/watch?v=D4RqULSA4uU).\n\n## Client libraries\n\nClients libraries are available for [JavaScript](https:\/\/github.com\/ElementsProject\/lightning-charge-client-js)\nand [PHP](https:\/\/github.com\/ElementsProject\/lightning-charge-client-php).\nFor other languages, you can use the REST API directly using a standard HTTP library.\n\n## LApps\n\nBelow are example LApps built on top of Lightning Charge:\n\n- [FileBazaar](https:\/\/github.com\/ElementsProject\/filebazaar): an ecommerce tool for content creators that produce digital files like photos, videos, or music.\n\n- [Lightning Publisher](https:\/\/github.com\/ElementsProject\/wordpress-lightning-publisher): accept bitcoin payments for content on WordPress blogs.\n\n- [nanotip](https:\/\/github.com\/ElementsProject\/nanotip): a simple web server for accepting lightning donations (a lightning tip jar).\n\n- [paypercall](https:\/\/github.com\/ElementsProject\/paypercall): easily charge for HTTP APIs on a pay-per-call basis.\n\n- [nanopos](https:\/\/github.com\/ElementsProject\/nanopos): a simple point-of-sale system for physical stores.\n\n- [ifpaytt](https:\/\/github.com\/ElementsProject\/ifpaytt): trigger IFTTT actions with lightning payments.\n\n- [WooCommerce Lightning](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning): a lightning gateway for the WooCommerce e-commerce software.\n\n- [Lightning Jukebox](https:\/\/github.com\/ElementsProject\/lightning-jukebox): a lightning powered jukebox. Pay with Bitcoin to choose your music.\n\nThird party Lapps:\n\n- [Satoshi's Place](https:\/\/github.com\/LightningK0ala\/satoshis.place): a collaborative art board, pay with lightning to draw on a pixel grid. (live on [satoshis.place](https:\/\/satoshis.place\/))\n\n- [Pollo feed](https:\/\/github.com\/j-chimienti\/pollofeed): a lightning powered chicken feeder. (live on [pollofeed.com](https:\/\/pollofeed.com\/))\n\n- [lightning-captive-portal](https:\/\/github.com\/poperbu\/lightning-captive-portal\/): Wi-Fi access through a nodogsplash captive portal with Lightning payments.\n\n## REST API\n\nAll endpoints accept and return data in JSON format.\n\nAuthentication is done using HTTP basic authentication headers, with `api-token` as the username and\nthe api token (configured with `--api-token`\/`-t` or using the `API_TOKEN` environment variable) as the password.\n\nInvoices have the following properties: `id`, `msatoshi`, `msatoshi_received`, `quoted_currency`, `quoted_amount`, `rhash`, `payreq`, `description`, `created_at`, `expires_at`, `paid_at`, `metadata` and `status` (one of `unpaid|paid|expired`).\n\nThe code samples below assume you've set `CHARGE=http:\/\/api-token:mySecretToken@localhost:9112`.\n\n### `GET \/info`\n\nGet information about the c-lightning node.\n\n```bash\n$ curl $CHARGE\/info\n{\"id\":\"032c6ba19a2141c5fee6ac8b6ff6cf24456fd4e8e206716a39af3300876c3a4835\",\"port\":42259,\"address\":[],\"version\":\"v0.5.2-2016-11-21-1937-ge97ee3d\",\"blockheight\":434,\"network\":\"regtest\"}\n```\n\n### `POST \/invoice`\n\nCreate a new invoice.\n\n*Body parameters*: `msatoshi`, `currency`, `amount`, `description`, `expiry`, `metadata` and `webhook`.\n\nYou can specify the amount as `msatoshi` (1 satoshi = 1000 msatoshis),\nor provide a `currency` and `amount` to be converted according to the current exchange rates (via bitcoinaverage).\nIf a currency and amount were provided, they'll be available under `quoted_{currency|amount}`.\n\n`expiry` sets the invoice expiry time in seconds (defaults to one hour).\n`metadata` may contain arbitrary invoice-related meta-data.\n`description` is embedded in the payment request and presented by the user's wallet (keep it short).\n\n`webhook` may contain a URL to be registered as a webhook\n(see [`POST \/invoice\/:id\/webhook`](https:\/\/github.com\/ElementsProject\/lightning-charge#post-invoiceidwebhook)).\n\nReturns `201 Created` and the invoice on success.\n\n```bash\n$ curl -X POST $CHARGE\/invoice -d msatoshi=10000\n{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",\"status\":\"unpaid\",\"rhash\":\"6823e46a08f50...\",\n \"payreq\":\"lntb100n1pd99d02pp...\",\"created_at\":1515369962,\"expires_at\":1515373562}\n\n# with fiat-denominated amounts\n$ curl -X POST $CHARGE\/invoice -d currency=EUR -d amount=0.5\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"quoted_currency\":\"EUR\",\"quoted_amount\":\"0.5\",...}\n\n# without amount (accept all payments)\n$ curl -X POST $CHARGE\/invoice\n{\"id\":\"W8CF0UqY7qfAHCfnchqk9\",\"msatoshi\":null,...}\n\n# with metadata as application\/json\n$ curl -X POST $CHARGE\/invoice -H 'Content-Type: application\/json' \\\n  -d '{\"msatoshi\":7000,\"metadata\":{\"customer_id\":9817,\"products\":[593,182]}}'\n{\"id\":\"PLKV1f8B7sth7w2OeDOt_\",\"msatoshi\":\"7000\",\"metadata\":{\"customer_id\":9817,\"products\":[593,182]},...}\n\n# with metadata as application\/x-www-form-urlencoded\n$ curl -X POST $CHARGE\/invoice -d msatoshi=5000 -d metadata[customer_id]=9817 -d metadata[product_id]=7189\n{\"id\":\"58H9eoerBpKML9FvnMQtG\",\"msatoshi\":\"5000\",\"metadata\":{\"customer_id\":\"9817\",\"product_id\":\"7189\"},...}\n```\n\n### `GET \/invoices`\n\nList all invoices.\n\n```bash\n$ curl $CHARGE\/invoices\n[{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",...},{\"id\":\"PLKV1f8B7sth7w2OeDOt_\",\"msatoshi\":\"7000\"},...]\n```\n\n### `GET \/invoice\/:id`\n\nGet the specified invoice.\n\n```bash\n$ curl $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"quoted_currency\":\"EUR\",\"quoted_amount\":\"0.5\",\"status\":\"unpaid\",...}\n```\n\n### `DELETE \/invoice\/:id`\n\nDelete the specified invoice.\n\n*Body parameters:* `status`\n\nThe current status of the invoice needs to be specified in the request body.\n\n```bash\n$ curl -X DELETE $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb -d status=unpaid\n204 No Content\n```\n\n### `GET \/invoice\/:id\/wait?timeout=[sec]`\n\nLong-polling invoice payment notification.\n\nWaits for the invoice to be paid, then returns `200 OK` and the updated invoice.\n\nIf `timeout` (defaults to 30s) is reached before the invoice is paid, returns `402 Payment Required`.\n\nIf the invoice is expired and can no longer be paid, returns `410 Gone`.\n\n```bash\n$ curl $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\/wait?timeout=60\n# zZZZzzZ\n{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"status\":\"paid\",\"paid_at\":1515371152,...}\n```\n\n### `POST \/invoice\/:id\/webhook`\n\nRegister a URL as a web hook to be notified once the invoice is paid.\n\n*Body parameters:* `url`.\n\nReturns `201 Created` on success. Once the payment is made, a POST request with the updated invoice will be made to the provided URL.\n\nIf the invoice is already paid, returns `405 Method Not Allowed`. If the invoice is expired, returns `410 Gone`.\n\nWebhooks can also be registered during invoice creation using the `webhook` parameter.\n\nFor security reasons, the provided `url` should contain a secret token used to verify the authenticity of the request\n(see an example HMAC-based implementation at woocommerce-gateway-lightning\n[here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L214-L225),\n[here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L131-L134)\nand [here](https:\/\/github.com\/ElementsProject\/woocommerce-gateway-lightning\/blob\/84592d7bcfc41db129b02d1927a6060a05c5c11e\/woocommerce-gateway-lightning.php#L109-L115)).\n\n```bash\n$ curl -X POST $CHARGE\/invoice\/OYwwaOQAPMFvg039gj_Rb\/webhook -d url=http:\/\/example.com\/callback\nCreated\n```\n\n### `GET \/payment-stream`\n\nSubscribe to payment updates as a [server-sent events](https:\/\/streamdata.io\/blog\/server-sent-events\/) stream.\n\n```bash\n$ curl $CHARGE\/payment-stream\n# zzZZzZZ\ndata:{\"id\":\"OYwwaOQAPMFvg039gj_Rb\",\"msatoshi\":\"3738106\",\"status\":\"paid\",\"paid_at\":1515371152,...}\n# zZZzzZz\ndata:{\"id\":\"KcoQHfHJSx3fVhp3b1Y3h\",\"msatoshi\":\"10000\",\"status\":\"paid\",\"paid_at\":1515681209,...}\n# zZZzzzz...\n```\n\nOr via JavaScript:\n\n```js\nconst es = new EventSource('http:\/\/api-token:[TOKEN]@localhost:9112\/payment-stream')\n\nes.addEventListener('message', msg => {\n  const inv = JSON.parse(msg.data)\n  console.log('Paid invoice:', inv)\n})\n```\n\n(`EventSource` is natively available in modern browsers,\nor via the [`eventsource` library](https:\/\/github.com\/EventSource\/eventsource) in nodejs)\n\n## WebSocket API\n\n### `GET \/ws`\n\nSubscribe to payment updates over WebSocket.\n\n```javascript\nconst ws = new WebSocket('http:\/\/api-token:[TOKEN]@localhost:9112\/ws')\n\nws.addEventListener('message', msg => {\n  const inv = JSON.parse(msg.data)\n  console.log('Paid invoice:', inv)\n})\n```\n\n## Tests\n\nRequires `bitcoind`, `bitcoin-cli`, `lightningd`, `lightning-cli`\nand [`jq`](https:\/\/stedolan.github.io\/jq\/download\/) to be in your `PATH`.\n\n```bash\n$ git clone https:\/\/github.com\/ElementsProject\/lightning-charge.git\n$ cd lightning-charge\n$ npm install\n$ npm test\n```\n\nThis will setup a temporary testing environment with a bitcoind regtest node\nand two c-lightning nodes with a funded channel,\nthen start the Lightning Charge server and run the unit tests\n(written with [mocha](https:\/\/mochajs.org\/) and [supertest](https:\/\/github.com\/visionmedia\/supertest)).\n\nTo run in verbose mode, set the `VERBOSE` environment variable: `$ VERBOSE=1 npm test`.\n\nTo pass arguments to mocha, use `$ npm test -- [mocha opts]`.\n\nTo prevent the test environment files from being deleted after completing the tests, set `KEEP_TMPDIR=1`.\n\nTo setup a testing environment without running the tests, run `$ npm run testenv`.\nThis will display information about the running services and keep them alive for further inspection.\n\nTests can also be run using docker: `$ docker build --build-arg TESTRUNNER=1 -t charge . && docker run -it --entrypoint npm charge test`\n\n## License\n\nMIT\n","118":"https:\/\/zeronet.io\n","119":"# `\ud83d\udd17 multichain`\n\n## Layout\n\n`\/` declares the assets and chains that exist, but provides no chain-specific implementations.\n\n`\/infra` defines a local deployment of the multichain using `docker-compose`. All underlying chains provide a `Dockerfile` and service definition to make running node instances easy. All chains need to add a `Dockerfile` and service definition that allows the multichain to spin up a local development-mode instance of the chain. This is necessary for running comprehensive local test suites.\n\n`\/api` defines the different compatibility APIs that exist: Account, Address, Contract, Gas, and UTXO. Chains should implement the APIs that are relevant to them. For example, Bitcoin (and its forks) implements the Address, Gas, and UTXO APIs. No actual implementations should be added to this folder.\n\n`\/chain`  defines all of the chain-specific implementations of the APIs. Each chain has its own sub-package. For example, Bitcoin, Bitcoin Cash, Dogecoin, and Zcash are all chains that implement the Address, Gas, and UTXO APIs, and each of these implementations are in `\/chain\/bitcoin`, `\/chain\/bitcoincash`, `\/chain\/dogecoin`, and `\/chain\/zcash` respectively.\n\n## Example\n\nThe `\ud83d\udd17 multichain` is designed to be flexible enough to support any kind of chain. Anyone is free to contribute to the `\ud83d\udd17 multichain` by adding support for a new chain, or improving support for an existing chain. To show how this is done, we will walk-through an example: adding support for Dogecoin.\n\n### Chains and Assets\n\nBefore doing anything else, let's add an enumeration for the `Asset` and `Chain` types, which can be found in `package multichain`. To avoid favouritism, all assets and chains are listed in alphabetical order. Unless otherwise advised by an offiical team member, the names and tickers found on https:\/\/coinmarketcap.com must be used.\n\nAdding an `Asset`:\n\n```go\n\/\/ Enumeration of supported assets. When introducing a new chain, or new asset\n\/\/ from an existing chain, you must add a human-readable string to this set of\n\/\/ enumerated values. Assets must be listed in alphabetical order.\nconst (\n    BCH  = Asset(\"BCH\")  \/\/ Bitcoin Cash\n    BTC  = Asset(\"BTC\")  \/\/ Bitcoin\n    DOGE = Asset(\"DOGE\") \/\/ Dogecoin (This is our new asset!)\n    ETH  = Asset(\"ETH\")  \/\/ Ether\n    ZEC  = Asset(\"ZEC\")  \/\/ Zcash\n)\n```\n\nAdding a `Chain`:\n\n```go\n\/\/ Enumeration of supported chains. When introducing a new chain, you must add a\n\/\/ human-readable string to this set of enumerated values. Chains must be listed\n\/\/ in alphabetical order.\nconst (\n    Bitcoin     = Chain(\"Bitcoin\")\n    BitcoinCash = Chain(\"BitcoinCash\")\n    Dogecoin    = Chain(\"Dogecoin\") \/\/ (This is our new chain!)\n    Ethereum    = Chain(\"Ethereum\")\n    Zcash       = Chain(\"Zcash\")\n)\n```\n\n### Docker\n\nNext, we need to setup a Docker container in the `\/infra` folder. This is needed for local test suites, allowing for end-to-end integrated testing directly against a node. Doing this requires a couple of steps.\n\nFirst, we create a new `dogecoin\/` folder in the `\/infra` folder:\n\n```\n\/infra\n|-- \/bitcoin\n|-- \/bitcoincash\n|-- \/dogecoin         # This is our new folder!\n|   |-- Dockerfile    # This is our new Dockerfile!\n|   |-- dogecoin.conf\n|   |-- run.sh        # This is our new run file!\n|-- \/zcash\n|-- .env\n|-- docker-compose.yaml\n```\n\nThe new folder _must_ at least contain a `Dockerfile` that installs the node, and a `run.sh` file that runs the nodes. The node _should_ be run in test mode. The new folder can also contain other files that are specific to the needs of the chain being added. In our case, the `dogecoin.conf` file is also needed to configure the node. (We will omit showing all the code here, since there is quite a bit of it, but you can check it out in the `\/infra\/dogecoin` folder.)\n\nSecond, we add an entry to the `.env` file. Our entry _must_ include a private key that will have access to funds, and the public address associated with that private key. We will add:\n\n```sh\n#\n# Dogecoin\n#\n\n# Address that will receive mining rewards. Generally, this is set to an address\n# for which the private key is known by a test suite. This allows the test suite\n# access to plenty of testing funds.\nexport DOGECOIN_PK=cRZnRgH2ztcJupCzkWbq2mjiT8PSFAmtYRYb1phg1vSRRcNBX4w4\nexport DOGECOIN_ADDRESS=n3PSSpR4zqUKWH4tcRjP9aTwJ4GmixQXmt\n```\n\nLast, we add a service to the `docker-compose.yaml` file. This allows the node to boot alongside the other nodes in the multichain. This entry must expose the node for use in tests, and must not overlap with other nodes that already exist (ports are reserved on a first-come-first-serve basis). We will define the service as:\n\n```yaml\n##\n## Dogecoin\n##\n\ndogecoin:\n  build:\n    context: .\/dogecoin\n  ports:\n    - \"0.0.0.0:18332:18332\"\n  entrypoint:\n    - \".\/root\/run.sh\"\n    - \"${DOGECOIN_ADDRESS}\"\n```\n\n### Address API\n\nAll chains _should_ implement the Address API. Luckily for Dogecoin, it is so similar to Bitcoin that we can re-export the Bitcoin implementation without the need for custom modifications. In `\/chain\/dogecoin\/address.go` we add:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype (\n\tAddressEncoder       = bitcoin.AddressEncoder\n\tAddressDecoder       = bitcoin.AddressDecoder\n\tAddressEncodeDecoder = bitcoin.AddressEncodeDecoder\n)\n```\n\nThese three interfaces allow users of the `\ud83d\udd17 multichain` to easily encode and decode Dogecoin addresses. Other chains will need to provide their own implementations, based on their chains address standards.\n\n### Gas API\n\nMost, but not all, chains _should_ implement the Gas API. Again, Dogecoin is so similar to Bitcoin that we can re-export the Bitcoin implementation in `\/chain\/dogecoin\/gas.go`:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype GasEstimator = bitcoin.GasEstimator\n\nvar NewGasEstimator = bitcoin.NewGasEstimator\n```\n\nThe interface allows users of the `\ud83d\udd17 multichain` to estimate gas prices (although, the current implementation is _very_ simple). The associated function allows users to construct an instance of the interface for Dogecoin.\n\n### UTXO API\n\nGenerally speaking, chains fall into two categories: account-based or UTXO-based (and some can even be both). Bitcoin, and its forks, are all UTXO-based chains. As a fork of Bitcoin, Dogecoin is a UTXO-based chain, so we implement the UTXO API. To implement the UTXO API, we must implement the `Tx`, `TxBuilder`, and `Client` interfaces. More information can be found in the comments of `\/api\/utxo` folder.\n\nAgain, the implementation for Dogecoin is trivial. In `\/chain\/dogecoin\/utxo`, we have:\n\n```go\npackage dogecoin\n\nimport \"github.com\/renproject\/multichain\/chain\/bitcoin\"\n\ntype (\n\tTx            = bitcoin.Tx\n\tTxBuilder     = bitcoin.TxBuilder\n\tClient        = bitcoin.Client\n\tClientOptions = bitcoin.ClientOptions\n)\n\nvar (\n\tNewTxBuilder         = bitcoin.NewTxBuilder\n\tNewClient            = bitcoin.NewClient\n\tDefaultClientOptions = bitcoin.DefaultClientOptions\n)\n```\n\nUp to this point, we have done nothing but re-export Bitcoin. So what makes Dogecoin different? And how can we express that difference? Well, the `\/chain\/dogecoin` folder is the place where we must define anything else Dogecoin users will need. In the case of Dogecoin, the only thing that differentiates it from Bitcoin is the `*chaincfg.Param` object. We define this in `\/chain\/dogecoin\/dogecoin.go`:\n\n```go\npackage dogecoin\n\nimport (\n\t\"github.com\/btcsuite\/btcd\/chaincfg\"\n)\n\nfunc init() {\n\tif err := chaincfg.Register(&MainNetParams); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := chaincfg.Register(&RegressionNetParams); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nvar MainNetParams = chaincfg.Params{\n\tName: \"mainnet\",\n\tNet:  0xc0c0c0c0,\n\n\t\/\/ Address encoding magics\n\tPubKeyHashAddrID: 30,\n\tScriptHashAddrID: 22,\n\tPrivateKeyID:     158,\n\n\t\/\/ BIP32 hierarchical deterministic extended key magics\n\tHDPrivateKeyID: [4]byte{0x02, 0xfa, 0xc3, 0x98}, \/\/ starts with xprv\n\tHDPublicKeyID:  [4]byte{0x02, 0xfa, 0xca, 0xfd}, \/\/ starts with xpub\n\n\t\/\/ Human-readable part for Bech32 encoded segwit addresses, as defined in\n\t\/\/ BIP 173. Dogecoin does not actually support this, but we do not want to\n\t\/\/ collide with real addresses, so we specify it.\n\tBech32HRPSegwit: \"doge\",\n}\n\nvar RegressionNetParams = chaincfg.Params{\n\tName: \"regtest\",\n\n\t\/\/ Dogecoin has 0xdab5bffa as RegTest (same as Bitcoin's RegTest).\n\t\/\/ Setting it to an arbitrary value (leet_hex(dogecoin)), so that we can\n\t\/\/ register the regtest network.\n\tNet: 0xd063c017,\n\n\t\/\/ Address encoding magics\n\tPubKeyHashAddrID: 111,\n\tScriptHashAddrID: 196,\n\tPrivateKeyID:     239,\n\n\t\/\/ BIP32 hierarchical deterministic extended key magics\n\tHDPrivateKeyID: [4]byte{0x04, 0x35, 0x83, 0x94}, \/\/ starts with xprv\n\tHDPublicKeyID:  [4]byte{0x04, 0x35, 0x87, 0xcf}, \/\/ starts with xpub\n\n\t\/\/ Human-readable part for Bech32 encoded segwit addresses, as defined in\n\t\/\/ BIP 173. Dogecoin does not actually support this, but we do not want to\n\t\/\/ collide with real addresses, so we specify it.\n\tBech32HRPSegwit: \"dogert\",\n}\n```\n\nMost of the functions that we have re-exported expected `*chaincfg.Params` as an argument. By defining one for regnet and mainnet, users can construct Dogecoin instances of the UTXO API by using these params.\n\n## Test Suite\n\n1. Install Docker\n2. Install Docker Compose\n3. Run Docker\n4. Run `.\/test.sh`\n\nExample output:\n\n```sh\nCreating network \"docker_default\" with the default driver\nBuilding bitcoin\n\n...\n\nSuccessfully built 1ebb03faa04f\nSuccessfully tagged docker_bitcoin:latest\nBuilding bitcoincash\n\n...\n\nSuccessfully built e12e98011869\nSuccessfully tagged docker_bitcoincash:latest\nBuilding zcash\n\n...\n\nSuccessfully built 56231a29ca2e\nSuccessfully tagged docker_zcash:latest\ndocker_bitcoin_1 is up-to-date\ndocker_bitcoincash_1 is up-to-date\ndocker_zcash_1 is up-to-date\nWaiting for multichain to boot...\n=== RUN   TestMultichain\nRunning Suite: Multichain Suite\n===============================\n\n...\n\nStopping docker_bitcoincash_1 ... done\nStopping docker_zcash_1       ... done\nStopping docker_bitcoin_1     ... done\nRemoving docker_bitcoincash_1 ... done\nRemoving docker_zcash_1       ... done\nRemoving docker_bitcoin_1     ... done\nRemoving network docker_default\nDone!\n```\n","120":"\nFor more blockchain books, see the [**Best of Crypto Books page \u00bb**](https:\/\/openblockchains.github.io\/crypto-books\/)\n\n---\n\n\n# Programming Bitcoin Script Transaction (Crypto) Contracts Step-by-Step\n\n_Let's start with building your own bitcoin stack machine from zero \/ scratch and let's run your own bitcoin ops (operations)..._\n\n\n**BEWARE: Bitcoin is a gigantic ponzi scheme\u00b9.\nTo the moon!? The new gold standard!? \nDo NOT \"invest\" trying to get-rich-quick HODLing. \nWhy not? The bitcoin code is archaic and out-of-date.\nBurn, baby, burn! Proof-of-work \/ waste is a global\nenergy environmental disaster\nusing 300 kWh per bitcoin transaction (!) that's about 179 kilograms of CO\u2082 emissions\u00b2.\nProgrammable money (or the internet of value) \nfor all future generations with (bitcoin) script\nwithout loops and jumps (gotos) and all \"stateless\"!? LOL.**\n\n\n\u00b9:  ![](i\/trolly-ponzi.png)\n\n(Source: [Best of Bitcoin Maximalist - Scammers, Morons, Clowns, Shills & BagHODLers - Inside The New New Crypto Ponzi Economics](https:\/\/bitsblocks.github.io\/bitcoin-maximalist))\n\n\u00b2: Assuming let's say 0.596 kilograms of CO\u2082 per kWh \n(that's the energy efficiency in Germany) that's \nabout 179 kilograms of CO\u2082 per bitcoin transaction (300 kWh \u00d7 0.596 kg). For more insights see the [Bitcoin Energy Consumption Index](https:\/\/digiconomist.net\/bitcoin-energy-consumption).\n\n\n\n\n\n## Inside Bitcoin Script\n\nDid you know? Every (yes, every) bitcoin transaction (payment) runs\na contract script (one half coming from the \"output\" or \"lock\" transaction and the\nother half coming from the \"input\" or \"unlock\" transaction).\nThe programming language is called simply (bitcoin) script.\n\n> Bitcoin uses a scripting system for transactions.\n> Forth-like, Script is simple, stack-based, and processed from left to right.\n> It is intentionally not Turing-complete, with no loops.\n>\n> (Source: [Script @ Bitcoin Wiki](https:\/\/en.bitcoin.it\/wiki\/Script))\n\n\nFirst impression. Adding 2+2 in Bitcoin Script starting from zero \/ scratch:\n\n``` ruby\n## A simple stack machine\ndef op_add( stack )\n  left  = stack.pop\n  right = stack.pop\n  stack.push( left + right )\nend\n\ndef op_2( stack )\n  stack.push( 2 )\nend\n\n## Let's run!\n\nstack = []\nop_2( stack )     #=> stack = [2]\nop_2( stack )     #=> stack = [2,2]\nop_add( stack )   #=> stack = [4]\n```\n\n(Source: [`stackmachine_add.rb`](stackmachine_add.rb))\n\n\n\nYes, that's all the magic! You have built your own stack machine with\ntwo operations \/ ops, that is, `op_add` and `op_2`.\n\nThe `op_2` operation pushes the number `2` onto the stack.\nThe `op_add` operation pops the top two numbers from the stack\nand pushes the result onto the stack.  \n\n\nAside - What's a Stack? Push 'n' Pop\n\nA stack is a last-in first-out (LIFO) data structure. Use `push`\nto add an element to the top of the stack and use `pop`\nto remove the top element from the stack.\nExample:\n\n``` ruby\nstack = []                   #=> []\nstack.empty?                 #=> true\n\nstack.push( 1 )              #=> [1]\nstack.empty?                 #=> false\nstack.push( 2 )              #=> [1, 2]\nstack.push( 3 )              #=> [1, 2, 3]\nstack.push( \"<signature>\" )  #=> [1, 2, 3, \"<signature>\"]\nstack.push( \"<pubkey>\")      #=> [1, 2, 3, \"<signature>\", \"<pubkey>\"]\n\nstack.pop                    #=> \"<pubkey>\"\nstack                        #=> [1, 2, 3, \"<signature>\"]\nstack.pop                    #=> \"<signature>\"\nstack                        #=> [1, 2, 3]\n\nstack.push( 4 )              #=> [1, 2, 3, 4]\nstack.push( 5 )              #=> [1, 2, 3, 4, 5]\n\nstack.pop                    #=> 5\nstack                        #=> [1, 2, 3, 4]\nstack.pop                    #=> 4\nstack                        #=> [1, 2, 3]\nstack.pop                    #=> 3\nstack                        #=> [1, 2]\nstack.pop                    #=> 2\nstack                        #=> [1]\nstack.empty?                 #=> false\nstack.pop                    #=> 1\nstack                        #=> []\nstack.empty?                 #=> true\nstack.pop                    #=> nil\n```\n\n(Source: [`stack.rb`](stack.rb))\n\n\n\nUnlock+Lock \/ Input+Output \/ ScriptSig+ScriptPubKey\n\nIn \"real world\" bitcoin the script has two parts \/ halves in two transactions\nthat get combined.\nThe \"lock\" or \"output\" or \"ScriptPubKey\" script\nthat locks the \"unspent transaction output (UTXO)\",\nand the \"unlock\" or \"input\" or \"ScriptSig\" script that unlocks\nthe bitcoins.\n\n\nAnyone Can Spend (Unlock) the Outputs (Bitcoins)\n\nThe bitcoins are yours if the bitcoins haven't been spent yet -\nsee blockchain and how it solves the double-spending problem :-) -\nAND if the script returns with true, that is, `1` is on top of the stack.\n\n``` ruby\n## A simple stack machine\ndef op_true( stack )\n  stack.push( 1 )\nend\n\n## Let's run!\n\nstack = []\n##  I) ScriptSig (input\/unlock) part\nop_true( stack )  #=> stack = [1]\n\n## II) ScriptPubKey (output\/lock) part\n##     <Empty>\n```\n\n(Source: [`stackmachine_anyone.rb`](stackmachine_anyone.rb))\n\n\nBingo! Yes, that's all the magic!\nThe `op_true` operation pushes the number `1`, that is, `true` onto the stack.\n\nThe \"official\" bitcoin script notation reads:\n\n```\nScriptSig (input):    OP_TRUE\nScriptPubKey:         (empty)\n```\n\nNow let's split the adding `2+2` script into a two part puzzle,\nthat is, `?+2=4`\nor into `ScriptSig` and `ScriptPubKey`.\nIf you know the answer you can \"unlock\" the bounty,\nthat is, the bitcoins are yours!\nHere's the challenge:\n\n``` ruby\n## A simple stack machine\ndef op_add( stack )\n  left  = stack.pop\n  right = stack.pop\n  stack.push( left + right )\nend\n\ndef op_2( stack )\n  stack.push( 2 )\nend\n\ndef op_4( stack )\n  stack.push( 4 )\nend\n\ndef op_equal( stack )\n  left  = stack.pop\n  right = stack.pop\n  stack.push( left == right ? 1 : 0 )\nend\n\n## Let's run!\n\nstack = []\n##  I) ScriptSig (input\/unlock) part\n##     FIX!!! - add your \"unlock\" stack operation \/ operations here\n\n## II) ScriptPubKey (output\/lock) part\nop_2( stack )      #=> stack = [?, 2]\nop_add( stack )    #=> stack = [4]\nop_4( stack )      #=> stack = [4,4]\nop_equal( stack )  #=> stack = [1]\n```\n\n(Source: [`stackmachine_puzzle.rb`](stackmachine_puzzle.rb))\n\n\n\n\nThe \"official\" bitcoin script notation reads:\n\n```\nScriptSig (input):    ?\nScriptPubKey:         OP_2 OP_ADD OP_4 OP_EQUAL\n```\n\n\nIf you check all Bitcoin script operations -\nthe following ops should no longer be a mystery:\n\nConstants\n\n|Word | Opcode |Hex | Input | Output | Description|\n|-----|--------|----|-------|--------|------------|\n| OP_0, OP_FALSE |  0  |  0x00 | Nothing. | (empty value) |  An empty array of bytes is pushed onto the stack. (This is not a no-op: an item is added to the stack.) |\n| OP_1, OP_TRUE  | 81  | 0x51  | Nothing. | 1 | The number 1 is pushed onto the stack. |\n| OP_2-OP_16 | 82-96 |  0x52-0x60  | Nothing. |  2-16 |  The number in the word name (2-16) is pushed onto the stack. |\n\nBitwise logic\n\n|Word | Opcode |Hex | Input | Output | Description|\n|-----|--------|----|-------|--------|------------|\n| OP_EQUAL | 135  | 0x87 | x1 x2  | True \/ false |  Returns 1 if the inputs are exactly equal, 0 otherwise. |\n\nArithmetic\n\n|Word | Opcode |Hex | Input | Output | Description|\n|-----|--------|----|-------|--------|------------|\n| OP_ADD |  147  | 0x93  | a b | out  | a is added to b. |\n| OP_MUL |  149  | 0x95  | a b | out  | a is multiplied by b. **disabled.** |\n| OP_DIV |  150  | 0x96  | a b | out  | a is divided by b. **disabled.** |\n\n\n\nTrivia Corner: Did you know? The `OP_MUL` for multiplications (e.g. `2*2`)\nhas been banned, that is, disabled!  Why?\nBecause of security concerns, that is, fear of stack overflows.\nWhat about `OP_DIV` for divisions (e.g. `4\/2`)?  Don't ask!\nAsk who's protecting you from stack underflows?\nSo what's left for programming - not much really other than checking\nsignatures and timelocks :-).\n\n\n\n## Standard Scripts\n\nYou don't have to start from zero \/ scratch.\nBitcoin has many standard script templates.\nThe most important include:\n\n\n| Short Name | Long Name  |\n|------------|------------|\n| p2pk   | Pay-to-pubkey     |\n| p2pkh  | Pay-to-pubkey-hash |\n| p2sh   | Pay-to-script-hash  |\n\nStandard Scripts with SegWit (Segregated Witness)\n\n| Short Name | Long Name  |\n|------------|------------|\n| p2wpkh | Pay-to-witness-pubkey-hash  |\n| p2wsh  | Pay-to-witness-script-hash  |\n\n\n\n## p2pk - Pay-to-pubkey\n\nPay-to-pubkey (p2pk) is the simplest standard script\nand was used in the early days\nincluding by Satoshi Nakamoto (the pseudonymous Bitcoin founder).\n\nBitcoin Trivia:\n\n> As initially the sole and subsequently the predominant miner,\n> Nakamoto was awarded bitcoin at genesis and for 10 days afterwards.\n> Except for test transactions these remain unspent since mid January 2009.\n> The public bitcoin transaction log shows that Nakamoto's known addresses contain\n> roughly one million bitcoins. At bitcoin's peak in December 2017,\n> this was worth over US$19 billion,\n> making Nakamoto possibly the 44th richest person in the world at the time.\n>\n> (Source: [Satoshi Nakamoto @ Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Satoshi_Nakamoto))\n\n\nThe one million bitcoins are yours if the pay-to-pubkey (p2pk) script\nreturns with true, that is, `1` is on top of the stack.\nThe only input you need to unlock the the fortune is the signature. Are you Satoshi?\nLet's try:\n\n\n``` ruby\n## Bitcoin crypto helper\n\nclass Bitcoin\n  def self.checksig( sig, pubkey )\n    ## \"crypto\" magic here\n    ##  for testing always return false for now; sorry\n    false\n  end\nend  \n\n\n## A simple stack machine\n\ndef op_checksig( stack )\n  pubkey = stack.pop\n  sig    = stack.pop\n  if Bitcoin.checksig( sig, pubkey )\n    stack.push( 1 )\n  else\n    stack.push( 0 )\n  end\nend\n\n## Let's run!\n\nstack = []\n##  I) ScriptSig (input\/unlock) part\nstack.push( \"<sig>\" )   #=> stack = [\"<sig>\"]\n\n## II) ScriptPubKey (output\/lock) part\nstack.push( \"<pubkey\")  #=> stack = [\"<sig>\", \"<pubkey>\" ]\nop_checksig( stack )    #=> stack = [0]\n```\n\n(Source: [`pay-to-pubkey.rb`](pay-to-pubkey.rb))\n\nBingo! Yes, that's all the magic!\nThe `op_checksig` operation pops two elements from\nthe stack, that is, the public key (pubkey)\nand the signature (sig) and\nif the elliptic curve crypto validates the signature (from the input\/unlock transaction)\nusing the public key (from the the output\/lock transaction)\nthen the fortune is yours! If not\nthe number `0`, that is, `false` gets pushed onto the stack\nand you're out of luck. Sorry.\n\nThe \"official\" bitcoin script notation reads:\n\n```\nScriptSig (input): <sig>\nScriptPubKey:      <pubKey> OP_CHECKSIG\n```\n\nNote: Can you guess where the input \/ unlock part got its ScriptSig name\nand where the output \/ lock part got its ScriptPubKey name?\nYes, from the pay-to-pubkey script.\n\n\n\nAside - Ivy - Higher-Level Bitcoin Script Language\n\nWhat's Ivy?  \n\nFrom the project's readme:\n\n> Ivy is a higher-level language that allows you to write (crypto) contracts\n> for the Bitcoin protocol. Ivy can compile to opcodes for Bitcoin\u2019s stack machine,\n> Bitcoin Script, and can be used to create SegWit-compatible Bitcoin addresses...\n>\n> You can try out Ivy using the [Ivy Playground for Bitcoin](https:\/\/ivy-lang.org\/bitcoin),\n> which allows you to create test contracts and try spending them,\n> all in a sandboxed environment.\n>\n> (Source: [Ivy Language Documentation](https:\/\/docs.ivy-lang.org\/bitcoin\/))\n\n\nLet's look at the pay-to-pubkey script in Ivy:\n\n```\ncontract LockWithPublicKey(publicKey: PublicKey, val: Value) {\n  clause spend(sig: Signature) {\n    verify checkSig(publicKey, sig)\n    unlock val\n  }\n}\n```\n\nAnd - surprise, surprise - the higher-level script compiles to\n\n```\n<pubKey> OP_CHECKSIG\n```\n\n\nElliptic Curve Cryptography\n\nSo what does a \"real world\" public key (pubkey) look like?\nIn the early days Satoshi Nakamoto\nused the uncompressed SEC (Standards for Efficient Cryptography) format\nfor the public key that results\nin 65 raw bytes.\nBitcoin uses elliptic curve\ncryptography and the public key is a point (x,y) on\nthe curve where the x and y coordinates are each 256-bit (32 byte) numbers.\n\nIn the uncompressed format, place the x and y coordinate next to each other,\nthen prefix with `04` to indicate that it is an uncompressed public key:\n\n```\nprefix (1 byte)         : 04\nx-coordinate (32 bytes) : fe53c78e36b86aae8082484a4007b706d5678cabb92d178fc95020d4d8dc41ef\ny-coordinate (32 bytes) : 44cfbb8dfa7a593c7910a5b6f94d079061a7766cbeed73e24ee4f654f1e51904\n    =>\n04fe53c78e36b86aae8082484a4007b706d5678cabb92d178fc95020d4d8dc41ef44cfbb8dfa7a593c7910a5b6f94d079061a7766cbeed73e24ee4f654f1e51904\n```\n\nAnd in the compressed form because the elliptic curve is symmetrical\nalong its x-axis, the trick is that each x-coordinate will\nonly ever have one of two possible y coordinates:\n\n- If y is even, it corresponds to one of the points.\n- If y is odd, it corresponds to the other.\n\nThus, in the compressed public key format place the x coordinate\nalong with a prefix (`02` or `03`)\nthat tells whether the y is even (`02`) or odd (`03`).\n\n```\nprefix (1 byte)         : 03\nx-coordinate (32 bytes) : df51984d6b8b8b1cc693e239491f77a36c9e9dfe4a486e9972a18e03610a0d22\n     =>\n03df51984d6b8b8b1cc693e239491f77a36c9e9dfe4a486e9972a18e03610a0d22\n````\n\n\nLet's create a public key from the private key\n\nNote: Let's use the 3rd party [Elliptic Curve Digital Signature Algorithm (ECDSA)\nlibrary \/ gem](https:\/\/rubygems.org\/gems\/ecdsa) by David Grayson.\n\n``` ruby\nrequire 'pp'\nrequire 'ecdsa'           # Use an elliptic curve library\n\n# This private key is just an example. It should be much more secure!\nprivatekey = 1234\n\n# Elliptic curve multiplication\ngroup = ECDSA::Group::Secp256k1                          # Select the curve used in Bitcoin\npoint = group.generator.multiply_by_scalar( privatekey ) # Multiply by integer (not hex)\n#=> <ECDSA::Point: secp256k1,\n#       0xe37648435c60dcd181b3d41d50857ba5b5abebe279429aa76558f6653f1658f2,\n#       0x6d2ee9a82d4158f164ae653e9c6fa7f982ed8c94347fc05c2d068ff1d38b304c>\n\n# Uncompressed format (with prefix 04)\n#   Convert to 64 hexstring characters (32 bytes) in length\nprefix = '04'\npubkey = prefix + \"%064x\" % point.x + \"%064x\" % point.y\n#=> \"04e37648435c60dcd181b3d41d50857ba5b5abebe279429aa76558f6653f1658f26d2ee9a82d4158f164ae653e9c6fa7f982ed8c94347fc05c2d068ff1d38b304c\"\n\n# Compressed format (with prefix - 02 = even \/ 03 = odd)\n#   Instead of using both x and y coordinates,\n#   just use the x-coordinate and whether y is even\/odd\nprefix = point.y % 2 == 0 ? '02' : '03'\npubkey = prefix + \"%064x\" % point.x\n#=> \"02e37648435c60dcd181b3d41d50857ba5b5abebe279429aa76558f6653f1658f2\"\n```\n\n(Source: [`pubkey.rb`](pubkey.rb))\n\n\n\n\n\n\n## p2pkh - Pay-to-pubkey-hash\n\n\n...\n\n\n\nAside - What's Hash160?\n\nIt's a hash function to hash and shorten public keys. Public keys\nif uncompressed shorten from 65 bytes to 20 bytes\n(or if compressed from 33 bytes). Example:\n\n```\npubkey          = 02b4632d08485ff1df2db55b9dafd23347d1c47a457072a1e87be26896549a8737\nhash160(pubkey) = 93ce48570b55c42c2af816aeaba06cfee1224fae\n````\n\nTo compute the Hash160 run the public key through the SHA256 and RIPEMD160 hash functions.\nExample:\n\n``` ruby\nrequire 'digest'                           # Hash (Digest) Functions\n\ndef hash160( pubkey )\n  binary    = [pubkey].pack( \"H*\" )       # Convert to binary first before hashing\n  sha256    = Digest::SHA256.digest( binary )\n  ripemd160 = Digest::RMD160.digest( sha256 )\n              ripemd160.unpack( \"H*\" )[0]    # Convert back to hex\nend\n\npubkey = \"02b4632d08485ff1df2db55b9dafd23347d1c47a457072a1e87be26896549a8737\"\nhash160( pubkey )  \n#=> \"93ce48570b55c42c2af816aeaba06cfee1224fae\"\n```\n\n(Source: [`hash160.rb`](hash160.rb))\n\n\nSecurity Trivia I: Why use SHA256 and RIPEMD160?\n\nRIPEMD160 gets used because it results in\na short 160 bit (20 byte) digest BUT is not the strongest hash function on it's own,\nthus, SHA256 gets used for more strength. Best of both world.\n\nSecurity Trivia II: What's RIPEMD160?\n\nRACE\u00b9 Integrity Primitives Evaluation Message Digest 160-bit\n\n\u00b9: Research and development in Advanced Communications technologies in Europe\n\n``` ruby\ndef ripemd160( message )\n  Digest::RMD160.hexdigest( message )\nend\n\nripemd160( \"The quick brown fox jumps over the lazy dog\" )\n#=> \"37f332f68db77bd9d7edd4969571ad671cf9dd3b\"\n\nripemd160( \"The quick brown fox jumps over the lazy cog\" )\n#=> \"132072df690933835eb8b6ad0b77e7b6f14acad7\"\n\n# The hash of a zero-length string is:\nripemd160( \"\" )\n#=> \"9c1185a5c5e9fc54612808977ee8f548b2258d31\"\n```\n\n(Source: [RIPEMD @ Wikipedia](https:\/\/en.wikipedia.org\/wiki\/RIPEMD))  \n\n\n\n...\n\n\n\nThe \"official\" bitcoin script notation reads:\n\n```\nScriptSig (input): <sig> <pubKey>\nScriptPubKey:      OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n```\n\nAnd the Ivy higher-level version reads:\n\n```\ncontract LockWithPublicKeyHash(pubKeyHash: Hash160(PublicKey), val: Value) {\n  clause spend(pubKey: PublicKey, sig: Signature) {\n    verify hash160(pubKey) == pubKeyHash\n    verify checkSig(pubKey, sig)\n    unlock val\n  }\n}\n```\n\nthat compiles to\n\n```\nOP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n```\n\n\n\nTo be continued ...\n\n\n\n\n\n\n\n\n## Appendix\n\nAside - Simplicity - A New Bitcoin Contract Language?\n\n> Simplicity is a blockchain programming language\n> designed as an alternative to Bitcoin script.\n>\n> (Source: [Simplicity README](https:\/\/github.com\/ElementsProject\/simplicity))\n\n\n> Why Simplicity?\n>\n> Bitcoin's Script language is generally limited to combinations\n> of digital signature checks, timelocks, and hashlocks.\n> While impressive protocols (such as the Lightning Network)\n> have been built on these primitives,\n> Bitcoin's Script language lacks the expressiveness needed\n> for more complex contract scripts.\n>\n> (Source: [Simplicity: High-Assurance Bitcoin Contract Scripting](https:\/\/blockstream.com\/2018\/11\/28\/en-simplicity-github\/) by Russell O'Connor, Andrew Poelstra, Blockstream Research, November 2018)\n\n\n> Simplicity: A New Language for Blockchains (Whitepaper Abstract)\n>\n> Simplicity is a typed, combinator-based, functional language without\n> loops and recursion, designed to be used for crypto-currencies\n> and blockchain applications. It aims to improve upon existing crypto-currency languages,\n> such as Bitcoin's Script, Ethereum's Solidity or Michelson's Liquidity,\n> while avoiding some\n> of the problems they face. Simplicity comes with formal denotational\n> semantics defined in Coq, a popular, general purpose software proof assistant.\n> Simplicity also includes operational semantics that are defined\n> with an abstract machine that we call the Bit Machine.\n> The Bit Machine is used as a tool for measuring the computational space and time\n> resources needed to evaluate Simplicity programs. Owing to its Turing\n> incompleteness, Simplicity is amenable to static analysis that can be used\n> to derive upper bounds on the computational resources needed, prior to\n> execution. While Turing incomplete, Simplicity can express any finitary\n> function, which we believe is enough to build useful contracts for\n> blockchain applications.\n>\n> (Source: [Simplicity Whitepaper (PDF)](https:\/\/blockstream.com\/simplicity.pdf) by Russell O'Connor, Blockstream, December 2017)\n\n\n\n\n## Resources\n\nArticles\n\n- [Bitcoin Script @ Bitcoin Wiki](https:\/\/en.bitcoin.it\/wiki\/Script)\n- [Script - A mini programming language @ Learn Me a Bitcoin](http:\/\/learnmeabitcoin.com\/glossary\/script) by Greg Walker\n- [Opcodes @ Bitcoin Developer Reference](https:\/\/bitcoin.org\/en\/developer-reference#opcodes)\n\nBooks \/ Series\n\n- [A developer-oriented series about Bitcoin](https:\/\/davidederosa.com\/basic-blockchain-programming\/) by Davide De Rosa\n  - [The Bitcoin Script language (pt. 1)](https:\/\/davidederosa.com\/basic-blockchain-programming\/bitcoin-script-language-part-one\/)\n  - [The Bitcoin Script language (pt. 2)](https:\/\/davidederosa.com\/basic-blockchain-programming\/bitcoin-script-language-part-two\/)\n  - [Standard scripts](https:\/\/davidederosa.com\/basic-blockchain-programming\/standard-scripts\/)\n\n<!-- break -->\n\n- [Programming Bitcoin from Scratch](https:\/\/github.com\/jimmysong\/programmingbitcoin) by Jimmy Song\n  - [Chapter 6 - Script](https:\/\/github.com\/jimmysong\/programmingbitcoin\/blob\/master\/ch06.asciidoc) - How Script Works \u2022 Example Operations \u2022 Parsing the Script Fields \u2022 Combining the Script Fields \u2022 Standard Scripts \u2022 p2pk \u2022 Problems with p2pk \u2022 Solving the Problems with p2pkh \u2022 Scripts Can Be Arbitrarily Constructed \u2022 Conclusion\n  - [Chapter 8 - Pay-to-Script Hash](https:\/\/github.com\/jimmysong\/programmingbitcoin\/blob\/master\/ch08.asciidoc) - Bare Multisig \u2022 Coding OP_CHECKMULTISIG \u2022 Problems with Bare Multisig \u2022 Pay-to-Script-Hash (p2sh) \u2022 Coding p2sh \u2022 Conclusion\n  - [Chapter 13 - Segregated Witness](https:\/\/github.com\/jimmysong\/programmingbitcoin\/blob\/master\/ch13.asciidoc) - Pay-to-Witness-Pubkey-Hash (p2wpkh) \u2022 p2wpkh Transactions \u2022 p2sh-p2wpkh \u2022 Coding p2wpkh and p2sh-p2wpkh \u2022 Pay-to-Witness-Script-Hash (p2wsh) \u2022 p2sh-p2wsh \u2022 Coding p2wsh and p2sh-p2wsh \u2022 Other Improvements \u2022 Conclusion\n\n\nTalk Notes\n\n- [Contracts, Contracts, Contracts - Code Your Own (Crypto Blockchain) Contracts w\/ Ruby (sruby), Universum & Co](https:\/\/github.com\/geraldb\/talks\/blob\/master\/contracts.md)\n  - Genesis - Bitcoin Script\n    - Ivy - Higher-Level Bitcoin Script\n    - History Corner - Bitcoin - The World's Worst Database for Everything? - Bitcoin Maximalism in Action\n  - Turing Complete and the Halting Problem\n    - Fees, Fees, Fees - $$$ - There's No Free Lunch\n\nCode \n\n- [Learn Me a Bitcoin - Simple code snippets to help you understand how Bitcoin works](https:\/\/github.com\/in3rsha\/learnmeabitcoin-code) by Greg Walker\n\n\n\n## License\n\n![](https:\/\/publicdomainworks.github.io\/buttons\/zero88x31.png)\n\nThe Programming Bitcoin Script Step-by-Step book \/ guide\nis dedicated to the public domain.\nUse it as you please with no restrictions whatsoever.\n\n","121":"Introduction\n============\n\nThe bip32utils library is a pure Python implementation of Bitcoin\nhierarchical deterministic wallet (\"HD Wallet\") ECDSA key generation\nas specified in BIP0032 (Bitcoin Improvement Proposal #0032).\n\nDeterministic ECDSA key generation allows creating a sequence of\nBitcoin private and public ECDSA keys from an initial seed and a\nhierarchical set of indices.  A number of benefits follow:\n\n* An entire wallet can be backed up once by storing the wallet seed or\n  master extended private key, and all future addresses in the wallet\n  can be restored from it.\n\n* The creation of public and private ECDSA keys may be separated from\n  each other.  That is, it is possible to create only the public ECDSA\n  key half (and receiving address) of an ECDSA key pair, without the\n  ability to create the private half.  Thus, one can create receiving\n  addresses on a public facing system that if compromised would not\n  give the attacker the ability to spend bitcoin received at those\n  addresses. A separate, offline machine can generate the\n  corresponding private ECDSA keys and sign transactions.\n\n* Public and private ECDSA keys may be created in a hierarchy, and\n  control over or visibility of portions of the hierarchy may be\n  delegated to third parties.  This has uses for auditing, for\n  separating ECDSA key sequences into different logical groups or\n  accounts, and for giving 3rd parties the ability to create spending\n  transactions without first getting a receiving address in advance.\n\nBIP0032 is in draft stage, is subject to change, and is documented at:\n\nhttps:\/\/github.com\/sipa\/bips\/blob\/bip32update\/bip-0032.mediawiki\n\nPython bip32gen Script\n======================\n\nThis library installs the bip32gen script into $PREFIX\/bin, which\nwraps a command-line interface around the BIP32Key class functionality\ndescribed in a later section:\n\n## Script Parameters\n```\n$ bip32gen -h\nusage: bip32gen [-h] [-x] [-X] -i {entropy,xprv,xpub} [-n AMOUNT]\n                [-f FROM_FILE] [-F TO_FILE] -o OUTPUT_TYPE [-v] [-d]\n                chain [chain ...]\n\nCreate hierarchical deterministic wallet addresses\n\npositional arguments:\n  chain                 list of hierarchical key specifiers\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -x, --input-hex       input supplied as hex-encoded ascii\n  -X, --output-hex      output generated (where applicable) as hex-encoded\n                        ascii\n  -i {entropy,xprv,xpub}, --input-type {entropy,xprv,xpub}\n                        source material to generate key\n  -n AMOUNT, --amount AMOUNT\n                        amount of entropy to to read (bits), None for all of\n                        input\n  -f FROM_FILE, --from-file FROM_FILE\n                        filespec of input data, '-' for stdin\n  -F TO_FILE, --to-file TO_FILE\n                        filespec of output data, '-' for stdout\n  -o OUTPUT_TYPE, --output-type OUTPUT_TYPE\n                        output types, comma separated, from\n                        addr|privkey|wif|pubkey|xprv|xpub|chain\n  -v, --verbose         verbose output, not for machine parsing\n  -d, --debug           enable debugging output\n```\n\nThe user specifies the type of input data (currently from entropy, a\nserialized extended private key, or serialized extended public key),\nthe filespec to get that input data from (or stdin), the set of output\nfields to generate, whether to hex encode those outputs when\napplicable, and a list of key specifier(s).  A key specifier will\neither start with 'm' or 'M' when using entropy as an input source;\notherwise, when importing from a serialized extended key, the key\nspecifier(s) start with the first hierarchical child index to create.\n\nFor example, to generate a new master wallet key from entropy and\noutput the serialized extended private key for that to stdout:\n\n```\n$ bip32gen -i entropy -f \/dev\/random -n 128 -o xprv -F - m\nxprv9s21ZrQH143K3eqKCaAW9CvAiKR8SHdikQnR8dVs8eBxC9fYtW69k1gLRTG5o2Rn3gtz651yFGzxRFjtfjLQHmh4kT7YF3vZcZgGdfX7ZVS\n```\n\nTo generate the BIP0032 test vector #1, using entropy\nsupplied as a hex-encoded string on stdin, and output the private\nECDSA key, wallet import format for that private ECDSA key, public\nECDSA key, address, and serialized extended private and public keys,\nhex encoding where applicable, and writing to stdout:\n\n```\n$ echo 000102030405060708090A0B0C0D0E0F | \\\n    bip32gen -v \\\n    -i entropy -f - -x \\\n    -o privkey,wif,pubkey,addr,xprv,xpub -F - -X \\\n    m \\\n    m\/0h \\\n    m\/0h\/1 \\\n    m\/0h\/1\/2h \\\n    m\/0h\/1\/2h\/2 \\\n    m\/0h\/1\/2h\/2\/1000000000\n```\n\n(output not listed)\n\nBIP0032 outlines a hierarchy where individual \"accounts\" and key series have the following form:\n\n```\nm\/ih\/0\/k - Receiving address series for account 'i', with 'k' as index\nm\/ih\/1\/k - Change address series for spends from account 'i', with 'k' as index\n```\n\nSo, to give someone the ability to create receving addresses for\naccount 0, (but not the ability to spend from those addresses), one\nwould export an _extended public key_ for m\/0h\/0 (we'll use again the\nentropy from BIP0032 test vector #1 for purpose of explanation, but of\ncourse this would be unique for each situation):\n\n```\n$ echo 000102030405060708090A0B0C0D0E0F | \\\n    bip32gen \\\n    -i entropy -f - -x \\\n    -o xpub -F - \\\n    m\/0h\/0\nxpub6ASuArnXKPbfEVRpCesNx4P939HDXENHkksgxsVG1yNp9958A33qYoPiTN9QrJmWFa2jNLdK84bWmyqTSPGtApP8P7nHUYwxHPhqmzUyeFG\n```\n\nThen, to derive public child keys, that person would run the\nkey generator using that extended public key as input:\n\n```\n$ echo xpub6ASuArnXKPbfEVRpCesNx4P939HDXENHkksgxsVG1yNp9958A33qYoPiTN9QrJmWFa2jNLdK84bWmyqTSPGtApP8P7nHUYwxHPhqmzUyeFG | \\\n     bip32gen \\\n     -i xpub -f - \\\n     -o addr -F - \\\n     0 1 2 3 4 5 6 7 8 9\n1BvgsfsZQVtkLS69NvGF8rw6NZW2ShJQHr\n1B1TKfsCkW5LQ6R1kSXUx7hLt49m1kwz75\n1D2LvY1T3yT4xWgoXkXhAbh1fbY39owifJ\n1L71JnrWfB45Z1g2et1zeDAkzrpY8eyJMH\n1ACa2mfirthEwmnHVHcBEAVfTHJkajpjod\n1CR1rZqA8cwbohoj9bNmcrYxx31Zx2jw4c\n1PkyqPChrqwM1dee8KTMpsWWBuXgmGVNoi\n1L3HVcGagSUEb2d24SfHV7Kyu6kUNpDL51\n17JbSP83rPWmbdcdtiiTNqBE8MgGN8kmUk\n1MWb4Pv4ZCUmbnFgA5D3MtYyhMh4q8KCrd\n```\nAn offline machine could generate the corresponding private keys to\nspend from those addresses by using an _extended private key_ for the\naccount:\n```\n$ echo 000102030405060708090A0B0C0D0E0F | \\\n    bip32gen \\\n    -i entropy -f - -x \\\n    -o xprv -F - \\\n    m\/0h\/0\nxprv9wTYmMFdV23N21MM6dLNavSQV7Sj7meSPXx6AV5eTdqqGLjycVjb115Ec5LgRAXscPZgy5G4jQ9csyyZLN3PZLxoM1h3BoPuEJzsgeypdKj\n```\nThen to generate the corresponding private keys (here shown in wallet import format):\n```\n$ echo xprv9wTYmMFdV23N21MM6dLNavSQV7Sj7meSPXx6AV5eTdqqGLjycVjb115Ec5LgRAXscPZgy5G4jQ9csyyZLN3PZLxoM1h3BoPuEJzsgeypdKj | \\\n     bip32gen \\\n     -i xprv -f - \\\n     -o wif -F - \\\n     0 1 2 3 4 5 6 7 8 9\nL3dzheSvHWc2scJdiikdZmYdFzPcvZMAnT5g62ikVWZdBewoWpL1\nL22jhG8WTNmuRtqFvzvpnhe32F8FefJFfsLJpSr1CYsRrZCyTwKZ\nKwhVMKLLSMt7DemnUxhSftkdqPjWYmPKt31nmV3BB7TdVaMFzqgP\nKySK2geQrXWYR7f2p9C9Exr4CLngFQnnzQegSaKAfxNupqecSwdU\nKxSKj3b3EdHSyN3C5sSwRL7TMmxpEVkJ7Cw4fQTMUYXsCZRbmBAP\nL5kxG5qokHeTJSwco5JzCEdAy5TN2M2Tj2QvxGpvVuSVP5bJRAUT\nL3oTQGyHQvE3GkRQJkgPs9vY8NRTxdwacHu9Xu9QBPTpgHCSGume\nKxABnXp7SiuWi218c14KkjEMV7SjcfXnvsWaveNVxWZU1Rwi8zNQ\nL1Zku8j3mCiiHxZdo6NDLHv6jcA1JyNufUSHBMiznML38vNr9Agh\nL46bxscw878ytxNHro7ghNXuybUv8aNJAY1UudH1HUxD2pecBhR8\n```\n\nPython bip32utils Library\n=========================\n\n## The BIP32Key Class\n\nThe bip32utils python library currently has a single class, BIP32Key,\nwhich encapsulates a single node in a BIP0032 wallet hierarchy. A\nterminology distinction is made between an ECDSA private and public\nkey pair and a full BIP32Key, which internally holds an ECDSA key pair\nand other data.\n\nA BIP32Key may act like a standard Bitcoin keypair, providing the\nmeans to sign transactions with its internal ECDSA private key or to\ngenerate a receiving address with its internal ECDSA public key. In\naddition, a BIP32Key can act as the parent node for a set of indexed\nchildren and thus form a tree of BIP32Key sequences.\n\nA BIP32Key may also be deemed a private or public BIP32Key, depending\nupon whether the secret half of the internal ECDSA key pair is\npresent.  Private BIP32Keys are able to generate either public or\nprivate child BIP32Keys, while public BIP32Keys can only generate\npublic children.\n\nIn other words, a private BIP32Key internally stores an ECDSA private\nkey, an ECDSA public key, and some additional pseudorandom bits named\nthe _chain code_.  Public BIP32Keys are only different in that the\nsecret half of the ECDSA key pair does not exist; only the public half\ndoes.\n\n## Creating a BIP32Key\n\nA BIP32Key may come into existence in one of four ways:\n\n* Using the BIP32Key.fromEntropy(entropy, public=False) method, one\n  may provide a string of at least 32 bytes (128 bits) to construct a\n  new master BIP32Key for an entire tree. From this initial >= 128\n  bits of entropy a new ECDSA private key, ECDSA public key, and\n  pseudorandom chain code are derived that preserves the 128 bit\n  security parameter as described in BIP0032. This is termed a private\n  BIP32Key, and may be used to derive child BIP32Keys that are either\n  private or public.\n\n  If the public parameter is set to True, then the internal ECDSA\n  private key is discarded, the resulting BIP32Key is known as a\n  public BIP32Key, and may only be used to generate further public\n  BIP32Keys.\n\n* Using the BIP32Key.fromExtendedKey(xkey, public=False) static\n  method, one may provide a 78-byte serialized string that is\n  formatted as an Extended Private Key, as documented in BIP0032. From\n  this, the ECDSA private key, ECDSA public key, and chain code are\n  extracted.\n\n  If the public parameter is set to True, then the internal ECDSA\n  private key is discarded, converting the resulting BIP32Key into a\n  public BIP32Key, and may only be used to generate further public\n  BIP32Keys.\n\n* Using the BIP32Key.fromExtendedKey(xkey) static method, one may\n  provide a 78-byte serialized string that is formatted as an Extended\n  Public Key, as documented in BIP0032. From this, the ECDSA public\n  key and chain code are extracted, resulting in a public BIP32Key\n  that may only be used to generate further public BIP32Keys.\n\n* Finally, using an instance of a BIP32Key resulting from any of the\n  three methods above, one may call the member function ChildKey(i) to\n  create a child BIP32Key one level lower in the hierarchy, at integer\n  index 'i'. If the starting BIP32Key is a private one, then the\n  resulting child BIP32Key will also be a private one, using the\n  CKDpriv derivation formula in BIP0032.\n\n  Likewise, if the starting BIP32Key is a public one (i.e., does not\n  contain an internal ECDSA private key half), then the child BIP32Key\n  will also be a public one, derived using the CKDpub algorithm in\n  BIP0032.\n\nAt any time, a private BIP32Key may be turned into a public one by\ncalling the instance member function SetPublic(), which discards the\ninternal private ECDSA key half and sets an internal flag.\n\nWhen creating a child BIP32Key from an existing private BIP32Key, one\nmay also select from an alternate set of child keys, called _hardened_\nkeys, by adding the constant BIP32_HARDEN to the integer index.  A\nhardened child BIP32Key avoids a known issue with non-hardened child\nkeys where a compromise of one child key may result in a compromise of\nall child keys in the same sequence.\n","122":"# Cryptocurrencies and Blockchain\n\n> **School of applied Mathematics - FGV**\n\nFl\u00e1vio Code\u00e7o Coelho\n\nIntroductory course on cryptocurrencies and other applications of blockchain technology.\nThis course is part of the Applied Maths and Data-Science Undergraduate programs of FGV\n\nVideo lectures (in portuguese) are available on [Youtube](https:\/\/www.youtube.com\/watch?v=xqjow06qUEw), covering part of this course's content.\n\n## News and announcements\n\n> [**Online Billboard**](https:\/\/hackmd.io\/EYUwhgrATAbFIFooAYCcyEBYAmaFlTiWFRGwgDMQKBmAdkyA?both)\n\n\n\n| date       | conte\u00fado |\n| ---------- | -------- |\n| 2021-08-13 | leitura pr\u00e9via do [*white paper*](https:\/\/bitcoin.org\/bitcoin.pdf) do Bitcoin, para a aula. |\n| 2021-08-20 | leitura pr\u00e9via do paper [A Survey of Distributed Consensus Protocols for Blockchain Networks](https:\/\/arxiv.org\/abs\/1904.04098) |\n\n## Sylabus\n\n1. Introdution to Bitcoin and its history; the origin of cryptocurrencies\n2. Using Bitcoin Client\n3. Cryptocurrencies: A global overview of the most important coins and how they work\n3. Interacting with Bitcoin's blockchain from the Python console\n4. Bitcoin's \"Proof of Work\". From concepts to practice.\n1. Introduction to Cryptographic Hash functions and their use on Blockchains.\n5. Eliptical Curve Cryptography and their use in Bitcoin.\n    - RSA as a model of public key cryptography\n6. Alt coins\n7. [Proof of stake](https:\/\/en.wikipedia.org\/wiki\/Proof-of-stake).\n8. The Ethereum platform and *smart contracts*.\n9. Ethereum: White e Yellow paper\n1. Understanding [Ethereum usage of Merkle Trees](https:\/\/blog.ethereum.org\/2015\/11\/15\/merkling-in-ethereum\/)\n10. [Desenvolvendo](\/lectures\/Lecture 2 - ethereum_dev.md) Aplica\u00e7\u00f5es na plataforma Ethereum\n11. Introduction to the [Solidity Language](\/lectures\/Solidity.md)\n12. Developing smart contracts: [Open-zeppelin](https:\/\/openzeppelin.org\/).\n1. Interacting with contracts from [Javascript](https:\/\/web3js.readthedocs.io\/en\/1.0\/) and [Python](https:\/\/web3py.readthedocs.io\/en\/stable\/).\n13. Developping Decentralized Apps [(Dapps)](\/lectures\/dapp_meteor.md) using Meteor.\n\n## Bibliography\n\n### Bitcoin\n\n- white paper [[pdf]](https:\/\/bitcoin.org\/bitcoin.pdf) [[errata]](https:\/\/gist.github.com\/harding\/dabea3d83c695e6b937bf090eddf2bb3) [[HTML annotated]](https:\/\/genius.com\/2683722) [[other formats]](https:\/\/github.com\/karask\/satoshi-paper)\n\n- Mastering Bitcoin, Andreas Antonopoulos [[link]](http:\/\/chimera.labs.oreilly.com\/books\/1234000001802\/index.html)\n\n- developer documentation [[guide]](https:\/\/bitcoin.org\/en\/developer-guide) [[reference]](https:\/\/bitcoin.org\/en\/developer-reference) [[link]](https:\/\/bitcoin.org\/en\/developer-documentation)\n\n- bitcoin para programadores [[pdf]](https:\/\/www.gitbook.com\/download\/pdf\/book\/itsriodejaneiro\/bitcoin-para-programadores) [[repo]](https:\/\/github.com\/BlockchainHub\/bitcoin-para-programadores)\n\n\n### Ethereum\n\n- white paper [en](https:\/\/github.com\/ethereum\/wiki\/wiki\/White-Paper) [pt](https:\/\/github.com\/ethereum\/wiki\/wiki\/%5BPortuguese%5D-White-Paper) [PDF](\/Ethereum-White-Paper.pdf)\n\n- [Wiki](https:\/\/github.com\/ethereum\/wiki\/wiki)\n- [yellow paper](https:\/\/ethereum.github.io\/yellowpaper\/paper.pdf)\n- [Beige paper](https:\/\/github.com\/chronaeon\/beigepaper)\n- [Solidity Docs](http:\/\/solidity.readthedocs.io\/en\/latest\/)\n- [py-EVM](https:\/\/github.com\/ethereum\/py-evm)\n- [Vyper](https:\/\/github.com\/ethereum\/vyper)\n- [Auditing smart-contracts](https:\/\/medium.com\/@merunasgrincalaitis\/how-to-audit-a-smart-contract-most-dangerous-attacks-in-solidity-ae402a7e7868)\n\n### Byzantine Fault Tolerant Protocols\n\n- [Lamport, L et al. The Byzantine Generals Problem](https:\/\/www.microsoft.com\/en-us\/research\/publication\/byzantine-generals-problem\/)\n\n- [Lamport, L et al. The Part-Time Parliament](http:\/\/lamport.azurewebsites.net\/pubs\/lamport-paxos.pdf)\n\n- Raft [[page](https:\/\/raft.github.io\/)] [[paper](https:\/\/raft.github.io\/raft.pdf)]\n- [Generais bizantinos na Blockchain](https:\/\/docs.google.com\/presentation\/d\/1hM2UPkStA0Xx73YC6SZnfGwsAxOTapgYLvB0EKBL9Jo\/pub?start=false&loop=false&delayms=3000) \n\n\n### Other sources\n\n- Bitcoin and Cryptocurrency Technologies (textbook) [[preprint](https:\/\/d28rh4a8wq0iu5.cloudfront.net\/bitcointech\/readings\/princeton_bitcoin_book.pdf?a=1)] [[amazon](https:\/\/www.amazon.com\/gp\/product\/0691171696\/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0691171696&linkCode=as2&tag=jbonneau-20&linkId=59f35df2a92dd877cd22363bd8373a35)]\n\n- bigchainDB whitepaper [[link]](https:\/\/www.bigchaindb.com\/whitepaper\/bigchaindb-whitepaper.pdf)\n\n- Grin\/MimbleWimble [[repo](https:\/\/github.com\/ignopeverell\/grin\/)]\n\n- permaCoin whitepaper [[link]](https:\/\/www.cs.umd.edu\/~elaine\/docs\/permacoin.pdf)\n\n- [Kosba, A et al. Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts](https:\/\/eprint.iacr.org\/2015\/675.pdf)\n- [Cryptoeconomics course](https:\/\/cryptoeconomics.study\/)\n\n### Proofs\nBlockchains rely on different proving strategies to ensure distributed consensus. We will discuss some of them in this course.\n\n#### Proofs of work\n\n- [hashcash example](https:\/\/odanoburu.github.io\/hash-cash)\n\n- Ethereum Hash (Ethash) [[rationale](https:\/\/github.com\/ethereum\/wiki\/wiki\/Ethash-Design-Rationale)] [[spec](https:\/\/github.com\/ethereum\/wiki\/wiki\/Ethash)]\n\n- cuckoo cycle [[pdf](https:\/\/github.com\/tromp\/cuckoo\/blob\/master\/doc\/cuckoo.pdf?raw=true)] [[repo](https:\/\/github.com\/tromp\/cuckoo)]\n\n#### Proofs of Stake\n\n- Casper (Ethereum proposal) [[non-triviality](https:\/\/blog.ethereum.org\/2014\/10\/03\/slasher-ghost-developments-proof-stake\/)] [[repo](https:\/\/github.com\/ethereum\/research)] [[faq](https:\/\/github.com\/ethereum\/wiki\/wiki\/Proof-of-Stake-FAQ)]\n\n- PeerCoin paper [[pdf](https:\/\/peercoin.net\/assets\/paper\/peercoin-paper.pdf)]\n\n#### Proofs of Retrievability\n\n- [Juels, A et al. PORs: Proofs of Retrievability for Large Files](http:\/\/www.arijuels.com\/wp-content\/uploads\/2013\/09\/JK07.pdf)\n\n- [Bowers, K et al. Proofs of Retrievability: Theory and Implementation](http:\/\/dl.acm.org\/citation.cfm?id=1655015)\n\n#### Proof of Burn\n\n- Slimcoin paper [[pdf](http:\/\/www.slimcoin.club\/whitepaper.pdf)]\n\n\n\n## Contributors\n1. Bruno Cuconato @odanoburu\n1. Jo\u00e3o Carabetta @JoaoCarabetta\n","123":"<p align=\"center\"><img src=\"https:\/\/raw.githubusercontent.com\/anfederico\/cryptoview\/master\/media\/logo.png\" width=\"400px\"><p>\n    \n<br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n![Python](https:\/\/img.shields.io\/badge\/python-v3.6-blue.svg)\n![Dependencies](https:\/\/img.shields.io\/badge\/dependencies-up%20to%20date-brightgreen.svg)\n[![GitHub Issues](https:\/\/img.shields.io\/github\/issues\/anfederico\/cryptoview.svg)](https:\/\/github.com\/anfederico\/cryptoview\/issues)\n![Contributions welcome](https:\/\/img.shields.io\/badge\/contributions-welcome-orange.svg)\n[![License](https:\/\/img.shields.io\/badge\/license-MIT-blue.svg)](https:\/\/opensource.org\/licenses\/MIT)\n\n## Briefly\nCryptoview is written to be forked and deployed on a free Heroku account. There is a web application component which handles updating and visualizing your positions and there is a scheduler component that periodically tracks your equity and stores it in a database. Ideally, you'll deploy the web application on Heroku and then run the scheduler locally. This will keep your Heroku account free since you won't pay for background dynos and allow you to access your portfolio from anywhere. The only thing you need to do is setup a free online database through mlab, edit a settings file, and deploy straight from Github. I've tried to make these steps as easy as possible.\n\n## Setting up the database\n- Make an account at https:\/\/mlab.com\n- Create a new deployment in sandbox mode\n- Add a database user to your deployment\n- Keep the site up for the next step\n\n## Fork and fill out the settings file\n```\n\/cryptoview\n\u2514\u2500\u2500 \/scripts\n    \u2514\u2500\u2500 settings.py\n```\n\n## Deploy it\n\n***Heroku***  \nThe reason it runs separately is to keep web hosting free, if you decide to host it on Heroku. By handling the background tasks locally, you can run the app in sandbox mode on Heroku and handle the updaters file on your local computer. Fork the repository, create a Heroku sandbox app, and deploy straight from your forked repository.\n\n***Locally***  \nAfter the app is running on Heroku, start tracking your equity locally by running the following file. This is optional and you can turn it on\/off whenever you like, however you'll have missing dates in your equity curve. Since mlab is an online database, both Heroku and your local computer can communicate through it. I prefer this method because I can access my portfolio from anywhere online without paying for extra Heroku dynos.\n```\n\/cryptoview\n\u2514\u2500\u2500 updaters.py\n```\n\n## Contributions\nPlease [create an issue](https:\/\/github.com\/anfederico\/cryptoview\/issues\/new) for any ideas\/comments\/features you'd like to see or implement yourself!\n","124":"# Hardware design of Trezor\n\n[![gitter](https:\/\/badges.gitter.im\/trezor\/community.svg)](https:\/\/gitter.im\/trezor\/community)\n\nhttps:\/\/trezor.io\/\n\n## Open Source Hardware\n\n[![oshw](oshw-logo.png)](https:\/\/certification.oshwa.org\/cz000005.html)\n\nOSHWA UID: [CZ000005](https:\/\/certification.oshwa.org\/cz000005.html)\n\nThe content of this repo is dual licensed under the following licenses:\n* [GNU Affero General Public License v3](COPYING)\n* [CERN Open Hardware Licence Version 2 - Strongly Reciprocal](LICENSE)\n\n## Download\n\nDownload everything in a [single ZIP file](https:\/\/github.com\/trezor\/trezor-hardware\/archive\/master.zip).\n","125":"# \u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u52a0\u5bc6\u6280\u672f\n\n2017\u5e745\u670821\u65e5\u5728\u4e1c\u4eac[\u4ebf\u5496\u5561](http:\/\/ecafe.tokyo)\u505a\u7684\u4e00\u4e2a\u5173\u4e8e\u6bd4\u7279\u5e01\u3001\u4ee5\u592a\u574a\u533a\u5757\u94fe\u52a0\u5bc6\u6280\u672f\u7684\u5206\u4eab\u3002\n\n\u4e3b\u8981\u9762\u5411\u5f00\u53d1\u4eba\u5458\uff0c\u4e0d\u8fc7\u4e5f\u5305\u542b\u4e00\u4e9b\u94b1\u5305\u683c\u5f0f\u3001\u79c1\u94a5\u4fdd\u62a4\u7b49\u65b9\u9762\u7684\u5185\u5bb9\u3002\n\n## Slide \u5de5\u5177\n\n\u6f14\u8bb2\u6750\u6599\u4f7f\u7528 Markdown \u683c\u5f0f\u7f16\u5199\uff0c\u7528 Deckset \u64ad\u653e\u3002\u5df2\u5bfc\u51fa\u7684 [PDF \u683c\u5f0f\u6587\u4ef6](https:\/\/github.com\/ashchan\/bitcoin-ethereum-cryptography\/blob\/master\/Bitcoin%20Ethereum%20Cryptography.pdf)\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\u3002\n\n\n[The MIT License](https:\/\/jameschen.mit-license.org\/license.html)\n\nCopyright (c) 2017 [James Chen](https:\/\/ashchan.com\/) ([@ashchan](https:\/\/twitter.com\/ashchan))\n","126":"# Foxtrot\n[![NPM Package](https:\/\/img.shields.io\/npm\/v\/foxtrot.svg?style=flat-square)](https:\/\/www.npmjs.org\/package\/foxtrot)\n[![Build Status](https:\/\/img.shields.io\/travis\/bitpay\/foxtrot.svg?branch=master&style=flat-square)](https:\/\/travis-ci.org\/bitpay\/foxtrot)\n[![Coverage Status](https:\/\/img.shields.io\/coveralls\/bitpay\/foxtrot.svg?style=flat-square)](https:\/\/coveralls.io\/r\/bitpay\/foxtrot)\n\nA simple and secure routing network based on bitcoin cryptography.\nFoxtrot enables easy p2p communications and has built-in mechanisms\nfor peer discovery, creation of services addressable by public keys,\nand establishing encrypted connections.\n\n\n## Installation\n`npm install foxtrot`\n\n## Example\n\nThe easiest way to connect to the foxtrot network and send some\ndata is to spawn a server:\n\n```\nvar foxtrot = require('foxtrot');\n\nvar server = foxtrot.createServer();\nconsole.log('server listening on '+server.key.public.toString('hex'));\nserver.on('connect', function(socket) {\n  socket.write('hello from server!\\n');\n  socket.on('data', function(data) {\n    socket.write(data);\n  }); \n});\n```\n\nand have a client connect to it:\n```\nvar foxtrot = require('foxtrot');\n\nvar server = '024a4bf8759a8a28714d099e044dea99b20dd93bc86168568a0a97cd9d205e844a'; \/\/ server foxtrot address\nvar client = foxtrot.connect({\n  address: new Buffer(server, 'hex')\n}, function() {\n  console.log('connected to server!');\n  process.stdin.pipe(client);\n  client.pipe(process.stdout);\n});\n```\n\nFor more advanced examples and configuration, see the examples folder\n\n#License\n\n**Code released under [the MIT license](https:\/\/github.com\/bitpay\/foxtrot\/blob\/master\/LICENSE).**\n\nCopyright 2014 BitPay, Inc.\n","127":"","128":"\n##### This [R](http:\/\/r-project.org) script downloads and flattens blockchain variable data from various APIs into a data.table and a .csv file. \n  \n  \n  \n##### Requirements  \nTested:  \nOSX 10.9.5 with R 3.1.1 and RStudio 0.99.902  \nWindows 7 SP1 with R 3.1.0 and RStudio 0.98.1062. On Windows, you may need to add the following at the start of the [bitcoin-blockchain-data.R](https:\/\/github.com\/organofcorti\/bitcoin-blockchain-data\/blob\/master\/bitcoin-blockchain-data.R) script:\n\n```R\nsetInternet2()\n```\n\nAPI functions available for:\n* Blockchain.info\n* Blocktrail.com\n\n##### Before running script:\nMake sure you enter your working directory at  \n```R\nsetwd(\"\/your\/path\/here\")\n```  \nand preferred R repo in\n```R\nR_repo <- \"http:\/\/your\/R\/repo\/\"\n```\n\n* The output table will contain fields which depend on the API chosen.\n* All integers are 64 bit (using the bit64 library) in case you want to operate on the data before saving it. \n* Consider using the data.table library (as in the example) if you are operating on a significant portion of blockchain history.  \n\n\n=====\n\n##### Blockchain.info tables will contain:\n\"time\" (unixtime,UTC),\"height\", \"hash\", \"ver\", \"fee\", \"n_tx\", \"size\", \"script_hex\", \"tx_hash\", \"generationAddress\", \"addr_tag_link\", \"addr_tag\",\"API\"\n\nAn example of the output is here: [blockchain.info_data.csv](https:\/\/github.com\/organofcorti\/bitcoin-blockchain-data\/blob\/master\/blockchain.info_411300_411350_data.csv)\n\n###### Use Sys.sleep() command if you need to slow down your request due to the request limiter, currently set to:\n   * Requests in 8 Hours: 3 (Soft Limit = 30000, Hard Limit = 30500) \n   * Requests in 5 minutes: 3 (Soft Limit = 500, Hard Limit = 525) \n\n  \n###### Check https:\/\/blockchain.info\/api for up-to-date info, and https:\/\/blockchain.info\/api\/api_create_code if you want to avoid the request limiter altogether.\n=====\n\n##### Blocktrail.com tables will contain:\n\"height\",\"hash\",\"block_time\",\"difficulty\",\"is_orphan\",\"byte_size\",\"transactions\",\"value\",\"miningpool_name\",\"miningpool_url\",\"miningpool_slug\",\"total_input_value\",\"total_output_value\",\"total_fee\",\"script_signature\",\"generationAddress\",\"API\"\n\nAn example of the output is here: [blocktrail.com_411300_411350_data.csv](https:\/\/github.com\/organofcorti\/bitcoin-blockchain-data\/blob\/master\/blocktrail.com_411300_411350_data.csv)\n\n###### Check https:\/\/www.blocktrail.com\/api\/docs#api_block for more information.\n=====\n\n\n##### Let me know if you want other APIs added\n\n\n","129":"# External transaction index for Bitcoin Core\n\n[![Build Status](https:\/\/travis-ci.org\/jonasschnelli\/bitcoincore-indexd.svg?branch=master)](https:\/\/travis-ci.org\/jonasschnelli\/bitcoincore-indexd)\n\n### Status\nThis project is still experimental, use at your own risk!\n\n### How does it work\nThe indexer connects to a fullnode over the p2p protocol (at the moment 127.0.0.1:8333 mainnet) and performs the following actions:\n* opens database\n* connect to the peer\n* sync all headers, find unindexed blocks\n* requests blocks that are not yet indexed\n* index all found transactions txid->blockhash\n* once all blocks (found via header) has been requested, idle for new inv\/block messaged\n\n### Be aware!\nThe indexer trusts the remote peer! Only connect to a trusted peer, ideally via localhost.\nIf you connect via the public internet, make sure you connect through a secure channel.\n\n### Database\n* The indexer currently works only with leveldb (there was a LMDB implementation, check git history).\n* In order to save space, each block will get an internal blockmap-key (uint32 \/ 4bytes). That internal blockmap-key must not be confused with the block-height. The blockmap-key may be different on other systems\/instances.\n\n### Space requirements\n* ~14.3GB up to block 522081 (May 10th 2018)\n* complete index up to 522081 takes about ~60min on a fast CPU with SSD\n\n### REST interface\n* Lookup can be done via HTTP 18445\n* Two endpoints\n** `\/blockhash\/<txhash>` will return the blockhash of the requested transaction id\n** `\/tx\/<txhash>` will return the transaction of the requested txid (will fetch the relevant block via p2p and return the tx)\n\n### TODO:\n* Reduce memory usage with internal header maps\n* Lookup should also respect the non-flushed cache\n* Make sure that incoming block invs during sync-via-headers do not confuse the indexer\n* Add file based logging\n* Add runtime option to switch network (testnet, regtest) and the IP to connect to\n\n### Build\n```shell\n.\/autogen.sh\n.\/configure\nmake -j\n```\n\n### run\n`.\/src\/bitcoincore-indexd`\n\nOptions\n* `.\/src\/bitcoincore-indexd --datadir=\/tmp` (change datadir, default is ~\/.bitcoincore-indexd)\n* `.\/src\/bitcoincore-indexd --dbcache=xxx` (change the leveldb dbcache)","130":"# Yes, Bitcoin Is a Ponzi - Learn How the Investment Fraud Works\n\n\n> SEC Investor Education:\n>\n> New Year's Financial Resolution: Avoid too-good-to-be-true \"investments\" with Ponzi scheme \"red flag\" claims like:\n>\n> - \"To the moon! To the mars!\"\n> - \"Number go up!\"\n> - \"Yearly return of 300+% in 2020!\"\n> - \"Could quadruple in 2021 and rally to $100,000!\"\n\n\n\nA collection of \"unpopular opinion\" and get-rich-quick party spoiler \"stop the music\" articles on \"Is Bitcoin a Ponzi? Is Bitcoin a Speculative Bubble? Is Bitcoin a Digital 21st Century Tulip Mania? Is Bitcoin Comedy Gold?\"\n\n\n\nFrom the Wikipedia:\n\nBitcoin has been described as an economic bubble by at least eight Nobel Prize Economists at various times, including Robert Shiller on 1 March 2014, Joseph Stiglitz on 29 November 2017, and Richard Thaler on 21 December 2017. On 29 January 2018, a noted Keynesian economist Paul Krugman has described bitcoin as \"a bubble wrapped in techno-mysticism inside a cocoon of libertarian ideology\", on 2 February 2018, professor Nouriel Roubini of New York University has called bitcoin the \"mother of all bubbles\", and on 27 April 2018, a University of Chicago economist James Heckman has compared it to the 17th-century tulip mania.\n\nOn 4 December 2013, Alan Greenspan referred to it as a \"bubble\" as did George Soros on 25 January 2018. Warren Buffett called bitcoin a \"mirage\" on 13 March 2014.\n\n\n\n\u00a7\n\nSome \"unpopular\" bitcoin facts:\n\n- Bitcoin Proof-of-Waste Mining Is an Environmental Disaster\n- Bitcon Is a Greater Fool BagHODLer Zero-Sum Fraudsters' Greed Fest\n- The Bigger the Lies the Better - To the Moon! Number Go Up! Will Quadruple to $100 000 in 2021!\n- Bitcoin Is Comedy Gold - Bitcoin Is the New Standard?! - LOL\n- When Will the Music Stop? (Hint: Try to Cash Out)\n\nOr how about:\n\n![](bitcoin-net-money-flow.png)\n\n> Bitcoin's money flow is exactly the same as that of a ponzi scheme, as depicted above.\n> The arrow in that diagram represents the net one-way flow of money from investors to miners. \n> The net total flow since 2009 is already 15 billion USD. \n> If the the current bitcoin (BTC) price holds, that amount will grow by about 30 million USD\/day, \n> or at least another 10 billion USD in the next year. \n> Besides the investors, there isn't (and there will never be) any source of money that could return that money to them.\n>\n> Even if bitcoin promoters refuse to accept the label \"ponzi\", \n> they cannot deny that diagram. How can anyone propose such a bottomless barrel as a \"store of value\".\n>\n> -- [Jorge Stolfi, Yes, Bitcoin is a Ponzi: A Re-Rebuttal](https:\/\/www.ic.unicamp.br\/~stolfi\/bitcoin\/2021-01-16-yes-ponzi.html)\n\n\nSo what!?  Do your own research! Here we go:\n\n**SCAM ALERT! SCAM ALERT! SCAM ALERT!**\n\n\n### Tyler Winklevoss, Bitcoin Billionaire\n\n> Washington Post News:\n>\n> Bitcoin surges past $20 000 for first time.\n\nThis Bitcoin rally is the most sophisticated investors, the smartest people in the room, buying the bitcoin quietly. Number go up! To the moon!\n\n\u00a7\n\nWhen Elon Musk puts the Tesla balance sheet into Bitcoin, we'll have to change the Bitcoin rallying cry from \"to the moon!\" to \"to Mars!\"\n\n> Austrian Maximalist comments: Let's use solar energy to mine bitcoin with\n>  satellites in space!\n\n\u00a7\n\nThe U.S. Dollar is no longer a reliable store of value. Cameron and I (Winklevoss Twins Capital) make the case for $500 000 Bitcoin. Number go up! To the moon!\n\n\n### Cameron Winklevoss, Bitcoin Billionaire\n\nThere are 3.5 billion smart phones on the planet. All of them can hold bitcoin. None of them can hold gold. Bitcoin is the future. Number go up! To the moon!\n\n\n### Michael Saylor, Business Intelligence Billionaire\n\nMoney is energy. Bitcoin is the first crypto monetary energy network, capable of collecting all the world's liquid energy, storing it over time without power loss, and channeling it across space with negligible impedance. Number go up! To the moon!\n\n> Austrian Maximalist comments: And it's all represented in this: 21,000,000.00000000\n\n> Austrian Physicist comments: The science on this is legit respecting the laws of thermodynamics.\n\n\n\n### Anthony Pompliano, Bitcoin Cheerleader, Off The Chain Investment Newsletter Writer (100 000+ Subscribers)\n\nThere are an increasing number of buyers, yet a decreasing amount of available Bitcoin.\n\nAny economics 101 student can predict what happens next. To the moon! Number go up!\n\n\n### Bitcoiner (BTC), Greater Fool Investor\n\nWOO NUMBER GO UP!!!\n\nWho needs adoption when you can have institutional investors!\nWhy bank the unbanked when you can bank the banks!\nBring out the champaign because NUMBER GO UP!!!\n\nAm I price posting right?\n\n\n### Dan McArdle,  Bitcoin \"There is No Alternative\", Bitcoin is the New (Gold) Standard\n\nBitcoin will save the environment. \nBitcoin will create a global arbitrage in energy. \n\nBitcoin will drive innovation in energy and use of renewables.\n\n\u00a7\n\nBitcoin number go up because more people want bitcoin.\nBitcoin becomes more and more valuable.\n\n- 1,000 HODLers\n- 10,000 HODLers\n- 100,000 HODLers\n- 1,000,000 HODLers\n- 10,000,000 HODLers\n- 100,000,000 HODLers\n- 1,000,000,000 HODLers\n- 10,000,000,000 HODLers\n- 100,000,000,000 HODLers and on and on\n\nPeople will come to understand bitcon.\n\n---\n\n![](bitcoin-how-to-make-money.png)\n\n(Photo Courtesy of Bitcoin 2021 - A Bitcoin Conference for Bitcoiners by Bitcoiners in Miami, Florida, June 4-5, 2021)\n\n---\n\nComedy Gold?  Let's get real:\n\n\n## 2021\n\n[**Yes, Bitcoin is a Ponzi: A Re-Rebuttal**](https:\/\/www.ic.unicamp.br\/~stolfi\/bitcoin\/2021-01-16-yes-ponzi.html)\nby Jorge Stolfi, Computer Scientist, State University of Campinas, Brazil\n\n[**Bitcoin is not a means of payment. Bitcoin is not a currency. Bitcoin is not a unit of account. Bitcoin is not a scalable means of payment. Bitcoin is not a single numeraire. Now, people say Bitcoin is an asset. But think of it. What are assets?**](https:\/\/amycastor.com\/2021\/02\/11\/nouriel-roubini-tether-is-a-criminal-enterprise-sec-should-probe-elon-musks-bitcoin-tweets\/)\nby Nouriel Roubini, Economist, Coin Desk Q&A, (transcribed by Amy Castor - thanks!)\n\n[**Bitcoin is not a hedge against tail risk. Elon Musk may be buying it, but that doesn't mean everyone else should follow suit. The fundamental value of bitcoin is negative given its massive environmental cost**](https:\/\/www.ft.com\/content\/9be5ad05-b17a-4449-807b-5dbcb5ef8170) by Nouriel Roubini, Economist, Financial Times Op-Ed\n\n[**Bitcoin Pizza does not accept Bitcoin. We don't have a joke on that data point because we couldn't think of anything stupider than that**](https:\/\/www.youtube.com\/watch?v=slKSsdVYqwc&t=212s) by Stephen Colbert, Late Show Comedy \n\n\n<!--\n[**Bitcoin failed as a currency and became a speculative ponzi scheme**](https:\/\/twitter.com\/nntaleb\/status\/1382446478539550727) by Nassim Taleb,  Mathematical Statistician, and Former Option Trader and Risk Analyst \n-->\n\n[**\"Time to buy\" bitcoin adverts banned in United Kingdom for being irresponsible. Campaign failed to say investment was complex, volatile and could expose investors to losses, says Advertising Standards Authority**](https:\/\/www.theguardian.com\/media\/2021\/may\/26\/time-to-buy-bitcoin-adverts-banned-uk-asa) by Mark Sweney, The Guardian\n\n\n[**The next Bitcoin (BTC) crash could be something to behold. The parabolic price increase in Bitcoin [in 2021] is a bubble. Destroying our planet for glorified gambling is not something I'm happy about**](https:\/\/www.singlelunch.com\/2021\/01\/24\/the-next-btc-crash-could-be-truly-epic\/) by Matt Ranger, Data Scientist \n\n[**The Tether ponzi scheme - A bubble for the history books and fraud on the scale of Madoff**](https:\/\/www.singlelunch.com\/2021\/05\/19\/the-tether-ponzi-scheme\/) by Matt Ranger, Data Scientist \n\n[**'How can $24B in tethers move a $650B Bitcoin market cap?' and other mathematically illiterate question**](https:\/\/amycastor.com\/2021\/01\/20\/how-can-24b-in-tethers-move-a-650b-bitcoin-market-cap-and-other-mathematically-illiterate-questions\/) by Amy Castor, Blockchain Journalist \n\n[**Proof of work - the reason behind Bitcoin's horrendous energy consumption**](https:\/\/amycastor.com\/2021\/02\/17\/proof-of-work-the-reason-behind-bitcoins-horrendous-energy-consumption\/) by Amy Castor, Blockchain Journalist\n\n[**Why Bitcoin Is Bad for the Environment. Cryptocurrency mining uses huge amounts of power - and can be as destructive as the real thing**](https:\/\/www.newyorker.com\/news\/daily-comment\/why-bitcoin-is-bad-for-the-environment)\nby Elizabeth Kolbert, New Yorker, Staff Writer, Pulitzer Prize Winner\n\n\n[**Bitcoin - The Crypto-Chernobyl Environmental Disaster**](https:\/\/www.stephendiehl.com\/blog\/chernobyl.html) by Stephen Diehl, Programmer\n\n[**What I see now: Run screaming from Bitcoin - It is completely unambiguously obvious to me that Bitcoin is functioning as a Ponzi scheme, siphoning money from the pockets of rubes and into those of exchange insiders and China-based miners**](https:\/\/www.tbray.org\/ongoing\/When\/202x\/2021\/01\/20\/When-You-Know#p-6) by Tim Bray, Programmer\n\n\n[**Proof of Work is Killing the Environment to Create a Regulatory Loophole for Scams and Frauds**](http:\/\/www.tr0lly.com\/crypto\/proof-of-work-is-killing-the-environment-to-create-a-regulatory-loophole-for-scams-and-frauds\/) by Trolly McTrollface \n\n[**If You Buy Bitcoin, You'll Get Screwed**](http:\/\/www.tr0lly.com\/bitcoin\/buy-bitcoin-get-screwed\/) by Trolly McTrollface\n\n[**The Stupidity of Investing in Bitcoin**](http:\/\/www.tr0lly.com\/bitcoin\/the-stupidity-of-investing-in-bitcoin\/)  by Trolly McTrollface\n\n[**Tether: Heads I Win, Tails You Lose**](http:\/\/www.tr0lly.com\/uncategorized\/tether-heads-i-win-tails-you-lose\/)  by Trolly McTrollface\n\n[**The Tether Press and Bitcoin's Speculative Mania**](http:\/\/www.tr0lly.com\/bitcoin\/the-tether-press-and-bitcoins-speculative-mania\/)\nby Trolly McTrollface\n\n[**Tesla Spends $1.5B of Taxpayer-Funded Environmental Credits to Burn Coal in China**](http:\/\/www.tr0lly.com\/bitcoin\/tesla-spends-1-5b-of-taxpayer-funded-environmental-credits-to-burn-coal-in-china\/) by Trolly McTrollface\n\n[**Bitcoin consumes 'more electricity than Argentina'. The rising value of Bitcoin leads to ever-higher energy consumption**](https:\/\/www.bbc.com\/news\/technology-56012952) by Cristina Criddle, Tech Reporter, British Broadcasting Corp. (BBC)\n\n[**Why [the Bitcoin] cryptocurrency is a giant fraud. Speculators might make money on it, but the arguments for its usefulness fail completely.**](https:\/\/www.currentaffairs.org\/2021\/04\/why-cryptocurrency-is-a-giant-fraud) by Nathan Robinson, Editor of Current Affairs\n\n[**Inside the Cryptocurrency Casino: Bitcoin and its imitators were supposed to democratize the world of money. Instead, speculators have gotten rich - and the planet is paying the price**](https:\/\/www.currentaffairs.org\/2021\/02\/inside-the-cryptocurrency-casino) by Andrew Ancheta, Current Affairs\n\n\n[**The Bit Short: Inside Crypto's Doomsday Machine**](https:\/\/crypto-anonymous-2021.medium.com\/the-bit-short-inside-cryptos-doomsday-machine-f8dcf78a64d3) by Crypto Anonymous\n\n[**\"I don't believe bitcoin is unique in any way\": Why investors should be careful with this cryptocurrency**](http:\/\/usatoday.com\/story\/money\/columnist\/2021\/01\/10\/investors-cryptocurrency-bitcoin\/43312105\/) by Sean Williams, Investment Advisor, The Motley Fool\n\n\n## 2020\n\n[**Why Bitcoin is a Ponzi: A Type of Investment Fraud with Five Features**](https:\/\/www.ic.unicamp.br\/~stolfi\/bitcoin\/2020-12-31-bitcoin-ponzi.html)\nby Jorge Stolfi, Computer Scientist, State University of Campinas, Brazil\n\n[**Bitcoin is not a literal Ponzi scheme**](http:\/\/www.tr0lly.com\/bitcoin\/bitcoin-is-not-a-literal-ponzi-scheme\/) by Trolly McTrollface\n\n\n## 2019\n\n[**Tether: The Story So Far**](https:\/\/www.kalzumeus.com\/2019\/10\/28\/tether-and-bitfinex\/) by Patrick McKenzie, Recovering Japanese Salaryman\n\n\n[**Up in Flames: Bitcoin and other digital coins recapitulate 500 years of failure**](https:\/\/arstechnica.com\/information-technology\/2019\/02\/researcher-counts-the-reasons-he-wants-cryptocurrency-burned-with-fire\/) by Nicholas Weaver, Computer Scientist, University of California, Berkley, United States\n\n\n[**There's No Good Reason to Trust Blockchain Technology**](https:\/\/www.wired.com\/story\/theres-no-good-reason-to-trust-blockchain-technology\/) by Bruce Schneier, Cryptography Researcher\n\n\n[**Chapter 1 - The Bitcoin Narratives (in Narrative Economics: How Stories Go Viral and Drive Major Economic Events)**](https:\/\/press.princeton.edu\/books\/hardcover\/9780691182292\/narrative-economics) by Robert Shiller, Yale University, Nobel Laureate Economist\n\n\n## 2018\n\n[**Bitcoin Maximalists' Impossible Dream**](https:\/\/www.forbes.com\/sites\/francescoppola\/2018\/12\/30\/bitcoin-maximalists-impossible-dream\/) by Frances Coppola, Finance Journalist\n\n[**Bitcoin and other cryptocurrencies are useless**](https:\/\/www.economist.com\/leaders\/2018\/08\/30\/bitcoin-and-other-cryptocurrencies-are-useless), The Economist\n\n[**Why bitcoin uses so much energy: Its consumption is roughly the same as Ireland's**](https:\/\/www.economist.com\/the-economist-explains\/2018\/07\/09\/why-bitcoin-uses-so-much-energy), The Economist\n\n\n[**Bitcoin is based on the blockchain pipe dream**](https:\/\/www.theguardian.com\/business\/2018\/mar\/05\/bitcoin-is-based-on-the-blockchain-pipe-dream) by Nouriel Roubini, Economist and Preston Byrne, Blockchain Attorney\n\n[**The Big Blockchain Lie**](https:\/\/www.project-syndicate.org\/commentary\/blockchain-big-lie-by-nouriel-roubini-2018-10) by Nouriel Roubini, Economist\n\n\n[**Crypto is the Mother of All Scams and (Now Busted) Bubbles - While Blockchain Is The Most Over-Hyped Technology Ever, No Better than a Spreadsheet\/Database**](https:\/\/bitsblocks.github.io\/crypto-bubbles) by Nouriel Roubini, Economist\n\n[**Crypto Facts - Decentralize Payments - Efficient, Low Cost, Fair, Clean - True or False?**](https:\/\/bitsblocks.github.io\/crypto-facts) by Nouriel Roubini, Economist\n\n[**Best of Bitcoin Maximalist - Scammers, Morons, Clowns, Shills & BagHODLers - Inside The New New Crypto Ponzi Economics**](https:\/\/bitsblocks.github.io\/bitcoin-maximalist) by Trolly McTrollface\n\n\n[**Bitcoin is basically a ponzi scheme**](https:\/\/www.seattletimes.com\/opinion\/bitcoin-is-basically-a-ponzi-scheme\/)\nby Paul Krugman, Nobel Laureate Economist\n\n[**Greater fool theory - The bitcoin bubble**](https:\/\/www.economist.com\/buttonwoods-notebook\/2017\/11\/01\/the-bitcoin-bubble), The Economist\n\n\n[**Bitcoin is the greatest scam in history**](https:\/\/www.vox.com\/2018\/4\/24\/17275202\/bitcoin-scam-cryptocurrency-mining-pump-dump-fraud-ico-value) by Bill Harris, Founding CEO, PayPal and Personal Capital\n\n[**Why you can't cash out: Bitcoin is not a Ponzi scheme! It just works like one**](https:\/\/davidgerard.co.uk\/blockchain\/2018\/01\/04\/why-you-cant-cash-out-pt-3-bitcoin-is-not-a-ponzi-scheme-it-just-works-like-one\/) by David Gerard, Blockchain Journalist \n\n\n[**Bitcoin's stupendous power waste is green, apparently - bad excuses for Proof-of-Work**](https:\/\/davidgerard.co.uk\/blockchain\/2018\/05\/22\/bitcoins-stupendous-power-waste-is-green-apparently-bad-excuses-for-proof-of-work\/) by David Gerard, Blockchain Journalist\n\n\n\n## 2017\n\n[**The Problem with Calling Bitcoin a \"Ponzi Scheme\"**](https:\/\/prestonbyrne.com\/2017\/12\/08\/bitcoin_ponzi\/) by Preston Byrne, Blockchain Attorney\n\n[**Attack of the 50 Foot Blockchain**](https:\/\/davidgerard.co.uk\/blockchain\/table-of-contents\/) by David Gerard, Blockchain Journalist\n\n\n## 2016\n\n[**On the dangers of a blockchain monoculture**](https:\/\/tonyarcieri.com\/on-the-dangers-of-a-blockchain-monoculture) by Tony Arcieri, Blockchain Programmer\n\n\n\n## 2015\n\n[**The Death of Bitcoin**](https:\/\/tonyarcieri.com\/the-death-of-bitcoin) by Tony Arcieri, Blockchain Programmer\n\n\n\n## 1776\n\n[**HODLing Gold? Gengis Khan is HODLing Sheep and Oxen: Inside the True Nature and Causes of the Wealth of Nations**](https:\/\/github.com\/openblockchains\/crypto-books\/tree\/master\/The_Wealth_of_Nations) by Adam Smith, Old School Economist\n\n\n\n\n\n---\n\nFound another Bitcoin ponzi article? Tell us!\n\nContributions welcome! Just send pull requests.\n\n\n\n\n---\n\nWhy?  This Bitcoin Is a Ponzi page is inspired\nby the [Bitcoin Obituaries: Bitcoin Declared Dead 350+ Times](https:\/\/99bitcoins.com\/bitcoin-obituaries\/) page.\n\n\nAustrian Maximalist comments: Can I ask, when will you admit you were wrong? $50 000 bitcoin? $100 000 bitcoin? $500 000 bitcoin?\n\n","131":"Instant exchange API\n=====================================\n\nThe following methods are used to empower your service with Changelly exchange features. You can request more features by contacting our developers team. Changelly API is a white-label exchange solution.\n\n### **Table of contents**:\n\n* [Basic info](#basic-info)\n* [Fixed Rate Exchange Feature](#fixed-rate-exchange-feature)\n* [Getting started](#getting-started)\n* [Your API extra fee](#your-api-extra-fee)\n* [Usage](#usage)\n      - [Use Case](#use-case)\n      - [Protocol](#protocol)\n      - [Authentication](#authentication)\n         * [Node.js authentication](#nodejs-authentication)\n         * [Postman authentication](#postman-authentication)\n      - [Currency List](#currency-list)\n      - [Minimum Exchangable Amount](#minimum-exchangable-amount)\n      - [Estimated Exchange Amount](#estimated-exchange-amount)\n      - [Generating Transaction](#generating-transaction)\n      - [Identifying The Transaction](#identifying-the-transaction)\n      - [Getting Exchange Status](#getting-exchange-status)\n* [Fixed Rate Methods](#fixed-rate-methods)\n* [Currencies logo](#currencies-logo)\n* [KYC\/AML Policy](#kycaml-policy)\n* [Support](#support)\n  - [Dedicated Support-Line](#dedicated-support-line)\n  - [Online Transactions History](#online-transactions-history)\n* [Generate API Keys](#developers-page__bottom)\n\n\n### **Basic info**\n\n1. Please read for better understanding [https:\/\/medium.com\/@Changelly\/changelly-api-to-robust-your-crypto-business-25f5030bc803](https:\/\/medium.com\/@Changelly\/changelly-api-to-robust-your-crypto-business-25f5030bc803).\n2. Welcome to check these articles on implementation examples in the other crypto wallets: [Trezor](https:\/\/medium.com\/@Changelly\/changelly-api-trezor-wallet-514662179fd8), [BRD](https:\/\/medium.com\/@Changelly\/the-coolest-feature-of-brd-a-short-how-to-use-guide-8e9805c49019), [Coinomi](https:\/\/medium.com\/@Changelly\/exchange-crypto-coinomi-5b7a7b7bac54), [Ginco]( https:\/\/medium.com\/gincowallet\/changelly-is-now-available-on-ginco-dfc79c59cd43), [Huobi](https:\/\/medium.com\/@Changelly\/huobi-wallet-guide-how-to-exchange-crypto-ee11e38a1eec), [Jelurida](https:\/\/medium.com\/@Changelly\/changelly-partnered-jelurida-618089e27328)\n3. [The usage scheme could be useful for you.](https:\/\/i.imgur.com\/yngIkiv.png)\n4. Please note, that for currencies with multiple outputs in a transaction (BTC, LTC, etc), we do not accept more than one output per address in one transaction\n\n### **Fixed Rate Exchange Feature**\n\n1. New way of exchanging the crypto assets\n2. 90+ cryptos available for the fixed-rate exchanges\n3. Users get the exact amount of money as they expected\n4. Less technical support requests on the subject of rate fluctuation and compensation\n\n### **Getting started**\n\n1. Contact us at pro@changelly.com to get the API keys;\n2. Read the following documentation;\n3. Open an issue if you have any questions;\n\n* * *\n\n### **Your API extra fee**\n\nAfter setting up an API key you may want to set up your API extra fee.\n\nFor example, you may choose to charge a 0.5% fee on top of Changelly exchange fee.\n\nTo set up an extra commission, [please email us](mailto:pro@changelly.com \"pro@changelly.com\") with a link to your service.\n\nYour API extra commission is included in a result of `getExchangeAmount` function call. All fees are always in output currency.\n\nUsage\n-----\n\n[Usage schema](https:\/\/i.imgur.com\/yngIkiv.png)\n\nImplementation examples on GitHub:\n\n* [Node.js](https:\/\/github.com\/changelly\/api-changelly \"https:\/\/github.com\/changelly\/api-changelly\")\n* [C#](https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/c%23\/ChangellyExample.cs \"https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/c%23\/ChangellyExample.cs\")\n* [Python](https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/python\/example.py \"https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/python\/example.py\")\n* [PHP](https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/php\/example.php \"https:\/\/github.com\/changelly\/changelly-examples\/blob\/master\/php\/example.php\")\n\nPostman Collection and short description of API methods with examples: [https:\/\/api-docs.changelly.com](https:\/\/api-docs.changelly.com\/ \"https:\/\/api-docs.changelly.com\/\"). You will need to set up authentication to use Postman with our API.\n\nAPI URL: `https:\/\/api.changelly.com`\n\n### **Use Case**\n\nHere is simple use case of our exchange API:\n\n1.  API \u2014 get available at the current moment list of currencies with `getCurrencies` or `getCurrenciesFull` method;\n2.  GUI \u2014 ask user for currency pair he wants to exchange. For example, it can be LTC (Litecoin) to ETH (Ethereum);\n3.  API \u2014 get minimum exchangeable amount for selected currency pair with `getMinAmount` method;\n4.  GUI \u2014 ask user for the amount to exchange;\n5.  API \u2014 call `getExchangeAmount` method to get estimated ETH amount after exchange;\n6.  GUI \u2014 show an estimated amount to user and ask for confirmation;\n7.  GUI \u2014 ask user for his wallet address to send coins after exchange;\n8.  API \u2014 call `createTransaction` method to get the LTC address to which user should send his funds;\n9.  GUI \u2014 ask user to send LTC coins to the address for exchange;\n10.  User sends LTC. We receive LTC and exchange it for ETH. We send ETH to the address that was submitted to `createTransaction` method;\n12.  Via `getTransactions` method you can get all the transactions history.\n\n### **Protocol**\n\nChangelly API uses JSON-RPC 2.0 protocol.\n\nExample request:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getMinAmount\",\n   \"params\": {\n      \"from\": \"ltc\",\n      \"to\": \"eth\"\n   }\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": \"0.0008563\"\n}\n```\n\nId used is a custom ID generated at the client side to distinguish responses. You may use any value you want.\n\n### **Authentication**\n\nAll requests must contain the following headers:\n\n| **Header** | **Description**                                                                               |\n|------------|-----------------------------------------------------------------------------------------------|\n| api-key    | your api key                                                                                  |\n| sign       | the query's serialized body signed by your key's \"secret\" according to the HMAC-SHA512 method |\n\n\n### **Node.js authentication**\n\nExample of how to sign a request with node.js `crypto` module:\n\n```js\nconst crypto = require(\"crypto\");\n\nconst message = {\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"method\": \"getMinAmount\",\n  \"params\": {\n    \"from\": \"ltc\",\n    \"to\": \"eth\"\n  },\n};\n\nconst sign = crypto\n   .createHmac('sha512', apiSecret)\n   .update(JSON.stringify(message))\n   .digest('hex');\n```\n\n### **Postman authentication**\n\nHere is a small guide how to properly sign transaction with postman:\n\n1. Add new environment.\n\n![Postman add new environment](https:\/\/i.imgur.com\/JRKa2qb.png)\n\n2. Add `sign` and `api-key` variables to the new environment.\n\n![Postman manage environments setupt](https:\/\/i.imgur.com\/P0sMNz7.png)\n\n3. Create new request. Being on the `Headers` tab add `sign` and `api-key` headers. Use postman variable syntax for them in `Value` column. These variables will be updated for each request using the pre-request script.\n\n![Postman headers setup](https:\/\/i.imgur.com\/xfwxoQY.png)\n\n4. Paste the following code to the `Pre-request Script` tab for the request. Fill up the apiKey and secret variables. Be very careful not to accidentally share your secret.\n\n```js\n\nconst crypto = require('crypto-js')\n\nconst apiKey = ''\nconst secret = ''\n\nconst sign = crypto.HmacSHA512(request.data, secret).toString()\n\npostman.setEnvironmentVariable('apiKey', apiKey)\npostman.setEnvironmentVariable('sign', sign)\n\n```\n\n![Postman pre-request script setup](https:\/\/i.imgur.com\/tpiMzIu.png)\n\n### **Currency List**\n\nCommands `getCurrencies` and `getCurrenciesFull` will return you the currency list available for exchange. Check the list of available currencies at [Supported currencies page](https:\/\/changelly.com\/supported-currencies \"https:\/\/changelly.com\/supported-currencies\") before you start. Example request:\n\n#### getCurrencies\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getCurrencies\",\n   \"params\": {},\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": [\n      \"btc\",\n      \"ltc\",\n      \"eth\",\n      \"doge\",\n      \"xrp\",\n      \"xem\",\n      \"lsk\",\n      \"xmr\",\n      \"zec\"\n   ]\n}\n```\n\n#### getCurrenciesFull\n```json\n{\n    \"id\": \"test\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getCurrenciesFull\",\n    \"params\": {\n    }\n}\n```\n\n\nExample response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"test\",\n    \"result\": [\n        {\n            \"name\": \"btc\",\n            \"ticker\": \"btc\",\n            \"fullName\": \"Bitcoin\",\n            \"enabled\": true,\n            \"enabledFrom\": true,\n            \"enabledTo\": true,\n            \"fixRateEnabled\": true,\n            \"payinConfirmations\": 2,\n            \"extraIdName\": null,\n            \"addressUrl\": \"https:\/\/www.blockchain.com\/btc\/address\/%1$s\",\n            \"transactionUrl\": \"https:\/\/www.blockchain.com\/btc\/tx\/%1$s\",\n            \"image\": \"https:\/\/web-api.changelly.com\/api\/coins\/btc.png\",\n            \"fixedTime\": 1200000\n        }\n    ]\n}\n```\n\n_Note and warning_: getCurrencies returns a list of currently enabled currencies. We can disable and enable any currency at any time and the response list will reflect the change. Use `getCurrenciesFull` to get list of all available currencies along with description and state.\n\n### **Minimum Exchangable Amount**\n\nTo proceed with exchange we need it to be larger than the certain amount. Use `getMinAmount` with a currency pair (`from`, `to`) to notify users of the minimum amount they need to send.\n\nExample:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getMinAmount\",\n   \"params\": {\n      \"from\": \"ltc\",\n      \"to\": \"eth\",\n   }\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": \"0.0008563\"\n}\n```\n\n**NOTE: most of the users do not read the information about the minimum amount. Be sure to highlight this information in your UI. If users send less than the minimum amount, their coins will likely be lost.**\n\n### **Estimated Exchange Amount**\n\nYou can show users the estimated amount of coins they receive as a result of exchange using `getExchangeAmount`. You need to provide the request with currency pair (`from`, `to`) and the `amount` user is going to exchange. Estimated `result` property includes Changelly plus partner extra fee. All fees are always in output currency. Your API extra fee will decrease the estimated `result`.\n\nExample:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getExchangeAmount\",\n   \"params\": {\n      \"from\": \"ltc\",\n      \"to\": \"eth\",\n      \"amount\": \"3.99\"\n   },\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": \"0.72596439091239070521\"\n}\n```\n\nWhen requesting more than 1 currency pair with getExchangeAmount you just have to pass array of arguments.\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getExchangeAmount\",\n  \"params\": [\n    {\n      \"from\": \"eth\",\n      \"to\": \"wax\",\n      \"amount\": \"1\"\n    },\n    {\n      \"from\": \"btc\",\n      \"to\": \"wax\",\n      \"amount\": \"1\"\n    }\n  ],\n  \"id\": 1\n}\n```\n\nExample response:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": [\n    {\n      \"from\": \"eth\",\n      \"to\": \"wax\",\n      \"networkFee\": \"10.0000000000000000000000\",\n      \"amount\": \"1\",\n      \"result\": \"3279.52\",\n      \"visibleAmount\": \"3296\",\n      \"rate\": \"3296\",\n      \"fee\": \"16.48\"\n    },\n    {\n      \"from\": \"btc\",\n      \"to\": \"wax\",\n      \"networkFee\": \"10.0000000000000000000000\",\n      \"amount\": \"1\",\n      \"result\": \"126612.755\",\n      \"visibleAmount\": \"127249\",\n      \"rate\": \"127249\",\n      \"fee\": \"636.245\"\n    }\n  ]\n}\n```\n\nIf you want to receive an extended response when calling getExchangeAmount (with network fee, exchange fee, and other parameters included), please pass the request params as an array.\n\n```json\n{\n    \"id\": \"test\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getExchangeAmount\",\n    \"params\": [{\n        \"from\": \"ETH\",\n        \"to\": \"BTC\",\n        \"amount\": \"1\"\n    }]\n}\n```\n\nExample response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"test\",\n    \"result\": [\n        {\n            \"from\": \"eth\",\n            \"to\": \"btc\",\n            \"networkFee\": \"0.0005000000000000000000\",\n            \"amount\": \"1\",\n            \"result\": \"0.03558319\",\n            \"visibleAmount\": \"0.03572609437751004016\",\n            \"rate\": \"0.03572609437751004016\",\n            \"fee\": \"0.00014290437751004016064\"\n        }\n    ]\n}\n```\n\n\nExample response fields:\n\n| Property | Description |\n|---------------|--------------------------------------------------------------------------|\n| from | currency to exchange from |\n| to | currency to exchange for |\n| amount | amount of currency you are going to send |\n| networkFee | commission that is taken by the network from the amount sent to the user |\n| visibleAmount | the amount before any fees are deducted |\n| rate | current rate of exchange |\n| fee | exchange fee |\n| result | includes exchange fee |\n\n### **Generating Transaction**\n\nAfter a successful call of `createTransaction` method you get a unique id to track the transaction status and a payin address for user to send money to.\n\n`createTransaction`, once get called, creates a pair of deposit and payout address. If somebody sends coins to the same address twice, without second call to createTransaction, the coins will be exchanged and sent to the user's payout address.\n\n| Property | Required or optional | Description |\n|----------|----------------------|-------------|\n| from     | required             | currency to exchange from |\n| to       | required             | currency to exchange for |\n| address  | required             | recipient address |\n| extraId  | optional             | property for addresses of currencies that use additional ID for transaction processing (XRP, XLM, EOS, IGNIS, BNB, XMR, ARDOR, DCT, XEM) |\n| refundAddress | optional | used in case of refund |\n| refundExtraId | optional | same as of `extraId` but for `refundAddress` |\n\nExample request:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"createTransaction\",\n   \"params\": {\n      \"from\": \"doge\",\n      \"to\": \"ltc\",\n      \"address\": \"<<valid ltc address>>\",\n      \"extraId\": null,\n      \"amount\": 1\n   }\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": {\n      \"id\": \"jev5lt0qmg26h48v\",\n      \"apiExtraFee\": \"0\",\n      \"changellyFee\": \"0.5\",\n      \"payinExtraId\": null,\n      \"payoutExtraId\": null,\n      \"amountExpectedFrom\": 1,\n      \"amountExpectedTo\": 3.99,\n      \"status\": \"new\",\n      \"currencyFrom\": \"eth\",\n      \"currencyTo\": \"ltc\",\n      \"amountTo\": 0,\n      \"payinAddress\": \"<<doge address to send coins to>>\",\n      \"payoutAddress\": \"<<valid ltc address>>\",\n      \"createdAt\": \"2018-09-24T10:31:18.000Z\"\n   }\n}\n```\n\nExample response fields:\n\n| Property           | Description                                                            |\n|--------------------|------------------------------------------------------------------------|\n| id                 | Transaction ID. Could be used in `getStatus` method                    |\n| apiExtraFee        | Your API Extra fee in percents                                         |\n| changellyFee       | Changelly fee in percents                                              |\n| payinAddress       | Address for a user to send coins to                                    |\n| payinExtraId       | `ExtraId` for `payinAddress` in case it is required                    |\n| payoutAddress      | Address where the exchange result will be sent to                      |\n| payoutExtraId      | `ExtraId` for `payoutAddress` in case it is required                   |\n| amountExpectedFrom | `amount` from `createTransaction`                                      |\n| amountExpectedTo   | `result` from `getExchangeAmount` at the moment of `createTransaction` |\n| status             | Transaction status                                                     |\n| currencyTo         | Ticker of input currency                                               |\n| currencyFrom       | Ticker of output currency                                              |\n| amountTo           | Real amount after the exchange that was sent to `payoutAddress`        |\n| createdAt          | Point of time when the transaction was created                         |\n\nExample 2 request:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"method\": \"createTransaction\",\n  \"params\": {\n    \"from\": \"doge\",\n    \"to\": \"ltc\",\n    \"address\": \"<<valid ltc address>>\",\n    \"extraId\": null,\n    \"amount\": 1,\n    \"refundAddress\": \"<<valid doge address to make automatic refund in case of transaction fail>>\",\n    \"refundExtraId\": null\n  },\n}\n```\n\nExample 2 response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": {\n      \"id\": \"pgj49c80p572minj\",\n      \"apiExtraFee\": \"0\",\n      \"changellyFee\": \"0.5\",\n      \"payinExtraId\": null,\n      \"payoutExtraId\": null,\n      \"refundAddress\": \"<<doge refund address>>\",\n      \"refundExtraId\": null,\n      \"amountExpectedFrom\": 1,\n      \"status\": \"new\",\n      \"currencyFrom\": \"eth\",\n      \"currencyTo\": \"ltc\",\n      \"amountTo\": 0,\n      \"payinAddress\": \"<<doge address to send coins to>>\",\n      \"payoutAddress\": \"<<valid ltc address>>\",\n      \"createdAt\": \"2018-09-24T10:33:39.000Z\"\n   }\n}\n```\n\n_Note_: `amountTo: 0` is expected. `amountTo` will have non-zero value when transaction is in `finished` state.\n\n### **Identifying The Transaction**\n\nTo identify transaction the id from the `createTransaction` method is used.\n\nAlso you can use `getTransactions` method to list all transactions that satisfy request params.\n\n_Note on transaction processing:_ It's common situation when there are many transactions in `waiting` status when processing payin. In this case transaction with `waiting` status and _the nearest_ amount is selected. And in case there are many - the earleast of them is selected. If the are no transactions in `waiting` status then new transaction is created automatically.\n\nAll parameters for this method are optional.\n\n| Parameter | Description                      |\n|-----------|----------------------------------|\n| currency  | currencyFrom to filter           |\n| address   | sender address to filter         |\n| extraId   | use if address needs any extraId |\n| limit     | how many records to retreive     |\n| offset    | records cursor                   |\n\n\nExample request:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getTransactions\",\n   \"params\": {\n      \"currency\": \"doge\",\n      \"address\": \"<<payin address to search>>\",\n      \"extraId\": null,\n      \"limit\": 10,\n      \"offset\" : 10\n   }\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": [{\n      \"id\": \"pgj49c80p572minj\",\n      \"createdAt\": 1537785219,\n      \"moneyReceived\": 0,\n      \"moneySent\": 0,\n      \"payinConfirmations\": \"0\",\n      \"status\": \"waiting\",\n      \"currencyFrom\": \"doge\",\n      \"currencyTo\": \"ltc\",\n      \"payinAddress\": \"<<payin address>>\",\n      \"payinExtraId\": null,\n      \"payinHash\": null,\n      \"amountExpectedFrom\": \"1\",\n      \"payoutAddress\": \"\",\n      \"payoutExtraId\": null,\n      \"payoutHash\": null,\n      \"refundHash\": null,\n      \"amountFrom\": \"\",\n      \"amountTo\": \"0\",\n      \"networkFee\": null,\n      \"changellyFee\": \"0.5\",\n      \"apiExtraFee\": \"0\"\n   }, {\n      \"id\": \"7kcc21x5z66f5vv9\",\n      \"createdAt\": 1535638050,\n      \"moneyReceived\": 1535638050,\n      \"moneySent\": 0,\n      \"payinConfirmations\": \"1\",\n      \"status\": \"confirming\",\n      \"currencyFrom\": \"btc\",\n      \"currencyTo\": \"doge\",\n      \"payinAddress\": \"<<payin address>>\",\n      \"payinExtraId\": null,\n      \"payinHash\": \"txid4\",\n      \"amountExpectedFrom\": \"0\",\n      \"payoutAddress\": \"<<payout address>>\",\n      \"payoutExtraId\": null,\n      \"payoutHash\": null,\n      \"refundHash\": null,\n      \"amountFrom\": \"1\",\n      \"amountTo\": \"0\",\n      \"networkFee\": null,\n      \"changellyFee\": \"0.5\",\n      \"apiExtraFee\": \"0\"\n   }]\n}\n```\n\nTo get details on a specific transaction, just include the \"id\" parameter in your request:\n\n```json\n{\n    \"id\": \"test\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getTransactions\",\n    \"params\": {\n        \"id\": \"ahvt********dnfo\",\n        \"limit\": 10\n    }\n}\n```\n\nExample response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"test\",\n    \"result\": [\n        {\n            \"id\": \"ahvt********dnfo\",\n            \"trackUrl\": \"https:\/\/changelly.com\/track\/ahvt********dnfo\",\n            \"createdAt\": 1617187096,\n            \"type\": \"float\",\n            \"moneyReceived\": 0,\n            \"moneySent\": 0,\n            \"rate\": \"0.00021545\",\n            \"payinConfirmations\": \"0\",\n            \"status\": \"waiting\",\n            \"currencyFrom\": \"xlm\",\n            \"currencyTo\": \"eth\",\n            \"payinAddress\": \"GDX6FFZUVSYTOV****************HUXXPXYOUIOY6CDQXG4NP6OEQ7\",\n            \"payinExtraId\": \"9783********7653\",\n            \"payinExtraIdName\": \"Memo.ID\",\n            \"payinHash\": null,\n            \"payoutHashLink\": null,\n            \"refundHashLink\": null,\n            \"amountExpectedFrom\": \"500\",\n            \"payoutAddress\": \"0xCde3463364****************73d7f91136Ac34\",\n            \"payoutExtraId\": null,\n            \"payoutExtraIdName\": null,\n            \"payoutHash\": null,\n            \"refundHash\": null,\n            \"amountFrom\": \"\",\n            \"amountTo\": \"0\",\n            \"amountExpectedTo\": \"0.10746\",\n            \"networkFee\": \"0\",\n            \"changellyFee\": \"0.25\",\n            \"apiExtraFee\": \"0.00\",\n            \"totalFee\": null,\n            \"fiatProviderId\": null,\n            \"fiatProvider\": null,\n            \"fiatProviderRedirect\": null,\n            \"canPush\": false,\n            \"canRefund\": false\n        }\n    ]\n}\n```\n\n\nNote: first\n\n### **Getting Exchange Status**\n\nWith the transaction ID, obtained from createTransaction call, you can get exchange status to notify your user or provide additional support.\n\nExample:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"method\": \"getStatus\",\n   \"params\": {\n      \"id\": \"pgj49c80p572minj\"\n   }\n}\n```\n\nExample response:\n\n```json\n{\n   \"jsonrpc\": \"2.0\",\n   \"id\": \"test\",\n   \"result\": \"waiting\"\n}\n```\n\n**Possible transaction statuses:**\n\n|**Status**|**Description**|\n|----------|---------------|\n|waiting|Transaction is waiting for an incoming payment.|\n|confirming|We have received payin and are waiting for certain amount of confirmations depending of incoming currency.|\n|exchanging|Payment was confirmed and is being exchanged.|\n|sending|Coins are being sent to the recipient address.|\n|finished|Coins were successfully sent to the recipient address.|\n|failed|Transaction has failed. In most cases, the amount was less than the minimum. Please contact support and provide a transaction id.|\n|refunded|Exchange failed and coins were refunded to user's wallet. The wallet address should be provided by user.|\n|hold|Due to AML\/KYC procedure, exchange may be delayed|\n|expired|In case payin for fixed-rate transaction was not sent within the indicated timeframe|\n\n### **Fixed Rate Methods**\n\nFor fixed-rates we\u2019ve added three methods in our API: `getFixRate`, `getFixRateForAmount` and `createFixTransaction`.\n\n#### **Getting the Fixed Rate**\n\nAPI Call - `getFixRate`\n\nRequest params example:\n\n```json\n{\n  \"id\": \"test\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getFixRate\",\n  \"params\": [\n    {\n      \"from\": \"eth\",\n      \"to\": \"btc\"\n    },\n    {\n      \"from\": \"eth\",\n      \"to\": \"wax\"\n    }\n  ]\n}\n```\n\nResponse example:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"result\": [\n    {\n      \"id\": \"f4dd43106d63b65b88955a0b362645ce960987c7ffb7a8480dd32e799431177f\",\n      \"result\": \"0.02556948\",\n      \"from\": \"eth\",\n      \"to\": \"btc\",\n      \"maxFrom\": \"50.000000000000000000\",\n      \"maxTo\": \"1.27847400\",\n      \"minFrom\": \"0.148414210000000000\",\n      \"minTo\": \"0.00379488\"\n    },\n    {\n      \"id\": \"f4dd43107876ad5b88955a0b362645ce960a87c0fdb7ab540ed635799230107e830d3f\",\n      \"result\": \"3237.50839254\",\n      \"from\": \"eth\",\n      \"to\": \"wax\",\n      \"maxFrom\": \"27.799155735744717075\",\n      \"maxTo\": \"89999.99999999\",\n      \"minFrom\": \"0.187060000000000000\",\n      \"minTo\": \"605.60831991\"\n    }\n  ]\n}\n```\n* minFrom, minTo, maxFrom, maxTo - denote the frame, inside of which we would be able to perform the fix rate exchange and give to the user the exact amount of assets that was shown initially\n* \u201cMax\u201d and \u201cmin\u201d params here denote the frame, inside of which we would be able to perform the fix rate exchange and give to the user the exact amount of assets that was shown initially\n* fix rate methods return `rateId` that can be used for 1 minute or 30 sec in `getFixRateForAmount`. This time should be enough for user to initiate the exchange\n* `id` has to be stored somewhere and will be used as `rateId` param while calling\n* Expired `rateId` cannot be used for creation of the fixed-rate transaction\n* `result` or `rate` is a parameter that you can show to the user as the exchange rate\n* Important: users shall send the exact amount of funds which were specified as a pay-in amount. In case, users send different sum - the transaction can be automatically refunded\n* Important: for fixed rate transactions to process successfully, refund address must be presented as well as refund extraId if needed\n\n`getFixRateForAmount` returns a fixed exchange result of amount provided. It needs an additional parameter `amountFrom` user is going to exchange and returns `amountTo` user receive.\n\nFirst of all, you need to be sure about your amount is greater or equal than minimal amount and less or equal than maximal amount.\n\nFor this, you need to call `getPairsParams` for fetching minimal and maximal amount for current pair.\n\n```json\n{\n    \"id\": \"test\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getPairsParams\",\n    \"params\": [\n      {\n        \"from\": \"eth\",\n        \"to\": \"btc\"\n      },\n      {\n        \"from\": \"btc\",\n        \"to\": \"eth\"\n      }\n    ]\n}\n```\n\n`getPairsParams` response:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"test\",\n    \"result\": [\n        {\n            \"from\": \"eth\",\n            \"to\": \"btc\",\n            \"minAmountFloat\": \"0.0465\",\n            \"maxAmountFloat\": \"449172.45240999997\",\n            \"minAmountFixed\": \"0.0775\",\n            \"maxAmountFixed\": \"100\"\n        },\n        {\n            \"from\": \"btc\",\n            \"to\": \"eth\",\n            \"minAmountFloat\": \"0.0015\",\n            \"maxAmountFloat\": \"25629.527850432485\",\n            \"minAmountFixed\": \"0.0025\",\n            \"maxAmountFixed\": \"3.2138\"\n        }\n    ]\n}\n```\n`minAmountFixed` and `maxAmountFixed` gives a range for amount provided by user.\n\nSo, main difference between `getFixRateForAmount` and `getFixRate`  methods is that `getFixRateForAmount` fetch fixed amount according to additional parameter field `amountFrom`.\n\nRequest params example:\n\n```json\n{\n  \"id\": \"test\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"getFixRateForAmount\",\n  \"params\": [\n    {\n      \"from\": \"eth\",\n      \"to\": \"btc\",\n      \"amountFrom\": \"5.2\"\n    },\n    {\n      \"from\": \"eth\",\n      \"to\": \"wax\",\n      \"amountFrom\": \"2.25\"\n    }\n  ]\n}\n```\n\nResponse example:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"result\": [\n    {\n      \"id\": \"f4dd43106d63b65b88955a0b362645ce960987c7ffb7a8480dd32e799431177f\",\n      \"rate\": \"0.02556948\",\n      \"from\": \"eth\",\n      \"to\": \"btc\",\n      \"amountFrom\": \"5.2\",\n      \"amountTo\": \"0.132961296\"\n    },\n    {\n      \"id\": \"f4dd43107876ad5b88955a0b362645ce960a87c0fdb7ab540ed635799230107e830d3f\",\n      \"rate\": \"3237.50839254\",\n      \"from\": \"eth\",\n      \"to\": \"wax\",\n      \"amountFrom\": \"2.25\",\n      \"amountTo\": \"7284.393883215\"\n    }\n  ]\n}\n```\n* `id` has to be stored somewhere and will be used as `rateId` param for 30 seconds while calling.\n* Expired `rateId` cannot be used for creation of the fixed-rate transaction.\n* `rate` is a parameter that you can show to the user as the exchange rate.\n* `from` and `to` parameters are present exchange pair provided by user.\n* `amountFrom` is a copy of provided by user `amountFrom` request's parameter.\n* `amountTo` is fixed exchange amount of assets that user will receive after create fixed-rate transaction with current `rateId`.\n\nIf amount will not be correspond with minimal and maximal range for amount than error will be thrown.\n\nRequest params example:\n\n```json\n{\n    \"id\": \"test\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getFixRateForAmount\",\n    \"params\": [\n    \t{\n    \t\t\"from\": \"eth\",\n    \t\t\"to\": \"btc\",\n    \t\t\"amountFrom\": \"0.00034\"\n    \t}\n    ]\n}\n```\n\nResponse example:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"test\",\n    \"error\": {\n        \"code\": -32600,\n        \"message\": \"invalid amount: minimal amount is 0.28200000000000000\"\n    }\n}\n```\n\n#### **Creating a fixed rate transaction**\n\n* Using `createFixTransaction` you need to provide the request with currency pair (`from`, `to`), recipient address, refund address (used in case of refund), rateID for this pair (that you get in getFixRate\/getFixRateForAmount requests) and the `amountFrom` user is going to exchange, or `amountTo` user wants to receive. All fields are required\n\n* Important: in response there will be same fields presented as with the float rate api with `amountExpectedTo`. The number shown in the `amountExpectedTo` should be understood as a pay-out amount to the user\n\n* In response there is a payTill field, where is indicated till what time user needs to make the payment\n\n* Using `createFixTransaction` you can provide a sum, user wants to receive during the exchange. For this you need to indicate the sum in the field `amountTo`\n\n* Important: you can\u2019t provide fields `amountFrom` and amountTo at the same time.\n\nExample request fields:\n\n| Property | Required or optional | Description |\n|---------------|----------------------|------------------------------------------------------|\n| from | required | currency to exchange from |\n| to | required | currency to exchange for |\n| address | required | recipient address |\n| refundAddress | required | used in case of refund |\n| amountFrom | required | amount user is going to exchange |\n| amountTo | required | amount user wants to receive |\n| rateId | required | that you get from getFixRate\/getFixRateForAmount requests |\n| extraId  | optional             | property for addresses of currencies that use additional ID for transaction processing (XRP, XLM, EOS, IGNIS, BNB, XMR, ARDOR, DCT, XEM) |\n| refundExtraId | optional | same as of `extraId` but for `refundAddress` |\n\nExample of request with providing the sum user wants to send:\n\nRequest:\n\n```json\n{\n  \"id\": \"test\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"createFixTransaction\",\n  \"params\": {\n    \"from\": \"btc\",\n    \"to\": \"eth\",\n    \"address\": \"0xee*******5E3DFc214\",\n    \"amountFrom\": \"1\",\n    \"rateId\": \"f3dd48106a63b*********b7ab5413d32c7b96301a7e82\",\n    \"refundAddress\": \"1Bvjij5653y9****BGPuQBPzTZpb\"\n  }\n}\n```\n\nResponse:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"result\": {\n    \"id\": \"149a****m90\",\n    \"apiExtraFee\": \"0\",\n    \"changellyFee\": \"0.5\",\n    \"payinExtraId\": null,\n    \"payoutExtraId\": null,\n    \"refundAddress\": \"1Bvjij5653y9r********QBPzTZpb\",\n    \"amountExpectedFrom\": \"1.00000000\",\n    \"amountExpectedTo\": \"32.277489930000000000\",\n    \"payTill\": \"2019-05-28T13:30:26.898Z\",\n    \"status\": \"new\",\n    \"currencyFrom\": \"btc\",\n    \"currencyTo\": \"eth\",\n    \"amountTo\": 0,\n    \"payinAddress\": \"3EkyEjzs********vZ95AyTM\",\n    \"payoutAddress\": \"0xeee031413*******B8Cf5E3DFc214\",\n    \"createdAt\": \"2019-05-28T13:10:26.000Z\"\n  }\n}\n```\n\nExample of request with providing the sum user wants to receive:\n\nRequest:\n\n```json\n{\n  \"id\": \"test\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"createFixTransaction\",\n  \"params\": {\n    \"from\": \"btc\",\n    \"to\": \"eth\",\n    \"address\": \"0xeee031*******E3DFc214\",\n    \"amountTo\": \"0.0390573347142\",\n    \"rateId\": \"f3dd48106a63bd5b88955a05********32c7495301a7783\",\n    \"refundAddress\": \"1Bvjij5653y9r******QBPzTZpb\"\n  }\n}\n```\n\nResponse:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test\",\n  \"result\": {\n    \"id\": \"44******kvi7bh\",\n    \"apiExtraFee\": \"0\",\n    \"changellyFee\": \"0.5\",\n    \"payinExtraId\": null,\n    \"payoutExtraId\": null,\n    \"refundAddress\": \"1Bvjij5653*********BPzTZpb\",\n    \"amountExpectedFrom\": \"0.00121000\",\n    \"amountExpectedTo\": \"0.0390573347142\",\n    \"payTill\": \"2019-05-28T13:42:17.079Z\",\n    \"status\": \"new\",\n    \"currencyFrom\": \"btc\",\n    \"currencyTo\": \"eth\",\n    \"amountTo\": 0,\n    \"payinAddress\": \"3FWBE******nTBSeMN9dLHRQ\",\n    \"payoutAddress\": \"0xeee03************Cf5E3DFc214\",\n    \"createdAt\": \"2019-05-28T13:22:17.000Z\"\n  }\n\n```\n\n### **Currencies logo**\n\nYou can get logo of each currency with\n\n[https:\/\/web-api.changelly.com\/api\/coins\/btc.png](https:\/\/web-api.changelly.com\/api\/coins\/btc.png)\n\n### **KYC\/AML Policy**\n\n1. Kindly note that we have AML\/KYC policy;\n2. Due to this policy, users\u2019 transactions may be held for KYC procedures;\n3. That is why, before users start an exchange via our API, please, notify them about the possibility of holding the transactions for KYC procedures;\n4. You may want to use the following text: \u201cExchange services provided by Changelly. By clicking \u201cAccept\u201d, I acknowledge and understand that my transaction may trigger AML\/KYC verification according to Changelly AML\/KYC\u201d;\n5. The text may appear in a form of a pop-up window, you are welcome to check the examples of a [desktop version notification](https:\/\/i.imgur.com\/v0BDpk7.jpeg) and a [mobile version notification](https:\/\/i.imgur.com\/P540cbW.jpeg);\n6. If a transaction of your customer gets \u2018hold\u2019 status, please ask the customer to contact our security team at security@changelly.com in order to pass the KYC procedure.\n\n### **Support**\n\n#### Dedicated Support Line\n\nChangelly provides two options for support. Please choose your support line and inform us at [pro@changelly.com](mailto:pro@changelly.com \"pro@changelly.com\"):\n\n\u2014 You just redirect users to our support line;\n\n\u2014 You provide the first line support from your side and send your tickets directly to our dedicated email address. These tickets are forwarded strictly to our second level support team. It will be assigned the highest priority. Please don't make our email public.\n\nInform us in case the dedicated support line is needed. Feel free to request it at [pro@changelly.com](mailto:pro@changelly.com \"pro@changelly.com\").\n\nAlso, send us a link to your service, confirm that you are ready to provide support from your side and you won\u2019t share this email with your clients.\n\nThe support line option is provided at the discretion of the Changelly's developer team.\n\n#### Online Transactions History\n\nYou can check all the transactions with online stats on the [history page](https:\/\/changelly.com\/history \"https:\/\/changelly.com\/history\") in your personal account.\n\n\n## Error codes\n<table class=\"relative-table wrapped confluenceTable\"><colgroup><col style=\"width: 5.84936%;\" \/><col style=\"width: 19.391%;\" \/><col style=\"width: 39.3429%;\" \/><col style=\"width: 35.4167%;\" \/><\/colgroup><tbody><tr><th class=\"confluenceTh\">Code<\/th><th class=\"confluenceTh\" colspan=\"1\">Method<\/th><th class=\"confluenceTh\">Message<\/th><th class=\"confluenceTh\">Description<\/th><\/tr><tr><td class=\"confluenceTd\" rowspan=\"3\"><code>-32600<\/code><p><br \/><\/p><p><br \/><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>getFixRateForAmount<span style=\"color: #003366;\">,&nbsp;<\/span><\/p>getExchangeAmount<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid amount: maximal amount is&nbsp;{max_amount}<\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>The attempt to exchange more currency than a maximal amount.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\"><p>getFixRateForAmount<span style=\"color: #003366;\">,&nbsp;<\/span><\/p>getExchangeAmount<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid amount: minimal amount is&nbsp;{min_amount}<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>The attempt to exchange less currency than a minimal amount.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">Any method<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Error: You reached requests limit {limit}&nbsp;rps<\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>You have been sending more than 10 requests per second.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"4\"><br \/><\/td><\/tr><tr><td class=\"confluenceTd\"><code>-32601<\/code><\/td><td class=\"confluenceTd\" style=\"text-align: left;\" colspan=\"1\">N\/A<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Method not found<\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\">The method you're calling doesn't exist.<\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"4\"><br \/><\/td><\/tr><tr><td class=\"confluenceTd\" rowspan=\"10\"><code>-32602<\/code><p><br \/><\/p><p><br \/><\/p><p><br \/><\/p><p><br \/><\/p><p><br \/><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\">Any method containing from\/to parameter<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid currency:&nbsp;{currency} temporary disabled<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>This currency is currently disabled.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\"><p>getFixRate,&nbsp;getFixRateForAmount, createFixTransaction<\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid currency:&nbsp;{currency} temporary disabled for fix rate transactions<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>This currency is currently disabled for fix-rate transactions.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">Any method containing from\/to parameter<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid currency:&nbsp;{currency} is temporary disabled on API as output currency<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>This currency is currently disabled on API as an output currency.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">Any method containing from\/to parameter<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid currency:&nbsp;{currency} is temporary disabled on API as input currency<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>This currency is currently disabled on API as an input currency.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">Any method containing from\/to parameter<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Invalid currency:&nbsp;{currency} not found<\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>This currency is not listed on Changelly.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\"><p>createTransaction,&nbsp;<br \/>createFixTransaction<\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Error: Invalid address<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>You've specified an invalid payout address.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\"><p>createFixTransaction<\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Error:<code class=\"c-mrkdwn__code c-mrkdwn__code--no_left_cap\" style=\"text-align: left;\"> Invalid refund address<\/code><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>You've specified an invalid refund address.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">Any method<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code><code class=\"c-mrkdwn__code c-mrkdwn__code--no_left_cap\" style=\"text-align: left;\">Parameter {param} is invalid<\/code><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>You've specified an invalid parameter.&nbsp;<\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\"><p>createTransaction<\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code><code class=\"c-mrkdwn__code c-mrkdwn__code--no_left_cap\" style=\"text-align: left;\"><span>Not enough liquidity in pair {from_currency}-&gt;{to_currency}. Max amount is {max_from} {from_currency}.<\/span><br \/><\/code><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p><span>The amount you've specified exceeds maximal volume.<\/span><\/p><\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"1\">createFixTransaction<\/td><td class=\"confluenceTd\" colspan=\"1\"><code>Error: rateId was expired or already used. Use method getFixRateForAmount to generate new rateId&nbsp;<\/code><\/td><td class=\"confluenceTd\" colspan=\"1\">New rateId has to be generated.<\/td><\/tr><tr><td class=\"confluenceTd\" colspan=\"4\"><br \/><\/td><\/tr><tr><td class=\"confluenceTd\"><code>-32603<\/code><\/td><td class=\"confluenceTd\" colspan=\"1\">createFixTransaction<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Error: Creating fix transactions limit exceeds, wait 5 minute<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>The limit for creating fix-rate transactions was exceeded. Please wait for 5 more minutes and try again.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\"><br \/><\/td><td class=\"confluenceTd\" colspan=\"1\">createTransaction<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>An error encountered during address generation. Please try again later.<br \/><\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>An error occurred during address generation.<\/p><\/td><\/tr><tr><td class=\"confluenceTd\"><br \/><\/td><td class=\"confluenceTd\" colspan=\"1\">Any method<\/td><td class=\"confluenceTd\" colspan=\"1\"><p><code>Internal Error OR Error<\/code><\/p><\/td><td class=\"confluenceTd\" colspan=\"1\"><p>Most likely, the problem is on our side. Further investigation is required.<\/p><\/td><\/tr><\/tbody><\/table>\n","132":"%PDF-1.3\n%\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n4 0 obj\n<< \/Length 5 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd\\Y\ufffd\ufffd\u0011~\u05ef\ufffdv\ufffd\ufffd{\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\ufffd\ufffd^\ufffdd\u001c{\ufffd8\ufffd\ufffd\ufffd8n?-b\u0004\ufffdn\u0000\ufffd\ufffd\u001f\ufffdW$\ufffd\ufffd\ufffdjMl \ufffd\ufffdjId\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdKNKE\ufffdWm\ufffd6u\ufffd\ufffd\ufffd\u001f\ufffdw\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd\/ia\ufffd\ufffd\ufffd=\ufffd\u0015\ufffd2\ufffd~tE\ufffd\u0014m\u07a8\ufffd\ufffd\ufffd\ufffd\ufffdcR\ufffdEQ\ufffd\ufffd\ufffd}Z\ufffd9\ufffd\ufffd\ufffd1\ufffd}|,\ufffd2-\ufffd\u01df\ufffd\u001f\ufffd}\ufffd\ufffdjs\ufffd\ufffd\ufffd\ufffd\ufffds{\u075d\ufffd\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffd>\u022f\ufffd\ufffd\ufffdv[\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0462<DE\ufffd2\ufffdL\ufffd\r\u0010J\ufffd\u0016\ufffd2\ufffd\ufffd\ufffd^\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd_\u0011\ufffdM\ufffdk\u0741=\ufffd\ufffd\ufffd\ufffd;K\ufffdb*\ufffd\ufffd\u00128\ufffdw-8\ufffd\u06c0\ufffd\u001c\ufffd\ufffd\ufffdU\r9$\/\u001f!%\ufffdA\ufffd\ufffd \u0018B\u000e\u0010\ufffd6{\ufffd\ufffd|&\t\u001c\ufffd\u03c3cu2\ufffd\uacaa\ufffdVeX\u0013\ufffd\ufffd\u020b$\ufffdZB\ufffd-\ufffd\ufffd8%Z\u0006\u0004\ufffd?\ufffd\ufffd\ufffd\ufffdt\u000f\ufffd\ufffdxu\ufffd\ufffd\ufffd?\ufffd\u0004\ufffd\u0002\ufffd\ufffd\ufffd\u0435?\"\ufffd\ufffd\ufffd%X\ufffd4\ufffd\n\ufffd0\ufffd\ufffd\ufffd\ufffd9\u0006%\u0003\ufffd\ufffdE^\ufffd\u0001J\ufffd\ufffd\ufffd\ufffd:q@d9AQ\ufffd\u0018\ufffd\"\ufffd\ufffd\ufffd\ufffd\ufffd@\ufffdV\ufffdI\ufffd\u0004\ufffd\ufffd\ufffd\u0016I\ufffd\ufffd_\u0463\ufffd'\ufffd\ufffd\ufffdV\u0004\ufffd\ufffd\ufffdg\u02caB\u0012\f\ufffd1r\ufffd\ufffd@\u5e70P\"\u0011\ufffd\ufffdz\ufffd\u001a\ufffd_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdP\ufffd\ufffd\u000b\u8597\ufffd\ufffdcG\ufffd`9\ufffd\u0013\ufffdy\r\u0001\ufffdh\ufffd\ufffd\ufffd\ufffd3\ufffd`,?\u0018\ufffd\ufffd\ufffd@\ufffd\u0005\/\/\ufffd6\u0016\u0018\u0010\u0012D\ufffd\u0015\u000b\ufffd\u0393\ufffd0N\ufffd4\u0011\"\ufffd2bTBl\ufffd;\ufffd\ufffdh\ufffd`I+\f\u0000\u001e\u0011\ufffds\u026b\ufffd%\ufffdunZoI\ufffd`\ufffd\u001f'\ufffd\u001f\ufffd\ufffd\ufffd\ufffd\bu\ufffd\u0015l\ufffd\ufffd[\u0016u\ufffdt\ufffd\ufffd*\ufffdl\ufffd\\\ufffd\ufffd^B\ufffd\ufffd+m\ufffd\ufffd\ufffd\ufffdOuH\ufffd\ufffdk\ufffd\ufffdgq\ufffdZ*`\ufffd@\ufffd\ufffd\ufffdk\ufffdu\ufffdL\u0796E5\u0004\ufffd\u001a\ufffd\ufffd?}\ufffd\ufffd\ufffd1yc\fT\ufffdJn\u0015\ufffd_,\ufffd\ufffd\ufffd\\\ufffdm\ufffd\u0014pPo\ufffd\ufffdmKA\u0004\ufffd=G&\ufffd1\ufffdK\ufffd\u001b\ufffd\ufffd\u000f\ufffd\ufffd\ufffdN?\ufffda\ufffd\ufffd\ufffdg\ufffd\ufffd\\\ufffdP\ufffd\"\u001f\ufffd\ufffd\ufffd\u0005d\ufffd\u001b\ufffd\ufffd\ufffdw\ufffd\ufffdN\ufffd\ufffdC\ufffd\ufffdy\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd\u001d\ufffd3V\ufffd{z\u05dd\ufffdZ\u001fw9L\u0017C\u000e\ufffd\ufffd\u0007Mq=\ufffd\u0005\ufffd\u0675 \ufffd\ufffd\ufffdX\ufffd\u0013d,\ufffdc9e,\ufffd\u019fY\u02c6C\ufffd\u001fpl\ufffd\u0005<\ufffdl\ufffd+\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\t\u0083\u001f\ufffd\u0003M`_\u0018\u001e\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffd\u0017I\ufffd7\ufffd(X\u000ednx\ufffd`r\u0003\ufffd\u0015'\ufffdh\ufffdke\ufffd#\ufffdk\ufffdK\ufffd.[\ufffd\u0003\u0016c-\u0019\ufffd\ufffdF\ufffd\ufffdQ\r\ufffd\ufffd\ufffd\ufffdJ\ufffd\u0017\ufffd\ufffd\u0017+\ufffdA2S\ufffd\ufffd?0,\"\ufffd\ufffdq\f\u02e2\u030b\ufffdH\ufffd\ufffd\u0017P\ufffd\ufffd\ufffd%\ufffd\ufffdt\t\u001c\\K\u001f\u0012\ufffdX\ufffd6\ufffdE\ufffd\u0011j\ufffd|\ufffd\ufffdu!z\ufffd\u0010\ufffd\u017f7t\ufffdX\ufffd=\ufffd\u0014\ufffd\u0010\ufffd\/.KE\u000e\ufffd\ub620\ufffd\ufffd\ufffd{yY\ufffdr\ufffd\ufffd\u0004\ufffd\u04eaS\ufffd\ufffd\u036d\ufffd\u001c_:\ufffda\ufffd\ufffd\ufffd@\ufffd\ufffd\ufffdPS\u0739+\ufffd*\ufffd\uf378\ufffd)\ufffd\u001b]\ufffda\ufffd\u0779Q\ufffd\r\u0018\u0000\b\ufffd\u001f`B\ufffd#G\ufffd\ufffde\ufffd}e\ufffd\ufffd\ufffd{g,\ufffd\ufffd5\ufffd\u066f\ufffdl\ufffd*\ufffdLg*\u0017\ufffd\ufffd\\\ufffdpr\u0003\ufffd\u0007>`&JrX\ufffdIV8%\bf.i\ufffd\u0003'M\ufffd&\ufffdZ\ufffd\u0012\ufffd+v\t<[\u0012\bNa\ufffd\u0299\u00060\ufffd\u0019\ufffd\f\ufffd\ufffdF\ufffd\ufffd\ufffd<K2\ufffd!\u0006\ufffd\ufffd\\\u0002CF2\ufffd|\ufffd\ufffd\n\ufffd\fj\u0255a2v\tU\ufffd8D\ufffdf\ufffd_\u00172\ufffd\u000b\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffdA\ufffd\u0010\ufffd\ufffd\u0000\u0011\ufffdkD'Z\ufffd\u0016\ufffd\ufffd\u001fz\ufffd\ufffdd?\ufffdvpBo\ufffd-\ufffd&\ufffdv\u0012\ufffd\ufffd\ufffd7pb\u078e\ufffdk\ufffd\u001bH\u000eJ\ufffdT\u0013\ufffd\ufffdo<\t\f\u001a\ufffd\ufffd\u001d\u0012\u0013\ufffdf\u0015-\ufffd\ufffd\ufffd$\u0012.fP(z\ufffdB5\ufffd\ufffd\u0003\ufffd\u022c\ufffd\ufffd\ufffd\u02872Id\ufffdo\ufffd\ufffdc\ufffdD\ufffd\ufffdOr\ufffd?z\u0018\ufffd\ufffd\bO6&\ufffd\u0189Be\u0016\u0016b\ufffd7\ud9e2\udc72n\ufffd\n\ufffd\u02c4?\ufffd\ufffd:\n\ufffdH\u0321\u001b.\ufffdU\ufffd`\ufffd\u0002\ufffdR\u0005[$\ufffd\ufffd\ufffd\ufffd\u0682<\ufffdq\ufffd\u00069\ufffd*Y\ufffd9\ufffd\u000b\u0016\ufffd\ufffd\ufffdH\t?\ufffdBCV\ufffd\ufffdP\ufffdy&_\ufffd\n\ufffd\u001e8\ufffd\u0018\ufffd\ufffdt\u001f<S\u0000<\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\ufffdu\ufffdN\ufffd\ufffdp9\u036b_-\ufffd$\ufffd3\ufffd\ufffd\ufffd}\ufffd\u0006\ufffdF\ufffd\ufffd.[\ufffduS=A\u0012\ufffd\ufffdA\ufffdc\ufffdj\ufffd\ufffd\ufffd\ufffdO\u00027\ufffd\u0005K\u048f\u001aH\ufffd\u001c)\ufffd\ufffd\u0014h&\ufffd\u0006^\ufffd$}\ufffd9\ufffdp\u001f\ufffd\ufffdH{\ufffd\u0007\"S\ufffd\ufffd\u0012T\ufffdK+*\ufffd\u000f\ufffdW1K\u0443\ufffd\u001a\u0019\ufffd%l\ufffd,\t\u0019*\ufffd\f~\ufffdNA\ufffd\ufffd\f\ufffd\ufffd\\\ufffd\ufffd\ufffdK\ufffd0&o\u00195\ufffd\ufffdo\ufffd\ufffdd?\ufffd;6\u0001\u001e\ufffd3e\u0011\ufffd\u001e\u05df\ufffd5j\ufffd\ufffd\ufffd\u0790\ufffd\ufffd\ufffd\ufffd\ufffdQ\tb\ufffd\ufffd@\ufffd\ufffd\u02cd\ufffd1\ufffd\u0007\ufffd\ufffd\ufffd\ufffd\ufffdeg\u001a\u0012\u0015\u0016\u000eS\ufffd\ufffd\ufffd\u0014\ufffd\ufffdG\b[\ufffd0\ufffd\ufffd\u0018\ufffd\ufffd\u0017\ufffd\ufffd\u0000\ufffdd%{f8_\ufffd X\u0000\ufffd4aC\ufffd\u001e\ufffd\ufffd\u001dG\u0694\ufffdU\ufffd4d.;N\ufffd=\u0010O\ufffd\ufffd\ufffd\ufffd\b)8\u000b\ufffd\ufffd\ufffd1#d\u0004\ufffdPF:&\ufffd\u0004 oxn c\ufffd\u8690,Q\ufffd\u03d6\ufffd\ufffd2B8\u0015\u001c\ufffd#Q\u001d\ufffdx\ufffd\ufffd\ufffd3\ufffdn\ufffd[\ufffd\ufffd\u0014X\ufffd\ufffdE\ufffd\ufffdCD-\u0018\ufffdb\ufffd\ufffdV~#Px\ufffd\bS\ufffd\ufffd9\t\ufffdO\ufffd\ufffd\ufffd'\u00191\ufffdS\ufffd2c\u0015r\ufffd\ufffd\u008a\ufffd\ufffd\u000b\ufffd1c\u0006\b,^V\t\ufffd\ufffd\ufffd\ufffd\ufffd\u0016\ufffdG\u0006\ufffdc\ufffd*VYYN\u0004!\ufffd\u0787\u001c&\ufffd\ufffdq\ufffd\ufffd\ufffd(\ufffd<\ufffd*n\ufffd\ufffd%\ufffd\u0564\ufffd\ufffd\ufffdQ\ufffd\ufffd5\ufffd \ufffd\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\t\ufffd;j\ufffd\ufffdB8\ufffd\ufffd\ufffd\u000b\ufffd\u001cQ\ufffd\u0011\u0013\ufffd\ufffd_\ufffd7\ufffd\ufffd\ufffdW\ufffd\ufffd\/\f\ufffd\ufffd{j\ufffd\u001e\u070f\u3397{\u0005\ufffd\ufffdy~ \ufffdK\ufffdu~\ufffd\ufffd\u0017\ufffd\ufffdu)A\u05aa\ufffdF\u000b\ufffd\u001f&_\ufffd3\ufffd\ufffd\ufffd\ufffdW\n\ufffd\ufffd\ufffdw\ufffd}\ufffd\ufffd\ufffdV\ufffd\ufffd\u0011\u04eb\u001a\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd;\ufffd\ufffd\ufffd\u0005\ufffd^\ufffdA\u0013\ufffd\ufffd\ufffd#\ufffd\ufffdWQ\ufffd\ufffdU8\ufffd\u000b(\ufffd\ufffdU\f \ufffd\ufffdU(_\ufffd\u001b]A\ufffd!\ufffd37%\"\u001e\u0017\ufffd5\ufffd\u0481'\ufffd\ufffd\ufffd~S\"\ufffd1DV`\ufffd\u0004\ufffd\u0015\u0632,\ufffd\t\ufffd\u001a\ufffd\u00169r\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdpuwk{\u0003%z\ufffd6Qs\ufffd{\u0001Dj\u00998r\u00cb\u06f5\u0007\u0018<\u001c\ufffd\u01a6\ufffd&6\t\ufffd\u000f\ufffd\ufffd\ufffd\n\ufffd\u0004\ufffd\ufffdf\u020b\ufffdV\ufffdR\u001a\ufffdP5\ufffdEU=\u0005\u0702\u0005\ufffd\ufffd e\u001c\t\u02b9+\ufffd\ufffd\u0001\ufffd3\ufffdBo\ufffd;\ufffd\ufffd\u001e\u000e\ufffdx\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffd\ucd3b\u057e\ufffd{<_\ufffd\ufffdk}gN\u00d1~\ufffdm\ufffd\u001dN\ufffd\ufffd\ufffd\u047f\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffd\ufffdi\u06cerI\ufffd=\ufffd\ufffd\ufffdq\u06c1\u01a10l\ufffd\ufffd\ufffd\u0002Q\ufffd\ufffdZ\ufffd9\ufffd0\ufffdO\ufffd\ufffd\u001f\ufffd}B\ufffd\ufffd\u0005G\ufffdM\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\ufffd\u0001\ufffd\ufffd\ufffdw\n\ufffd\ufffd3n\u06c5\ufffd\ufffd7\ufffd*\u077f\ufffdL\ufffd\ufffd7\ufffd\ufffd=\u0004\ufffd\u001f\ufffd\ufffdVy\u0662\ufffdJ\ufffd\u0430\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffdj\ubd70~H\ufffd\ufffd\u001a\u0002o\u001bN9\u0014S\u0014\ufffd\u000f$\ufffdlm\r\u0381\ufffd\ufffd\ufffd]1\b\ufffd\ufffd|\u001d?\u0017\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\u0018V\ufffd%\u000b\ufffd\u0014\ufffd\ufffdc\f\t\ufffd1\ufffd\u0001\u001a\ufffd$]\ufffd\ufffd\ufffd\ufffd\u0013]\n\ufffd]\ufffdWpT[\ufffdd\ufffdm\ufffd\ufffd\ufffdw9\ufffd\"gus\ufffd\ufffd\ufffd&\ufffd\ufffdf<\u001d\ufffd0\ufffd\ufffd('\ufffd\ufffd@M\u01e8X\ufffd\ufffd\ufffd\u001c[\u001b3\u0007\u0014f\ufffd\u0005\ufffd\u000f\ufffda\ufffd\ufffd\ufffd\ufffd\ufffdQU\ufffdD\ufffd\u02b9\ufffdp\u0019\u0000\ufffdP\ufffdd\ufffd\ufffd\f\ufffdK\ufffd\ufffd}\u0016\ufffd\u0207\ufffd;\ufffd\ufffd\u00046\ufffd\ufffd\u001d\ufffdzek[\u0012S\ufffdA\u0017%%!e{\ufffd\ufffd\u001c\ufffd\ufffd\ufffde\ufffd\ufffd\u0006\ufffd,\ufffd\u0004\ufffd\ufffdR7\ufffd\u0156}\ufffdR\ufffdO\u0017]^Wu\u000fwJ6\ufffd\u04b5jvBc\ufffd'b\ufffd\ufffd#NB\ufffd\ufffd\ufffd{R,\ufffd\ufffd\ufffd\ufffd\ufffd\f\u0014\ufffd\u0017T\ufffd\ufffd\ufffdqG\ufffd\ufffd\u001fYw2\ufffd\ufffd\t=uO;\u02b3\ufffd,\ufffd\ufffd\ufffd\u02bcS>\ufffd:t\ufffd\ufffd\ufffd\ufffdtP\ufffd\ufffd\u04fb\ufffd\ufffd\ufffdu\ufffd\u03a1\ufffd\ufffdeK\ufffd\u0001\ufffdvp\u001b\ufffd\u0555\ufffdVuM\u0002\ufffd(\ufffd1\u0007\ufffd\ufffdh\ufffd\ufffd*\ufffd\b\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdz\ufffdu>\ufffd\u001e\ufffd\ufffd4\ufffd|\ufffd\u0013\n4\u0019\ufffdf\ufffd\ufffd\ufffd\n\ufffd\ufffd\u0010\u0018\ufffd\ufffd\ufffdf\ufffd3\ufffd\u001aT\ufffd2\ufffd\fm\ufffd\u0010\ufffd\u001c\ufffd\ufffd\ufffd\ufffdid\ufffd \u0018\ufffd\u0003&TLX\ufffd\ufffd\u0011\ufffd\ufffd\ufffdA\ufffdi91\t\u00062\ufffdR]8\ufffdY\\3LS\ufffd]#`\ufffdE\ufffdts\ufffd\ufffd.s:\ufffd[\ufffd\ufffd\ufffd*=l\ufffd\u0019\u0016n\u0004x\ufffd\ufffd\ufffd.'\ufffd\ufffd\u0004S\ufffd\ufffde\u0446r\ufffd\u0014^it\ufffd\ufffd^\ufffd\ufffd\ufffd\u0489K5S\ufffd\ufffd\ufffd\ufffdU\nI\ufffd\ufffdQL\b|\ufffd\ufffd\u0616\u030b\ufffd\ufffd\ufffdYt\u0016\ufffdP\ufffd\ufffd&\ufffd\ufffdX\n[\ufffd\u0015UlO\u0000\ufffd !\ufffd\ufffd\ufffdq\ufffd\u001e\u001cX$J\ufffd\n\ufffdf\ufffd{\ufffd\ufffd9\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\u021b+J<\ufffd\ufffdO\ufffdm\r\ufffd\ufffd\ufffd|\ufffd@\u001e|1\u001e\ufffd\u0003%\ufffd\ufffd\u02ab\ufffd\ufffd\ufffd\"\u0482\ufffd\u0011\ufffd\u072d\ufffd1)<\u0005\ufffdk\ufffd}\ufffdT\ufffd\t\ufffd\ufffdd\ufffdD\ufffd\ufffdm\ufffd\ufffdbpr\ufffd\u001e\ufffdf\ufffd\ufffd\u0018\u001c)\ufffd\ufffd{\ufffdt\u0017\ufffd\ufffd)q\ufffd\ufffd2\ufffd@\ufffd\ufffd\ufffd;z.U\ufffd\u0010\ufffd\ufffd\u001d|x\ufffd\ufffdW\u001f5\ufffd\ufffd\u0010\u0541(\u01b5\ufffd\ufffd\u0007A\u000b\u0016HlL\ufffd5-\n.6\ufffd\u02e7\ufffd\ufffdH\ufffd\ufffdaW\ufffd\u0011\ufffd\u001c\ufffdK\ufffd1\ufffd\ufffd\u001d\ufffd-\ufffdG\ufffd\ufffd\th\u0017\ufffd\ufffd*\ufffd\ufffd\ufffd\u035e\ufffd\ufffd\ufffd\ufffd=#\ufffdp\ufffd\ufffdp\ufffd\u0016]\u001a\u0712\ufffdq\ufffd\ufffd\ufffd-x\u0000\ufffd\ufffd\ufffdu'\ufffd\ufffd;\u001d\ufffdOg\ufffd\ufffd\ufffd[\u0002+\/\ufffdj\ufffd.1@\ufffd\ufffd\ufffdD\ufffdt `\u0609\ufffd)\u0012\ufffd&\ufffd>y\u0010\ufffda\ufffd\ufffd*1S~\ufffd]\ufffd\nl\ufffd\ufffdW\u0010\ufffd\ufffd7\u0012\n\u0005\u001c[\ufffd\ufffd\ufffd\ufffdb\ufffd.\ufffd\ufffd\ufffd5\ufffd<\ufffd'\ufffd\ufffd,\u0015\u0018\u000f\ufffd6\b\ufffd\u07d3G\ufffd\u0006O\ufffdj\ufffd+,d\ufffdg\u0014y\ufffdb\ufffd\ufffdA\"\ufffdDS\ufffdL\u001c\ufffd\ufffd)\ufffdC\f\ufffd\u0001M\ufffd\ufffdM\ufffd\ufffd\ufffd.c!\u0010\ufffd\ufffd\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd\ufffd`\u0016c\ufffdeU\ufffdA:\ufffd'\ufffd\u0006\ufffd\ufffd8_\ufffdG\u0011N\ufffd\u028c\ufffd\ufffdWp\u0013\ufffd2\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffdA\ufffd\u0000\ufffd\u0007\ufffd\ufffd#b\ufffd1\ufffd\ufffd\ufffd\ufffdt\ufffd\u0012\ufffd1\\t!\ufffd1lr\u0010\u00017\ufffd\ufffd\ufffdp\ufffdg} %\ufffdlp\ufffd\u073d\ufffdlA2\ufffd\ufffd\ufffd\u065f\nr#n\ufffd#\u001eo\ufffd\u05d9;\ufffdC\ufffd\ufffd{\ufffdfV\u001b\ufffd\u0007|\ufffd\ufffd\ufffd\u029f\u001c\ufffd\u46db\ufffd[\u04cd\ufffd\ufffd\n\ufffd\ufffd3(F\ufffdy\ufffd\u046d\u0019P9\ufffd\ufffd\ufffd\ufffd\"l\ufffd\ufffd\ufffd^\ufffd\ufffd\ufffd x\ufffdkE\ufffd7\ufffd\ufffdkz\ufffd\u0003\ufffds(\ufffd\ufffd\ufffd\u000f\u0000_8\ufffd6\ufffddq\ufffdn\u001bH\u0017\u0016\"EV\ufffd\ufffdU\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdy\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffdQ-\u001a!t\f\u0421\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdO\ufffd&~-\u000eG\ufffd\ufffdI\ufffd`'1p\ufffdpu\ufffd\u0006\ufffd\ufffdR\ufffd\u001e\ufffd|\ufffd\u0006\ufffd-\u0004|\u01f2\ufffd\ufffdA\ufffdH:\/}Gno\ufffd\u0017\ufffdr$\ufffd\ufffdqt\ufffd\ufffd;\uce8cl\u001f\ufffdGn\\\ufffd\ufffd\ufffd6C\u0005|u\ufffdx\ufffd\u0016c\ufffd\u038e\u0005\u00c5\ufffd\u0010\u0013\ufffd\ufffd\ufffd\u0012]6y\ufffdE\ufffd\ufffd\ufffdU58\ufffd\ufffdZ\ufffd\ufffd\ufffd\u001c\ufffdr\u0392\ufffdj\ufffd\ufffd!\u0002\ufffd\u0005\ufffd\ufffd\ufffd5\ufffd6\ufffd\ufffd\u000fx\ufffd\u001d\ufffdk\ufffd;\ufffd\u001e\ufffd\ufffd\u0010:'~\u0002,\ufffdt\ufffdA-\u0005\ufffd\u0016\ufffd\ufffd\ufffd\u0018cT\ufffd\r\u95e5\ufffd\ufffd\ufffd\ufffd\u0006-\u0002\ufffdi\u001a@\u0013\u001fx\ufffd\\\ufffd8o\ufffd<\ufffd\ufffdz\ufffd\u0712\ufffd{N2\ufffd\ufffd\ufffdJ\ufffd\ufffd\ufffd\ufffda\ufffd\ufffd,\u001a:\u001b\u0007[\u001d+\u00e2\u0006\ufffdpY\ufffd\ufffdR\ufffd_l\ufffda|\ufffd\ufffd\u001fv\ufffd\u0013\ufffdW6)@\ufffd\u00045\ufffd\ufffdJ\ufffd\u0005@*\ufffd\u000b\ufffd\r\ufffd5\ufffdPl#\ufffdd:\ufffdi\ufffd\u0424\ufffd\\\ufffd\u0002\u001b\ufffd'\ufffdH\ufffd$f\ufffdJ\ufffdo\ufffd\u0005]\ufffdX\u0012\ufffd\ufffd\u079b\ufffd\ufffdp7m\ufffd\u0004p$\"O9\ufffdg\ufffd\ufffd\u0332\u001cAJ%\ufffd]b\ufffd\u000b\ufffd\ufffd^\ufffd\ufffd~l\ufffd\u0018\ufffdj\ufffd<\u001d&\ufffd(\ufffdUD\ufffd6*\ufffd\u0002\ufffd\ufffds\n\u0012 }\u0003\ufffdc\ufffd\/qj\ufffd,\ufffd\ufffd2\ufffd\ufffd\ufffd\u0095\bvm\ufffd\u0006\ufffd@\ufffd\u0012\u0168\ufffdp\u0016\ufffd\ufffdL\ufffd\ufffd\ufffdi\ufffd\ufffd\ufffdS\ufffd\u0018'\ufffd~\u0004\ufffd\u0001\ufffd\ufffd\u00065\ufffde{\ufffd\ufffd\u7f10\ufffd\ufffd\u0007LW\ufffdOBf.\ufffd(\t9\u0003a\ufffd\ufffd\ufffd\u001bA\ufffd\ufffd\ufffd\u000b\ufffd\u001f\ufffd;\n%\ufffd\ufffd\f\r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdp\ufffd\u0005\ufffd\ufffd\ufffd\\]\ufffd&\ufffd\ufffdK\u001d\\\ufffd\u000e\ufffd\ufffd\u0002\ufffd\ufffd\ufffd\u0007g\ufffd\ufffd\ufffd\u0180\ufffdpc\n\ufffdk8\ufffdBw\ufffd\u0015\ufffd\ufffd\ufffdg\ufffd\ufffd\u0000\u000e\ufffd4\ufffd]\ufffdz \u0001\ufffd{\u0013\ufffd\ufffd\u0017\u000e\ufffd\ufffd;\ufffd]\ufffdz\ufffd\u0003\ufffd\ufffdM\ufffdm\ufffd\ufffd\u0006\u0004$\u0004\ufffd\ufffdf\ufffd\ufffd8\ufffd|,\"+\ufffd\ufffd\u0013kv\u0330\u0013|xK;\ufffd\ufffd \ufffd\u0007\u0002\ufffd\"\u0016\u001c\u0011\ufffd4D\ufffd\ufffd\ufffd>\ufffd)\ufffdKJ\ufffd7w\ufffd\u0004\ufffda$\ufffd\ufffd*\ufffdTe\ufffdjsi\ufffdL\ufffd\u0011\ufffdQ\ufffd\ufffd<\ufffdG\ufffd\u0003s\ufffdX\ufffd\rD\u001ewdy6\ufffd\\\u0012BI\ufffd\ufffdM\u0003%#\u0006\rWY\ufffd\u0003=\ufffd@\ufffd\ufffdR\ufffd\ufffd\ufffd\u00148\ufffd\u0717\ufffd \ufffd\ufffdp'\u001a]\ufffd\ufffd!\ufffd\ufffd$\ufffd\b\r\ufffd!\ufffd\ufffd\u001d\ufffd8%>\u0465\ufffd\u07b3\ufffd\n\ufffd\ufffd)\u001c\ufffd\ufffdi\ufffd\u001b\ufffd}\ufffd\ufffd|\r\ufffd\ufffd\ufffd\ufffd\ud816\udf2c\ufffd`\ufffd\ufffd\ufffd+\ufffd\ufffdH\ufffd\u4413\ufffd\ufffd1\u0012\ufffd1y\ufffd\\q\/\ufffdp$\ufffd\ufffdZAF\ufffd\ufffdgZ9ia\n\ufffd)\ufffdZ\"\ufffdy\u0005\ufffd,\u03f0\ufffd+\ufffd8FL\u07b8X\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd}\u0005\ufffd\ufffd\ufffd\ufffdY\ufffd\/M\ufffd\ufffd[\u0333\u06ec\b\u0007:\u052a\ufffd\ufffd}E\ufffdDn\ufffdJ\ufffd\ufffd\ufffd`\ufffd3\ufffd,\u0015\ufffdI\ufffd\ufffd9\ufffd\u000f\"D\f\ufffd\u0000\ufffd\ufffdW\u0013\ufffd,S\t\ufffd\ufffd\ufffd\u0007\u0003G\u00113\ufffdc`\ufffd\u0010|D\ufffdY1\ufffd,\ufffd\\\" \u009c\ufffd\u0015\u0014\ufffd\u0005\ufffd\ufffd\ufffd&\ufffd(k\ufffd\ufffd{\ufffdL\u0005\ufffdtS\ufffd\ufffdR^C\ufffd@8#<d\u0016\u025b\ufffd-h\u0011\u001c\u0019\ufffd\u00112\ufffdW\u0015b\ufffd\r\ufffd7e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:o\u0011\ufffd\f\ufffd\ufffd\ufffd\u042d\ufffd\u0010\ufffdb)\ufffd8\ufffd\ufffd\ufffd\u00141\ufffdE\u0012\u001c<\ufffd\ufffd\u0011\ufffdW\u0017\ufffdC\ufffd\u04b4(\ufffd\ufffd]t\u0018V\ufffdv\"\ufffd\u001b[\ufffd\u07b0(\ufffd\ufffd\ufffdv\ufffd\ufffd&\ufffd\u001d\ufffd\ufffd\ufffd\u0271\u0003{P\ufffdF6D}\ufffd\ufffd\ufffd=\u0006\ufffd\ufffd\u0000\ufffd\u0011\ufffd\ufffd0\ufffdmp\ufffdI\ufffd\ufffd\ufffd\u00a7\u0018^?,\ufffd)\ufffdq\ufffdKS\ufffd\ufffdg\ufffdbdY\ufffd\u001a-\ufffd\ufffdF\ufffd\ufffd\ufffdj\ufffd\u000b\ufffd\ufffd\ufffd]\u03adp\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffd[`?R\\|\ufffd[\ufffd\ufffd.\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd\ufffd\n\ufffd\ufffd48t2\u0000\u0017S\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"%\ufffd\ufffd\ufffd\ufffd-(\ufffd\ufffd\ufffd\u0424\ufffdG\ufffdB\ufffdw\ufffdR\ufffd!\ufffd\ufffd\u0015\ufffd\u0080\ufffdEW\ufffd#-\ufffd\ufffd\ufffd[\ufffdl\ufffd?\ufffdf\ufffd\u001f\ufffd\ufffdm\u001b\u001e|>\ufffd,\ufffddb\ufffd\ufffdyd\ufffd8\u0005vc\ufffdM\ufffd\u0014B\u6cb7`\u00073\ufffd\n]\u0006n\ufffd\ufffd\/?\ufffd\u001d\u0408sX\ufffd\ufffd\ufffd\ufffdFR\ufffdp\ufffd+\u024fq\u000e\ufffd\ufffd\ufffd\ufffdS0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7Rt\ufffd\u0006=\ufffd\ufffd\ufffd\ufffdB\ufffd\u0002\ufffd\ufffd\ufffd\ufffd\f\f\ufffd\"\f\ufffd{\ufffd\n\ufffdV\ufffdW_\ufffd&\ufffd\n\ufffd(\ufffd\ufffd\ufffd\u0013\ufffdN\ufffd\u069an\ufffd\ufffd67\u0017\ufffd\ufffd\ufffdD\ufffd\ufffdv\ufffd\ufffd\ufffdH9:c[\ufffd\ufffd\ufffd\u0006\ufffdX\ufffd\"\ufffd \ufffd\ufffde\ufffdm\ufffd^a\ufffd\ufffd^\ufffdE\"'\ufffd\u000b\ufffd\ufffd\ufffd\u0016MY7\ufffd\rT\f\ufffdPV\ufffd\ufffdn\ufffdH\u0017j\ufffd\ufffd\ufffdY4\ufffd\ufffd\ufffd\ufffd|A:\ufffd|\ufffd\u001c\ufffd\ufffd\n\ufffd\ufffd\u0001\ufffd?\ufffd}\nendstream\nendobj\n5 0 obj\n4797\nendobj\n2 0 obj\n<< \/Type \/Page \/Parent 3 0 R \/Resources 6 0 R \/Contents 4 0 R \/MediaBox [0 0 612 792]\n>>\nendobj\n6 0 obj\n<< \/ProcSet [ \/PDF \/Text ] \/ColorSpace << \/Cs1 7 0 R >> \/Font << \/TT5.0 16 0 R\n\/TT2.1 11 0 R \/TT3.1 13 0 R \/TT1.1 9 0 R \/TT4.1 15 0 R >> >>\nendobj\n17 0 obj\n<< \/Length 18 0 R \/N 3 \/Alternate \/DeviceRGB \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd\ufffdwTS\ufffd\u0016\ufffd\u03fd7\ufffd\ufffd\u0012\" %\ufffd\u001az\t \ufffd;H\u0015\u0004Q\ufffdI\ufffdP\u0002\ufffd\ufffd&vD\u0005F\u0014\u0011)VdT\ufffd\u0001G\ufffd\"cE\u0014\u000b\ufffd\ufffdb\ufffd\t\ufffd\u0010P\ufffd\ufffdQDE\ufffd\u074ck\t\ufffd5\ufffd\u079a\ufffd\ufffdY\ufffd\ufffd\ufffd\ufffd\ufffdg\ufffd}\u05fa\u0000P\ufffd\ufffd\u0004\ufffdtX\u0001\ufffd4\ufffdX\u0014\ufffd\ufffd\ufffd\\\u0012\u0013\ufffd\ufffd\ufffd\u0002\u0018\u0010\u0001\u000eX\u0001\ufffd\ufffdff\u0004G\ufffdD\u0002\ufffd\ufffd\ufffd=\ufffd\ufffd\ufffdH\u01b3\ufffd\ufffd.\ufffdd\ufffd\ufffd,\ufffdP&s\ufffd\ufffd\ufffd\"7C$\u0006\u0000\nE\ufffd6<~&\u0017\ufffd\u0002\ufffdS\ufffd\ufffd\u00192\ufffd\u0004\ufffd\ufffd\ufffd)2\ufffd12\u0016\ufffd\t\ufffd\ufffd\"\ufffd\u012fl\ufffd\ufffd\ufffd+\ufffd\u0258\ufffd&\ufffd\u001aY\ufffd\u0019\ufffd4\ufffd\ufffd\ufffdP\u079a%\u18cc\u0004\ufffd\\\ufffd%\ufffdg\ufffd|\u0007e\ufffdTI\ufffd\u0000\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffdL\u00000\u0014\ufffd_\ufffd\ufffd&\ufffdl\ufffd2E\u0014\u0019\ufffd\ufffd\u0002\u0000\b\ufffd\ufffd9\ufffdr\u000e\ufffd\ufffd9h\ufffd\u0000x\ufffdg\ufffd\u0004\ufffdIb\ufffd\u0011\u05d8i\ufffd\ufffd\ufffdf\ufffd\ufffdS\ufffdb1+\ufffd\ufffdM\ufffdxL\ufffd\ufffd\ufffd\f\ufffd0\u0017\ufffd\ufffdo\ufffdE\u0001%Ym\ufffdh\ufffd\ufffd\ufffd\u001c\ufffd\ufffdY\ufffd\ufffdh\ufffd\ufffd\ufffd\ufffd\u001e~S\ufffd=\ufffdz\ufffdU\ufffd&\ufffd\u03deA\ufffd\ufffdY\ufffdl\ufffd\/\ufffd\u0016\u0000\ufffd$Z\ufffd\u001d\ufffd\ufffd\ufffdU\u0000\ufffdm\u0006@\ufffd\ufffdO\ufffd \u0000\ufffd\u0005\u0000\ufffd\u079c\ufffd\u001e\ufffdl^\ufffd\ufffd\ufffd\f'\u000b\ufffd\ufffd\ufffdls\u0001\ufffdk.+\ufffd7\ufffd\ufffd\ufffdo\u02bf\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffdV;\ufffd\u0017?\ufffd#I\u00153eE\u59a7\ufffdKD\ufffd\ufffd\f\u000e\ufffd\ufffdd\ufffd\ufffd\u0010\ufffd\ufffd\ufffd9i\ufffd\ufffd\ufffd,\ufffd\ufffd\ufffd\u0017\ufffd\ufffdUQ\ufffd\t\ufffd\ufffdh\ufffd\ufffd<\ufffdX\ufffd.d\n\ufffd\ufffd\ufffd\u00186'\u0007\u0019~\ufffdk\u0014hu_\u0000}\ufffd9P\ufffdI\u0007\ufffdo=\u0000C#\u0003$n?z\u0002}\ufffd[\u00101\n\u023e\ufffdh\ufffd\ufffd\ufffds\ufffd2z\ufffd\ufffd\ufffd\u001f\u000b\\\ufffdn\ufffdLA\"S\ufffd\ufffd\f\ufffddr%\ufffd,\u0019\ufffd\u07c4l\ufffd\u0002\u0012\ufffd\u0007t\ufffd\n4\ufffd.0\u0002,`\r\u001c\ufffd3p\u0003\ufffd \u0000\ufffd\ufffdH\u0010\u0003\ufffd\u0003.H\u0002i@\u0004\ufffdA>\ufffd\u0000\nA1\ufffd\u0001v\ufffdjp\u0000\u0501z\ufffd\u0004N\ufffd6p\u0006\\\u0004W\ufffd\rp\u000b\f\ufffdG@\n\ufffd\ufffdK0\u0001\u0781i\b\ufffd\ufffd\u0010\u0015\ufffdA\ufffd\ufffd\u0016\ufffd\u000f\ufffdB\ufffd\u0010\u001bZ\byCAP8\u0014\u0003\ufffdC\ufffd\ufffd\u0010\ufffd@\ufffd\ufffd&\ufffd\u0018*\ufffd\ufffd\ufffdCP=\ufffd#t\u001a\ufffd\b]\ufffd\ufffd\ufffd\u0007\ufffd 4\u0006\ufffd\u0001}\ufffd\u0011\ufffd\u0002\ufffda\r\ufffd\u0000\ufffd\ufffd\u0670;\u001c\bG\ufffd\ufffd\ufffdDx\u0015\ufffd\u0007\u0017\ufffd\ufffd\ufffdJ\ufffd\u0016>\u000e\ufffd\ufffd\u0017\ufffd\u001b\ufffd\u0000,\ufffd_\u0093\b@\ufffd\b\u0003\ufffdFX\b\u001b\ufffdDB\ufffdX$\u0001\u0011!k\ufffd\"\ufffd\u0002\ufffdE\ufffd\ufffd\u000e\ufffd\u001b\ufffd\ufffdH\ufffdq\ufffd\u0003\u0006\ufffd\ufffda\ufffd\u0018\u0016\ufffd\u0019\ufffdY\ufffd\ufffdbVa\ufffdbJ0\u0558c\ufffdVL\u0017\ufffd6f\u00103\ufffd\ufffd\ufffd\ufffdb\u0571\ufffdX'\ufffd?v\t6\u0011\ufffd\ufffd-\ufffdV`\ufffd`[\ufffd\ufffd\ufffd\u0003\ufffda\ufffd;\u001c\u000e\ufffd\ufffd\u0019\ufffd\u001cp~\ufffd\u0018\\2n5\ufffd\u0004\ufffd\u000f\u05cc\ufffd\ufffd\ufffd\ufffd\r\ufffd&\ufffdx\ufffd*\ufffd\u0014\ufffd\u000f\ufffds\ufffdb|!\ufffd\n\u001c\u001e\u07cf\u001f\u01bf'\ufffd\tZ\u0004k\ufffd\u000f!\ufffd $l$T\u0010\u001a\b\ufffd\b\ufffd\ufffd\u0011\ufffd4Q\ufffd\ufffdOt\"\ufffd\u0010y\ufffd\\b)\ufffd\ufffd\ufffdA\ufffdI\u001c&N\ufffd\u0014I\ufffd$\u0017R$)\ufffd\ufffd\ufffdTIj\"]&=&\ufffd!\ufffd\ufffd:dGr\u0018Y@^O\ufffd$\ufffd _%\u000f\ufffd?P\ufffd(&\u0014OJ\u001cEB\ufffdN9J\ufffd@y@yC\ufffdR\r\ufffdn\ufffdX\ufffd\ufffd\ufffd\ufffdZO\ufffdD}J}\/G\ufffd3\ufffd\ufffd\ufffd\u026d\ufffd\ufffd\ufffdk\ufffd\ufffd{%O\ufffd\u05d7w\ufffd_.\ufffd'_!J\ufffd\ufffd\ufffd\ufffd\u0002Q\ufffd@\ufffdS\ufffd\ufffd\ufffdV\ufffdF\ufffd\ufffd=\ufffdIE\ufffd\ufffd\ufffdb\ufffdb\ufffdb\ufffdb\ufffd\ufffd5\ufffdQ%\ufffd\ufffd\ufffd\ufffd\ufffd\u0012O\ufffd@\ufffd\ufffd%\ufffd!\u001aB\u04e5y\u04b8\ufffdM\ufffd:\ufffde\ufffd0\u001dG7\ufffd\ufffd\u04d3\ufffd\ufffd\ufffd\u001f\ufffd\ufffd\te%e[\ufffd(\ufffd\u001c\ufffd\u001a\ufffd\ufffdR\u0006\ufffd0`\ufffd3R\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffdi^\ufffd\ufffd)\ufffd\ufffd*n*|\ufffd\"\ufffdf\ufffd\u0001\ufffd\ufffd\ufffdLUo\ufffd\u0014\u055d\ufffdm\ufffdO\ufffd0j&jaj\ufffdj\ufffd\ufffd.\ufffd\ufffd\u03e7\ufffdw\ufffd\u03dd_4\ufffd\ufffd\ufffd\ufffd\uac3a\ufffdz\ufffd\ufffdj\ufffd\ufffd\ufffd=\ufffd\u001a\ufffd\u001a\ufffd\u001a\u0019\u001aU\u001a\ufffd4\ufffd5\u0019\ufffdn\ufffd\u025a\ufffd\ufffd4\u01f4hZ\u000b\ufffd\u0004Z\ufffdZ\ufffd^0\ufffd\ufffd\ufffd\ufffdTf%\ufffd\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffd-\ufffd>\ufffd\u076b=\ufffdc\ufffd\ufffdXg\ufffdN\ufffd\ufffd\u0013]\ufffd.[7A\ufffd\\\ufffdSwBOK\/X\/_\ufffdQ\ufffd>Q\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd[\ufffd\ufffd\ufffd \ufffd`\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffda\ufffda\ufffd\ufffdc#\ufffd\ufffd\ufffd\ufffd*\ufffdZ\ufffd;\ufffd8c\ufffdq\ufffd\ufffd>\ufffd[&\ufffd\ufffd\ufffdI\ufffdI\ufffd\ufffdMS\ufffd\ufffd\ufffdT`\ufffd\u03f4\ufffd\fk\ufffdh&4\ufffd5\ufffd\u01e2\ufffd\ufffdYY\ufffdF\u05a09\ufffd<\ufffd|\ufffdy\ufffd\ufffd+\u000b=\ufffdX\ufffd\ufffd\u0016\ufffd\u0016_,\ufffd,S-\ufffd,\u001fY)Y\u0005Xm\ufffd\ufffd\ufffd\ufffd\ufffd\u011ak]c}\u01c6j\ufffdc\ufffd\u03a6\ufffd\u6d6d\ufffd-\ufffdv\ufffd\ufffd};\ufffd]\ufffd\ufffd\u0016\ufffdN\ufffd\ufffd\ufffd\u000e\ufffd\"\ufffd&\ufffd1\u0007=\ufffdx\ufffd\ufffd\u000e\ufffd\ufffdtv(\ufffd\ufffd}\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0007'{'\ufffd\ufffdI\ufffd\u07ddY\ufffd)\ufffd\r\u03a3\u000b\f\u0017\ufffd\u0017\ufffd-\u0018r\ufffdq\ufffd\u001cr\ufffd.d.\ufffd_xp\ufffd\ufffdU\u06d5\ufffdZ\ufffd\ufffd\ufffdM\u05cd\ufffdv\ufffdm\ufffd\ufffd\ufffd=\ufffd\ufffd\ufffd\ufffd+\u000fK\u000f\ufffdG\ufffd\u01d4\ufffd\ufffd\ufffd\u001a\ufffd\u000b^\ufffd\ufffd\ufffdW\ufffdW\ufffd\ufffd\ufffd\ufffdb\ufffdj\ufffd>:>\ufffd>\ufffd>\u0013\ufffdv\ufffd\ufffd}\/\ufffda\ufffd\u0002\ufffdv\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdO\u00048\u0004\ufffd\t\ufffd\n\ufffd\u0004F\u0004V\u0007>\u000b2\t\u0012\u0005u\u0004\ufffd\ufffd\u0001\ufffd\ufffd\ufffd\u001f\/\ufffd_$\\\ufffd\u0016\u0002B\ufffdCv\ufffd<\t5\f]\u0015\ufffds\u0018.,4\ufffd&\ufffdy\ufffdUx~xw\u0004-bEDC\u013bH\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd\u0016K\u0016wF\ufffdG\ufffdE\ufffdGME{E\ufffdEK\ufffdX,Y\ufffd\ufffdF\ufffdZ\ufffd \ufffd=\u0016\u001f\u001b\u0015{$vr\ufffd\ufffd\ufffd\ufffdK\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd.3\\\ufffd\ufffd\ufffd\ufffdr\ufffd\ufffd\ufffd\u03ee\ufffd_\ufffdYq*\u001e\u001b\u001f\u001d\ufffd\u0010\ufffd\ufffd\u0013\u00a9\ufffdL\ufffd\ufffd_\ufffdw\ufffd\u0004\u05d3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd]\ufffde\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd]\ufffdcI\ufffdI\u0015I\ufffd\u0002OA\ufffd\ufffdu\ufffd_\ufffd\u4a54\ufffd\ufffd\ufffd)3\ufffd\u0469\ufffdi\ufffd\ufffd\ufffd\ufffd\ufffdB%a\ufffd\ufffd+]3='\ufffd\/\ufffd4\ufffd0C\ufffd\ufffdi\ufffd\ufffdU\u0013\ufffd@\u0451L(sYf\ufffd\ufffd\ufffd\ufffdL\ufffdH\ufffd$\ufffd%\ufffdY\u000b\ufffdj\ufffd\ufffdgGe\ufffd\ufffdQ\ufffd\u0011\ufffd\ufffd\ufffd\ufffdn\ufffd\u001d\ufffd\ufffd\ufffd\ufffd~5f5wug\ufffdv\ufffd\ufffd\ufffd\ufffd5\ufffdk\u000e\ufffd\ufffd\u05ae\\\u06f9Nw]\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdm mH\ufffd\ufffd\ufffdF\u02cde\u001b\ufffdn\ufffd\ufffd\ufffdQ\ufffdQ\ufffd\ufffd`h\ufffd\ufffd\ufffd\ufffdB\ufffdBQ\ufffd-\ufffd[\u000el\ufffdl\u0015l\ufffd\ufffdf\ufffd\ufffdj\u06d7\"^\ufffd\ufffdb\ufffd\ufffd\ufffdO%\u0712\ufffd\ufffdY}W\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffdv\bw\ufffd\ufffd\ufffd\ufffdX\ufffdbY^\ufffd\u042e\ufffd]\ufffd\ufffd\ufffd\ufffd\ufffdW\ufffdVa[q`\u000fi\ufffdd\ufffd\ufffd2\ufffd\ufffd\ufffdJ\ufffdjG\u0567\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd\ufffd\u05ff\ufffdm\ufffd\u0001\ufffd\u0003\ufffd\u0007>\u001e\u0014\u001c\ufffd\ufffd\ufffdPk\ufffdAm\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd\uaebfg_D\ufffdH\ufffd\ufffdG\ufffdG\ufffd\ufffd\u008fu\ufffd;\ufffd\ufffd7\ufffd7\ufffd6\u008d\ufffd\u01b1\ufffdq\ufffdo\ufffd\ufffd\ufffdC{\u0013\ufffd\ufffdP3\ufffd\ufffd\ufffd\u00048!9\ufffd\ufffd\ufffd\ufffd\u001f\ufffd\f<\ufffdy\ufffd}\ufffd\ufffd'\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffdZ\ufffd\ufffd\ufffd\u0589\ufffd\ufffd6i{L{\ufffd\ufffd\u04dd\u001d\ufffd\u001d-?\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdgK\u03d1\ufffd\u0015\ufffd\ufffd9\ufffdw~\ufffdB\u0185\ufffd\u0017\ufffd:Wt>\ufffd\ufffd\ufffd\u049d\ufffd\ufffd\ufffd\ufffd\u02c1\ufffd\ufffd^\ufffdr\ufffd\u06fd\ufffd\ufffdU\ufffd\ufffdg\ufffd9];}\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\ufffd\ufffd_\ufffd~i\ufffd\ufffdm\ufffd\ufffdp\ufffd\ufffd\ufffd\u3b4e\ufffd\u0005}\ufffd\ufffd]\ufffd\/\ufffd\ufffd\ufffd}\ufffd\ufffd\ufffd\u001b\u0003\ufffd\u0006\ufffd\ufffd.\ufffd{\ufffd^\ufffd=\ufffd}\ufffd\ufffd\ufffd\u0007\ufffd\u000f^?\ufffdz8\ufffdh\ufffdc\ufffd\ufffd'\nO*\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffd`\u03f3\ufffdg\ufffd\ufffd\ufffdC\/\ufffd\ufffd\ufffd\ufffdO\ufffd\u0005\u03e9\ufffd+F\ufffdF\ufffdG\ufffdG\u03cc\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffd\ufffd\u02cc\ufffd\ufffd\u317f)\ufffd\ufffd\ufffd\ufffd\u046b\ufffd~w\ufffd\ufffdgb\ufffd\ufffd\ufffdk\ufffd\ufffd?J\u07a8\ufffd9\ufffd\ufffd\ufffdm\ufffdd\ufffd\ufffd\ufffdwi\uf9a7\ufffd\u07ab\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffdc\ufffd\u01d1\ufffd\ufffdO\ufffdO\ufffd\ufffd\ufffd?w|\t\ufffd\ufffdx&mf\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nendstream\nendobj\n18 0 obj\n2612\nendobj\n7 0 obj\n[ \/ICCBased 17 0 R ]\nendobj\n20 0 obj\n<< \/Length 21 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd[\ufffds\u0736\u0011\ufffd\ufffd\u0005\ufffd\ufffd\ufffd<Y\ufffd\t\u0010|Y\ufffdlYU\u001b\ufffd\ud9a1\udea8\ufffd4Q\ufffd&\ufffd\ufffd\ufffdc\ufffdM\ufffd\ufffd\ufffd\ufffdv\u0017\u0000\u07f8\ufffd8\ufffddL\u0011\u0004\u0016\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffdT\u001b\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\ufffdW\ufffd\ufffd\ufffd\ufffdNo?\ufffd9\ufffd\ufffd\ufffd\u0016\ufffdre\ufffd\ufffd\ufffd\u001f\ufffd6\ufffdh\ufffd6\ufffde\ufffd\ufffdIn\ufffd\ufffd\u0017Wi)\ufffd\ufffd\ufffd\ufffd>}|ue\ufffdNuz\ufffd.\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffd\u0015O;$\ufffd\ufffd-\u001ae\ufffd\ufffd\ufffd>\u0001\ufffd\\\ufffd:\/\u04eb[\ufffd\ufffdI\ufffdCHjO\ufffd\ufffd4\ufffd\u001flR\ufffdf\ufffd\u0006\ufffdd\ufffd&=\ufffd\ufffd\ufffd&5iv\ufffd\ufffd$xy\ufffdI\ufffdI\ufffd>\ufffd\ufffdW\ufffdRi\ufffd@\u001e?;\ufffd\ufffd0'\ufffd\ufffd\u0018O\ufffd\ufffd\u0405VUUT\ufffd\ufffd;\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffdA\ufffd%\ufffduQ+=\u13a0\ufffd\ufffd\u0004\ufffdd\ufffd=@\ufffdf\ufffd C\ufffdu\ufffd\u001dn\ufffd\"\ufffd^3\ufffd\u0007\ufffd\ufffd\u0001\ufffd\ufffdD\ufffd\ufffd\ufffdMZ\ufffdN\ufffdM\ufffd\u0001j\ufffd\ufffd\ufffd\r\ufffd\ufffd\u0001B\u000e:\u000b-\ufffd\u0002KO\ufffd\ufffd\u001c3\ufffdn\ufffd$\ufffd>P\u0002T,t\ufffd\ufffd\ufffd\ufffd\u0624\r[\u001af|\ufffd\ufffd\u0000\ufffd@8c\u0002\n\ufffdgL3\ufffds\ufffd\ufffd2\ufffd\ufffd,-\ufffdCB\ufffd\ufffd+\ufffdHX\ufffd\ufffd9c\u0627\ufffd\u0005 \u0006\ufffd\ufffd\u03d0\b&\ufffd\ufffdd,\ufffd\ufffd$\ufffd{\ufffdi\ufffdI\ufffds\/\u04f2o\ufffdO\ufffd=J\ufffd\ufffdd^M\r%\ufffd\u001a\ufffd\">\ufffd\u0006\ufffdI\ufffdQ \ufffd^\ufffd]Bf\ufffd\ufffd,=\ufffd[~w\ufffd\u000b\u0005\ufffd!o\ufffd\t2\ufffdx\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\u0003wh\ufffd<~0\ufffd\ufffd\u001d\ufffd\u0012a\ufffd_z(\ufffd\r\ufffd\u0123\u0007\u00d2\ufffd\ufffd\u0005\u0384\u0002\ufffd\"A\ufffd\ufffdu2\ufffd\u5dde\ufffd\u000b\ufffd\ufffd1\u0006\ufffd\ufffd\ufffd\ufffd\ufffdF\ufffd\ufffd1\ufffdQ\ufffd\ufffd\u000e\u001f\ufffdS&{\u0003Z\u0001\ufffd!)(\ufffd\ufffd\u0016\ufffdN\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd9?\u0001-\ufffdY\ufffd\ufffd0\ufffd\ufffd)\t\ufffd\u000e]\u0011\u0001\u0011wF\ufffd!\ufffd\ufffd3(%\ufffd\u06df6\ufffdR\u0002\u0005e\u0129\ufffdA\u0004\ufffdO\t\ufffd2\u0012\ufffd\u0011\ufffdNH-@\ufffd\ufffd\u0002g:\ufffd7L\ufffd\u0014\ufffdO\ufffd\ufffd@\ufffd\u001b8\u0004z\ufffd\ufffd6\u0012V'\u0019\u0002\u0018\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffdK6\ufffd\ufffd2\ufffdT\u001eO\ufffd\ufffd?I7\ufffd1\ufffd<\ufffd\n\ufffd\u0014\ufffdD\ufffd)N\ufffd}q,\ufffd\ufffd\ufffd#\u0019\"\ufffdv\ufffd\u0014\ufffd\u0000\u001d8\ufffd\ufffd\ufffdeL\ufffd\ufffd\ufffd\ufffdZdj\ufffdSd\ufffd>\ufffd\u0012\ud4f9$\u0017r5P\ufffdD\"\ufffd\u0004H\ufffd\ufffd\u0018\ufffd\ufffd\ufffd\u0000s\ufffdgpP'.bKL\ufffd\ufffd}\ufffd\ufffd\u0016\ufffd\ufffd$;p\ufffd\ufffd\ufffd'\ufffd\ufffd\ufffd\ufffd&B\u0512\u0004\ufffd2\ufffd$\u0012\ufffd\u001f*D\u001f\ufffdg\ufffd\u000b\u0019&\ufffd\ufffd:\ufffd\ufffdq '.\ufffd&\ufffd \ufffdd\ufffd\ufffd+\ufffd\ufffdj\ufffd\ufffdt\u0012^Ct\ufffdt0\u000b\ufffd\u0019\u0019,\u0310>@5\b\ufffd\ufffd\u0002\ufffdP\u0014I\n\ufffdEg\ufffde\ufffd,\ufffd0\ufffd\ufffd\u0000\ufffd9\ufffd2\ufffd\"\ufffd\u0000\"$\ufffd\ufffdY\ufffd\u0019P\ufffd\ufffd>\ufffd\ufffd\u0000>\ufffd\u000b\ufffd@\ufffd\ufffd\u0018\ufffdd:x\ufffd\ufffd\ufffd\ufffdF@l\"\n\ufffdFW\u0019@\u0001\u0001\nq\ufffd &\ufffdrD\u061fE\u001f\ufffd\u0019\u001c\u0011\u0019\ufffd\ufffd\ufffd\ufffd\u0004\ufffdK\ufffd\ufffdK\u0017G\ufffd\rs\u000f\ufffdi\ufffd\ufffd\ufffd\u0010\ufffd`W\u0006\u001e\ufffd|n\ufffdc\u0014\ufffd\ufffd\ufffdp\ufffd:&dT\u0000\ufffd\ufffd\u0005p\ufffd\u0014\ufffdh8\u001e\ufffd7 \ufffd\ufffd\ufffd\ufffdl\ufffd\ufffdm5\ufffdc\ufffdw\ufffd\ufffd\ufffd\u0012\ufffd\ufffdrUZ\ufffdQs\ufffdn^\ufffd\ufffd\ufffd\u0016\ufffd\ufffd%q\u000eAH`\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\rb\u0016\t\u0004\ufffd\ufffd\ufffd{@'\u0016\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffdB\ufffdJ\ufffd\ufffd\ufffd,\ufffdiv\ufffd\ufffdC\ufffd\u001cf\ufffd\u0eae\u000b\ufffd\ufffd\u0007*\ufffd\u00070\u016c&\ufffd1\\\ufffd\ufffdU\u0018\"M\ufffd\ufffds\u0012 \ufffd(:\ufffdl\ufffd\/\ufffd\ufffd0\ufffd;$\ufffd_\ufffdm\ufffd\ufffdN\ufffd\ufffd\u0002E7\ufffd\ufffd\ufffd\u0013\u000fP\ufffdU\b\u0007<\u0004\ufffd\ufffd\ufffd2+8\ufffd\ufffd\ufffd_\ufffdDp\ufffd\u0004\ufffd.\ufffdr\u0000#\ufffdC\ufffd\u0015a\ufffd}\ufffdQ\ufffdYPr\u0001\ufffd\u0011 \u0017\ufffd\u0004\ufffd\ufffd\ufffd|NE\ufffd.\ufffd\ufffda\ufffd}=E\ufffdw\ufffdj\ufffd,Y\ufffd\ufffdkU\ufffd\u001e\ufffd\ufffd\ufffdZ\ufffdL\u042d}.\"\ufffdm\u001a\ufffd\ufffd\ufffd\ufffd!\ufffd\u0005F\u001d\ufffd\u001e\ufffd`\ufffdl\ufffd\ufffd\ufffdb\ufffd>e\ufffd\ufffd.\r\ufffd\ufffd\ufffdc\ufffd\ufffd\ufffd\ufffdkm\ufffd>\ufffd!}'\ufffd\ufffd9\u0010\ufffdc\u0005\u001c\ufffd\ufffd\u0776R\ufffdj~\t?\"\ufffd\ufffdb\ufffda*S\ufffd\ufffd\ufffd-~\ufffd\/K\ufffd'X\ufffd.\ufffd\u0539VyMa\ufffdOy\ufffd^\ufffdr\ufffd\\\u001a#\ufffd\f)A\ufffd\ufffd\ufffd\ufffd}@\ufffd-\ufffd\ufffdc\b0'\ufffd\ufffd\u0006Q\u0004v\ufffd?\ufffdT=\ufffdT\ufffd\ufffd=\ufffd\ufffdSU>Du\u0619\ufffd\ufffd\u732dQq\u0018\/GdS \ufffdI\ufffdz\t\u0016Sj)`\u0004\ufffd\ufffd\u0221<_\"\ufffds\ufffd\ufffd-T\ufffd(\ufffd\ufffd\ufffdvIu\ufffdZ\ufffd\u000f\u0002\ufffd\u0283\ufffd\ufffdwT+\u0014\u0001\ufffd\ufffdJ\ufffd\u000b\ufffd\ufffd7Y( \n\ufffd\ufffd,\ufffd\ufffd\u0005B\u0003^\ufffd7\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd$\ufffd\ufffd\ufffdW\ufffd\ufffd#\ufffd\u001a\ufffdu\u0014$\u07947T\u00869\ufffd\uf570\ufffdf\\I\ufffd*\ufffd+\u0019&4\ufffd\u001cH\ufffd\u0001-E@M\ufffd\ufffd\u0011\u0001\ufffdI\ufffdvNl\t[\ufffd{:H?\u05adX9y\ufffd\ufffdvP\ufffdd(T\ufffd2Zn\"Z\u0016\ufffdB\ufffd\/n\ufffd\ufffd\ufffd\ufffd\ufffd77\fBi\u00059u\ufffd^+@\u0001\\V\ufffdY\ufffdn\ufffd\ufffd\ufffdV&\ufffd\u0018+\ufffd\u0010\ufffdI\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\u0019-\ufffd\ufffd#\u0006\u04c0?\ufffd\n\ufffd\ufffd\u0000J@\u0013\ufffd\u56c4[\ufffd\r!\rG\u0006\ufffd\ufffd&(\ufffdG!\ufffd\ufffdp\u0014\ufffd\ufffd\ufffd\u0001\ufffd:\ufffd\u0011I'\ufffdl2q\u067aQu\ufffd\ufffd\u0001d\ufffd(1^\ufffdgs.\ufffd\ufffd\ufffd\ufffdp\u001b\ufffd4F\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019 \ufffd\ufffd\u0014dMb\ufffd\ufffd\ufffd\ufffd[\u001c6\u0011\\\u0015\u00126\ufffd;X\ufffd$\ufffd\ufffd\ufffd\ufffd\ufffd\/\ufffd%\u00008z\u0006\ufffd\ufffd\u001b\ufffd\u00aafW\ufffd\u001bl\ufffd\ufffd\u0006\ufffd}n\u0007(\ufffdX\ufffd\ufffd\ufffdTi\ufffd\ufffd5\ufffd\ufffd\ufffd+\ufffdqF\ufffdda\ufffd\u0001$e5w\ufffd\ufffdu\ufffdf0I\ufffd`&*.\ufffdUEY\ufffd k\b\ufffd\ufffdbf6~\u000b\u06e8\ufffd\u0136\ufffdV\ufffd:r\ufffd\ufffdal\ufffdl2(\ufffd\ufffd\ufffd\ufffdxO3V\ufffd3%\ufffdZV\ufffd82\ufffd\ufffd8r\ufffd\"\ufffd\ufffd\u0018\ufffd!e\u019ft[*[\ufffd\u0000\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd{\ufffd\r\ufffd\u0011\u0005\ufffd\ufffdA\u0005V\ufffd0\u04f3\ufffd^\ufffd\ufffdh\ufffd2;qQ\ufffd\ufffdE\ufffd\ufffd\ufffdb\ufffd=d\u000f00A\u0015\ufffdR\u001a\ufffd\ufffd^\ufffd\ufffd\ufffd\u0014\t\ufffd\ufffd\u01b1`]&\ufffdZ\ufffd}\ufffd!\ufffd\ufffd\u000b\ufffdAE\ufffd0\ufffd\ufffd BQ\ufffdj\u0005\ufffd\ufffd@r63\u0000i\u001c\u0002h\ufffdiI\ufffdBC;\ufffd\ufffd[,*~lx\ufffd\ufffd_&\ufffd\ufffd\f\ufffd\u0747\ufffd\ufffd#\ufffd\f*\ufffd\u0012\ufffd\ufffd\ufffda\ufffdXe5\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffdS#\ufffdl8\u0016u\ufffd\u0013($\ufffdE\u0015\ufffd\ufffd-!\ufffdY\u013c\ufffd\nK\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffdV4N6VUecv\"7]\\\ufffd\ufffd\u0242\"@\ufffd\ufffd\/\ufffd\ufffd\ufffd\u0011\ufffd4\ufffd\ufffd\ufffdy(\ufffd'\ufffdc\ufffd`\u05e8\ufffd\ufffdd_\ufffdF\ufffd\ufffd\ufffd\u0016P\u01a0\ufffd2\ufffd\u000bz\ufffd-\u0004\ufffdP\ufffd\ufffdD\u0018J\u001f\ufffd+\ufffd\ufffd\ufffd\ufffdES\ufffdE\ufffd\ufffd\ufffdS\u0016\ufffd\ufffd\ufffdVM\ufffdU\ufffd1\ufffd\ufffdz\ufffd\u00f5\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffd\u001d\u0446\ufffd!\ufffd\ufffd hK9R\ufffd\ufffd\ufffd\ufffdl\ufffd.\ufffd\\\ufffd\u0012~\u001bN\ufffd\u0000:\ufffdc\n\ufffd3\ufffd\ufffd\ufffdN\ufffd\ufffd}\u000f\ufffd\ufffd\ufffdU\ufffdG\ufffd\ufffd\ufffdLPwG\/Lo\ufffdv\ufffdA1\ufffdKE\ufffd\u0013\u04bc\u0000\ufffd}\u0523X\ufffdrS\ufffd6\ufffd5-\ufffd\ufffd,0\ufffdK\ufffd\ufffd\ufffd\ufffd6\u0016\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"A\ufffdRJ\ufffd\ufffd\ufffd\u07ddZ$#\ufffd\u0000U\ufffd[\u0004\u001d*}\ufffd\u0298s5\ufffd\u001eX\ufffd\ufffd\/a\u0015\u0013\ufffdt\u001fW\ufffd_\u0017X,\ufffdr\u0002\ufffdu>\ufffdj\ufffd\ufffd\ufffd8\ufffd\ufffd!f\ufffd\n'\ufffd\u001e\nGm.\ufffdx\ufffd'\ufffd8]b\rkP\ufffd\b\ufffd\u06e8q\ufffd\ufffdV\ufffdj\ufffdJ\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd$\ufffdbG\ufffd0\u0017\ufffd\ufffd6\ufffd-\u0006\u0017>8[\ufffd\u001c\ufffd\ufffd\u0002-\ufffdK{\ufffd7\ufffd9Ae<\ufffd\u0010\u06d6\u0634\ufffd\ufffd\r\ufffd\/{\ufffd$s\ufffd\ufffd\ufffdni\u0015\ufffd;\\;\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffdJl>\ufffdmP\ufffd\ufffd\u001b\u001d\ufffd\ufffd\u001aK\u0011!\ufffd-\ufffd\ufffdi\\\ufffd.o\u000e\ufffd\u0006@\rw(\ufffd\ufffd\u001f\ufffd\u00169\ufffd\u0601\\\u001f\ufffd\u074a\ufffdJ4\ufffd\ufffdv\ufffd\"\ufffd\u000e \\\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd-\ufffd\u0011\ufffd\u0017\u0011\ufffd\ufffd\"\ufffdUU\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd`\ufffd\"SP\ufffd\/\ufffd)\ufffd\ufffdc\ufffd\\\u0015Vc1\u04b7\ufffdE\ufffd\ufffdZ\u0013\ufffd\ufffdK\u0001\u0017k~\ufffd\ufffd\u0006\ufffd\ufffdm!FF\".\ufffd\ufffdX\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffd\ufffdJ\ufffd\ufffd\ufffdp+\ufffd+\ufffd\ufffd\ufffd)@?Z\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\u0006\ufffdMS\u054e\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\ufffd\ufffd\ufffdo\ufffdUM\ufffdHT\"\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\ufffd\u0013-`\u0003\ufffd{D':)28\ufffd\ufffdQ\ufffd\ufffd\ufffd\u01f9\ufffd\ufffd\/N\ufffd#\t\ufffd\u0012D\ufffd*n?\u0015\ufffd\ufffdW\ufffdP8\n\ufffd\ufffd\ufffdQ*x\ufffd\ufffd\ufffdp\u0014\u001f\ufffdS\ufffdq\u0017%\ufffd.\ufffd \ufffd \ufffdA\ufffd\ufffd\u0005\ufffd\u001b\u0002\u0217\u0015M\ufffdYP\u0018\ufffd\ufffd\ufffd\ufffd\\\u0016w\u0017\ufffdb$+\u001fj\ufffd5\ufffd_\ufffdbQ\"\u0017\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0450E\u0014[,p*\u011b]Lq\ufffdb\ufffd\u0000\ufffd-.\ufffd\ufffd6F\ufffdrj\u001a0\b\ufffd\ufffdRb7\u02f3\ufffd\ufffd\ufffd'\ufffdL\ufffd\ufffda\u0006\ufffd\ufffd\u0019\u04e2:B\u001c\ufffd\ufffd\ufffd\u0001\u0016\ufffdKl[\ufffd\ufffd5m\u06a1B\ufffdwd\ufffd\ufffd=^\ufffd\u001d\ufffd\ufffdT\ufffd\ufffd\ufffd\u079fV\u0004\ufffdC\bg\ufffd3\u0005\u0010\ufffd\u00156(|\u0006\ufffd\ufffd\u0354\u000f\u001b\u0016\ufffd\u0012\ufffdsm\ufffd\ufffd\ufffd\u001e\ufffdp\u0015u\tcN#\u0015\u0012\ufffdO#\ufffd\ufffd\ufffdN\ufffd^<9\\\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdMV\ufffd\ufffds4c\ufffd\ufffd\\\ufffd\ufffd\ufffdW\ufffd9\ufffd\ufffd\u03f4\u0014\ufffd\ufffd\u0016\ufffd0\u0017\u0011\ufffd\ufffdT\ufffd\ufffd\ufffd\ufffd\u0018\ufffd6\ufffd\ufffd\ufffd\ufffd>9\ufffd\ufffd\ufffdL\ufffd\ufffd\u0011\ufffd\"\ufffda\ufffd\ufffd&Z\u07aa\ufffd\ufffd\ufffdL\ufffd\ufffd\n\ufffde)\ufffd\ufffd\ufffdD2\u001fP[0\ufffdiE\u001b\ufffd\u0014\ufffdnq?\u0004[\ufffd\u0003\ufffd\u0003c\ufffd\u040b\ufffd]`\u0013Sk\ufffd\ufffd\ufffd7!f\ufffd\u0002<\ufffd\u0000\ufffd\u000f\ufffd\u0012\ufffdC\ufffdj\ufffdR\ufffd\ufffd\ufffdP\ufffd\u0003\ufffd\ufffd\ufffdY\ufffd\u00007\ufffdYXD7\ufffd[\ufffd\ufffd\u00167\ufffdD\ufffdA\ufffd\ufffd\ufffd\ufffd^\ufffdN\ufffd\ufffd\ufffdg\ufffd\ufffd\u001a\ufffdnW\ufffd\ufffdL\u000e\u0003\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd0\ufffd\/\ufffd\ufffd7\u0003Q-\u0002l>o\ufffdcxw\ufffd.\ufffdn+w\ufffd\ufffdZ\ufffd\u0006g\ufffd\u0002.N\ufffdQ\ube33q\ufffd\u0018\ufffd\ufffd\ufffd\ufffd,\ufffd-'\ufffd\ufffd\u0003\u5fa8(\ufffdB\u000e\u001dq\ufffd&\ufffdC\u0006[\u0012\ufffd\ufffdQ\ufffd\ufffd\ufffd\u001bH\ufffd-KpRI{\ufffd1\u06e4}\ufffd\ufffd\ufffd\ufffd\ufffd\u0251m\u260c\ufffd&k9\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\ufffd\ufffdo%\ufffd\ufffd?\ufffd\ufffd\ufffdni\ufffd\ufffd\ufffd\u001c\u0012\ufffd\ufffd4\ufffdF\ufffd\u0002H^HW\u001e\ufffdd\ufffdo\ufffd\ufffd\ufffdw!\ufffd\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd%\ufffd9\ufffd_>\ufffd{T\ufffd\ufffd\ufffd\ufffd\u0018X8&\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\ufffd4\u0001+f\ufffd8\u0010\/r\f\u001f\ufffd[\ufffd\u00053h\ufffdZ\ufffdkb\ufffd\ufffd\ufffd\u05e2\ufffdt\ufffdE\ufffd\ufffdw\ufffd\ufffd\ufffd%X\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdXN\ufffd>\ufffd\ufffd\u0007\ufffd\ufffdG\ufffd$\ufffd\u0015\ufffd\ufffdu)\ufffd'G\ufffd\ufffd|\ufffdjP\u001e\ufffd\ufffd\ufffdK\ufffd\ufffd\ufffd\ufffd\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\u001dW!\ufffd\ufffd\u000e\ufffd\ufffdA\ufffd\ufffd\ufffd;q\ufffd\ufffd\ufffdw\ufffd\ufffdO\ufbbf.\ufffd\u07df\ufffdEq\u0099\ufffd-\ufffd\ufffd4\ufffd;u\ufffd\u03de\ufffd\ufffd=}wv\ufffd\ufffd\u0673\u0003\ufffdq\b\ufffd.\ufffd\ufffd\ufffd|vvwv\ufffd\ufffd\ufffd)\ufffdb;\u001a\ufffdE\ufffd\ufffd\ufffd\ufffd]t\\^w\ufffdl\u0011\ufffd\u0455\ufffd\ufffdzjt[t\ufffd\u0014\ufffdpe\ufffdb\ufffd\ufffd8z\u001a\ufffd\u02e6\ufffd=dg\ufffd\u001e\ufffd<Y\ufffd\ufffdm\ufffd\u001fa\u068b\ufffdT\ufffd\ufffd\ufffdp\u0011F\u0007\ufffdQ\u0004\u0010ax\ufffd\u0005\ufffd!\ufffd\ufffd\ufffd1\ufffd\ufffd'\ufffdN\ufffd0K\u0017\ufffd\ufffd\u001e\ufffdi\u0440\ufffde\ufffd\u0013\ufffdy\ufffd\ufffd\ufffdo\ufffd\u0012\ufffd\ufffd1k>\ufffd\ufffd\ufffd\ufffdi\u0002U\ufffd\ufffd\u026b\ufffd\ufffd\ufffd\u0210y\ufffdAY\ufffd\ufffd\ufffd\ufffdnT\ufffd!\ufffd3O\ufffd\u0017\ufffdh\ufffd#\ufffd\u21c4\/\u001d+~B\ufffd\u0005\ufffd\ufffdy\ufffd\u0003\ufffd\u06e6,I\u0018\u0015\ufffd\ufffdo\u000f\ufffd\ufffd+7s\ufffd\u0010\ufffd\ufffdg\u0007L$|\ufffd\ufffdx\ufffdhx\u0010^{\ufffdg\ufffd\ufffd\ufffdo\ufffd\ufffdH\u001c\ufffd\ufffd\/\ufffd\u0002\ufffd\ufffdz\ufffd\ufffd\ufffd\ufffd\"\ufffd\ufffd\u0705.\ufffd\ufffd\u001f\u001e\u001d\ufffd\ufffd\ufffd\u0007<\ufffdt|\u3647\ufffdi&\u029e(\u0005]\ufffd\u001d\ufffd\ufffd\u0002?\ufffd\ufffd\ufffd\u001d\ufffd}-7\ufffd\ufffd\u0001\ufffd\ufffd\ufffd\u0016X\ufffdO\u0015\ufffd\ufffd<g^\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffd=\b\ufffd\ufffd\ufffd\ufffd<\u0011\ufffdJ\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\ufffdw2\ufffd\ufffd:\ufffdVj\u01b0v\ufffd\ufffd5\u0012h\u0004!F_\ufffd\ufffd6\ufffd\r\ufffd\ufffd*8U\ufffd\u02f3{\ufffd.\ufffd\ufffd\u0457\ufffd.=\ufffd\ufffd\ufffd\ufffdK\ufffdy\ufffdv\u0014\ufffd\ufffd.j\u0004\u0006<\td\u0011\u0006\ufffdO\ufffd\ufffd\ufffd\ufffd{\ufffdD%)\ufffd\ufffd\ufffd\b\ufffd\u0005h\ufffd&\ufffd\u0017O$\ufffd\ufffd\ufffd\ufffd}3\f\r\ufffd\ufffd!\ufffd\u01b4K@Nd\ufffd\u0001\ufffd\ufffd\u0013\ufffdC\u064b\ufffd\ufffd\f\ufffdv\u001f\u00020?\ufffd\ufffd\ufffd2\ufffd\\\ufffd\ufffdQb\ufffd>\ufffdl\ufffd\u0002\n\ufffd*\ufffd|\u0011v\u0005\ufffd\ufffd+\ufffdD\ufffd\ufffd\ufffdm\ufffdjo2d\u0010\u0012\u000f\ufb5bW~\ufffd\u001b\ufffdO\ufffd*4XQ\ufffd\ufffd\ufffdpU\ufffd\ufffd\ufffd\u0491\ufffd~\u000bx1\ufffd\ufffd<\ufffd.\u000e\ufffd\ufffd\t\ufffd\ufffd\u0017\ufffd\tK\ufffd+,\ufffd\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\u0405\ufffd9\ufffd\u0016\ufffd|\ufffd\ufffd{,?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0017F\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffd\u0001\u001f~\ufffd\ufffd%E\r\u0015\ufffd\ufffd>1\ufffd\u07c2k\ufffd\ufffd\u0005\ufffd_\ufffd\ufffd}\u068d\ufffd-t\ufffd\ufffd\/^\ufffdX8\ufffd\u0016@.\ufffd\ufffd\u001f\ufffd[\ufffd\ufffdq\ufffd\ufffdp~\ufffd\ufffd\ufffd\ufffd\u0010!\ufffd\ufffd7\ufffd\ufffd?0\u001f5\ufffdl\ufffd\ufffdM\ufffd\ufffd\ufffd\u0004\ufffdOw?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd}\ufffd\ufffd\ufffdi\ufffd>$\u0017\ufffd\u001bS\ufffdi>~y\ufffd\ufffd\ufffd\ufffd\u001bl^\ufffd\u001f\u0012\ufffd\ufffdI\nendstream\nendobj\n21 0 obj\n4095\nendobj\n19 0 obj\n<< \/Type \/Page \/Parent 3 0 R \/Resources 22 0 R \/Contents 20 0 R \/MediaBox\n[0 0 612 792] >>\nendobj\n22 0 obj\n<< \/ProcSet [ \/PDF \/Text \/ImageB \/ImageC \/ImageI ] \/ColorSpace << \/Cs1 7 0 R\n>> \/Font << \/TT3.1 13 0 R \/TT2.1 11 0 R \/TT4.1 15 0 R \/TT1.1 9 0 R \/TT5.0\n16 0 R >> \/XObject << \/Im1 23 0 R >> >>\nendobj\n23 0 obj\n<< \/Length 24 0 R \/Type \/XObject \/Subtype \/Image \/Width 1432 \/Height 1188\n\/Interpolate true \/ColorSpace 25 0 R \/BitsPerComponent 8 \/Filter \/FlateDecode\n>>\nstream\nx\u0001\ufffd{\ufffd,Ey6^\ufffd\ufffd\\E\u0004DW\ufffd\u0017\"j\u0014YC\ufffd\ufffdQP\ufffd\u0012\u00175\u001a\u0001?\":\u07a2\ufffd\ufffdIp\ufffd\ufffdh\ufffdQW\ufffd\\Lr4\ufffd\ufffd\\\u0014\f\ufffd$\u0012\u0013\ufffdl0\ufffd\ufffd\ufffdw\ufffd\u000b\ufffdxY\ufffd\ufffd\ufffd9\u0012\u0011p\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\ufffd\ua65e\ufffdKu\ufffdS\ufffdu\ufffd\ufffdy\u73dd\ueaa7\ufffd\u7a67jjk\ufffd\ufffd{\ufffd(\ufffdkm9\ufffd\u0000\ufffdg\u0007\ufffd\u0001v\ufffd\u001d\ufffd9\u00076g\ufffd\ufffd\\av\ufffd\u001d`\u0007Z\ufffd\ufffd\ufffdXk\ufffd>\u0016\ufffd\u000e\ufffd\u0003\ufffd@\u0781\ufffd\ufffdZkB\ufffd\ufffd|\ufffd\ufffd\ufffd\u001d`\u0007\u0601\u0016;\ufffd$\ufffdZ\ufffd\ufffd\ufffd\ufffd9!\ufffd\u0006\ufffd\ufffdp\u0004v\ufffd\u001d`\u0007|9\ufffd\ufffd\ufffd\ufffd\ufffd\u019c\ufffd\ufffd\u0015f_\u0749y\ufffd\u0001v\ufffd\ufffd\u0003\ufffd\u001f\ufffd\ufffd\ufffdy^\u01b0\ufffdQ8\u0004;\ufffd\u000e\ufffds\ufffd\ufffd\ufffd\u0018\ufffd\ufffdd&v\ufffd\u001d`\u0007,9\ufffd\ufffd\ufffd~\ufffd\\\ufffd0\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u001c\ufffd\ufffd~\ufffd\ufffd\ufffd8\ufffd\u0000;\ufffd\u000eXq`m\ufffd\ufffd\u0010X1\ufffd\ufffd\ufffd\u0003\ufffdO\u0007\ufffd:<r\ufffd\ufffd\u02fc\u001d\ufffdgob.v\ufffd\u001d\ufffd\ufffd\u0000m\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffda\ufffd\ufffdp\bv\ufffd\u001d\ufffd\ufffd\ufffd*\ufffd(W=\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000b<.\ufffd\ufffd\ufffd\ufffd\ufffd\u0001v\ufffd\ufffd\u0003\ufffd\u0005!:\ufffdT\ufffd\ufffdE\u001e\ufffd\ufffdv\u0011.\ufffd\u000e\ufffd\u0003\ufffd\u001d\u0018,t\ufffdNl\ufffd~2\u001f;\ufffd\u000e\ufffd\u0003\ufffd\u001d\ufffd\tec\u000b9\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000\ufffd\u0000\u07c4\ufffd:\ufffd8v\ufffd\u001dh\ufffd\u0003\ufffd\ufffdJ\ufffd\ufffd\u077d&\ufffd\ufffdA\ufffd\ufffd\u001d`\u0007,;\ufffd4\ufffd\ufffdi\ufffd|,Sg\ufffd\ufffdX\ufffd\u0004\u001c\ufffd\u001d`\u0007\ufffd\ufffd\u0000\ufffd^sm\ufffdcM\ufffd\ufffdk\ufffd\u06d7\ufffd\ufffd\u0241\ufffd\u0001v\ufffd\ufffd\u0003\u001b4\ufffd\ufffdyc\ufffdJD\u00033o_\ufffd\ufffd8\ufffd\ufffd\u0003\ufffd\u001d\u0007\ufffdf\ufffdn\ufffd\u001b,\ufffdn\u0013;\ufffd\ufffd\ufffd\ufffd\u0003\ufffd_\u0007\ufffd\u001d\ufffd\ufffd\u012f\ufffd\ufffd\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000eL\ufffd\u0003\ufffd\u0019c\ufffdZ\ufffd\ufffd\ufffd\u0003\ufffd@\u0681\ufffdz\ufffd\ufffd3\ufffdk\ufffd}\ufffd3m\ufffd\u0015a\u0007f\ufffd\u0001\u06b7\ufffd\ufffdg}\ufffd\u04d7g\ufffd#s}\u0641\ufffd8 \ufffd\ufffd\ufffdup\u30ac\u0016\ufffddt\ufffd\ufffdrM\u0601Yr\ufffd\ufffd\ufffd2o_\ufffd\ufffd^\ufffdue\u0007:\ufffd@\ufffdu\ufffd[\ufffd\ufffd\ufffd\ufffd&\ufffd\ufffd\ufffd\ufffd]]\ufffd'\ufffd\u001fW\u0003\u0539\ufffd}Y\ufffdK\ufffd\ufffd\u001f&\u0765\ufffd\ufffd\u0006\u001a\ufffd\ufffdo\ufffd.=\ufffd\ufffd\ufffdK\ufffdS\r\ufffd\u0726\u000e\ufffdh\u02df\ufffd\ufffdE\ufffd\ufffdM+\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffdO\ufffd\n\u000e_\ufffd\u056d\ufffd\ufffdwF\ufffd?\ufffd\/U\u0017\ufffd\u0015\ufffd\ufffdj\u0004\ufffdN\ufffd\u0003\u000fL\ufffdK\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd\ufffd$\ufffdYY\ufffd\ufffd\ufffd\u03c7\tq\ufffdw+A\ufffd\ufffd\ufffd\u0001\u001fmy\uec3f<\ufffd\r\ufffd\ufffdZ\ufffd\ufffd]x\ufffd\ufffd\ufffd\ufffd\u07cf\u052d\ufffd\ufffd\ufffd\ufffd\ufffd\u03de\ufffd_\ufffd\u016f\u0676\ufffd\ufffd\ufffd\u0012\ufffd\ufffdS\ufffd\ufffd?QO\ufffd5\ufffdW\ufffd\ufffd[5\ufffd>yG\u0014\ufffd\ufffd\u000fW\ufffd~\ufffd\ufffd\ufffd\ufffdo~\ufffd\u000f\ufffd\ufffd\ufffdMU(\ufffdk\u800f\ufffd<W\ufffd\ufffd\ufffd\u0017^\ufffd\ufffd\ufffd\u0017;\u001b\ufffd\ufffd\ufffd\u2dc8\ufffdlRk9.\ufffd^\ufffd\u0014\ufffd\ufffd\u0015:\ufffd\"\ufffd\ufffdH\ufffd\ufffd\u000e\ufffdF4i\u00169.W\ufffd\ufffd\ufffd\ufffd\ufffd;$\ufffd\"\ufffdj \ufffd6v\ufffdu[\ufffd+.\ufffd\u001a\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd\fP\ufffd\ufffd\ufffdq\ufffds\ufffd\ufffd\/O\ufffd#\ufffd\ufffd;\ufffdu\ufffd\ufffd\u5bbb\/\ufffd\ufffd\ufffd\ufffd\u04df\ufffd>\ufffd\ufffd\ufffdk\ufffd>\ufffdy\u001f\ufffd\ufffd\u000e\u0199\ufffd\u05a5\/<\ufffd\rWG?\u0739\ufffdWw\ufffd\ufffd\ufffdv^\u001fE[\ufffd\ufffd\ufffd_\ufffd\ufffd\u0004\ufffdf\ufffdM\ufffd~\u0469o\ufffd\ufffd\u000eG\ufffd_\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd\ufffd^k\ufffd}\ue1d9\u000f\ufffdB\ufffd>\ufffd{v~\ufffd\ufffd\/\ufffd0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?#\ufffd\ufffd\ufffd\ufffd\ufffd^y\ufffd\u07e0\ufffd\ufffdg?\ufffd\ufffd\ufffd\u01ab\u0010\ufffd\ufffd\ufffd+\/?\ufffdw\ufffd\u0010E;\u001f\ufffd\ufffd\ufffd\u07f9c\ufffdU\ufffdZ\ufffd\ufffd\/\ufffdG\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdm\ufffd\ufffd \ufffd\u0000\ufffdY\ufffd[\ufffd\ufffd\ufffd|\ufffd\ufffd<\ufffd\ufffd;\ufffdq\ufffd\ufffd\u001c\ufffd\ufffd\u0457\ufffd+\ufffdU\ufffd\u0351\u001b\ufffdpt2.\ufffd\ufffdg\ufffd\ufffdo\ufffd\ufffd~{?\ufffd\u0247\ufffd\ufffd\ufffd\ufffd#\ufffd8\ufffdy\u01c8\ufffdD\ufffd%{\ufffd\ufffd\ufffd#\ufffd\ufffd$s\ufffdw\ufffd\ufffd'\u001dx\ufffdUW\u001d'\ufffds\ufffdM\u001f\ufffd\ufffd\u02cb\ufffdAO>|\ufffd{\ufffdh\ufffd\ufffd\ufffdCN_\u0010\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\u045b\ufffd\u0015\ufffd)\ufffd.\ufffd\/\ufffdQ0\ufffd|90\ufffd,\u000f\ufffd\u001b\u000e\ufffd\ufffd\ufffd\ufffd[\ufffd\u0003\ufffdz\ufffd\ufffdE\ufffd\ufffd\ufffd\u0015\ufffd=\ufffd\ufffd\ufffd\u000e\ufffdNt\ufffdc\ufffd=\ufffd\ufffd\u0003\ufffdN+\u001d\ufffd\u0315\ufffd\ufffdx\ufffd\u0011\ufffd}\ufffdq\u0007\u001dp\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdO~\ufffdx\u000e\r\ufffdO<\ufffdQ;\ufffd;'Fk\u001b[\ufffdy\ufffd\ufffd\ufffd0\ufffd\u3d8c\ufffdqy\ufffd\u0001\ufffd\ufffdI\ufffd7\ufffdJI\ufffdg}\ufffd\ufffd\u5f4f\ufffd^\u0014\ufffdC|:\ufffdn\ufffd\ufffd\u0478\ufffd\ufffd\ufffd\ufffd\ufffd]O\ufffdwOt\ufffd\ufffdo\ufffd\ufffdN\ufffd\ufffd\ufffdT\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffd!\u000bQ$\ufffd1\ufffd\ufffdI\ufffd\ufffdAt\ufffd\u0013\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]\u0013Eo\u0014\ufffdO\ufffd\ufffd\u000f\ufffdF\ufffd)^\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u077c\ufffd\u0011u\ufffd\ufffd\ufffd\ufffdg\ufffdnug48\ufffdWiH~\ufffd\ufffdz\ufffd};\ufffd\ufffdB\ufffd#\ufffdT\\@\ufffda\ufffdT\ufffd\ufffd\u0007,\ufffd\u0016\ufffdv\ufffdA\ufffdEr\u001dC\ufffd\ufffd7\ufffd\ufffdQ?\ufffd\ufffd\ufffdF\ufffd=\ufffd\ufffd\ufffd\u07b4\u0015m\ufffd\ufffdI\ufffd\ufffd\ufffd '\u0000\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffdI\u0007\ufffd\ufffdP\ufffdX\ufffd\ufffd\ufffdC\ufffd\ufffdx\\\ufffd#r\ufffd\ufffd+2\ufffdcN\ufffdqY|\ufffd\ufffd\ufffd\"\u0006\ufffd\u0003\u001fM\ufffd\ufffd\ufffd\ufffd\ufffdT\ufffd\ufffd\ufffd\ufffd\ufffd??e2.?o\u07db(\ufffdK\ufffd\ufffd\ufffd%\ufffd\ufffd\ufffd>#.\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u07e3\u000f\ufffd=>3\ufffd\ufffd\ufffdO_6p\ufffd\u0017t\ufffdY>\ufffd\u0018w_\ufffdu\ufffd\ufffd\t\ufffdu\ufffd?\ufffd\ufffd\ufffdl{Ct\ufffd\ufffd8\u001d]\ufffd\ufffdT\ufffd\ufffdW)\ufffd\u07de\ufffd\ufffd\ufffd|\ufffd\ufffd\u0004\ufffd\ufffd>\ufffdi4.\ufffdc7\u001d\ufffd\ufffd\u0013\ufffd\u000f\ufffd\ufffd\ufffdx\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffdq[N\ufffd\ufffdS\ufffd\ufffd\ufffdL+\u0019\ufffd\ufffd\ufffd\ufffdd\\\ufffdM\ufffdl\ufffd\ufffd\ufffd\ufffd=q\ufffd\u001c\ufffdo\ufffd\u04f3h\\~\ufffdx\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\u0003~]\ufffd\ufffdW2_~\u0523\ufffd\u065e\ufffd_@\ufffd\ufffd*\u001d\ufffd\u001a\ufffd\u02fb\ufffd3.\ufffd\u88a7\ufffd\ufffd\u0000\ufffd\ufffdJ\ufffd5F$\f6s`\ufffdY\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffdq9\u001eO\ufffd\ufffd!\ufffd\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE&\ufffd\/8(>\ufffd\u0002\ufffd|\ufffd\u0015q\uf29e\ufffd\u0000\u001a\ufffdY\u0006z\ufffdh\\\ufffdN\ufffdN\u001c\ufffd\ufffdxp\ufffdq[N\ufffd\ufffd'\ufffd\ufffdCmZIQ\ufffd\ufffd\ufffd\u0278,\ufffd\ufffd\ufffdc\u0161\u01ff\ufffd!'\u000eG\ufffd\ufffd\ufffd=\u0017>q_\ufffd\ufffd\u001f\ufffdIe\ufffd\ufffd\t\u0278|\ufffd\u0013\ufffd{?c4\"O\ufffd\ufffd\r71\ufffd\ufffdH\ufffd\ufffd\ufffd4;0\ufffd,\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd^\u000f;\ufffdE\ufffd\ufffd\u0006Y+\u001a\ufffd\ufffd\u001f\ufffd\ufffdAB\u001c\ufffd\ufffdT\ufffd\ufffd\ufffdy\ufffd\u02ff\ufffd=>=\ufffd\ufffddDN\ufffd\ufffd=\ufffdx|\ufffdC\ufffd\ufffd;~4:\ufffd7G\u000e8n\ufffd\ufffd5\u0017\ufffd\ufffduT\ufffdn\ufffd\u034e\ufffd;\ufffd\ufffdY\ufffd\u069cxbz\\\ufffdz\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd&\ufffdG\u01ab\ufffd\ufffd\ufffds<_\ufffdq\ufffd\ufffdg\ufffd\u07bf\ufffd\u001f\ufffd\ufffd8\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffdGL\u0006\ufffdW\u001b\u001c\ufffd|\ufffd\/\u0013\/\ufffd\ufffd(\ufffdtv\\&\ufffdW\ufffd\ufffd\ufffd\u000f\ufffd&\ufffd\/\ufffd_\ufffd\u01b9e\ufffd\r\ufffdq\ufffdu\ufffd\u0006Y\ufffd\ufffd\u001f\ufffd\u001f\ufffd\ufffd\ufffd\ufffd>\ufffd\ufffdt\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\ufffdm\ufffd\\\ufffd\ufffd\ufffd\ufffd\ufffdi;\ufffdI\ufffdBg\ufffd\ufffd\ufffdgP\r\ufffd<\ufffd\ufffd\u0538\ufffd\ud963\udfe6\ufffd\ufffd\u015b\ufffdI\ufffds\u000e\ufffd\ufffdc\ufffd\ufffd\u0003\ufffd\u001a\ufffd\u02ef\u0014r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdq\ufffdc\ufffdrs\u0014\ufffdM^\u000e2zmt\ufffdg\ufffd\ufffdLh\u001d8\ufffdY>K\ufffd\ufffd\u0004\ufffdd\ufffd\ufffd\u001e+\u05cb_\ufffd\ufffd\ufffd$\ufffd\u001c\ufffdIJz?]\ufffdH\ufffd\u02d7\ufffds(\ufffdGw{~a\\^\u0013O\u001dP\u0016]>|\ufffd|\ufffdC\u0007\\\ufffd\ufffdh\\\ufffd\ufffdC\u000f\ufffd\ufffdd6_k5\ufffd4;.?\ufffd!\ufffdF\ufffd=W\ufffd\ufffd\u0538\ufffd\ufffd\ufffd\ufffd\ufffd\u009e\ufffd^A\ufffd\u0193\ufffd+\ufffd=\ufffd\ufffd\ufffd\ufffd^\ufffd\ufffd\ufffd\ufffd9\u070f\ufffd\ufffd}~\ufffd{>s\ufffd#n\u024f\ufffd\ufffd\u0012?\ufffd\u001b\ufffdbt\ufffd\u001dm\ufffd\ufffd\ufffd\ufffd5B\t\u0018W\u01c1\ufffdg\ufffdB\ufffdW{\ufffd\ufffd0yEA\ufffd`\ufffd\ufffd\u0013\ufffd\ufffdi\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffd\ufffd#\ufffd\ufffd\ufffd\u001f?\ufffd\u043b\ufffd'?r+\u078fq\ufffdC\u000e\ufffd\ufffd=\ufffd;~\ufffd\/\u0015\ufffd\ufffd\ufffd\u0015\ufffd\t\ufffd\ufffdq\u7047\f\ufffd\ufffdu4r\u0019\ufffd\u0001\ufffdmy\ufffdx\ufffd\ufffd\ufffd\ufffd\u03b8\ufffdv\ufffdv3\ufffd\/\ufffd\ufffdK\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdu\u0636\ufffd_(\ufffd\ufffd\ufffd\ufffd\rG\ufffdO\u001c$\ufffd\ufffdm\ufffd\u074a&\ufffd\ufffd\u0007\ufffd\u0013\ufffd\ufffd\ufffdi\u000b\ufffd#\ufffd\ufffd\ufffdx\ufffd\ufffdG\ufffdA)\u000f\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001f\ufffd:n\ufffd\ufffdM\ufffd\u0456l\ufffd\ufffd\ufffd\ufffd0O\ufffd\ufffdgy\ufffd\ufffd\u0016w?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdG'\ufffd\ufffd\u001d\ufffd.\ufffd\ufffd\u001c\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffdQ\ufffd?m\ufffd\ufffd]q\ufffd%\ufffd\ufffd\ufffdo\u001eE)\u0007|\ufffdD\u000fW\ufffd\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"q\ufffd\ufffd=Uh\ufffdi\\\ufffd\ufffd\ufffd\ufffd\u0018\u0007?\ufffd\ufffd3\ufffd\ufffd&\ufffd\ufffd%\u001b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\ufffd\ufffdK\u04f1n\ufffd\ufffd\ufffd\ufffd[&\ufffd2|\ufffdy\ufffd\ufffd\u0017\u066f?\ufffd\ufffdw\f\ufffd7}\ufffd\ufffd\ufffd\ufffd7XK\/y[\u0272\ufffdX\u001c\u0195\u0003{>u\ufffd%\ufffd\u0455\ufffd\ufffd\ufffdcD\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\\\ufffdHe\ufffd\ufffd\ufffdsV\ufffdF\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffd._w~\ufffd\ufffd2<\ufffd\ufffd\ufffd\ufffd_\u03be\ufffdK\ufffd\u000e\ufffd|&\ufffd\ufffdr \ufffd\\c\ufffd\ufffdm9\ufffd4\ufffd\u0007\ufffd\ufffd\u02ed\ufffdkM\ufffd\ufffd\u0002sk[\ufffd\ufffd\ufffd\u0003\ufffd\u0000\ufffd@\ufffd\ufffde t \ufffd:\u000f\u02c1\ufffdgZv\ufffd\u001d`\u0007\ufffd\u0001v\ufffd\u001d`\u0007\ufffd\u0001v\ufffd\u001d`\u0007\ufffd\u0001v\ufffd\ufffd\u0003\ufffdo\ufffds\/\ufffd\u000eC\ufffd\u001fa\ufffd\ufffd\ufffde\ufffd\u0001v\ufffd\u001dp\ufffd\ufffd\u019c\ufffd\r\u0019.\ufffd\u0549Y\ufffdG\u000b\ufffdq\u0019v\ufffd\u001d`\u0007\u001c8 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001f\ufffd\ufffdJe\ufffd\u001e\ufffd\u0000;0\ufffd\u000e,\ufffd~\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd\u0003\ufffd@\u001b\u001d\ufffdg0\ufffd\ufffdQWMM4\ufffd\ufffdRuj\ufffd\ufffd\ufffd\ufffd\u0001v`\ufffd\u001dX\ufffd\ufffd8\ufffd\ufffd?V2\ufffd\ufffd\ufffd\u0573\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u000e\f:\ufffd\ufffdy5~\foe\ufffd9\ufffd\u001d`\u0007\u0601v;0X\ufffd\u0483~\ufffdWW\ufffd\ufffd\ufffdX\u001d;\ufffd\u000e\u0000\u000e\ufffd\u001d\ufffd\ufffd\u0000n: \ufffd\ufffdD\ufffd\ufffd\ufffd\ufffdh+V\ufffd\u000e\ufffd\u0003e\u000etk\ufffd\/\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd\u0000;0E\u000e\u040e\ufffd\u000e\u0749\ufffd\ufffd\u0018S\ufffd\ufffdX*;\ufffd\u000e\ufffd9\ufffd\u0469\ufffd\ufffd\ufffd\ufffd~e\ufffd\ufffd\ufffd\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u000e\ufffd\u0003\ufffd@7\u001c\ufffdw\ufffd\u001a\ufffd\u0016|\u001bvw\u0692k\ufffd\u000e\ufffd\u0381A\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffd\u0013\ufffdc\ufffdk\ufffdc\ufffd6\u001c\ufffd\ufffd\u00b7\ufffd\u001e\u0016o\ufffd%U}>4t\ufffd\ufffd\ufffd\ufffda5\ufffd\u000e|\u001e\ufffd\u0486b\ufffd\ufffd\u00ef\ufffd\ufffdes\ufffd\ufffd\ufffd\ufffd\ufffd\u0004\ufffd4\ufffdc\ufffdvG\ufffd\ufffd\ufffd\u0010\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdS\r\u001c\ufffd\ufffdb`V\u0003\ufffdM\ufffd\ufffd\udb03\udf7e\u000e\ufffd7\ufffd\u001c\ufffd\ufffdr3\u04c3mi\ufffd\ufffd_\ufffd\ufffd\u0125\ufffd\u000ep\ufffd\ufffd\u0013l\ufffd< \ufffdK\ufffd5g\ufffd\ufffd\ufffd]K\u0003\ufffd\ufffd\u001d\ufffd\u02b6\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffd\ufffd\ufffdf\u0016\u0007\u07dc\ufffd\ufffd\ufffd\u0000\ufffd\ufffdmm>uz\ufffd\ufffd\ufffdi2\ufffd>\ufffd\ufffd\ufffd\ufffd\u000fV\ufffd!`:0A\ufffd\ufffd\ufffd\ufffd\u0018\ufffd7_\ufffd\ufffd\ufffd\ufffd\ufffd\t-V\ufffd\ufffd\ufffdO\ufffd\ufffd\udb26\uddae~$3\ufffdM\u0007\ufffd.C\ufffd\ufffd\ufffdX\ufffd_p\ufffdZ\ufffd\ufffd\ufffd\ufffd1\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffd`\ufffdY\u0585\ufffd\u001c\u0011\f\ufffd\ufffd\u00054\ufffd]0\ufffd\/~\ufffd\u00da\ufffdB\ufffd\ufffd(\u03b2\u0004!\ufffdJ\ufffdt\ufffd\u001ed\ufffd\ufffd\u001fn\\\ufffdN\ufffdY\ufffd\u0001\ufffd\u0010\ufffd\ufffd\ufffd\ufffdV\ufffd\ufffds\ufffdq\ufffd60\ufffd\ufffd\ufffd9\u02daX\b10[kS\ufffd\ufffd\ufffd\u0017S\ufffd\ufffd\ufffd9\ufffd\ufffd%g\ufffd\ufffdSk>\u0007\ufffd\ufffd\ufffd\r\ufffd!F3\ufffd\ufffd\ufffdF;#B<~\ufffdZ\ufffd\ufffdZ\u0012\ufffd\ufffd\ufffd\ufffdd|\ufffd\u0001\ufffd\/yG\u071c[\ufffd9\ufffd\ufffdLn`\ufffd\ufffd\ufffdoI\ufffd\ufffdsT\ufffd\u000eX\u001b\/Le\ufffd\u0018_L5Z\ufffd[\ufffd9\ufffdor\u0003\ufffdE3B\ufffd\n\ufffd\ufffd\u0011\ufffd\u000bG\ufffd\ufffd\u0012\ufffd\ufffd\ufffd\ufffdM\ufffd\u0005\ufffd\u0017\u000fMi\ufffd\ufffd0\ufffd\ufffd\u000em`\u000es\u074f6J\ufffd=t\ufffd\"E(\u07a2\u0012N1p\ufffd\ufffd\ufffd\ufffdY\r\ufffd\ufffd|\ufffd\ufffdY\ufffdV\bX4T\ufffd\ufffd\ufffd\rhu'\ufffdC\ufffd[(\ufffdP\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffdaVyC\ufffd[(\ufffdYmg[\ufffd\u000e\ufffdn\ufffdxm\ufffdf\u001a\ufffdV}m\ufffd1\u053f\ufffdaX\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffd\u0003\ufffd[\u0014\ufffd\ufffd\ufffd\ufffd?-\ufffdB\ufffd[(\ufffdP\ufffdb\ufffd\ufffd\ufffd\ufffd\ufffd \ufffdZlV\ufffd\ufffd\ufffd`W0\u00f4[\ufffd\ufffdrK;\ufffdN\u0016\ufffd\u0017\ufffdCv\ufffdm\ufffdl+\ufffdQ\ufffd\ufffdS\ufffd\u0003=\ufffd\ufffdH\ufffd\u0016\u001cn\ufffd_\ufffdv#?B\ufffdj\ufffd\ufffd\u0001\ufffd\u000e\ufffdj\ufffdP\ufffd\ufffdf8\u0334U_[q\ufffd\ufffd\ufffd\u3c91]*p\ufffdv#!\ufffdxU\u001ep\u001a\ufffd@\ufffdv\u000b\u014b;c\u0017i\ufffd\ufffd\ufffd\ufffd\u054e\ufffd1\ufffd\ufffd*\ufffd\u00f4\u001b\ufffd\ufffd\u0156\ufffd\ufffd\u0014\ufffd\/~\ufffd\u0256\u03f6\ufffd\u0018\u059a\ufffd\ufffd\u0019\u001a\ufffd\ufffd\u0007j7\ufffd\/\ufffd\u001bbJ\u03b9\ufffd\ufffdi([>\u06ca\ufffd\ufffd\u03128\u0010\ufffd\ufffdB\ufffd&\ufffd\ufffd\ufffdz\u000e\ufffdj\ufffdP\ufffd\ufffd\\j^\ufffdV}m\ufffdi^#\ufffd`\ufffd@\ufffdv\u000b\ufffdk\ufffd\rc\ufffd\u000e\ufffdj\ufffdP\ufffdE\u0007\ufffd\ufffd\u062a\ufffd\ufffd8\ufffd\ufffd\u000e\ufffd\ufffd\u03a6Z\ufffd\ufffd\ufffd\u0010O\ufffd#A\ufffd\ufffd-\u0014oU\u001bp\ufffd\u0781P\ufffd\u0016\ufffdW\ufffd\u001b\ufffd\ufffd\ufffd\u068acXK\ufffd\ufffd\ufffd0\ufffdQ1\u0529\ufffd\ufffdF\ufffd0\u001b\ufffd\u0003\ufffd[\ufffd\ufffd\u0007\ufffd\ufffd\ufffd\ufffdj\u0007\ufffd\ufffdT\ufffdc+\u05d6\u03f6\ufffd\ufffdK\ufffd\ufffds\ufffd\ufffd\ufffd\ufffdP\rZ\ufffd_\u000e\ufffd\u0011;L\ufffd\ufffd\ufffd\ufffdk\u001a\ufffd\ufffd5\u000ep\ufffd\u0018d)\u06d6\u03f6\ufffdU\ufffd\ufffde3\ufffd\ufffd\ufffd0\ufffd\ufffd\ufffdr\ufffd%\ufffd#\ufffd\ufffd\ufffd\ufffdv\ufffd\u5ced8\ufffd\ufffd\ufffdu\fC\ufffd\ufffd\ufffd@\ufffd\ufffd\ufffd\u0018\ufffd\ufffd\ufffd\ufffds\ufffd\/~\u001a\u0296\u03f6\ufffd\u059a\ufffd\ufffd\ufffd:\ufffd\u0147j\ufffdP\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\ufffd-\u0014\ufffd\ufffd?\ufffd\ufffd\ufffdk+\ufffd\ufffdzq\u001c\u0301P\ufffd\u0016\ufffd\u0017s\ufffdQe\u000e\ufffdj\ufffdP\ufffde>\ufffdN\ufffdU_[q\\\u05d7\ufffdg\u001d\b\ufffdn\ufffdx\ufffd\ufffd\ufffd3S\u0007B\ufffd[(^Sl\ufffdm\ufffd\ufffdV\u001c\ufffdz\ufffdw\ufffd\u0001\u0321n(\u000f\ufffdn\ufffdxM\ufffd\u0017\ufffd\u000e\ufffdj\ufffdP\ufffd\ufffd\ufffd\ufffd;\ufffdU_[q\fk\ufffd&\ufffd:10o\ufffd\u0005\ufffdG\ufffdv\ufffd\ufffd~\ufffd\u001d\ufffd-p\ufffd\/~Z\u0096\u03f6\ufffd\ufffdz\ufffd\ufffd\/\/\ufffd\u0015i%Z>\ufffd4L=\u00b4\u001b\ufffdke7\u0004Dq\u0001L\ufffd\u0000\ufffd\u5ced8fU\ufffd\u04b8\ufffdhVuK\ufffd0\ufffd\ufffd\u3ca5\ufffd\ufffd\u001e\ufffd\ufffd\ufffd\u001f\ufffdm\ufffdl+\ufffda\ufffdy\u001d\ufffd\u0430<<P\ufffd\ufffd:F\ufffd!\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u5ced8\ufffd\ufffd\ufffd\ufffd~\ufffd\ufffde\ufffd\ufffd-\u0014o\ufffd\ufffd|f\ufffd@\ufffdv\u000b\ufffdk\ufffd-\ufffd\ufffd\ufffd\u068ac\ufffd^\u001c\u0007s T\ufffd\ufffd\ufffd\ufffd\\aT\ufffd\u0003\ufffd\ufffd-\u0014o\ufffd\u000f\ufffd\ufffdm\ufffd\ufffdV\u001c\ufffd\ufffd\ufffd\ufffdY\u0007B\ufffd[(\ufffdl\ufffd\ufffd\ufffd\u0501P\ufffd\u0016\ufffd\ufffd\ufffd\u001f[x[\ufffd\ufffd\u0015\u01f4^\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdC\ufffd#T\ufffd\ufffd\ufffd\u0575\u0003\ufffdW;\u0010\ufffd\ufffdB\ufffdV\ufffd\ufffd.\ufffdV}\ufffd\ufffd\f\ufffdM_W\ufffd\ufffd\ufffdU\ufffd\ufffd\ufffdUW\ueeaai\ufffd~\ufffd\ufffd8Ow=\ufffd\ufffd\ufffdN_4\ufffdm\ufffds\ufffd^2\t\u0010\ufffd\ufffdLd4>2\ufffd\ufffdy\ufffdq\ufffdV\n\ufffd3\ufffd^\ufffdUz\ufffdp;_\u000b&OA\ufffdF=\ufffdv\ufffd\ufffd\ufffdJ\ufffd\ufffd\ufffd\ufffd9\ufffd\ufffdQ\u000f\ufffd\u0752\ufffd\ufffd\ufffd\ufffd\ufffdi\ufffda\u07d6\ufffd\r\ufffdt3\ufffd\ufffd\u0017|wGG\ufffd\u0001\ufffd[\ufffd\ufffd-\u001c\u00fc\u0016}\ufffd\ufffdY(`\ufffd\ufffd\u0012\ufffd\u001ep\ufffdY\ufffd#\ufffd\u00100oG\ufffd\u000b\\\u07f4I\ufffdc4\u0380:\ufffd\ufffdz\ufffd\ufffd\ufffdxn\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffd.\u001f\ufffd\u000f\ufffd\ufffdJ=\ufffdv\ufffdd\ufffd8\f\ufffd\ufffd\u0015\ufffd\ufffdR\u000f\ufffd\ufffd\ufffd\rm\ufffd\u0000\ufffde\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#_6\ufffd\ufffd3j\ufffdU\ufffd\ufffd+\ufffd@\ufffd\rs\u0005G\ufffd\ufffd]\ufffd+\ufffd@\ufffd\r\ufffd\t\u0018\u0012\ufffde\ufffd\ufffd~\ufffd\ufffd-\ufffd\ufffdl\ufffdv\ufffd\ufffd\ufffd`\ufffd\ufffdR\u000f\ufffd\ufffd0Wp\u0014\ufffd\ufffd\u0015\ufffd\ufffdR\u000f\ufffd\ufffd\ufffd!Q^\ufffd9\ufffd'\ufffd[\ufffd'u]\ufffdl\ufffd\ufffd\u03baS\ufffd~Y\u0015\ufffd\ufffdsqj\ufffdip\ufffd~\ufffd7\ufffdm\u0005?{\ufffd\u014e\u03f8ov\ufffd\ufffd4v1H\u001f\u001f\ufffd\ufffd\u001eE\ufffd\ufffd\u0014\ufffd\/\ufffdW\u001e\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffd\u0002\ufffd\ufffd\ufffdo\ufffdJ\ufffd\ufffd\u0311\ufffd\ufffd\ufffd\ufffd\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0677j<\ufffd\ufffd\ufffd\u030f\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0005l\ufffd\u001c\ufffd}\ufffd\u0019\u0012\ufffd\ufffd?g~\ufffdo\ufffd\u03e0\r\ufffd\ufffd\u0007\ufffd\/`K\ufffd`\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd7g\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffd\u001e\ufffd(\u0397\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffd[v\ufffd\ufffdz\ufffd\ufffd\u0000\u0155\u0019\ufffd8\u077b\u03e8\u001f(\u03b1?e\ufffdi\u0003s\ufffd,\/\ufffd\ufffd\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffd(\u039f\ufffd\u0019\ufffd\ufffd\ufffd\ufffdQ[~\ufffd\ufffdz\ufffd\ufffd\u0000\u0155[\ufffd4\u01fb\u03e8\u001f(\u03a9;\u0015\ufffdQ}(\ufffd\ufffd\ufffdi\u0016\ufffd\u000f\ufffd\ufffd\u0016\ufffd\ufffd8\ufffd\ufffd\ufffdx\ufffd>\u0014\ufffd\ufffd\ufffd\u01a1\ufffdP\u072c\ufffdC\ufffd\ufffd\ufffd\ufffdt\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd4\u001f\ufffdEq\ufffd\ufffd\ufffd\ufffd>\u0014gK\ufffdi\u001cT\u001f\ufffd3\ufffd\ufffd\ufffdQ^\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\u6ef9\ufffd:\ufffdZ*\ufffd\u000f\u0169\ufffdu\ufffd\u001e\ufffd\ufffd!\ufffd\ufffd(N\ufffd\ufffd\u0015\ufffd\ufffdR\u000fu+!\ufffdh?@qj\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u053e\ufffdS\ufffdRgLR\u0007\ufffdoMN\u030fP}(N\ufffd\ufffd+\ufffdP\ufffd\u000eIE\ufffdCqj\u03ae\ufffd\u0715z\ufffd[\tIE\ufffd\u0001\ufffdSsv\ufffdg\ufffd\u000f\u0014W\u06f7?\u0011\ufffd\ufffd\u0528>\u0014\ufffd\ufffdz\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffd85'\ufffd9\ufffd\ufffd\u0012[\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdQ?\u0015\ufffdEqj%]\ufffd\/\ufffd\u06a1~\ufffd\ufffdI\ufffd\ufffdQW|\ufffdJ=\ufffdmcv\ufffd\ufffd\u00031w\ufffdY\ufffd\f\ufffd+>\ufffd\ufffd\u0007\ufffd3\ufffdn\ufffdf\ufffdp\ufffd\ufffdr\u025a\r\ufffd&\ufffd\u0642Fgq\ufffd|\ufffd\u05ff\ufffd\u0293\ufffd\ufffdF\u0014\ufffdw\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdQt\ufffd\u03afQ\ufffd\ufffd;\ufffd\u0012]\ufffd4\ufffd\ufffd2\ufffd\ufffd\u0005s=\ufffd~\ufffd:c\ufffdM\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd`\ufffd\ufffdLj\ufffd`Q^\u0014\ufffd\ufffd\ufffd\ufffds_M\ufffdKmV\ufffdI04\u000e\ufffd\ufffdDN\u001f\u017em\ufffdaO=m\ufffd\u0003\ufffd\u0013]&^\ufffd\ufffdq\u01c8cn\ufffdn\u0010\ufffd%\ufffdMb9z\ufffd\u0011\ufffd\ufffd?K\u00171<F\ufffd\ufffd85}W\ua86e\u001d\ufffd\ufffd\ufffd\ufffd\ufffd\u051c]\ufffd\ufffdG=x\\\ufffd\"\u001f>\ufffd\ufffd]5\ufffd\u06ac\ufffdO\ufffd\ufffdqP\ufffd$r\ufffdh\ufffd\ufffd\ufffd+\ufffd\ufffd\n\ufffd\u000e\u001a\ufffd\ufffd\ufffd2\ufffd\ufffd\u0015\ufffdI\ufffd\ufffd\ufffd\ufffd\ufffd\u0017n\ufffd\ufffdz\ufffd\ufffd\ufffd\ufffd\u0018\ufffd\u0007(N\ufffd\ufffd\ufffdE\ufffdK1U\u8be8\u01c5\ufffd\ufffdG\ufffd\u0017MAyQ\ufffd\ufffd\ufffd+\ufffdeR;\ufffd\u000f\u00147\ufffd\ufffd>\u001a\ufffd\ufffd\u0014J\u06b3\ufffd\r4.\ufffdJf>\ufffd\ufffd[\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffd_\ufffdt\u06d8\u001d\ufffd\ufffd~mee\ufffd\ufffd\ufffd\ufffdo\u00168\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffddd\ufffd<Y\ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0002_\ufffdn\n\ufffd\u0764J^\ufffd4K\ufffd.\ufffdo@\u0715\ufffd2\ufffd\ufffd\u04b7\t,Bq\ufffd\"\ufffd\u00e1o\ufffd\ufffd)\ufffd\ufffd|\ufffd<z\ufffd\ufffdv:\ufffd\ufffd\u9bc7\ufffd\ufffd\ufffd+\ufffd\u000f\u0006\ufffd\u0555\ufffd'k<$\ufffd\u0007\ufffdz\u0004q)\ufffd\/\ufffdyY\ufffd\ufffdg\u000b\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffdO\u0017q\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffdqe\ufffd\u001b\ufffd\ufffd\ufffdc\ufffd\ufffd_\n>\ufffd\ufffd\ufffd\u0007\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffds\ufffd\u0006y\u0012\ufffd\u02df\ufffdG-\ufffd=\u001c\ufffd\ufffd\ufffd\u0597\ufffdi\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd{M\ufffd\ufffd\ufffd\ufffdJon\ufffd\u045a\ufffd\ufffd\ufffdh\ufffd\ufffdN\ufffd5\ufffd\ufffd\ufffd\ufffd\ufffdpA]\u0013\ufffd#\ufffd\ufffdU\ufffd~EN>\u0017&-\ufffd\u001c-,\ufffd\ufffdo4k\u000fTM\u0011\ufffd\ufffd\ufffd\\[L\ufffd\ufffd)>\ufffd\ufffd\ufffd\ufffd\ufffdwN\ufffd[\u001e#\ufffdQ\ufffd\ufffdl\ufffd.?\u0019\ufffdV$\ufffdu\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\u001e\ufffdVBR\ufffd\ufffd!\ufffd\ufffd\ufffd!y\ufffd\ufffd\ufffd\ufffd\ufffdWg\ufffd\/\ufffd\ufffd\ufffd\ufffd\u0017\u0017\ufffd\ufffdp\ufffdo@\ufffd\u001c\r\u04b4\ufffd\ufffd\ufffd\ufffd)\ufffd+W\u0193g\ufffd\ufffd-a\n\ufffd`su\ufffd\ufffdcn1\ufffd\ufffd\ufffd3\ufffd\ufffd\ufffds\u001fR\u052c\u001e\u0013\n4\u000e\ufffd\ufffdDN\u001f\ufffd}{\u0006e\ufffdy\ufffdQt\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\u001e\ufffd1;~\ufffd\u001c\ufffdG\ufffd\ufffd\ufffd\ufffdjq@\u001e\ufffd\ufffd\ufffd\"\ufffd\ufffd\ufffd\ufffd\u000b\ufffdr\ufffdA7h\ufffd^\ufffdL\ufffd{\ufffd\ufffdM\ufffd)g\ufffd$\ufffd\u000fF3\ufffd\ufffd\u054d\u001cA\u000e\ufffd\ufffd\u055d\ufffd\ufffd\u0013\u0011\ufffd7\ufffd\u01c4\u0002\ufffd\ufffd\ufffd&\ufffd\ufffdGy\ufffd\ufffd;6\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdQt\ufffd\ufffd\ufffd\u001d\ufffdc\u0718.az\ufffd\ufffdCqj\ufffd\ufffd\ufffdC];}*}\u0003\u001d\ufffd\ufffd\ufffdiH\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\u000e\ufffd\u0015\ufffd\ufffd\ufffdc\u000e\ufffd\ufffd\ufffd1\ufffd>^\u03dd\ubb6c%\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd?o\ufffd\u0015\ufffdy\ufffd\ufffd\u0015\u0017&\ufffd\ufffdd=O\ufffd\ufffd\ufffd\u025e\ufffd\ufffdl\ufffd\ufffd,\ufffd?_u\u00005\ufffd\ufffd\uc262\ufffdb\ufffd{\ufffds\ufffda4.D\ufffd=\ufffd\ufffd\ufffd\u00141|G\ufffd\ufffd85}W\ua86e\ufffd&5\ufffd\u0006:\ufffd\u0004|\ufffd\ufffdg\ufffdf\ufffd\ufffd\u000b\ufffd\u0018\ufffdm\ufffd\/j\ufffd\ufffdjz\u0003\ufffd=\ufffd\u0007\ufffdK\ufffdkVoM1(S\ufffd\t\u000e\f\ufffd\ufffd\ufffd\ufffd\u7336z'\ufffd\u001f(\u000eQq\ufffd\ufffdu\ufffd\ufffd>@7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u30ed+\ufffd\ufffdr|P\ufffd\u000f\ufffd\u000f\ufffd!*\ufffdR\u000f\ufffd\ufffd\u0260\ufffd\ufffd\ufffd\u0374\ufffd\u78ab\ufffd\ufffd\/\ufffd\ufffdfy\ufffd\u0012\ufffd\ufffd^\ufffdi5%\ufffd\u0007\ufffdQy\ufffd\ufffd\ufffd$8\u001b\ufffd\ufffd\ufffdYMP?P\u001c\ufffd\ufffd|C`F\u0018T\u001f\ufffdC\u023bR\u000fm]\u0007\ufffdeA\ufffd\r\ufffd\ufffdO\ufffdZ\u000b\ufffd\u0000\ufffd\ufffdhS\ufffd\ufffdK?\u0667F\ufffdZTj\/e\ufffd\u000f\u0006\ufffdr\u0001cE=U\ufffd\u0278\ufffdd=G\ufffd@q\ufffd\ufffd\ufffd6\ufffdO\ufffdB,\ufffd+\ufffd\ufffd\ufffdvc)^S^\ufffd?\ufffdh?@q\u001a\ufffd8\ufffd+>\ufffd\ufffd\u001e\ufffdk\ufffd\ufffd\u02e19\ufffd\u0007k\u0501*Ge\ufffd?\ufffd\ufffd\u001c\ufffd\ufffd\u001f\u0014\ufffd\ufffd\ufffd:\ufffd\ufffd\/\ufffd\ufffd\u001b\ufffd\ufffd\ufffdP\u001c\"\ufffd+\ufffd\ufffd\ufffd\ufffdZ|11Y\u0016D\ufffdCq\ufffd\u0723\u032e\ufffd\ufffd\ufffdzl\f\ufffd\ufffd\ufffd\u054a\ufffd,\ufffdFe\u0018q\ufffd-\u001br\u0564j\ufffd,\ufffdr\ufffd:\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdP\ufffd?\ufffdY&T\u001f\ufffd\ufffdF7=\u001b^A\ufffd_\ufffd,\u000b\ufffd\ufffd(\ufffdT\ufffd-<\ufffd\u000f\ufffd\ufffd\ufffde\u001a\u0007\ufffdW\ufffd\u001b\r\ufffdK\ufffd\ufffdk\ufffdR\ufffd\ufffd\u0013\ufffd[\ufffdW\ufffd&\u001dH\ufffd\ufffd;.\ufffdP4J\ufffd\ufffd\/\u0013\u0017\ufffde\n)N\ufffd8(NA\ufffd%\t\u0547\u2f08V\ufffd\ufffd\ufffdP\ufffd\ufffd\u0002N\u001a]A\u03ec?\ufffd\ufffd(\u000e\u0016c\u0019\ufffd\ufffdCq\ufffd\ufffd\ufffd\ufffdP}\u0578~\ufffdWba\r\ufffd\ufffd\ufffd\u001b\ufffduk>\u04c3\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffdLE\ufffd\ufffd8\ufffdv4\u000e\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd8W:uqQ}(N\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdr~\ufffd9\ufffd>\u0014\ufffdVmytT\ufffd\u000e7X\ufffdK\ufffds\ufffdoF\ufffd\u00069\ufffd\u0014t\u0011Y\"\ufffd\ufffd3\ufffdt\u0002E\ufffd\ufffd8\ufffdH4\u000e\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd8W:uqQ}(N\ufffdW\ufffd\u001f\ufffd\u028ak5(\/\ufffd+\ufffdw\ufffd\ufffd\ufffdCq\ufffd\ufffd\ufffd\ufffdG\ufffd\u0001\ufffd\ufffdx\ufffd\ufffdb\ufffd\ufffd\ufffd<}@\ufffd\ufffd\ufffd\u0003&\ufffd\u0014\u0019\ufffdg\ufffdo\ufffd\u0004\ufffd\u000f\ufffd\u9921qP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCq:>u~\u0668\ufffd~\ufffd\ufffdS\ufffd6IE\ufffd\ufffd8\u0013n\ufffdXT\u001f\ufffd\ufffd\\\ufffd;o\ufffd]\u0003\u0720)xo\ufffd-[C\ufffdl\u001ag\u0018\u000b\u0547\ufffdt\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\ufffd\ufffdO\ufffd_\ufffd\ufffd\u0014\ufffdEq*~\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\ufffd\u0007\ufffd\u0006k\ufffdr\ufffd\ufffdk\ufffdrw\ufffd\ufffdu\u000f\ufffdd\u0017\ufffd@}\ufffdr\ufffd\u0012P}(N\ufffd\u001b\ufffd\ufffd\ufffdt|\ufffd\ufffdQ}(\u0395N]\\T\u001f\ufffd\ufffd\ufffd)\ufffd\ufffdS\f\u0014+\u0018C$\u028b\ufffd\u0014\ufffd^\ufffdP}(\u038bh\u0005\t\ufffd\u000f\ufffd\u0473\u0002G\ufffdK+\u020c\ufffdh\u001f\ufffd\\?\ufffd\u001b\ufffd]P\\\ufffd\ufffd\bk`T\u001f\ufffd\ufffd\tC\ufffd8\u001d\ufffd\ufffd|T\u001f\ufffds\ufffdS\u0017\u0017\u0547\ufffdt|\ufffd\ufffdu9a*\ufffdm\ufffd\ufffd\u0002\ufffd\ufffd\u0004T\u001f\ufffd\ufffd$\ufffd@\ufffd\ufffdCq\ufffd`3\ufffd\u00068\ufffdhw\u0180F\ufffd\u0005\ufffd\u001d\ufffd\uda4b\ude02\u0001\ufffd\u0012P}(N'\u001b\ufffd\ufffd\ufffdt|\ufffd\ufffdQ}(\u0395N]\\T\u001f\ufffd\ufffd\ufffd\ufffd\ufffd7\u5d5f\ufffd\u0018\ufffd\ufffd,\ufffdW\ufffdS\ufffd\u001f\ufffd\ufffdQ\ufffd\ufffdd?h02\u000fh{\\\ufffd\u000f\u0003\ufffdEq\ufffd\fG\ufffd\ufffd8]=\ufffd8(N\ufffd\ufffd*\u001f\u0547\ufffd\\\ufffd\ufffd\ufffdE\ufffd\ufffd8\u001d_6_.a,\ufffd\ufffdi\ufffd3\ufffd\u0017\ufffde\ufffd\ufffd;C\ufffd\ufffd8\u02b3L\ufffd>\u00147\ufffd\u078fGfl3\u0178Pr \ufffd\ufffd\ufffd\u0004\ufffdEq\t\ufffd\ufffdwT\u001f\ufffd\ufffd\ufffdG\ufffd8\u001d\ufffd\ufffd|T\u001f\ufffds\ufffdS\u0017\u0017\u0547\ufffdt|\ufffd\ufffd>-a\u032d\ufffdS\ufffd\ufffd(\/\ufffd+2\ufffdIA\ufffd\ufffd8?\ufffd\ufffd,\ufffd>\u0014\ufffdb\ufffdGfh\ufffdq\ufffdP|(\ufffd\ufffd\ufffd\ufffdY\ufffd\ufffdU\ufffd\u001a\ufffd\u001cm\/\u0014\ufffd\ufffd\ufffd\u01a1\ufffdP\ufffdm}h<T\u001f\ufffdCy\ufffd(\u0785\ufffd\ufffd\ufffd\u0007\u0000\ufffdEq\ufffd>\ufffdHT\u001f\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffdCq\u0019f92\ufffd\ufffd\ufffd\ufffd\ufffd\u4c1c,N\ufffd\ufffd(.\ufffd\ufffd\ufffd\u0018\u0547\ufffdt\ufffd\ufffd8(N\ufffd\ufffd*\u001f\u0547\ufffd\\\ufffd\ufffd\ufffdE\ufffd\ufffd8\u001d\ufffd8_N\ufffd\ufffd\ufffd\ufffd\u04f2\u0003\ufffd\u0017\u0155\ufffdNG\ufffd\ufffd8\ufffdz\ufffd\ufffd\ufffdP\\\ufffdg\ufffd\u0016\ufffdL\ufffd\ufffdr\ufffdr2,\ufffdu\ufffd\ufffd\ufffd\ufffd)\ufffd^(\u000e\u5d4dC\ufffd\ufffd8\ufffd\ufffd\ufffdx\ufffd>\u0014\u0007\ufffd\u0193\ufffde\ufffdd\ufffd\ufffd\ufffd\ufffd(\u000e\ufffdg\u001d\ufffd\ufffdCq\ufffd\u0005\ufffd\u0001Q}(.O+\/\u0004\ufffdc\ufffd\ufffd\ufffd\ufffdn\ufffdP>\u001e\ufffd\ufffd\ufffd\ufffd\r\u0005\ufffd\ufffd\ufffdBq \ufffdu\u0018\ufffd\u000f\ufffdY\u0017\b\u0006D\ufffd\ufffd8\ufffd6~\ufffdL\u001f\ufffd\ufffd\ufffd(\u000e\ufffdt\ufffdA\ufffd\ufffd8\u0017\u001a\ufffd\ufffd\ufffd>\u0014W\ufffdG\\\ufffdM\ufffd\ufffdb~.%\ufffd\ufffdAY(\/\ufffd\u02f1y;E\ufffd\ufffd8\ufffdp4\u000e\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd8W:uqQ}(N\ufffd\u0017\ufffd\u02e7\ufffd \ufffde\u0002\ufffd\ufffd(\u000e\ufffd\ufffd\u0000\ufffd\ufffdCq\u000e$B!Q}(NA\u06a7\t\ufffdps\ufffd\"3\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\r\u0002\ufffd\ufffd\ufffdBq \ufffdu\u0018\ufffd\u000f\ufffdY\u0017\b\u0006D\ufffd\ufffd8\ufffdv`ru\u0007\ufffdEq\ufffd>'\u0010T\u001f\ufffds\"\u0012\b\ufffd\ufffdCq*\ufffdM\ufffd\ufffd\ufffd\u0000\ufffdqQ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdP \rm\/\u0014\u0007P:\ufffd\ufffd\ufffdP\ufffd\u0013\ufffd@PT\u001f\ufffd\ufffdSn\ufffdt\ufffd\ufffd}\ufffd(\u0018\u028b\ufffd\ufffd\ufffd\ufffd P}(\u038dJ}TT\u001f\ufffdS2\u029b\ufffd\ufffdEf\u0002f7Z\ufffd\ufffd(N\ufffd\ufffdC\"\ufffd\u000f\ufffd\ufffd$\ufffdqP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCq:\ufffdH\ufffdad?J\ufffdEP^\u0014WI\ufffd0\u0013\u0547\ufffd\u001cJ\ufffd\f\ufffd\ufffdCq%d\ufffd\ufffd\u0000\ufffd\ufffd4,\ufffdV<P^\u0014W\ufffd\ufffdy2\ufffd\u000f\ufffd\ufffd\u0004\ufffdqP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCq\u001a\ufffd\ufffd\t\ufffd\ufffdLh\u0014\b\ufffdEq\u001a}\u03b2Q}(\u0399PM`T\u001f\ufffd+\ufffd\ufffd\u07earCn\u0011\ufffdV\u0120\ufffd(\ufffdH\ufffd'\u0005\u0547\ufffdt\ufffd\ufffd8(N\ufffd\ufffd*\u001f\u0547\ufffd\\\ufffd\ufffd\ufffdE\ufffd\ufffd\ufffdj>\ufffd\u000f\u0003_\u00d0\ufffdP^\u0014W\ufffd\ufffd].\ufffd\u000f\u0179SZ\u001d\u0019\u0547\ufffdJ\ufffd\ufffd\u02b1f\ufffdy]\ufffd@yQ\\\ufffd>\ufffd\u0019\ufffd>\u0014\ufffd\ufffd\ufffd\ufffdAq:>W\ufffd\ufffd>\u0014\ufffdJ\ufffd..\ufffd\u000f\ufffdU\ufffd\ufffd+\ufffd\ufffd\ufffde+q\ufffdL\ufffd\u0017\u0165B{=D\ufffd\ufffd8\ufffd\ufffdSd\ufffd>\u0014\ufffd\n\ufffd?\ufffd\ufffd\ufffd\ufffd|b\ua726\ufffd\ufffd\ufffd\u0014(\/\ufffdK\ufffdy=D\ufffd\ufffd8\ufffdx4\u000e\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd8W:uqQ}(\ufffd\ufffd\ufffd\ufffdv\u001a\ufffde\ufffd\ufffd*}.\ufffdP}(\u03a5\u05aa\u0628>\u0014W\ufffdE\ufffd\ufffd\ufffdR\u0004M\ufffd\u0015\ufffd\u0006Q^\u0014W\ufffd\ufffde\u001e\ufffd\u000f\ufffd\u9d22qP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCq\u0015|4\ufffd1\ufffd\ufffdK\ufffdByQ\\\ufffd>\ufffdY\ufffd>\u0014\ufffdTlEpT\u001f\ufffd\ufffd\ufffd\ufffd\ufffdx\ufffd\ufffd0%\u001e\u0015Y\u0014B\ufffd\ufffd9\ufffd\u0017\ufffdU\ufffds\ufffd\ufffd\ufffdCq:\ufffdh\u001c\u0014\ufffd\ufffds\ufffd\ufffd\ufffdCq\ufffdt\ufffd\ufffd\ufffdP\\)\ufffd\u0735\ufffdY\/T\ufffdEyQ\ufffd\ufffd\ufffdG\u001a\ufffd\u000f\ufffd\ufffd\u042c\ufffd@\ufffd\ufffd8\u0015\ufffd$-\ufffd4\ufffd\ufffd{\u014b~\ufffdD\ufffd$\ufffd\ufffd8\u0005\ufffd\ufffd$T\u001f\ufffd\u04c9F\ufffd8\u001d\ufffd\ufffd|T\u001f\ufffds\ufffdS\u0017\u0017\u0547\ufffd\ufffd\ufffd\ufffde\u001c\ufffd\ufffduEa\ufffd\u0017\ufffd)(\ufffd$\ufffd\ufffdP\ufffd\u0017\ufffd\n\u0012T\u001f\ufffdSPd\ufffd\ufffdKv2\ufffd\ufffd\ufffdF\u0019\ufffd\ufffd\u0004\ufffdEq*\u000e\u001fi\ufffd>\u0014\ufffd\u04cc\ufffdAq:>W\ufffd\ufffd>\u0014\ufffdJ\ufffd..\ufffd\u000f\u0155\ufffd\ufffdo\ufffd\ufffd\ufffdM\t|\ufffd\ufffd\ufffdId\ufffdG\ufffd>\u0014\ufffdW\ufffd\ufffd\r\u0547\ufffd&\ufffdK\ufffd\ufffd\ufffdT\u0015\ufffd\ufffd\u0003\ufffd5?\u0019\u0001\ufffdEq%\ufffd\ufffd'\ufffd\ufffdP\ufffdN0\u001a\u0007\ufffd\ufffd\ufffd\\\ufffd\ufffdP\ufffd+\ufffd\ufffd\ufffd\ufffd>\u0014\ufffd\ufffd\u001b1\ufffd\ufffd\u0004\u0014\ufffdQ^\u0014\ufffd\ufffd\ufffd\ufffdCq^D+HP}(NA\ufffdK\ufffd\ufffd\ufffd\ufffd\u0018\u0462\ufffdz\u0017<\u028b\ufffdrb\ufffd\ufffd\ufffd\ufffdP\ufffdN8\u001a\u0007\ufffd\ufffd\ufffd\\\ufffd\ufffdP\ufffd+\ufffd\ufffd\ufffd\ufffd>\u0014\ufffd\ufffd\u001b1\ufffd\ufffd\u001cm\"\u028b\u2d04\ufffd\u0000\ufffd>\u0014\ufffdH\ufffd6,\ufffd\u000f\ufffdi\t\ufffdW\ufffdrW\ufffdhq\ufffd\ufffdQ\ufffd\u0017\ufffd\u0001\ufffd\ufffd@P}(N'\u0012\ufffd\ufffd\ufffdt|\ufffd\ufffdQ}(\u0395N]\\T\u001f\ufffdS\ufffd\ufffdaY=\ufffdQ\ufffd\ufffdi(\/\ufffd\ufffdF\ufffdw\ufffd\ufffdCq\ufffd\ufffdg\ufffdP}(.\u001b]}F\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffde*\ufffd\ufffd8\ufffd\"\ufffd\ufffd\ufffd>\u0014\ufffdS\ufffd\ufffdAq:>W\ufffd\ufffd>\u0014\ufffdJ\ufffd..\ufffd\u000f\ufffd)\ufffdhX^\ufffd;,\ufffd\ufffdLah\ufffd$\ufffd\u001f\ufffd8\ufffd.\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffdW\ufffdP2\n\ufffd\ufffd8H\ufffd\u0003\u0010\ufffd\u000f\ufffd\ufffd$\ufffdqP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCqE>\ufffd\ufffd\ufffd\ufffdP\u0015\u0001\ufffd)(\/\ufffd\ufffd$s\ufffd\ufffd\ufffdCq\u000e\ufffdV\ufffdF\ufffd\ufffd\ufffdJ\ufffdq&\ufffdq\ufffd\ufffd}A;\ufffd\ufffd\ufffd\ufffdAEV\u0006\ufffd\ufffd2\ufffd<\ufffd\ufffd\ufffdP\ufffdN:\u001a\u0007\ufffd\ufffd\ufffd\\\ufffd\ufffdP\ufffd+\ufffd\ufffd\ufffd\ufffd>\u0014W\u08fbI\u001a\f\ufffd<_.\u0018\u001a6\u0001\ufffd\u0007(\u000e\ufffd\r\ufffds\u001f\/(\ufffd ]\ufffd\ufffd\u0007\ufffdEq\ufffd>\ufffd0T\u001f\ufffd\ufffd\tD\ufffd8\u001d\ufffd\ufffd|T\u001f\ufffds\ufffdS\u0017\u0017\u0547\ufffd\ufffd|\r\ufffde\u001e\ufffd\ufffd\u0006>G\ufffd\u0001\ufffdC\ufffdC\u001b0\ufffdC,m\ufffd[(\/5\ufffd\ufffdC\ufffd\u001c\u0014\ufffd\t\ufffd,\u001b\u0547\ufffdtB\ufffd8(N\ufffd\ufffd*\u001f\u0547\ufffd\\\ufffd\ufffd\ufffdE\ufffd\ufffd\ufffd\u001c_\ufffda\ufffd\ufffd\u5721\ufffdO\ufffd~\ufffd\ufffd\ufffd\ufffd\u041a\ufffd\ufffd\ufffd\u01bf\ufffde[\ufffd\ufffdP(\/\ufffdC\ufffd\ufffd\u01a1\ufffdP\ufffdN\u001f\u001a\u0007\ufffd\ufffd\ufffd\\\ufffd\ufffdP\ufffd+\ufffd\ufffd\ufffd\ufffd>\u0014\ufffd\ufffda\ufffd\ufffdW\ufffd\u0001x\\\ufffd\ufffd\u0011\ufffd\u0014\ufffd\u0007(\u000e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ub245\ufffd3\ufffdW1x?\u0006\ufffdg\u000e\ufffd\ufffd\u0017\ufffd\u02c5\ufffdv\ufffd\ufffdCq\u0784\ufffdP}(.\u0013\ufffd\ufffd\ufffd:\ufffd^\ufffdc\ufffd\ufffd(.\u001d\ufffd\ufffd1\ufffd\u000f\ufffd\ufffd\u051e\ufffdB\ufffd\ufffd\ufffdt\ufffd\ufffdc\ufffd\ufffd\u0013\ufffd\ufffd\u001fI\ufffd\ufffdjM\ufffdrQ}(N\ufffd\u0014\ufffd\ufffd\ufffdt|\ufffd\ufffdQ}(\u0395N]\\T\u001f\ufffdK\ufffdY\u0018\ufffdy\ufffd\ufffd6\ufffd\u0005\ufffdh?@q\u0006U\ufffd\ufffd$\ufffdW47\ufffd\ufffd\ufffd(\ufffd@\ufffdU(\ufffd\u000f\ufffd\ufffd\u0121qP\ufffd\ufffd\ufffdU>\ufffd\u000f\u0179\u04a9\ufffd\ufffd\ufffdCq)>\ufffd\u001c\ufffdR\ufffd\ufffd\u000eQ^\u0014WOE\ufffdR\ufffd>\u0014\ufffd\\Q\ufffd\b\ufffd>\u0014g\ufffdbA\ufffdw\ufffd[\ufffd\ufffdME!\ufffd\u0017\ufffdUP9\ufffdB\ufffd\ufffd8\ufffdX4\u000e\ufffd\ufffd\ufffd9\ufffd\u001f\ufffd\ufffdP\ufffd#\ufffd\ufffd\ufffd\u000e\ufffd\ufffdl\ufffdr\"\u001c\ufffd\u000f\ufffd%q=\ufffd;\ufffd\ufffdkM\ufffd\u0583vb\ufffd%^\ufffdY\ufffd\u0515\ufffd)\ufffdP\\\ufffd\ufffd\ufffdC\ufffd>\ufffd~\ufffd8\ufffdf\ufffd\ufffd\ufffdB\ufffd=\ufffd;\ufffd\ufffd\u00d9\ufffd\ufffd\ufffd\ufffd\u000f\ufffd(kX\ufffd\f\ufffd\u000f\ufffd\ufffd\ufffd\ufffd:\ufffd\ufffdb\ufffdi\ufffd\ufffd\ufffd\u001eWT\ufffd\u0515\ufffd)\r(.U\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffd\"\ufffdRg\u0015\ufffd\ufffdZ\u000fK\ufffdr\ufffd\ufffd0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd~O\ufffd\u0017c\ufffd\ufffd\u0012\ufffd\/5{\u0001\ufffd\ufffdAq5e4-\u0016\ufffd6U?)\ufffd\u001e\ufffd\ufffde\ufffd\ufffdM\u06aa\rG\ufffd\ufffd\u000bV\ufffd\u0005\ufffd\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd`N\u0016P\ufffdx\ufffd\ufffd\n\u0004~\u0012\ufffd\ufffdO{utT\u000f\ufffd\ufffdY\ufffd\ufffd\ufffdZ\ufffd\ufffd~\ufffd\ufffdj\ufffdh^\u0211\ufffd\u0345\u0019F\bZ\u000fz\ufffdg_\ufffd\ufffd_\ufffd\ufffd\u0018\ufffd\u000fP\ufffd\ufffd?\ufffd\ufffd\ufffd}F\ufffd@q\ufffd\ufffd0\ufffd\ufffd\ufffd7C}(\ufffdM=\ufffd\ufffdk?A.+\u001d\ufffd\u0007(.\u001b\ufffd\u06d9\u001b\ufffd\ufffd\ufffd\u001f\u0013\ufffd\ufffd\ufffd\ufffd\u001c=\ufffdH\ufffd+\ufffdc}\u0011\ufffd\u000fP\ufffd$\ufffd\ufffd#\ufffd>\ufffd~(\ufffd\u05ab5\ufffdd\ufffde\ufffd2\ufffd\u065dz\ufffd\ufffdu\ufffd\u001d\ufffd\u0007\ufffd\u05b0l\ufffd9\ufffd=:]'\ufffdo>\ufffd\ufffd\ufffd~\/\ufffd;\ufffd\ufffd\ufffdrU\ufffd\ufffd\u001b_\ufffdUv\ufffdy\ufffdo\u000b\ufffd\ufffd\u0014\ufffd%\ufffd\u0001.U=;%\u001d\ufffd+\ufffd@\u06cd\ufffd.b\ufffd\ufffdl\u0019\ufffd\ufffd\ufffd\u0015\ufffd\ufffdR\u000f\ufffd\ufffd\ufffd\ufffd\ufffdT\u001c\ufffd\u0014R\u0780\ufffd$\u6ab6\ufffd\ufffd\ufffd\ufffds\ufffdj\u0537Ut#Z6\ufffd\ufffd3\ufffd^8~\ufffd`5eW\ua076\ufffdpX\ufffd\ufffd[~*'Q\u07ae\ufffd\u0715z\ufffd\ufffd\ufffdjsu\u001a=\f_f\u0417\ufffd\ufffd{\ufffdQ^\ufffd9\ufffd2\ufffd\u001b\ufffd|bi\ufffd\/_U\ufffd\u001e\ufffd\ufffd\ufffd\ufffd\rbA\ufffd\ufffdPPUW\ua076[\u0014\ufffdS\ufffd\ufffd\r\ufffd\ufffd:FW|\ufffdJ=\ufffd\ufffd\u0002~h\ufffd~\u0012K\u0007\u0015\ufffd\ufffdP^\ufffd9\ufffd;\ufffd[D\ufffd\ufffdY\u047d\ufffd\ufffd^\ufffd\ufffd\\\ufffd*w\ufffd\u001ep\ufffd\ufffd\ufffd,\u061b\ufffdO%\ufffd0oG|\ufffdJ\ufffd\ufffd\u06ed\ufffd\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffd\u0017K\u825f\u0015\ufffd\ufffd\u00fc\u001d\ufffd\/p}\ufffd\ufffd\ufffd\ufffd8\ufffdUZ\ufffdl\ufffdka\u0015\ufffd-\ufffd\ufffdw\ufffd\u001eh\ufffd\ufffd\ufffd\u5aaf\ufffd\ufffd\u07a0?Ey\ufffd\ufffdsW\ua077\ufffd\ufffd\u000fH\u0004\ufffd\ufffd\u001f>~9\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffdyg\ufffds\ufffds\u0019\ufffdM\u0017\ufffd,?\u0014\ufffd\ufffdJ-\u001a\ufffd?\ufffd\ufffdd\b\u0000\ufffd\ufffd\ufffdL\ufffd\ufffdRCR\ufffd\ufffd\ufffd\ufffd5%B\ufffdjd\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdm\u0018\ufffd\ufffd.\ufffd\ufffd+\ufffd\u02b2\ufffd\ufffd\r\u075f\ufffd\u0014\ufffd \ufffdV}m\ufffd1\ufffdJ(^S\ufffd\u001a|\ufffd?g\ufffdM\ufffd\ufffd\u02a9\ufffdC\ufffd[(^\ufffd\u0007\r\ufffdZ\ufffd_\ufffd\ufffd\ufffdP<\ufffd\ufffdJ\ufffd*\ufffd\ufffd\u001e\ufffd\ufffdx\\\ufffd\ufffd2\u0003\ufffd\ufffd\ufffd\u0001\ufffd\ufffdd\u0005\u075fg\ufffd\u001aP\ufffdE@k\u001b\ufffdG\u0015\ufffdxmW\ufffd\ufffd\ufffd\\\ufffd\ufffd\ufffd\u02f4\ufffd;}-y\ufffd|\ufffd\u001c\ufffd\ufffdx\\\ufffd\ufffds{\ufffd\ufffdA\ufffd\"\ufffd\ufffd\ufffdbr\ufffd\u00f7\u001a\ufffd\ufffd[\u0778<\ufffd \ufffd\ufffd\u008b\ufffd@\ufffd\ufffd\ufffdKLZW\ufffd\ufffdS \ufffd\ufffdn\ufffdK}\ufffd\u07e6_`\u001c&\ufffd\ufffd\u0014\ufffd\ufffd<\ufffd>\ufffd\ufffdgu\ufffd\ufffd\ufffd\ufffd4\u000f3W\ufffd\r\ufffd<\ufffdI\t\ufffd\ufffd\ufffd\ufffdLzVc\u0012\ufffd\u0014\ufffd\ufffd\u0016n\ufffd\u0451\ufffd\ufffd+U{\u0017\u001a\u0623-j\ufffd\ufffdh\ufffdq?\ufffd8_:=\ufffd#3\ufffd\u001c\ufffd\ufffd\\\ufffd\ufffd`\u000b\u0000\ufffd\u4594\ufffd\ufffd\u001f\u0015{7K\nYI\u0006\ufffd;m,\ufffd\ufffdCn(\u001b\ufffdR\ufffd|\ufffd\ufffd\ufffdm%\ufffd\ufffd\u0397\ufffd0.O\ufffd\ufffd%\ufffd\ufffd\u05c0dwF\ufffd4z\u000f\ufffd_x\\\ufffd5\u0004x\n?\ufffd\u0000\ufffd\u0017\u0006F7\ufffd\ufffd!\u0006\ufffd[\ufffd2\ufffdajSb\ufffd\ufffdY\ufffd\ufffd\ufffdM\ufffd(\u0634\ufffdf\ufffd\ufffd?\ufffd\ufffd(L#u\u0255?\ufffd\ufffd&M\ufffd\u3c89[\u0013,\ufffd\ufffd\u04df\ufffdM\ufffd\u0011u\ufffd\ufffdn!\ufffdu\ufffd\ufffdg+F\\A-\ufffd#\u001b\u0582\ufffd\u0007\ufffdZ\ufffd9\ufffd+K\ufffd>\ufffd\ufffdF?\u001cU\ufffd\u001eV\ufffd|\u001a\ufffd\ufffdXEG(\u001e\ufffd\ufffd\uc680\u72cd;\u025c\ufffd\ufffd\ufffdo\ufffd+\ufffd\ufffd\ufffdt\u0017\u0016=\ufffd\ufffd\ufffdK\ufffdk\ufffdq\u00181\u070a\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\ufffdvS=\ufffd\ufffd\ufffd\ufffd`\ufffd\u05e8!x\\6\ufffdk\u0002^\ufffd~\u000e\ufffd\u0004\ufffd\u07a3\ufffd:\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\u0514\ufffd(\ufffd^M\ufffd7e}\ufffd\ufffd V\ufffd\ufffd\ufffd\ufffd\ufffd[\u6592\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd7\ufffd\ufffd\ufffdy\\\ufffd|*\ufffd\ufffd\u06d0\ufffd%\u000b\ufffd\ufffd&\ufffd-\ufffd\ufffd\ufffd\ufffdi\ufffd\ufffd\ufffdV\ufffd\ufffd\u0005\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffd74\u00f8x\ufffdJ\ufffdk\ufffd\ufffd-%c\u0007\ufffdjf\ufffdwL\u0005\u001d\ufffd\f\u0664\u0000UlFW\ufffd[\ufffd\ufffd\ufffd8\ufffd\ufffdY\ufffd\ufffd\ufffdk\ufffd\u0567bLjU\ufffd;\ufffdY?j\ufffd\ufffd \ufffd\ufffd\u04ac\ufffd\ufffdK=\ufffd\ufffdv\ufffd\ufffd\u02aa\ufffd\u0014\ufffd\ufffd\ufffd\r\ufffd)9\ufffdxS1\ufffdC\u001e\ufffd\u0011\ufffdT\u0018j\ufffdP\ufffdT%\ufffd8\ufffdVpS\ufffd\ufffd\u001a\u0017oX\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02caW\ufffd\u0015\ufffd\ufffd^\ufffdM\ufffdFpO1\ufffd\u0006\/\u000f\ufffd\ufffd\u06ad\ufffda\u0018e\ufffdc\ufffd\ufffd\ufffd#\u001e\ufffd\r\r\ufffd\ufffd{\ufffdo\u0012\ufffd\ufffd\ufffdp\ufffd\u000b\ufffd\ufffd\ufffdU\ufffd\u04faw\ufffdoH41\ufffd\ufffd\ufffdI\\}\ufffd\ufffdP[\ufffd\ufffdPD\/\ufffdZ\ufffd\ufffdv\ufffd\u0741=\ufffdy\ufffdB\ufffd-\ufffd\t\u0011v\ufffd\ufffd2\ufffd\u0002E\ufffdt\ufffdjV\ufffd`\ufffd\ufffd\ufffdl\u0005\u0017\u0013Z\ufffd\ufffd\u969f\ufffdu\ufffd*^Ly]\u0014M6\ufffd\u056a\ufffd&\ufffdr\ufffd5F\ufffd\u0004`\u0016\ufffd&\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\ufffd.`\ufffdwB\ufffd\u001d\ufffd\ufffd\ufffdB\ufffd\ufffd\ufffdE\u5894\n\u07324\u001a\ufffd\u001d\ufffd\ufffdb\u0015\ufffd\ufffd\ufffdt9\ufffd\ufffd\u0002Q\u0005\/&\ufffd>j>\ufffd\ufffd\ufffd\ufffd'%\ufffd\ufffd\u001f\ufffd@\ufffd\ufffd[j7\u001a}\ufffdj\ufffd%\ufffd\ufffdK\ufffd\ufffd(\ufffdRy\\n`%\rnv\ufffd\u000e\ufffd@\ufffdY\ufffd\ufffd\ufffdr\ufffd\ufffd~\ufffd\ufffdq\ufffd\u001f#\ufffd\u731a\ufffd\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd_\uaeaf\ufffdv+\ufffd.G\ufffd\ufffd\ufffdS-\ufffd\ufffdW\ufffd\ufffdq\ufffd`\ufffdA\ufffd\u001c\ufffd\ufffd\ufffd6\b>,\ufffd\ufffd\u02ce\ufffd\ufffdK\u001a5\ufffd\ufffd\ufffdi\u067c\ufffd\u0007\ufffd\u0012\ufffd\ufffd}\ufffd\ufffd)\ufffd\u001d\ufffdi\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdz&\ufffd\u001d^\ufffdF\ufffdq\ufffd\u0733T\t\ufffd\ufffd^\ufffdoe\u001e\ufffd\u0016k\ufffd\ufffd\ufffd.nx#\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\ufffd){\ufffd\u000f\ufffd\ufffd;isr\ufffd_\ufffd\ufffd\ufffd7\ufffdw\ufffdN\ufffdB\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffdJ\ufffdU\ufffd\ufffd\u001f-d(~N\ufffd\no\r\ufffdy\\\ufffdaZ\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffdZ\ufffdyD\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd,\ufffdz\ufffd\ufffdU\ufffd?\ufffdM3\ufffd\ufffd\ufffdr\ufffd|\ufffd~\ufffdZ\ufffd\ufffdH\u0019\ufffd\ufffd0\ufffd\ufffd,\ufffdM3NG\ufffdj\u001b\ufffd\u0002\u0014\ufffd\ufffd\ufffd!g\ufffdV\u06ad\ufffd\ufffd\ufffd\ufffd\u000b\u0019Vx\u0001{\ufffd\u0010\u001e\ufffd\ufffd\u0018\ufffd\ufffd5\u00011\ufffdb\ufffdy\ufffdi\ufffd\ufffd\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd|oe\ufffd\ufffd\ufffd?\ufffd\u0018u\ufffd\u0016L\ufffdJ\ufffd;\ufffd\ufffdZ\ufffd\ufffd\ufffdk\ufffd\u0012\ufffd\u001c\ufffd\u0469\ufffd\ufffdc\ufffd\r\u001d\ufffd\b\ufffd\ufffd{L\u0005u\ufffde\ufffd\ufffdh!\ufffd\ufffdk\ufffdr!\ufffd\u0006\ufffd\ufffdn\ufffd|\u001e\ufffdU\ufffd\u0018\ufffd\ufffdi\ufffdG\ufffd\ufffdeh\ufffd\ufffd!\ufffd\u01bd\u07bc,\ufffdz\ufffddy\ufffd\ufffd\ufffd\ufffd\ufffd\u0144\\\ufffd\ufffd\ufffdd\ufffd^Xi\ufffd\ufffd\ufffdI\u06d6\ufffd\ufffd\u0013\ufffdPG\ufffd\ufffdN\ufffd\ufffd8\ufffd\ufffd\ufffdy}\ufffd@k\u0001U#\ufffd\/\u00195xh\ufffd\u0011t\r\ufffdF\ufffd\u0015\ufffd\ufffd1B\ufffd\ufffda\ufffd7\ufffd\u0002\ufffd\ufffd\f\u001aU\u0005\ufffd\\\u001e\u000e\ufffd4\ufffd]\ufffd\ufffd\u000b\u020dxt\ufffd\ufffdqn4\ufffd\ufffd\ufffdVd\u0001`\n5\ufffd.\rW9\u658d\ufffd\ufffd)A+$\ufffd\u0015{\ufffd\ufffd\ufffd\ufffd&4\ufffdoAT\ufffd\fr|H\ufffd#\ufffdr`\ufffda\ufffd\ufffdlL\ufffdVe\ufffd[h7\ufffdt9\ufffdT\u001b\u0019-\ufffdf+\u0002\ufffd\ufffd\f\u001a\ufffd\ufffd\ufffd\ufffd\u04cb\ufffd4\ufffd\u000e_\ufffd\ufffddz\ufffd\ufffd-\u044212\u001a\ufffd8\u0007\ufffdK\ufffd\ufffd\u07ab;s\u94dc\ufffd\ufffd\ufffdsb\u001a\ufffd*\ufffd;\ufffd\ufffd~\u001f\ufffd\ufffdR\ufffd\ufffd\nY\u0327\ufffdVS80\u04f0\u001c\ufffd\ufffdK\u0016\ufffdM3]\ufffd\"zDd\ufffd\ufffd-\ufffd\u0016b\"\t<.#.A\ufffd\ufffd\ufffd\ufffd\u0012\ufffd,\ufffd\ufffdB\ufffdP\ufffd\ufffd7\ufffd\ufffdJ\u0015\u001b\ufffd\ufffd|\ufffd\ufffd\ufffd)W\ufffd\u0017\ufffd\n\ufffd\ufffd\u0403T\ufffd\ufffd\ufffd\r%#I*^\ufffdZ{\ufffd6\ufffd1\ufffd\ru\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdM;]\ufffdh\ufffdvaZ\u041c\ufffd\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\ufffd|+\/\ufffdI\ufffd\u00b4T<z\ufffd%b\ufffdC\ufffd\u001c\ufffd\ufffd\u05c8\u0007r\tc\u001eZ\u0003\/\ufffd\ufffd\ufffd\u001cE\ufffd\ufffd'\ufffdO%\u0015\ufffd\ufffd*\ufffdD\ufffd\u0003s+V\ufffd\u0010\ufffd1f@s\ufffd\ufffd\ufffdr\ufffd\ufffd\u001d\ufffd\u0016\ufffdv\ufffd,\u00172\n\u0017\ufffdC\ufffd\u0017\u001e\ufffd\ufffdm\r\ufffd\/G\ufffd\u001e\ufffd,=Q\ufffdF\ufffd\ufffd\u070aQ\ufffdIa\u0007G\ufffd\ufffd\ufffdg\ufffdB\ufffd\ufffdA\ufffdC\ufffd\ufffds\ufffd0\/\ufffd.\u00122w\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0570q\ufffd\ufffd\ufffdQ\ufffd\ufffdU\ufffd\u01bc\ufffd\ufffd\ufffd\ufffd\ufffd\\bL\ufffd\ufffd\ufffd\ufffda\ufffd\ufffd\ufffd\u001a\ufffd\b.\ufffd,\ufffd\ufffdav\u0015\ufffd\ufffd\ufffd\ufffd\u0012\u000f\ufffdU\ufffdW\ufffd\ufffdm\ufffd\u0729\u0018\ufffdf\u00fa\ufffd\ufffd\ufffd\ufffd,\ufffd0\ufffd\u0005x\ufffdv\u0003\ufffd\ufffd\ufffdZq4l\ufffd[\ufffd\ufffdE%5\u0003\u0019\u0016\ufffdU_[q\f\u51c7\u001b|^\ufffdQ\ufffd-\u000b\ufffd#\ufffd\n\ufffdF\ufffd\ufffdu\u0016\ufffdM\u001b\ufffd\ufffdk\u001a\ufffd\u0006\ufffdO_^\ufffd\ufffd\ufffd\ufffd\ry\ufffd\ufffdo\ufffd\ufffd\rc4m7d\ufffd\u001c)v\ufffd5\ufffd[m\u001e\ufffd\ufffd:\u0017\ufffd\u001c\ufffd\ufffd2^W\u0016\ufffd~h\ufffd9\ufffd|\ufffd\ufffd\ufffdL\u001a\ufffd9Y\ufffdN\u0007r!j\ufffd=\ufffdJ%\ufffd\u001e\ufffd\ufffd\f\ufffd\ufffd\ufffd\ufffdDj\ufffd\u0734\u0750\ufffd|vQ~7`S\u07ba\u0015\ufffdq\ufffd\ufffds\ufffd\ufffd\ufffd\ufffd1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd~p\ufffdy\u0001\ufffd\ufffd\ufffdgq\ufffdD\ufffdx\udb8b\udf1d\ufffd\u02c5\ufffd\u0016\ufffd\ufffd+*\u07aa+\ufffd\r\ufffd\r\ufffd.\u02ddr\ufffd\u06da\u001a\ufffd*l\u0152x\\\ufffd|j%\ufffd\ufffd U\u000e\ufffd}\ufffd3\ufffd]\ufffd\u0289\ufffd\ufffd\ufffd\ufffdgq\ufffd\ufffds\ufffd\ufffd\u001c\ufffd\ufffd\u0003\ufffd\ufffd\ufffd\ufffdy\ufffd=\ufffd5\ufffd9\u001a\ufffd\u001b6]\ufffd=\u001b\ufffd\u04107\u0017\r?\ufffdq\u0019\ufffd\ufffd}\ufffd\u0281y\ufffd\ufffd\u0006E\ufffd\ufffd\u0003\ufffd\ufffd8\ufffd\ufffd=-.Su\ufffd\ufffd\ufffd\ufffd\u0007D\ufffd\ufffd\ufffd\u03f5\ufffdj\ufffdX\ufffd\ufffd\u0012-\ufffd\ufffd\ufffd?z\ufffdv\ufffd\ufffdr~\ufffdb\\\ufffd\ufffdA\ufffd0\u001c6\ufffdM\ufffd6;.\b1+^\u001bm\ufffd\ufffd\ufffd\ufffd\u052eH\u060240\u0017\ufffd\\\u018a6\ufffdve1\ufffd\ufffd\ufffd5\ufffdL\ufffd\ufffdZ\\&g2\ufffda\ufffd.\ufffd\ufffdY\u053e}\u04d9\ufffdx\ufffd|\ufffdF\ufffd\ufffd\ufffd\u0002>:\ufffd\ufffd\ufffd\ufffd\u0007&T\ufffdq\ufffdY\ufffd\ufffd\u0012\ufffd\u0598\u0015\ufffd\ufffd\ufffd)\ufffd\ufffd\u0634\ufffd.\ufffd\ufffd\u0015\ufffd\ufffd\ufffdmq\ufffdd\ufffdy\ufffd\ufffd\ufffd\ufffd\fW\u000b\ufffd\ufffd\u0799K\t\ufffd\ufffdT\ufffdm+,\ufffd\u068d\ufffd\ufffd\ufffd\ufffdK\ufffd\ufffd\u0002M!\ufffdP\ufffdM\u0002\ufffd\ufffdn|\ufffd\u0015\ufffd\ufffd\\\ufffdQ?\ufffdU\ufffd\ufffd$Z\ufffd\u00059\ufffd%\ufffd\u07fd-.\u0013y\ufffd7\ufffd\u0012\ufffd}89\ufffd_V\ufffd{\ufffd\/lcY\ufffd\ufffd\u0016N\ufffd\u001b\ufffd\u001b:]\ufffd\ufffd#7\ufffdi\ufffd\u06e0\ufffdx\\n`^\u001b\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffdB\ufffdG\ufffd;\ufffdY\ufffd\ufffd\ufffd[\\\ufffdZ\ufffdx\ufffd\ufffd\u0011%\ufffd\\\ufffd\u0007C\ufffdI\ufffdhTs\ufffd\ufffdpP\ufffd7\ufffd\ufffd9\ufffdi\ufffd&\ufffdO\ufffdi\ufffd\\nb\u0744\u05f4\ufffdi<\ufffd\ufffdi7\ufffd\ud920\uddb5~\ufffd{8U\u0016m\ufffdZ\ufffdH\u02fdOD{\\\\&\r\u0013\u079c\ufffd\ufffd\ufffd\ufffdy\ufffdX\\\u000btS\ufffd\ufffdZ\ufffd\ufffdE\ufffd\u0011o\u017c\ufffd\ufffd\u001aM\ufffd\r\ufffd.G=\u001e\ufffd\ufffd\u0005\ufffd\ufffd$4i\ufffd:|\ufffd+3\ufffd\u0472\ufffdT\ufffd\ufffd\ufffd\ufffd\ufffd\u078d\ufffd\ufffd\ufffd\ufb269\ufffd\ufffd7\ufffd\u0011\ufffd|c\ufffd\ufffdX\ufffd6\ufffd=\ufffd\ufffd6\u0018M\ufffd\ufffdBK\u0007\ufffdf\ufffdf0]\ufffdq9\ufffd\ufffd3\\\ufffd\ufffd\ufffd\ufffd^\ufffd<>\ufffd\ufffd\u07e7\u001fS\ufffdW\ufffd\ufffda\ufffd\u001c\u001b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\u0012^\ufffdR\ufffd`su8i\u0015\u000b+\u0522~^\ufffd\u0015\ufffd\ufffd\ufffd^\ufffd\ufffd\ufffd\ufffd\ufffdP=\u001b\ufffd\ufffd\ufffdt\ufffd60\ufffdn,i\ufffd\u000b\u056b\f\ufffd\ufffdr\ufffd3\u04d3>\/zw\ufffdw\ufffdL\ufffdT966\ufffd\ufffd;w\ufffd\u016d\ufffd\t\ufffd[\ufffd\u0006\ufffd\ufffd?\ufffd\ufffds?6\ufffdWF\ufffd\u000b_X\ufffd7\ufffd\ufffdh\ufffdv3\ufffd.\ufffd\\\ufffd\ufffdl\/\ufffd\u0015'\u001bu\ufffd\ufffd\ufffd\ufffdp\ufffd\u000b\ufffd?E\ufffdG\ufffdF\ufffd'_\u001c\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\u0753\ufffd\ufffd5\ufffd\u03e7\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd.\r\ufffdp76\ufffd\ufffd\ufffd\ufffd%\ufffd\ufffd&u\u001a\ufffd~\ufffd\ufffdL\ufffdi\\^\u022a\ufffd\u03db\ufffdcz\ufffd\ufffdeS\ufffd\u0686\ufffd|\ufffd\ufffdO<`\ufffd\ufffd\u02b1\ufffd\ufffd\ufffd.\u0017\ufffd'~\ufffd0\ufffdB-\u000e}\ufffd]\ufffdD:z\ufffd\ufffd_\ufffd\ufffdI\ufffd\u03d9\ufffd\ufffd\u0375\ufffdo\ufffd9\u0019\ufffdScr\ufffd\ub326~\ufffdn7\ufffd\ufffdrD\u0017\ufffd\ufffd\ufffdj\ufffdf\ufffd\u0018\ufffd\ufffdu\u0018\u0007\ufffdY\ufffdV}m\u0169Y\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\u0007.z]\u000b\ufffdQ\ufffd\ufffd\ufffd\ufffdrjQ\ufffd\u0006\ufffd+\u0017^x\ufffd\ufffd\ufffd|\ufffdxk\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd\u001b\u001dOSI\ufffd\ufffd\ufffd\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd\ufffdi\u0019\ufffde\ufffd\ufffdn7\ufffd\ufffdr\ufffd\u03cf\ufffd\ufffdy\u001b\ufffdRY\u07c6\u0001j\u0016\ufffdU_[qjV#l\ufffd\ufffd\u001d$m\ufffdo\ufffd3&n\ufffd\ufffd\ufffd\ufffd\r\ufffdq\ufffd\u001b\u000f82]\ufffd\ufffd\ufffd#\ufffd\ufffdf\ufffd\ufffd\ufffd_\ufffdc\ufffd\ufffdrt]Q\u079dO\ufffd\ufffdO\u0558,[\ufffdn\ufffd\ufffdM\ufffdy\\\ufffd\ufffds\ufffdSi+N>\ufffd\u0014\ufffd\u000f\ufffd\u1e706\u0005R\ufffd\u0012e\ufffde\u0016\ufffd\t\ufffd\ufffd\ufffd\ufffd\/\u001d@g[\ufffd\ufffd\ufffdS^\ufffd\ufffd(\ufffd\ufffd\u001f\ufffd\ufffd<wr\u001a]\ufffd\ufffd\u001f;\ufffd+\ufffd\ufffd\u869d7}\ufffdE\ufffd\ufffd\ufffdFY\ufffd\ufffd\u0017\ufffd\ufffd%\u0657^~\ufffd\ufffd\ufffd?y\ufffdMc\u0019\ufffd\u034d\ufffd<I6\ufffdM\u07d8,\u06f0n\ufffd\ufffdo\\\ufffd\ufffd:\u001c\ufffdy\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02ee\ufffdu\u001cw\ufffd\u031b\ufffd\ufffd\u0597vD\ufffdk\ufffd\ufffd\u02d4\ufffd\ufffd\u02c3\ufffd\ufffdb\u0014\ufffd\ufffdG\ufffdt\ufffd~\ufffd\u001a\ufffd\ufffd#\u0111\ufffd69\ufffd.\u0017.\u000e\ufffd\ufffd8;\ufffd%\ufffd\ufffd\ufffd\ufffd\u0017\ufffd#\ue336~G\u001c}\u0481\u0007]\u0015E\ufffd\ud227\u001c!\u079c&\u001c\u001d\ufffd\ufffd\ufffd)\ufffd\u0018%m$[\ufffdj\ufffdy\ufffd\ufffd5B\ufffd\ufffd-\ufffd\u0018\ufffdo\f\ufffd\ufffdn\ufffd\u000b$\ufffd\u001b\ufffd4J\ufffd<\ufffdsMqk\ufffd<.[\ufffd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdgx\"F\ufffd\ufffdo\ufffd..S\ufffd\u001b\ufffdsh;\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]\u0016E\ufffd\u0017\ufffd\u068a\ufffd}\ufffda\ufffdD_\u0017\u0017\ufffdO\/\u0017\ufffd]\ufffd\ufffd\ufffd\ufffd%\ufffdwM\u0014\ufffdQ|>\ufffd\ufffdx\ufffdV\ufffd?d!\ufffd\ufffd\ufffd\ufffd\ufffdv?K|\ufffd\ufffd$\ufffd\u7b28\ufffd<%\ufffdB\ufffd`\ufffd\ufffdxsu\ufffdC\ufffd\ufffd\ufffd\ufffd*,\ufffd\ufffdnKf\ufffd\ufffd\u2f3c&oEM\ufffd,\u001e\ufffd1\ufffdZ\ufffd\ufffd\u000f\ufffdmO\ufffd2sh\ufffd\ufffds\ufffd\ufffdT<\u064f!\ufffd\ufffdN\u001e3\ufffdE\/\u0011\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<xr\ufffdK\ufffd)\u0001?#.\ufffdN\ufffd\u05ddt\ufffd\ufffdD\ufffd\ufffd\ufffdc:\ufffdq\ufffd\ufffd\ufffdo\ufffd\u0015\ufffds\ufffd\ufffdQ\ufffd4\ufffd\ufffd\ufffdCs2(\u05daf\ufffdU\ufffd\\\ufffdv3\ufffd.\u0017\u001e\ufffdQ\ufffd\ufffd\ufffd\u0001<.7\ufffd\ufffds\ufffdM9W\ufffd\ufffd\ufffde\ufffdUo\ufffd\/.S\ufffd\r\ufffd\u0017]t\u0447\ufffds\ufffd>\ufffd\u001e\ufffd\ufffd\ufffd\ufffd;\ufffd\ufffdGbg<.\ufffdN\/\u0017\ufffdJ\ufffd\u001c\ufffd\ufffd]\ufffdoK\ufffdq\ufffd\u0001\ufffd>\n\u04a1\ufffd\ufffd\ufffd{\ufffd2\ufffd\u001b\u001f\ufffd\ufffd\ufffd\ufffd\u00054>\ufffd\ufffd\ufffd\ufffd\u017b\u0005\ufffd\ufffd\ufffd\u0007\u00d9\ufffd\ufffdT\ufffdP\ufffd6\ufffd^\ufffd\u0019O\ufffd\u000b\u000f\u0228\ufffd[]\u0017$\ufffd\ufffde\u0125\u0016a\ufffdu\ufffdi\u001f\ufffd\ufffd\ufffd\ufffd\ufffdL\u0016'\ufffd\ufffd\ufffd\u0017\ufffd\ufffdnq\ufffd\u001d\ufffd\ufffd\ufffdx\\N\ufffd^.>\u001d\ufffd\ufffd\ufffd\u001c\ufffd*\ufffd\ufffd\ufffd=\ufffd;j\ufffd\ufffd\u001c8,\ufffd\ufffd\ufffdy\ufffd-\ufffd\ufffd,%\ufffd\ufffd\ufffdhh\ufffd\ufffd\u001e9|\b7\r\ufffd\u0016\b\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffde\u001e\ufffd\ufffd3\u001d,\ufffdj\ufffd\ufffd\u0005\ufffd@!\ufffd\ufffd\ufffdM\ufffd\\\ufffd\ufffd\ufffd\ufffd\\\u001e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE[\u0007\ufffd,\ufffdX\ufffd\/\ufffdN\ufffdq9u>\u0019\ufffd\ufffd|\ufffd,r\u036e;\ufffd\ufffd\u000bI\ufffd\ufffd{g\ufffd\ufffdp\ufffd-}&\ufffd\ufffd\u0661\ufffd#w\ufffd\ufffd\ufffd&\ufffdj7\ufffd\ufffdr\ufffd\ufffd{@F-^\u000b6\ufffd|\u0642\ufffd\ufffdBL\ufffd\ufffd(c^\u0014\u0017\ufffd\ufffd\ufffdd\\~Z\u0014\ufffdt\ufffdnJ\ufffd\u0403\ufffd=\\_\ufffd\ufffd\ufffd\ufffdr*{2.?\ufffd\ufffd\ufffd\ufffd\"\ufffd?\ufffdo\ufffd\u0016\u001d|\ufffd\ufffd\u0017\ufffd\ufffd\ufffd+\ufffd\ufffd,'\ufffd\ufffd\ufffd \ufffd\u0001G\ufffd\ufffd\ufffda\ufffdA\ufffd\n\ufffd\ufffd\ufffdp\u001b\ufffdP\ufffd\ufffdjL\ufffd\u000b\u000f\u0228\ufffdkP\ufffdR(\ufffd\u02e5\u05b4.#^Xn\ufffd\ufffdt\u001az\ufffdJ\ufffd\u0178\ufffdPf<.\ufffd}r\ufffd\u0010\ufffd]\ufffd\u74c7\ufffd\ufffd\u001a\ufffd\u02d3\ufffd\ufffd<9\ufffd\ufffd\ufffdWn{\ufffd5w\ufffd\ufffd\ufffd3\ufffd\ufffd\u000f~\ufffdl}\ufffd{\u022b\ufffdW\ufffd\ufffdYN\ufffd\ufffd\u04cdx\ufffd9\ufffd{a\ufffd\u001eP\ufffd\ufffd\u001a\ufffdxm\ufffd6@\ufffd:\ufffdVc\ufffd\ufffd\ufffd2\ufffdc\ufffd\ufffd\ufffd5\ufffd\u0733\ufffd7-\ufffdF\ufffd\u0006=\ufffd\ufffd\u001f\u0014\ufffd\ufffd\ufffd\ufffd\u0005y)\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffd}r\ufffd\ufffd\ufffd<9\ufffd\ufffd\ufffd\ufffd\u0007\ufffd\u0013\ufffd\ufffd\ufffdo\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\ufffd_Q`(\ufffdR@\ufffd*i\u0010\ufffd\ufffdI\ufffd[\ufffd\u5bb8\ufffd\u0015\ufffd\ufffd)\ufffd\ufffd\ufffd5\ufffd\ufffd:\ufffde\ufffd\ufffdi.\ufffdF\r\ufffdL\ufffd\ufffd'<_\ufffd\ufffd\ufffdr\u0003\u06851g\ufffdG\u07b3B\ufffd\ufffd\ufffd\ufffd?7xP_\ufffd\ufffd\ufffds>\ufffdz\ufffdQ\ufffd4\u029f\ufffdp?\ufffd\ufffd\ufffd\ufffd\ufffdu\u046d\u001f?\ufffd\ufffd'o\u0224\ufffd+\ufffd\ufffd,\ufffdw\ufffd\u001e\/g\ufffd\ufffd\ufffd\ufffd\ufffd\u0016\ufffd)\ufffd\u0007\ufffd\u029b\u001a\ufffdVg\ufffd\\\ufffd\u0011\ufffd\u0006oU5\ufffd<\u001e\ufffda\ufffd\ufffd\u0002\ufffd\ufffd4\ufffdT\ufffd4Ae\ufffd\"\ufffd\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffdd* \ufffd\ufffd\ufffdT\ufffd\u0011>\u001e\ufffd{\ufffdn\ufffd!W0\ufffd!\ufffd(D\ufffd\ufffd\ufffd\ufffdVk\ufffd\ufffd\u3ca5\u03e5y{\ufffd\ufffd\u0007*\ufffd\ufffdn_\ufffd\u001bJ\ufffdaZ\ufffd\ufffd\"h\ufffd\"T\ufffd\ufffd\ufffdu\ufffd<\ufffd\ufffd{\ufffdic\ufffd\ufffd\ufffd\ufffd\ufffdu\u059fjM\ufffdy\\\ufffdq\ufffd\ufffdJ\ufffd\u05fd\ufffd\u0692\ufffd4c(=\ufffdv\ufffd\ufffd\ufffd\u0318HY\ufffd\ufffd\ufffdr\u0014}\ufffd\ufffd\ufffdO\ufffd|\ufffd\ufffdo\ufffdT6\ufffd\ufffd\ufffdq\ufffd\ufffdQg\u056f\ufffd[@\b\ufffd_r2\u05268H\ufffdU_[q\u001cT\ufffd^H\u001a\ufffd\u0017\ufffdr\u001dg\ufffd\u001e\ufffdOu\t\ufffdn\ufffdx\u000b\ufffdA\ufffd2\ufffd|\ufffd\ufffd5!\/\ufffd\u001d\u07cb\u0017\ufffd\u000b\\\u001dH0n\ufffd\ufffd\ufffd\ufffd\ufffdq9S\u0318\u05d2\ufffd<.[2\ufffda\u0018\u001a\ufffd\ufffd2\ufffd\ufffd!\ufffd\ufffd\ufffd\ufffd\u00129\u0014\ufffd\ufffd\ufffd}\ufffdU\ufffd\ufffd\ufffd\\[\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffdor\ufffd ~\ufffd\ufffd\ufffd\ufffd\u07b4\ufffd\ufffd\ufffd\/\ufffd\ufffdB\ufffdk\ufffd\ufffd\u000e9\ufffd\u07297sy\\\ufffdfu]\"9,\ufffd-\u06farT\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\ufffd\ufffdz\u0012\ufffd\ufffd\ufffd19}\ufffd\ufffd[Y\ufffd3<\ufffd\u001b\ufffd\ufffd\u05e3\ufffdwg\ufffd+\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0010\ufffdy\ufffd(w\ufffd\u0170\ufffd\ufffdq\u0642\ufffd\ufffdB\f\ufffdS\u00f2\ufffd\ufffd$v+\\\ufffd;j\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdZ<S\ufffdf\u01db\ufffd\ufffd\ufffd\ufffdJ\ufffd7\ufffd!\ufffdx\ufffd\ufffd-R~u\ufffdT\ufffd\u01b2,\u001a?1\ufffd\u0588,]\ufffd\ufffd\u8bed\ufffd,\ufffd\ufffdkye\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffdJI\ufffdph\ufffd_jO\ufffd\ufffd_\ufffd\fy-\ufffdt\u0018\ufffd\ufffdekVZ\u000f\ufffd\u0013\ufffd8G\u001a\u027a3[\ufffd\ufffd1\u000bI\ufffd\ufffd[\ufffd\u000b\t\u0018\ufffds\u0016\ufffd%-\ufffd\ufffd\u0011t<\ufffde\u0005\ufffd\ufffd4\u0012N\ufffd\ufffdxq\ufffd\u0004;*IO\u02cf\u000b$\u001b\ufffd\ufffd\ufffdZ\ufffd\ufffd\u0013!\ufffd\ufffd\ufffdr\ufffd\ufffdd\ufffd^\ufffd\ufffdr\ufffd\ufffd\ufffd\u0539\ufffd6\ufffd^\ufffd\u0230\ufffdjO\ufffd[0.\ufffd\ufffd\u0017]\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd,i\ufffds)\ufffd\ufffd8\ufffd\u0004\u00013F\ufffd\ufffd\ufffd\n(\ufffd.5\ufffd\ufffdZ\ufffd>\ufffd\ufffd-\u0014o\u0716\ufffd\ufffdml\u06a7\ufffd\ufffd\ufffdy1\ufffd\ufffd<O\ufffd\ufffd\ufffd~v}C\ufffdg\ufffd\ufffd(O\ufffd\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\u0508<GS\ufffdxh\ufffd\u0012\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffdvj24(f\ufffdnd\ufffd\ufffdg\ufffd\u0018\ufffd\ufffd\ufffd\ufffd\u0012k\u01ab\ufffdi\ufffd\ufffd\ufffd\ufffdXs-\u01900\r\ufffdU_[q\ufffd\ufffd\ufffdr\ufffd|:\u0017\ufffdfXm\u0011\ufffd\ua801$\ufffd\ufffd\ufffd\ufffd-\u0014\ufffdi[\u000eh\ufffd\ufffd\f\ufffd\ufffd\u0010\\\ufffdC\ufffd\u019a8:l\u0004\u001a\ufffd\ufffd\ufffdQ\ufffdM2\ufffdm\ufffd.E\ufffd\ufffd\ufffdEn\ufffd\b=\ufffd\ufffd\ufffd1\ufffd\\\ufffdikf,M\ufffdf\ufffd6_['-\ufffddd\ufffd\ufffdf\ufffd\ufffd=Y\u001e\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk+N]\u0013]\ufffd\ufffdal\ufffd\ufffd\ufffd\r\ufffd\ufffd5?\ufffdY\ufffdv\u000b\ufffd[\ufffd-iq\ufffd\ufffd\ufffdIOH\ufffd\b\ufffd\u03ee\ufffdg\ufffd\ufffd\/n\ufffdtk\ufffd\u001f\u001fB6\ufffd'\ufffdC\u0016\ufffdV'K\ufffd\ufffd\ufffd}j\ufffd\u1ad7N\ufffdxl\ufffdn\ufffd\u03e9_S[\u000b\ufffdeZ\ufffd\ufffd_\ufffd\ufffdh\u07da\ufffdB\ufffd\ufffdw.\ufffd`+N6j;\ufffdF\ufffd#\ufffd\ufffd\ufffdP\ufffdHEf\ufffd<T\ufffd\ufffd\ufffd[\ufffdf[n\f\ufffd;\u000f\ufffdNV.\nM2\ufffdSs\ufffdr\t\ufffdK\u03d2{\ufffdk\ufffd\ufffd\ufffdX{\ufffd>\u0005rg\t&\ufffdF\ufffd_\ufffd\ufffd\ufffd\u0005\ufffdr4^\ufffd\ufffdam\ufffdd\ufffd^\ufffd:\ufffd\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffd\ufffdU\ufffd\u001e?\ufffd\ufffd'c\ufffdj\ufffdp\ufffdIk\ufffdoK\ufffd,\u0015Zu.\u001fg\ufffd\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffdUCr\ufffd\u000f\ufffd\ufffde\ufffd\/\ufffd\u001d\u0003\ufffdh\ufffdnt\u046c\ufffd\ufffd\ufffdtmx\ufffd\ufffd\ufffd\ufffdI\ufffd\u000b\ufffd&>W9i+N\u0015G\ufffd\ufffd\ufffdg\ufffd\ufffd\ufffdP\ufffd\u0015\ufffd\ufffd\ufffd+\ufffdU T\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\ufffd\u001c>1n1\ufffd\ufffdA\ufffd\ufffdh\ufffd\ufffddUD?$\u000f[2\ufffdjMu\ufffd\ufffd\ufffd+Z\ufffdZ\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\ufffdJn\ufffdm\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd&Bl\ufffd\ufffdV\ufffd&uqU6i\ufffdd\u000f\ufffd+\u001e\u001fq\ufffd\ufffd\ufffd\u0012\ufffdP\ufffd\u0016\ufffdw\u061a\ufffd\ufffdrci\ufffdm8\u0786\ufffd\ufffd!M_]h\ufffd6\u0018bi\ufffdv\ufffd\ufffd'-\ufffd\ufffd\u0760\ufffd\u8e99A\ufffdr\ufffdh\u00f8\u001c\ufffd\ufffd\ufffdd\ufffd\u0004\ufffd\u0013\ufffd\ufffd\ufffd\ufffd\ufffdJ\u0005\ufffd\ufffdT\ufffd\u0004\ufffdL>\n\ufffd\ufffd\ufffd\u0005\u04ad\ufffd\ufffd%\ufffd\ufffd}\ufffd\ufffd\ufffd-\u001c\ufffd5=\ufffd%mn\ufffd\u030c\ufffd\ufffd$\u0016\ufffd\ufffd-T\ufffdO\u001b\u000f\ufffd\u0001\ufffdpR\u000b\ufffdn\ufffd\ufffd\ufffd\ufffdw\ufffd\u0005\ufffde\ufffd\ufffd\ufffd\ufffdU\u059f\ufffd\ufffd\ufffd\u001d\ufffd\ufffd:\ufffd\ufffd8\ufffd,arG\ufffd\ufffd.<\ufffd\ufffd0\ufffdu\ufffdP\ufffd\u0016\ufffd7nM\ufffdmI+\u0017\ufffd\ufffd6\ufffd\u0015\ufffd\ufffd0\ufffd\ufffd\u0368W\u04e2m\ufffdz\ufffdQ)k`\ufffd\ufffd\u0016\ufffd{\ufffd\ufffd\ufffdr{\ufffdp\ufffd:l%eF\u000b\u0019!\ufffd\u0005\u06aa\ufffd\ufffd8%\u000e\u0005M\u001e~\u0010\u8858S\ufffd\ufffd\ufffdV\ufffd\ufffdv\u000b\ufffd+[s\ufffd\ufffdr4\ufffd\ufffd\ufffd0\ufffd\u0011n7\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffdF\ufffd\u05ea-\ufffdBF\ufffde\f\ufffd\ufffd%\ufffd\u0015\u000e\ufffd[\ufffd&[\ufffd\ud9a1\udf3eXf+\ufffd\ufffd8t\ufffd(\ufffd\ufffd\ufffdP\ufffd\u0016\ufffd\ufffdZs\ufffd\ufffdr80?\ufffdw\ufffd\u0019\ufffd\ufffd\ufffdV\ufffd\u000e\ufffdh.7\ufffd\u00fcVm\ufffd\ufffd\ufffd\ufffdd\ufffd\u0012\ufffd\u0006\ufffdU_[qJ\ufffd\u0006\u0308\ufffde\ufffd\u000b\ufffd\ufffd\ufffdJ\u06ec\n\ufffd\ufffdB\ufffd[8^j\ufffd)o\ufffdx\ufffdz?W\ufffd\ufffd:.\ufffdn\ufffd\u036c\ufffd\ufffd\ufffd<O\ufffd\ufffdZ\ufffd\ufffd\ufffdx5?s=\ufffdVd]\u001c[\ufffd\ufffd\u0015G\ufffd7D\ufffd\u001c\ufffd\ufffd4\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffdC\ufffd[8\ufffd\ufffdo\ufffd\ufffd\ufffdK\ufffd\u06d4\ufffd\ufffd\ufffd\ufffdh`\ufffd5\ufffd\ufffdD\ufffd\u000f\ufffd<\ufffd\ufffd\n\ufffd\u0016\ufffdHF\ufffd\ufffd\ufffd\u0016\ufffdW\ufffd\ufffdU_[q*\ufffd\u0006\u02a4\ufffd\t\ufffd]\ufffdnu\u59f9\ufffd\ufffd%T\ufffd\ufffd\ufffd\ufffd@[\ufffd\u0003\ufffd\ufffd\u0781F\u0003\u06ed\ufffd-%R\n\ufffdNg\ufffd\ufffd\u0007\ufffd\ufffd@q\ufffd})\u0335\b[\ufffd\ufffd\u0015\u00075\ufffd\u001a7X\ufffd\ufffd\ufffd\ufffd\ufffdvm{-\ufffdf;\\uE,\ufffd\ufffdZYqX\ufffdv}\ufffdT(\ufffd_\ufffd\u0496\u0768\u0007\ufffdn\ufffdG\ufffd\ufffdL\ufffd\ufffd\ufffdl\ufffd\ufffdxe\ufffdY\ufffd9\ufffd\ufffd\f\ufffdMU\ufffdr\ufffd\ufffdIP6\ufffd\ufffd\u051d\ufffd6\ufffd\ufffd1\ufffd?\ufffd\ufffd\ufffd%OT\u001f\ufffdP\ufffd\u0006\ufffdv\ufffd-;R\u000f\ufffd\u075a\ud463\u07ba\ufffd\u0000\b\ufffd;\ufffd\ufffd>\ufffd!?\ufffdp}5C\ufffd\ufffd8\u001a\u001a([\ufffd\n-\u0453r\ufffd\u0015hn\ufffd\ufffd9\ufffd\u0005\ufffd\ufffdK\ufffd\u0001T\ufffd\u0015\f\ufffd\u0017\ufffdP\ufffd\ufffdv\ufffd-\ufffdR\u000f\ufffd\ufffdh\ufffd\ufffd\ufffd%\ufffd\ufffd<T\ufffd\ufffdo\ufffd\ufffd\ufffd\ufffd\u0354\u03d5\u0016\u000e3\ufffd\ufffd\u0002\ufffd\u0600\ufffd\u0003\ufffd\u0002\ufffd|\ufffdr\ufffd9M6v\ufffd4Y\u001c\r\ufffd\ufffd\u001drC@\ufffdvCy\ufffd\u0496]\ufffd\u0007\ufffdn\ufffdu\ufffdo\ufffdi\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd<\ufffd\ufffd\ufffd\u0000j\ufffd\ufffd\ufffdVs\u0016\ufffd\ufffd\u062dR4\t\ufffd\ufffd~\ufffd[\ufffd@xY\ufffd\ufffd\ufffdQ\ufffdP\ufffd\ufffdv\ufffd-\ufffdR\u000f\ufffd\ufffd\ufffd_\u001f\ufffdJd\ufffdv?x\\\ufffd%\ufffd\ufffd\ufffd\ufffd\u0012\ufffd7E.`\ufffd\u04c6['\u001b0CE\ufffd\ufffdN\bg\u000f$7.\ufffd<B&T\ufffd\ufffd\ufffd]i\ufffd\ufffd\u0523\ufffd\ufffd\ufffd\ufffdB\u5499\ufffd\\:?\ufffd\u001f<.\u03d0\ufffdi\ufffdJ\ufffd\ufffd\ufffdYi\u0000\ufffd\u0019m\u04a2\ufffdV\ufffd\ufffd\ufffd,\ufffd\ufffd[)By\ufffd\ufffd8\ufffd\ufffd>\ufffd\u0d9c\ufffdz\ufffdE\ufffd\ufffdI\u0000\ufffd\"s\ufffd\ufffdC\ufffd(\u000e\ufffdb\u0015\u9f7f\ufffd\u024f6iQ\ufffd*\ufffd6\ufffd\ufffdu\ufffdh\ufffd\ufffd\u001dn\ufffd\ufffdByQ\\\u001dc,\ufffd\ufffd\ufffdrv\ufffdA\ufffd4\ufffd\ufffdG\ufffdR\ufffd\ufffd\ufffdP\ufffdx(\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffdM~\ufffdI\ufffd\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd$\t\u0014\ufffd+\ufffd\u0017\ufffd%\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\u0503f\u0001\u000b\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\ufffdA\n\t\ufffd\ufffd\ufffd\u0019\ufffd\u001b\u0017\ufffd{\u0f7f\ufffd\u024f6iQ4;\ufffd6\ufffd\ufffd\ufffdI\ufffd\ufffdr\u0014\ufffd+\ufffd\u0017\u0159\u001bc\ufffd\u0004\u07163S\u000f\u000b\u0017\ufffd\ufffd\ufffd\ufffdr\u0343\ufffd\ufffd\ufffdr\ufffd}\ufffdz\ufffd\/m\ufffdMZ\u0014\rNm\ufffdo\u001b\ufffdfX\ufffdqY\ufffd@\u0006Ip[v\ufffdO\ufffd\ufffdA;,\ufffd6U\u001c\ufffdt\ufffdI\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd{i\ufffd\u001fm\u04a2h\ufffd\ufffd4\u0005\ufffdR\ufffd\u001c\ufffd+?'\ufffd\ufffdByQ\ufffd%\ufffdL\ufffd\ufffdm9+\ufffdX(>\ufffd\ufffd\ufffdS\u00af\u00166@\ufffd\ufffd\ufffd\ufffd\u001a\ufffdl\u0014\ufffd\ufffd_\ufffd\ufffdG\ufffd\ufffd\ufffd\u001a\u04e3\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffdZ&\ufffdt\ufffd\ufffdLp\ufffd'\ufffd>\u0014\ufffdQz\ufffd\n\u0567\ufffd\ufffd*F\ufffd\ufffd{\ufffd4\u0015n\ufffd\ufffd\ufffd\ufffdi-\ufffdD\ufffd^x \u000b\ufffd6iQU\u01df>\ufffd\ufffd[\ufffdP\ufffd\ufffd(ZR\ufffdt\ufffd\ufffdltg\ufffd>\u0014\ufffdOy\ufffd\t\ufffdW\ufffd\ufffd\ufffd\u00155\u07ba,u-\u0015\ufffdT\ufffdN\ufffd\ufffd&%\ufffd\u001e\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd4\ufffd\u0003\u0014\ufffdDK\ufffd\ufffd\ufffd>\u0014\ufffdDK\ufffd\ufffd\ufffd\ufffdj\\\ufffd\ufffd*F\u0014\u0015n+\ufffd\ufffdi\ufffd\ufffd&\u000e\ufffd)\ufffd\ufffdCq:U\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\ufffd\ufffd\ufffdo@\u000f\ufffd\ufffd\u0316\ufffdy\ufffd\ufffd\u001eM\ufffdP\u000fP\\\u0013-M\u02a2\ufffdP\\\u0013-M\u02a2\ufffd*q\ufffdV1d\ufffd\ufffd?\ufffd\ufffd\ufffd7Uq\u0014\ufffd*\ufffd\ufffd\u0010\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffdG\ufffd\ufffd\ufffd\u001d\ufffd\ufffdy\ufffd\ufffd\u001eM\ufffdP\u000fP\\\u0013-M\u02a2\ufffdP\\\u0013-M\u02a2\ufffd\ufffdp\ufffd\u0017\ufffd\ufffd*F\ufffd\ufffdJ\ufffd\ufffdC\ufffd\ufffd&\ufffd\ufffd*\ufffd\ufffdCq:]\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\ufffd\ufffd\ufffd\u000f\u001b\ufffdy\\V5\ufffdA\u001a\u0696(\u0380\ufffd*\u0014\ufffdW\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\/\ufffd$\ufffd\ufffdM\u001b\ufffd\ufffd\ufffde|\u001e\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz}\ufffd\u0003\ufffde\u001e\ufffdU\rd\ufffd\ufffd\ufffd%\ufffd3\ufffd\ufffd\nE\ufffdU\u0b2dbD\ufffdT\ufffd|\ufffd*x3P\u0014\ufffd)\ufffd\ufffd\u0004\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffdA\ufffd\u001c\ufffd+\ufffd-'\ufffd<hI\ufffd2\ufffd(\/\ufffd\ufffd\u0004\ufffdx\ufffd\ufffdCq\u001e\ufffdg\ufffdP}\ufffd8\ufffd\ufffd\ufffdY\u0148\ufffd\ufffd69x\ufffdP\ufffd\/S\ufffd`'\ufffd>\u0014\ufffd\ufffd\ufffd\ufffd8:\u001e$\ufffdMZTz\ufffd\ufffd\u06e0a9\ufffdD\ufffd\u0004_\ufffdS\ufffd\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffd+iV\u0012\u0547\u26a9\ufffd_\u001a\ufffdW\ufffd\ufffd\ufffdb\ufffd\u06fa\ufffdu\ufffdxa\ufffd\ufffd7We\u0014\ufffd+\ufffd\ufffd\u0014\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffd\\\u001f=\ufffd\u0013\u001c\ufffd\ufffdy\ufffd\ufffd\u001eM\ufffdP\u000fP\\\u0013-M\u02a2\ufffdP\\\u0013-M\u02a2\ufffdJq\ufffd\ufffd\ufffd\ufffdY\ufffd\u01ba\u0016\ufffdO\ufffd+\ufffd\ufffd\u0005Gq\ufffdb\ufffdNQ}(N'\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd\ufffdeU\u0003\u0019\ufffd\ufffdm\ufffd\ufffd\f\ufffd\ufffdBQ}e8\ufffd\ufffd\ufffd\ufffdO\ufffdLj\ufffd\ufffdi\ufffd\ufffd7)\ufffd\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\u001d\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffdX\u001f]5\ufffd\ufffdxUi\ufffd\ufffd\ufffd(\ufffd4\ufffd\u0017\u0155\u00129\ufffd@\ufffd\ufffd8\ufffdrK\u00e3\ufffdJp\ufffdE\ufffdW\u001a\ufffd4\ufffdV\ufffd\u000b\u000f\ufffd\/\ufffd-\ufffdFq\ufffd\ufffd\ufffd\u0012P}(N'\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdn\ufffd\ufffde\ufffd\ufffd_')\ufffdq\ufffd\ufffd\u0217\ufffd\ufffd\ufffd(.\ufffd\ufffd\ufffd\u001d\u0547\ufffd|\ufffdO\ufffdP}j\u001c-.\ufffd\ufffdZ\\\ufffd\ufffd\ufffd\ufffd\u0013Y\ufffdw5\ufffd8{|\ufffd\ufffd\ufffd\u0005<\u001f\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz\ufffd\ufffd{\ufffd\u057f|\ufffdR\ufffd\ufffd\ufffd\u052e\ufffdh[\ufffd8\ufffd\ufffd.\u0012\u0567\ufffd\ufffd\ufffdr\u07de\ufffdE\ufffd\ufffd\u000e\ufffd\u0000\ufffd\ufffdSk\u0016\t\u0547\ufffdt\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\ufffdu\ufffdO\ufffd\ufffd\ufffd\\\u001cjQU}\ufffd\ufffd\ufffdq`\ufffd\u0007\ufffd>\u0014\ufffdY\ufffd\ufffd\u000e\u0567\ufffd\ufffdW4{\ufffd\ufffdQ4\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\u001c\ufffd\ufffdI\t\ufffdG\ufffd>\u0014\ufffdSo+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^w\ufffd6\ufffd\ufffd\ufffd\ufffd^\ufffd5\ufffd\u04d2f)\u001e\ufffd\ufffd(\ufffd\ufffd\ufffd'\u0005\u0547\ufffd\ufffd\ufffd.\ufffd\ufffd\ufffdT8\ufffd\ufffdw[;\ufffd\ufffd0\ufffd3\ufffdU\ufffd\ufffdZ\ufffd\ufffd\ufffd\ufffd\u04a2J\ufffd]\u000f\ufffdO\ufffd\ufffdvZ\ufffd\ufffd\ufffd\ufffd\ufffdL\u07fa\ufffdF\ufffd\ufffd0gZT\u0015O\ufffd\ufffd\ufffd(.\u0015\ufffd\ufffd!\ufffd\u000f\ufffdy\u0015\ufffd\"C\ufffd)p\ufffd+\ufffdd\ufffd,E\ufffd>\ufffda\ufffd\ufffd\ufffdO\ufffd\ufffd,\ufffd\u2505=$\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz]\ufffdW\ufffd\ufffd*\u008a4WZ*(\ufffd,\ufffd\u0017\ufffd\ufffd\ufffd\\\ufffd\ufffdP\ufffd+\ufffd\ufffd\ufffd\ufffd\ufffd\"N^\ufffdsY\ufffd\\Q\ufffdpk\ufffdW]#\u0014\ufffd.\ufffd>\u0015\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffdF\u07c0~\ufffdd\ufffd\ufffd\u0003\ufffdF\ufffd\ufffd\ufffd\ufffd4\ufffd\u0017\ufffde\ufffd\ufffd;C\ufffd\ufffd8\u02b3L\ufffd\ufffd\u0002N^\u0470\ufffd\u0013%\u00139=\ufffdR\\\ufffdw\ufffd\ufffd\u001c\ufffd\ufffdL!\ufffd'\ufffd>\u0014\ufffd\ufffdn+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^'\ufffd\ufffd=~\ufffd\ufffd\ufffd*\ufffdt\ufffd\u0013-i\ufffd\ufffdc\ufffd\u0017\u0155\ufffd8OF\ufffd\ufffd8\ufffdK\bP}\u0005\u001c\ufffd\ufffd\ufffd\ufffd\ufffd\/!.&\u03c9\ufffdbb\ufffd\ufffd\b\ufffdSP\\Iq\ufffd\u0268>\u0014\ufffd\u0013l+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^\u0017\ufffd\ufffd~+UwV\ufffdg\ufffd\\h\ufffd\u0010\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffdy2\ufffd\u000f\ufffd9\u0017\\B\ufffd\ufffd\ufffd\u301f\ufffd)a,K\ufffd[T\u0014\ufffd\ufffd\ufffde\ufffdQ\\Yy\ufffd\ufffd>\u0014\ufffd\ufffdk+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^\ufffd\ufffd\ufffd\u001aF\ufffdE>\ufffdZT5.\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd'\u0005\u0547\ufffd\ufffd\ufffd.\ufffd\ufffd\ufffdr8\ufffd\u000e\ufffd\ufffd\ufffd)2\ufffdSV\ufffd\\>\ufffd\ufffds\ufffd\n\ufffd0\t\u0155\u0006p\ufffd\ufffd\ufffdCq:\ufffd\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\u9d6eO\ufffd\ufffd0\u06b5<Qe]\ufffd$t\ufffd\u0011\u028b\ufffd*\ufffd\u001cf\ufffd\ufffdP\ufffdC\ufffd\ufffd\ufffdQ}Y\u001c\ufffd\ufffdou+\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01ab\ufffd\u0336W\u0005\ufffdCV\ufffd\ufffd\ufffd\ufffdkY\ufffd`\ufffd\ufffd\u001a\ufffd\ufffdfY\ufffd\ufffd\ufffd\ufffd4\ufffd\u0017\ufffd)I<$\ufffd\ufffdP\ufffd\u0007\ufffdJ\nT_\u0006\ufffdbX\ufffd\ufffd\ufffd\ufffdp?\ufffd\ufffdS\ufffd4l\"\ufffd\u000f\ufffd\ufffdjc+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^\ufffd\ufffd\ufffdt\/\ufffd\ufffd>\ufffdD\ufffd]-IT\ufffd;\u028b\ufffd\ufffdn\u0010\ufffd>\u0014\ufffdF\ufffd>*\ufffd\/\ufffds2,o*\ufffd\ufffdy\\\ufffd7\ufffd\u0012\ufffdn\/%\ufffdcb\ufffd\ufffd\ufffd\ufffdmS_<Y^6\u07c7\ufffd\u8ca9%\ufffd\ufffd\ufffd\ufffd\ufffd(\u000e\ufffdt\ufffdA\ufffd\ufffd8\u0017\u001a\ufffd\ufffd\ufffd\ufffd\u0014\ufffd\ufffd\ufffd\ufffds\ufffd\u0010\ufffdJ\fEU\ufffdxU\ufffd\ufffd4\u00147.\ufffd\ufffd\u0000\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffdkQ\ufffd\ufffd,\ufffd\ufffdU$`\ufffdE- \ufffd\u0010\ufffd\ufffd8#r\ufffd`T\u001f\ufffd\ufffd(\ufffd(\u0014\ufffdo\ufffd\ufffd\u0001t^\ufffdq\u0088U\u0001^R?0t\u00ab(\ufffdJBq\ufffd\"^\u000fQ}(N'\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffd\ufffd\ufffd\rh\ufffd\ufffdh0Y&q\u05b4\ufffd*Z\ufffd\ufffd\ufffd\n*\ufffdY\ufffd>\u0014\ufffdTlEpT\ufffd\u0018\ufffdd\u0011\ufffd\u0004\ufffd\u001eZD\ufffdc\u078a:\ufffd,\u0014\ufffd\t\ufffd,\u001b\u0547\ufffdtBm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffdkK\ufffd*m\ufffdh4Y&q\ufffd\ufffd\ufffd\ufffdY\ufffd\ufffd\ufffd*.\ufffdy\ufffd>\u0014\ufffdRkUlT_\ufffd\ufffd{\ufffd\ufffd\ufffd\u0110\ufffdhy\ufffd\ufffd\ufffdY\ufffd\\\ufffd\ufffd\ufffdBAO\t\ufffd>\u0014\ufffd\ufffdm+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd^;\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffdjY\ufffd\ufffd\ufffdj6w\ufffd\ufffd>\u0014\ufffdNiudT\ufffd\bg\ufffd\ufffd\ufffdj\ufffdtn\ufffd\ufffd2<@\ufffd\ufffd\ufffdy\ufffd\ufffdCq:\ufffd\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\u9d61oS.a\ufffd\ufffd_v\ufffd\ufffdEUG]\u001a\u028b\ufffd|\ufffd\ufffdp\ufffd\\]L\ufffd\ufffd\ufffd\ufffdCq\ufffd\ufffd\ufffd\ufffdP}1n@\ufffd\ufffdw2[\ufffd\ufffd\ufffd\ufffde\u001e\ufffd\ufffd\ufffd\u0002\ufffdv\u0356rs\ufffd&-\ufffd\u001a6\ufffd7\ufffd\ufffd\ufffdb\ufffd\ufffd\ufffdb\ufffdkQ\ufffdP\ufffd\ufffd\ufffd<\ufffdK\ufffd$\ufffd\ufffd\ufffdWf3\ufffd\u061d=\u001f\ufffd\rn\ufffd\u001a\u001f\ufffd\u001c\ufffd\ufffdP\ufffd\t\ufffdM,\ufffdO\ufffd6\ufffd\ufffdR\ufffd-@\ufffd\ufffd\u0015?\ufffd\u001d\ufffdM\ufffdU\u0012\u0004\ufffd\ufffd]\u000f\ufffd\u03c7-m\u04a2\ufffdoS}\ufffd\u0015ZXn\ufffd\ufffd\u0011Kk\ufffdEU?$\r\ufffdEq9\ufffd;\ufffd$\u0016>\ufffd\ufffd+\ufffd~\ufffd\u0797dr\ufffd\ufffd#s:9\ufffd\u0013q\ufffd\ufffd\ufffd\ufffd\b\u0547\ufffd\f\ufffd\ufffdBQ}b\ufffd[\ufffd\u03ed7^?+\u0011\ufffd|&\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd%t\ufffd\ufffd}\ufffd\u0003\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffdL_<*7\u07051Q\ufffdL\ufffd$\ufffd\ufffd\u0011\u028b\ufffdr\ufffdo\u0014\ufffd\ufffd\ufffd?x\ufffdA?Jg\ufffdv#u\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdS\ufffd-?An\ufffdC\ufffdL|\ufffd\ufffd\ufffdCq\u0013J\ufffdG\ufffd>\u0014\ufffdSo+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd&\ufffd\ufffd\ufffd\ufffdR\ufffd\u5470&ZTuC\ufffdP^\u0014\ufffd\ufffd\ufffd\ufffdc\ufffd\u001a\ufffd\\&~?\ufffdm\ufffd\ufffd\ufffdd\ufffd\u03afD;\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0665\ufffd;\ufffd\/\ufffd\ufffd\u0017?Q\ufffdC\u001f\ufffd.~\ufffd\ufffd\ufffdOec`g\ufffd>\u0014\ufffd\ufffd\ufffdG\ufffd\ufffd\ufffd\u0013\ufffd\\l[\u001e\ufffdhY\ufffdL|\ufffd\ufffd\ufffdCq\ufffd\u001d\ufffd\"\ufffd\ufffdP\ufffd\ufffd\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd4\ufffd\u0003\u0014\ufffd\ufffdr\ufffdx\ufffd(a\ufffd\ufffd\u0007G7\ufffd\ufffd\ufffd\ufffdMb9:\ufffd\u0003\ufffd\ufffd\ufffd2\ufffd\ufffd\ufffd;F\u001css\u0014\u001d\ufffd,\t{\ufffdi\ufffdK\ufffd\u0010\ufffd\ufffd\u0668\ufffd\ufffd\u001b\ufffd\u000f\ufffd\u0019\ufffd[\u0004\ufffd\ufffd\ufffd\u0013\ufffdj<\ufffd\u001b\u0016\ufffd@\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd[I\ufffd!\ufffdw=P>\u000fU\ufffdL\ufffd\u4f4a\ufffd`\b{se\u0019?T\ufffd\ufffd\ufffd(.\ufffd\u055b\ufffdW\ufffd\ufffdg\ufffd['\ufffdr$\ufffd1.\u0013\ufffd\ufffd\ufffd\ufffds\ufffdkR\ufffdr\ufffd\ufffd\ufffd\ufffd\u0131\ufffdw\ufffd\u000f\ufffd\ufffdS\ufffd\ufffdCfshy\ufffd\ufffdb6\ufffd\u000fP\\\ufffd\ufffd\ufffd\u0019\ufffd\u000f\ufffd\ufffd\u06ca\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffd\ufffd\ufffdu\ufffd\u0006I\ufffd\ufffd\ufffd\ufffd`\f\ufffd\ufffd\u04e2\ufffd\ufffdY\u001a\u028b\ufffd\ufffd\u0012\ufffd\u001drg\ufffd\u001f\u0015\ufffd\ufffdWI\ufffd\ufffd\ufffd5\ufffd\/\ufffd\f\\\/[\ufffd\ufffd\ufffd\ufffd\u04ec\ufffdV\ufffdJ\ufffd\ufffd\ufffd\ufffdC\ufffd\ufffdb\ufffd\u0012\ufffd\ufffdP}(\ufffd\ufffd\ufffd2m\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd[C\ufffd\ufffd\n}&h\u000f\ufffd\ufffd\ufffdI5\ufffd\ufffd\ufffdd\ufffd\ufffd\uda4b\ude2c\ufffd?\ufffdL\ufffd^ n.\ufffd\u02d7J\ufffd[\u0135<.\ufffdm\ufffd\ufffd\ufffd)\ufffd\u0005+\u05dd\ufffd\u001f\ufffd\ufffdP\ufffd\ufffd\f\ufffd\/\ufffdz\ufffdWm\u0012\u0011\u0547\ufffdt\u0736\ufffd\ufffdx\ufffd\ufffd6iQ\ufffd5\ufffd7X\ufffd\ufffd\u001f\u0142\ufffd\ufffd\ufffdZT\ufffd\ufffd\ufffd\ufffd\uda4b\ude2c\ufffd\u000f\ufffd\u000f$\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0225\ufffd\ufffd:\u01a7e\ufffd_\ufffdo\ufffd\ufffd\ufffd\ufffd\ufffd\"\ufffd\/k\ufffd\ufffd\ufffd\ufffd\ufffdFt\ufffd\u0006\ufffd\ufffd^\ufffd}\ufffdly\ufffd\ufffd\ufffdz\ufffd\u00be\ufffd\foT\ufffd\ufffdg\u0648\ufffd\u0011\ufffdL\ufffdz<(\ufffd-9xv\u0017\ufffd\ufffdLK\ufffdjg\n\ufffd\ufffd(.\u0013<\ufffdq\ufffd\ufffdG\ufffd\ufffd\ufffd\ufffd3G\ufffd\ufffd\u000f&\ufffdr\ufffd\ufffd\ufffdu\ufffd\ufffd\u0478\ufffd \u001e\ufffd5\ufffd`\ufffdc^\ufffd\u000b\ufffdG\ufffduJ\ufffd\ufffd\ufffd\ufffd%\ufffd\ufffd9\ufffd\u0002(.[\ufffd\ufffd\u0019\ufffd\u000f\ufffd\ufffd\u06ca\ufffd\ufffdA\ufffd\u0001-\ufffd\ufffd\/\u0017\ufffd\ufffd\u05afj\ufffd[\ufffd\ufffd\u038f\ufffd\ufffd\ufffd\u0005\ufffd8\u0006\ufffdKt\u0001\ufffd.\ufffd\ufffdY_\ufffd\u00181\ufffdZ4\ufffd6\ufffdFyQ\\\ufffd\ufffd\ufffdb\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd4.\ufffd\u0015e\ufffd?\u0019\ufffd\ufffdA\ufffdw\u001eu\u0014]\ufffd;\ufffd\ufffd\ufffd\/Z0.;\uf41an\ufffd\ufffdys9s\ufffdHz\ufffd|\u0006\ufffd3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd(\/\ufffdsnu\ufffd\u000f\ufffd>\ufffd\ufffdVq\ufffd<\ufffdO\u0017\ufffdF\ufffdV\u02d7\ufffd \u0007\ufffd{\ufffd1;\ufffd\ufffd}\ufffd\ufffd5\ufffd!\ufffd\ufffdu\ufffd\ufffd\u001b\ufffdG\ufffd\u001c\ufffd>\ufffd\ufffd'\ufffd\ufffd\ufffd\ufffdar\ufffdg\ufffd\ufffd\/\ufffd?\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\ufffdG\u76eb\ufffdLY,\ufffdZ\ufffd\u0597\ufffd\ufffdhIg8>FyQ\\N\ueb4f\u0015\ufffd\u07b5\ufffd\ufffds\ufffd\/\u038f\ufffd;\ufffd?\ufffdG\u0455?\ufffd\ufffd\\\ufffdx\ufffd\u0016\ufffd\ufffd\u0010\ufffd\u063c\ufffd\ufffd\ufffdo\ufffdh\ufffd\ufffdG?z\ufffd~\ufffd|c.\u0004v\ufffd\ufffd\ufffd9\ufffdQ4\ufffd\ufffd\u000e\ufffd\ufffd)}r\ufffdOoR\ufffd\ufffd.\ufffd\u0014n\u0002\ufffdu\ufffd+\ufffd\u0011W\ufffdW\ufffd\ufffd`u\ufffd\u001dZ}\ufffd\ufffd(\ufffd\ufffdK\ufffd\u064a\ufffd\ufffdA\ufffduZ\ufffdm\u07c3\ufffd\ufffd\ufffdo\ufffd\ufffdS\ufffd\u00132\ufffd\ufffd~A\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdQ\ufffd\ufffd}\u05e3O\ufffd\ufffd\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdot<>\ufffd\ufffd>_T\ufffd\u0019\ufffd\ufffd\ufffd\u014b\u0014\ufffdawsmI^\ufffdEe\ufffd\ufffd2)Ji\u0019\ufffd\ufffdq\ufffd\uda4b\ude3c\ufffd[\u0017\ufffd\ufffd\ufffd=\ufffd_d\ufffdN\ufffd\ufffd=\ufffd\ufffd\ufffd0\u001a\ufffdW\u001cz\ufffde\ufffdU\u0007P\ufffd\ufffd\uc262]\u0007\ufffdC\ufffd\ufffd\ufffd\u00194.D\ufffd\ufffd\ufffd\ufffd\u0018\ufffd9\ufffd\ufffd\u0012\ufffdCF\u0468\ufffd\u000e;\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffd2Fu\u001f\ufffd\ufffdv\u0001\ufffdq\ufffd9\ufffd\u0018\ufffd%Wz\t\u0005\ufffd\ufffd\ufffd|X]Um\ufffd\ufffd\ufffd,\ufffdK\ufffde\ufffd\ufffd\ufffd7I\ufffdh\ufffd8\ufffd\u07d3\ufffd\ufffd\"\ufffd\ufffdN^\ufffd\ufffdw\ufffdJG\ufffd\ufffd\ufffdc\ufffdM\t\ufffd\ufffdy\ufffd8QBn9\ufffd[\ufffd\ufffd<\ufffd\u023bRG\ufffd\u001b\ufffd,\ufffd*^B\\\u0015\ufffdn.\u000f\ufffd\ufffd~\u0016\ufffd_\u001d\ufffd\ufffds\ufffdk\ufffd!;\u000bnz\ufffd\ufffdi\ufffd\ufffd\ufffd(\/\ufffd+\u0012\u0774z\ufffd\u0005W\ufffd\ufffd+_\ufffd>\ufffd\ufffd\ufffd\u001d\u001f\ufffd\ufffd\u000f\ufffd]s\ufffd\ufffdu\ufffd\ufffd>\ufffd\ufffd\ufffd|\ufffd\ufffd\u0012\u001fl]q\ufffd\ufffdkO|\ufffd\ufffdA\ufffdU\ufffdt\ufffdI'\u001du\ufffd\ufffdn9\ufffd\ufffd\u0358\ufffd_K:0ZE\ufffd\ufffd\u0002\ufffd\ufffd\u0007\ufffd\u001aI\ufffd\ufffd,]\ufffdCy58?V\ufffd\ufffd\u0017\ufffdj\ufffdK\ufffd\ufffdq\ufffd\ufffd\u0003[qJ\ufffd\u001b%k\ufffd\ufffdQ\ufffd\ufffd0\ufffd\ufffdc\ufffd\ufffd1\ufffd\ufffd\ufffd\ufffd\ufffd3\uf37e\ufffd\n\ud90b\udfcb.\ufffd\ufffd\ufffdo8\ufffd_\ufffd\ufffd\\\u01b0\ufffd\ufffd^\ufffd\ufffd\ufffdK\ufffds\ufffd\ufffdN\ufffd\t\ufffd >J\ufffd->\ufffd:\ufffd\ufffdK|G\u657f\ufffd\ufffdE\ufffd~8\u0013\ufffd\ufffd\ufffd~\u0002\u001d\u0410\u001c\ufffdO(\ufffd\ufffd2NN\ufffd]\ufffd\ufffd\ufffd]\ufffd\/\ufffd\ufffd\ufffdR\ufffdb\u0006\ufffd\ufffd\ufffd\u013a)\ufffd\ufffd*\ufffd\ufffd\u000e9\u9923\u000eY\ufffd-\ufffd>\ufffd6\ufffd'\ufffd>9\ufffd\u0018\ufffd\ufffd-f\ufffd\ufffdU\ufffd\ufffd\ufffdaR\ufffd\ufffd\u0019\ufffd2\u001f\ufffd\ufffd\ufffd\ufffdX\ufffdTH\ufffd\ufffd7.\ufffd\ufffd\ufffd\u0005J\u000el\ufffd)\to\ufffd\ufffd\ufffdr\ufffd}G\ufffd\ufffd\ufffd\u0002qa\ufffd{\ufffd\ufffd\ufffd_qXt\ufffd\ufffd\ufffdQ\ufffdG;\ufffdt\ufffd\ufffd\ufffd\ufffdm\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffd?v\ufffd\ufffda'\u0283W\ufffd5\ufffd(\ufffd\ufffdxg\ufffd(\ufffd~\ufffdm2\ufffd\ufffd%\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd'@\ufffd\u001d\ufffd\ufffdW\ufffdz\ufffd%>:\ufffd\ufffd4&K\ufffd\u001a\ufffd\ufffd+\ufffd0\u0007\ufffdEq\u0006rZ7.;\ufffd\u0490a'M:de\ufffd\ufffdqyu2*\u000bq\ufffd\ufffdg\u0016W\ufffd\u001c\ufffd\u01f8\ufffd\ufffd*\ufffd%Dy58OV\ufffd\ufffdT8\ufffd\ufffd\u001b\ufffdQ\u0738@\u0241\ufffd8%\u1352\ufffd\ufffd\f\ufffd:5\ufffd\ufffd_\ufffd\u000f&\ufffd\ufffdp\ufffdb\ufffdx\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd|\u01b0\ufffd\/\ufffdzTv\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffd\u0018M\ufffd\ufffd\ufffd'\ufffd@%oB\u001c\u0017\ufffd\ufffd\ufffd\ufffd\ufffd3\u0010\ufffd\u0450\ufffd\ufffd|\ufffd\"-\ufffd\u06ab4\ufffd\ufffd1\u028b\ufffd\f\ufffd]q\ufffd\ufffd:d\ufffd\ufffd\ufffd\ufffd\u9432~\u0278<\uc415\ufffdR\ufffdC\ufffd\ue63c+W\ufffd*\ufffd\ufffd\ufffd\u047e\u0010\ufffd]\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\u070aj}\ufffdr(nRB}d+\ufffd:\ufffdYj\ufffd\ufffd\ufffd\ufffd\u0017%\ufffdn\u0014\ufffd\ufffd\u001f~w\ufffd}\u0003\ufffd\ufffd_\ufffd\ufffd\ufffd\ufffd\u032d\ufffd\ufffdQ\ufffda\ufffd\u029c<\ufffdC\u0011'GQ\ufffd\ufffd\ufffdF\ufffdgG\ufffd\ufffd[\ufffd\ufffd3\ufffd\ufffd\ufffdj\ufffdty-\u001f\ufffd\ufffdy\ufffdW\ufffdh\n\ufffdP^\u0014W \ufffd\ufffd\ufffd\ufffd\u9432\ufffd\u0278<\uc415\ufffd2\ufffd\u0017\ufffd\ufffd%\ufffd\ufffd+\ufffd\ufffd\ufffd\ufffdeQ\ufffd3\ufffd\"\ufffd\ufffd\ufffd8_V\ufffd[Q\ufffdoR\u000e\ufffdMJ\ufffd\ufffdl\ufffdQG7K\ufffd\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxU~\ufffd\ufffdq\ufffd\u033c\ufffdn\/\ufffdg\ufffde\ufffd->6*;\ufffd\ufffdO\ufffd\u0017Av\ufffd3\ufffd\ufffdQ\u0014\ufffd_\ufffd4B\ufffd\ufffd\ufffd7\ufffd\ufffdj\ufffd\ufffd\ufffdj\ufffd\ufffd\t@yQ\ufffd;\ufffd\u0551Q}\u001587\u001dR\ufffdN\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e)T\ufffd\ufffd\ufffd\ufffd(\u001c\ufffd[\ufffd\ufffdeuy\ufffd\ufffd\ufffdM\u02a1\ufffdI\t\ufffd\ufffd\ufffd8\ufffd\ufffdf\ufffd\u001a-\u000f}@2\ufffd\ufffd\ufffd8o4\ufffd.\u001e6\ufffdv\ufffd\ufffd\u0118\ufffd\ufffd^>#N\ufffd\ufffd\ufffd\ufffdH\u02b0\ufffd?w?\u0019\ufffd:\ufffd\ufffdhr\u0014E\u001f\ufffd'\/T\ufffd\ufffdxez)\ufffd\u064f?TiH\ufffd4^%0\ufffd\ufffd(\/\ufffd\ufffd.\u0010\f\ufffd\ufffd\ufffd9\ufffdR2.\u000f;de\ufffd\u0014\ufffd]\ufffd\ufffdN\ufffd\ufffd\ufffd\ufffdq\ufffd\ufffd\u001e\u0019\ufffd\ufffdI\ufffd\/a\u000f\u0003\ufffd\ufffd\u001a\ufffd'\ufffd\ufffd+\ufffd\ufffd7.\ufffd\ufffd\ufffd\u0005J\u000el\ufffd)\to\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdp[\u000b\u06ef\u001d\r\ufffd\/\u001c\ufffd\ufffd\u000f\ufffdy\ufffd{\ufffd\ufffd\u03c8\ufffd\ufffd \ufffd!\u000f\ufffd]\ufffd,\ufffd\u0003:\ufffd,\ufffdnL\ufffd\ufffd\ufffd}\ufffd\ufffd\u0018]\ufffdG^\ufffd\ufffd\\[L.\ufffd\ufffd\\f\u0014\ufffdk\u06b2\ufffd\ufffd\ufffd,T_\u0015\ufffdI\ufffd\ufffd\ufffdO\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd=B\ufffd\ufffddp\ufffd?.W\ufffd\ufffdGU\ufffd\ufffd\/\ufffd\ufffd\u001a\ufffd'\ufffd\u04ca\ufffd\ufffd\u001a}c0\ufffd\u001b\u0017(9\ufffd\u0015\ufffd$\ufffdQ\ufffdF\ufffd\u000f\u000f<\ufffd8\ufffd\u07c8\ufffd\u04b6\ufffd{\u0414\ufffd\ufffd\ufffd\u001f\ufffd\ufffd\ufffdk\ufffdw\ufffd\ufffdP>#.1\ufffd\ufffd]#%\ufffd.\ufffd9\ufffd\u001e:\ufffd\ufffd~49\ufffd\ufffd?:b\u0004*y\ufffd?\u0003\ufffd\ufffd\ufffd:\ufffd\u0014\ufffdT\ufffd\ufffd\ufffd\u0299\u0004\ufffd\u0017\ufffd9\u0013\ufffd\t\ufffd\ufffd\ufffd9\ufffdRw2.\u000f;de\ufffdL\ufffd$\ufffd\ufffd\u035a\ufffd\u00ea%\ufffd\ufffd\ufffdGI\u00110\ufffd\ufffdf?\ufffd\ufffd\ufffdjp\ufffd\ufffd.\ufffd\ufffdF\u07f8 \ufffd\u001b\u0017(9\ufffd\u0015\ufffd$\ufffdQ\ufffdN\ufffd?n\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd|1\ufffd\ufffd(z\ufffdX\ufffds\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\u0018E;\ufffd\ufffd_\ufffd\ufffdc\ufffd\ufffd\ufffdm\ufffd\ufffd\ufffd\ufffd\u0013^<R2\ufffd\ufffd[;\ufffd\u0019}\ufffdg\ufffdM*\ufffd(z:\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdB\ufffd\ufffd\u05eabN\ufffdt^9!\ufffd\ufffd(\ufffd\u0006\ufffd\ufffd\ufffd'\u0002o\ufffdO\ufffd\ufffd\u001d\ufffd<W\ufffd\ufffd\ufffd\ufffd\u001e.:\ufffd\u0512\ufffd\ufffd\ufffd\u000eY\ufffd-\ufffd}R\u0016\ufffd\ufffd?\ufffdWe=\u0014x8\ufffd\ufffdf?\n\ufffd\ufffd\ufffdp~\ufffd.\ufffd\ufffdN_R\u0012\ufffd%\ufffd\ufffdw[q\ufffd\u26e4k\ufffd|\ufffd\ufffd2\ufffd\u07bf%?\ufffd?~\ufffd\ufffd\ufffd>\ufffdy+\ufffd\ufffd?\ufffd\ufffd>'D;v<\ufffd\ufffd\ufffd\ufffd\ufffdB\ufffdP\ufffd\ufffd\u001f<Z\ufffd\u001eu\ufffd\ufffd\u001d%\u000e\u0016\ufffd\ufffdk\u05d3\ufffd\ufffd\u000eI6m\ufffd\ufffd\ufffd\ufffd\u001b\ufffd\\\ufffd.)m79\ufffd\ufffdn\ufffd\ufffdh(o5\ufffd\ufffd\u0007{\ufffdqV\ufffd\u001co\u0002A\ufffd.\ufffd\u0015\ufffd\ufffds\ufffdi'\ufffdX\ufffd\ufffd\u011f+Q\u0019\ufffd\ufffd\u001e.:$\ufffd\u0019u\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd&UCq\ufffd\u0012\ufffdQ\ufffd\ufffd~\u0014\u0002\ufffd\ufffd\ufffd|X]Qe\ufffd\ufffdQY\u0014WA\u0015g\u064a\ufffd\ufffdA\ufffd\ufffdZ\ufffd\ufffdv\ufffd\ufffd.\ufffdq\u0018\ufffd\ufffd\ufffd\ufffds\ufffd\ufffd\ufffdE_?g5\ufffd\ufffd\u012d\u03dc}i\ufffd>\ufffd\ufffd\u0018\ufffd\ufffd-\ufffd;7\ufffd\ufffd%)=>\ufffd\ufffd~\ufffd\ufffd1\ufffd>\ufffd\u0535)F\ufffdUS\u0006uy\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\ufffd$\ufffd3.s\ufffd})\u059eg\ufffd_:}n;\ufffd\u0018\ufffd>WB]\ufffdqju=\"\u0017\u001dr\ufffd=\ufffd\ufffd\ufffdR\ufffdo\u001c\u000b\u014d\u000b\ufffd\u0007Ke\ufffd\ufffd:\f\ufffd\ufffd\ufffdq\u001e\ufffd\ufffd\ufffd\ufffd^\ufffdY}+\ufffd\ufffd,\ufffdO\u0017\ufffdF~\u0013-;\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd\u03a7\ufffd\ufffd\ufffd\ufffd\u0006\ufffdD\ufffd&\ufffdqv(-(o%\ufffd\ufffd\ufffd\u0140\ufffdee\\\ufffd\ufffdQB\ufffd\ufffd\u001f\u0012o\u064an9\ufffdp\ufffd\u0007\ufffd{\ufffdD?\ufffd|\ufffd\ufffdGUIk\u001d\ufffd\ufffd[\ufffd\ufffdP\\U\ufffd\ufffdyU7\ufffdQ\u0001\ufffd\u0017\u01694X\ufffdZ\u0015|\ufffd\ufffd\ufffdCq\u0015Tq\ufffd\ufffd8:\u001e$\ufffd\ufffd\u0016]\ufffd|\ufffd\ufffd\ufffdh$\\}\ufffd\ufffdb9\ufffd\ufffd\ufffd\ufffd\ufffdrBiAy+qo;FV\ufffd\ufffd\ufffd\ufffd\ufffd\u031d\ufffd\ufffd\ufffd\ufffd]\ufffd<\ufffd7\ufffd\ufffdNJ\ufffd\ufffd;\ufffdu\ufffd\ufffd\ufffd\u001d\ufffdx\ufffd\ufffdO\ufffd\ufffd\ufffd\ufffd:?\ufffd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffdy\u0007]\u000b\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd{\ufffd\ufffd>O\ufffd\ufffd\ufffd\ufffd\u000f\ufffda>+\u8283\ufffd\u0012\ufffd\\\u0004\ufffdie=\ufffdE\ufffd\ufffd\ufffd:\ufffd\ufffd[\ufffd\ufffdP\\U\ufffdTy}!*\ufffd\ufffdP^\u0014\ufffd\ufffd`\ufffdjU\ufffd$\r\u0547\u24b8e\ufffd\ufffd\ufffd7Io\ufffd\ufffdI\ufffdkv\ufffdN\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\u000b\ufffdre^\u0013}\ufffd\u0626\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffdv\ufffd\ufffd=\ufffd&\u001a\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffdxI\u0014]{\ufffd\ufffd\ufffd\ufffd\ufffdC\ufffd\ufffd4V\u001fq\u0191\ufffd;F\ufffd\ufffd\ufffd\ufffd{=\ufffd\ufffd\u06df-n\ufffd\ufffd\ufffd\ufffd#O:p\ufffdUY\ufffd\ufffd\ufffd\ufffd\u0390\ufffd\ufffd\/\u0177\ufffd]\/^O\u01da\ufffdJ\ufffdUq\ni\ufffd\ufffd(\ufffdS\t\ufffd:\ufffd\ufffd[\ufffd\ufffdP\\\ufffd\u0006\ufffda\ufffd\ufffd~\u0014\u0001\ufffdEq*Q\ufffd\ufffdV\ufffdN\ufffdP}(.\ufffd[\ufffdn+NY|\ufffd\ufffd6iQ\ufffdn\ufffd\ufffdPZP\ufffd*\ufffd\ufffd\ufffd\u0757\ufffd\ufffdF\ufffd\ufffd?&\ufffdF\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\u0512\ufffd\ufffd\u001a\ufffd\ufffd\ufffdN\ufffd\u001d\ufffd\ufffd\ufffd}\ufffdD\/\ufffd\ufffd)zH\ufffd\ufffdq\ufffd\ufffd\ufffd][\u0475\u000f?\ufffd\ufffd\ufffd\ufffd\ufffdu\ufffd\ufffd:\ufffd\ufffd\ufffd\u001d$\u001f\ufffd}\ufffd\ufffdM\ufffd\ufffdy\ufffdD\ufffd \ufffdWU=\ufffd\ufffd\ufffd#P}(\ufffdTq\ufffd\ufffd~\u0014\f\ufffdEq\ufffd\ufffdl\ufffdQ}(N\ufffd\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdm\ufffd\u0017J\u000b\ufffd[\ufffd\ufffdL|\ufffd\ufffd\ufffd\u001dz\ufffd\ufffd\ufffd\ufffdo\ufffdqY\ufffd\ufffdc\u0695\ufffd\ufffd\ufffd]\u010f9Q\ufffdm\ufffd\u001f)x\ufffd\u0018\ufffd>0\ufffdSb\u0007\ufffd\u02cf\ufffd\ufffd{j.\u0011\ufffd\ufffd\ufffd\ufffdk\u03d3\u001e\ufffd{8.P\ufffdyg\ufffd?Z<\ufffd\u0000\ufffd\ufffdJ\ufffd\ufffd1J\u03aa\ufffdQR\ufffdk2\ufffd\u000f\ufffd\u0019\ufffd\ufffd\ufffde\ufffda$\ufffd\u0017\ufffd\u0019\ufffd\u0006G\ufffd\ufffd8\ufffd0[qt<H~\ufffd\ufffd\ufffd\ufffd\ufffdI_(-(o\u0015\ufffdl\ufffd3\ufffd\ufffd|1\ufffd\ufffd,Ak\ufffd\u045b\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffd\ufffdO\u0017\ufffd\u0015\ufffdzy\ufffd\u0018\ufffd\ufffdw\u0000E\ufffd\u0014\ufffd\ufffd\ufffd\ufffd\ufffd;\ufffd\ufffdGb\ufffd\ufffd{\ufffd8\ufffd\ufffd\ufffd\ufffd7\ufffd\u1e3c\ufffd\u0005\u2407\ufffdu\ufffd\u07e4\f\ufffds%\ufffd\u00f2\ufffd\ufffdU\ufffd\ufffd\u0014\ufffd\ufffd\ufffd\ufffdCq\ufffd\ufffdu\ufffd\u0018<_644\ufffd;j\ufffd$\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd\ufffdI_(-(o\u0015\ufffd\ufffdbw\u0014}u\ufffd\ufffd\ufffd\ufffd~\f9.\ufffdXq\ufffd\ufffd\/}\u0209r\\\ufffd\ufffd\ufffd\ufffd\ufffd\u001a=j\ufffd^o\u0016\ufffd\ufffd\u0016\ufffd\ufffd\u0011\ufffd\u0397\tQ\ufffd\ufffd\ufffd\ufffdr\ufffd\ufffd\ufffd\ufffdn;\ufffd:\ufffd_\ufffd~\ufffd\ufffd\ufffd\ufffd~\ufffd\u001f,^|#=\u0007V\ufffd*}\u00e0\u00ff(.]\ufffd\ufffd1\ufffd\u000f\ufffd\u0019j\ufffd\ufffd?\ufffd[\ufffdByQ\\\u0015\ufffd\ufffd<T\u001f\ufffd\ufffdi\ufffd\u0015G\u01c3\ufffdI\ufffdJo\ufffd\ufffd\u0482\ufffdV\ufffd.\u0010\ufffd7\ufffdj\ufffd\u000e\ufffd\ufffd7\ufffd\ufffdF_y \ufffd\ufffd\u001d\ufffd\ufffd,-U\ufffdxbj\\\ufffd\ufffdpZ\ufffd2q\ufffd\u0581\/\ufffd8\ufffd\ufffd`\ufffd\ufffd\ufffd8\ufffd\u0017G\ufffd\ufffd\ufffd\u001f]\ufffdy\ufffdD_\u0015\ufffd\ufffdVU\ufffd\u00028@\u0002\ufffd\u000f\u0159Ua]\ufffd\u001b\ufffd\u05d7\ufffd\ufffd\ufffd\ufffd\u0774\ufffd$\ufffd\ufffdQ\ufffd\ufffd\ufffdt\ufffdI_(-(o\u0015n\ufffd\ufffd*Ml\ufffdw<\ufffd\ufffdw=\ufffdI\ufffdqy\ufffd\u0019d\ufffd\ufffd\ufffd\ufffd\ufffd\u001a\ufffd\u0007\ufffd=\ufffd`w>\ufffd\u0597O:\ufffd\ufffd\ufffd\u0447\u04b7\n\ufffd[)\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd'\ufffd\ufffd\ufffd~gL\ufffd*}\ufffd(.]\ufffd\ufffd1\ufffd\u000f\u0159i\ufffd\ufffdTB\ufffdP^\u0014g\ufffd\ufffd\u001e\u001a\u0547\ufffdt\ufffdl\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffd&}\ufffd\ufffd\ufffd\ufffdU\ufffd\u037b\ufffd\u001d\ufffd\ufffd\u0017\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd`j\\~\ufffdC\ufffd\ufffd\ufffd{\ufffd\ufffd_\ufffdq\ufffd\ufffd\ufffd\ufffdq\ufffd\ufffd\u0787\ufffd\ufffdO\ufffd\u04ee\ufffd\ufffd\ufffdCw\u022b\ufffdW<.\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffd\ufffdu2\ufffd\ufffd\u0012U\ufffd\ufffd\ufffdQ\\\ufffd\ufffd\ufffdcT\u001f\ufffd3\ufffd>\ufffd\ufffdTB\ufffdP^\u0014g\ufffd\ufffd\"\u0018\u0547\ufffdt\ufffdl\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffd&}\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0247\ufffd\ufffd\ufffdVj\\\ufffdt\u07fd\u000e\ufffdv\ufffd\u000b\ufffd\ufffd6Z_\ufffd\ufffd|\u000e\ufffd\u001e\ufffdjy\ufffd\ufffd}\ufffd^b\ufffd\u0007\ufffd\ufffd\ufffd\ufffdx\\\ufffd.\u0707\ufffdg\u021bKZ\ufffd\\\ufffd\ufffdZ\ufffd&W\ufffd\ufffd\n\ufffd\ufffdRE\ufffd\ufffdl\ufffd\ufffd_\ufffd\u001a\u0016GyQ\ufffd^\ufffd\u001b\u0004\ufffd\u000f\ufffd\ufffdT\u068a\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAy+q\u0017\ufffd[\ufffd\ufffd\u0477\ufffd?\ufffd\ufffd\ufffd>\ufffdh\ufffd\ufffd_\ufffdn\ufffd`v'\u0717\ufffd]\u001d\ufffdy\ufffd\u0004^w\ufffd9\ufffd\u0019>\u0012%[,}v\ufffd\ufffd\ufffd\u07ca\ufffd[\ufffd\\\ufffd\ufffd\ufffd\u0006\u01d5>\ufffd\u28b8T\u0011\ufffd\ufffd\"\ufffd@\ufffd\ufffd\ufffd8\r\ufffd\ufffdlT\u001f\ufffd\ufffd\t\ufffd\u0015G\u01c3\ufffdI\ufffdJo\ufffd\ufffd\u0482\ufffdV\ufffdv\ufffd\ufffd%*\ufffdi'\ufffdL\ufffd\u0016\ufffd\ufffdz\ufffd2\ufffd*\ufffd\ufffd\u03d5\ufffd\ufffdn\ufffdW\ufffds*\u000e\ufffdK\u0015\ufffd\u001e\ufffd\/\ufffd\ufffd{\ufffd+_(\/\ufffd\ufffd$s\ufffd\ufffd\ufffdCq:\ufffd\ufffd\ufffd\ufffdx\ufffd\ufffd6iQ\ufffdm\ufffd\ufffdPZP\ufffdj\ufffd\u0005'\ufffd,\u0012\u0017m\ufffd8\ufffd\ufffd\ufffd\ufffd\ufffd\ufffds\u015c\ua516?W\ufffdZ<\ufffd[\ufffd\ufffd$\u000e\ufffd\ufffd\ufffd\ufffd\u001f\ufffd\ufffdx\ufffd\ufffd\u0012\ufffd\ufffdJ2\ufffd\ufffd\ufffd>\u0014\ufffd\ufffdj+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd6\ufffd\u000b\ufffd\u0005\ufffd\ufffdm=\ufffd\ufffdU\u0006+\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\/(\ufffd\ufffd\u0012[\ufffd\\\ufffd*\ufffd&y\ufffd>O\"\ufffd\ufffdI\t\ufffd\u0442X\u0482P^\u0014\ufffd%t\u0004@\ufffd\ufffd8\ufffdL[qt<H~\ufffd\ufffd\ufffd\ufffd\ufffdI_(-(\/\ufffdS\ufffd\ufffd#\r\u0547\ufffd|hVq\ufffd\ufffdP\ufffd\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd=\ufffd\\\u0001DyQ\ufffd\ufffd\ufffdK\u0012\ufffd\u000f\ufffd\ufffdD\u06ca\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAyQ\ufffd\ufffdg\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\u0547\ufffdT\u001c%i\ufffdb\ufffd$'\ufffd\ufffd\ufffdTh\ufffd\ufffd\ufffd>\u0014\ufffd\u0013o+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd6\ufffd\u000b\ufffd\u0005\ufffdEq*\ufffd}\ufffd\ufffd\ufffdP\ufffd\u000f\ufffd*\u000eT\u001f\ufffdSq\ufffd\ufffd\ufffd\u001e%\u0017\u0017CyQ\\\ufffd\u0016\ufffd\u0268>\u0014\ufffd\u0013l+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd6\ufffd\u000b\ufffd\u0005\ufffdEq*\ufffd}\ufffd\ufffd\ufffdP\ufffd\u000f\ufffd*\u000eT\u001f\ufffdSq\ufffd\ufffd\ufffd\ufffd`\ufffdr(\/\ufffdSkq\ufffd\ufffd\ufffdCq:\u0176\ufffd\ufffdx\ufffd\ufffd6iQ\ufffdm\ufffd\ufffdPZP^\u0014\ufffd\ufffd\ufffdG\u001a\ufffd\u000f\ufffd\ufffd\u042c\ufffd@\ufffd\ufffd8\u0015\ufffd:mI\u013fA\ufffd\ufffd\u001c\ufffd\ufffd\ufffd(n\u001c\ufffd\ufffd\u0001\ufffd\u000f\ufffd\ufffd\ufffd\u06ca\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAyQ\ufffd\ufffdg\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\u0547\ufffdT\u001c\ufffd4\ufffd=\u0632\u001c\u028b\ufffd\ufffdZ\u0727\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz\u06e4\/\ufffd\u0016\ufffd\u0017\u0169|\ufffd\ufffd\ufffd\ufffdCq>4\ufffd8P}(N\u0161L\u0003\ufffd\ufffd\ufffd\ufffdP^\u0014\ufffd\ufffd\ufffd!\u0011\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffd&}\ufffd\ufffd\ufffd\ufffd(N\u5ccf4T\u001f\ufffd\ufffdY\u0141\ufffdCq*\u000ee\u06a2\ufffdHF\ufffd\ufffdJDyQ\\*\ufffd\ufffdCT\u001f\ufffd\u04c9\ufffd\u0015G\u01c3\ufffdI\ufffdJo\ufffd\ufffd\u0482\ufffd8\ufffd\ufffd>\ufffdP}(\u0387f\u0015\u0007\ufffd\u000f\u01698Ti\u0003\ufffd\u001elY\u000e\ufffdEq*->\ufffdP}(N\ufffd\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdm\ufffd\u0017J\u000b\u028b\ufffdT>\ufffdHC\ufffd\ufffd8\u001f\ufffdU\u001c\ufffd>\u0014\ufffd\ufffdP\ufffd!\ufffd`\ufffdr(\/\ufffdSi\ufffd\ufffdCq:\u0376\ufffd\ufffdx\ufffd\ufffd6iQ\ufffdm\ufffd\ufffdPZP^\u0014\ufffd\ufffd\ufffdG\u001a\ufffd\u000f\ufffd\ufffd\u042c\ufffd@\ufffd\ufffd8\u0015\ufffd*mA\ufffd(\ufffd\ufffd\u0018\u028b\ufffdTZ|\ufffd\ufffd\ufffdP\ufffdN\ufffd\ufffd8:\u001e$\ufffdMZTz\u06e4\/\ufffd\u0016\ufffd\u0017\u0169|\ufffd\ufffd\ufffd\ufffdCq>4\ufffd8P}(N\u0161H\ufffd\ufffd\ufffd\ufffd\ufffdP^\u0014\ufffd\ufffd\ufffd%\t\u0547\ufffdt\ufffdm\ufffd\ufffd\ufffd \ufffdm\u04a2\ufffd\ufffd&}\ufffd\ufffd\ufffd\ufffd(N\u5ccf4T\u001f\ufffd\ufffdY\u0141\ufffdCq*\u000eE\u001a\ufffdy\ufffd\n\ufffd\ufffd(N\ufffd\ufffdK\u0012\ufffd\u000f\ufffd\ufffdD\u06ca\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAyQ\ufffd\ufffdg\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\u0547\ufffdT\u001c\ufffd4\ufffd\u0001\ufffd\ufffdb\ufffd*\u0005\ufffdEq*\u000e\u001fi\ufffd>\u0014\ufffd\ufffdl+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd6\ufffd\u000b\ufffd\u0005\ufffdEq*\ufffd}\ufffd\ufffd\ufffdP\ufffd\u000f\ufffd*\u000eT\u001f\ufffdSq\u0014\ufffd\ufffd\ufffd\ufffdT\u0010\ufffdEqE-~RP}(N\ufffd\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdm\ufffd\u0017J\u000b\u028b\ufffdT>\ufffdHC\ufffd\ufffd8\u001f\ufffdU\u001c\ufffd>\u0014\ufffd\ufffd(\ufffd\u0343W\ufffdx\\.z\ufffd\ufffd\ufffdm\/\ufffd\ufffd\f\ufffd&-*\ufffdm\ufffd\u0017J\u000b\u028b\ufffdT>\ufffdHC\ufffd\ufffd8\u001f\ufffdU\u001c\ufffd>\u0014\ufffd\ufffd(\ufffd\ufffd\ufffdh(\u0012\ufffd\u0015\ufffdxJ@\ufffd\ufffd8\ufffdl[qt<H~\ufffd\ufffd\ufffd\ufffd\ufffdI_(-(\/\ufffdS\ufffd\ufffd#\r\u0547\ufffd|hVq\ufffd\ufffdP\ufffd\ufffd\ufffd\ufffd\u0006_\ufffd\ufffd\ufffdr\ufffd;0\ufffdj{\ufffd\ufffde\ufffd6iQil\ufffd\ufffdPZP^\u0014\ufffd\ufffd\ufffdG\u001a\ufffd\u000f\ufffd\ufffd\u042c\ufffd@\ufffd\ufffd8\u0015G>\ufffd\ufffd\ufffd[\u0367\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffdu:\ufffd\u000f\ufffd\ufffd\ufffd\u068a\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAyQ\ufffd\ufffdg\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\u0547\ufffdT\u001c\ufffd4\ufffd^?Y\u000e\ufffdEqy-\ufffd\ufffdQ}(N\ufffd\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdm\ufffd\u0017J\u000b\u028b\ufffdT>\ufffdHC\ufffd\ufffd8\u001f\ufffdU\u001c\ufffd>\u0014\ufffd\ufffd\u0227\ufffd\u0003\ufffd\ufffd\ufffd\ufffdAyQ\\\u0012\ufffd\ufffd;\ufffd\u000f\ufffd\ufffd\ufffd\u06ca\ufffd\ufffdA\ufffd\u06e4E\ufffd\ufffdM\ufffdBiAyQ\ufffd\ufffdg\u001fi\ufffd>\u0014\ufffdC\ufffd\ufffd\u0003\u0547\ufffdT\u001c\ufffd4\ufffd\ufffd\ufffd~.\ufffd\ufffd\u0014\u0162\ufffdr&\ufffd9\ufffd>\u0014\ufffdSk+\ufffd\ufffd\u0007\ufffdo\ufffd\u0016\ufffd\ufffd6\ufffd\u000b\ufffd\u0005\ufffdEq*\ufffd}\ufffd\ufffd\ufffdP\ufffd\u000f\ufffd*\u000eT\u001f\ufffdSq\ufffd\ufffd\u0016\ufffdB.\ufffd\ufffd\u0014\ufffdEq\u0015TN\ufffdP}(N'\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-*\ufffdm\ufffd\u0017J\u000b\u028b\ufffdT>\ufffdHC\ufffd\ufffd8\u001f\ufffdU\u001c\ufffd>\u0014\ufffd\ufffd\u0226m\ufffdO\ufffd\u001c\ufffdByQ\\V\ufffd\ufffd3T\u001f\ufffd\ufffd)\ufffd\u0015G\u01c3\ufffdI\ufffdJo\ufffd\ufffd\u0482\ufffd8\ufffd\ufffd>\ufffdP}(\u0387f\u0015\u0007\ufffd\u000f\u01698\ufffdi+bn\ufffdM\ufffd:CyQ\\\u0015\ufffd\ufffd<T\u001f\ufffd\ufffdi\ufffd\u0015G\u01c3\ufffdI\ufffdJo\ufffd\ufffd\u0482\ufffd8\ufffd\ufffd>\ufffdP}(\u0387f\u0015\u0007\ufffd\u000f\u01698\ufffdis\u0006W\ufffdx?F\ufffd;\ufffd\ufffd^{\ufffde\ufffd6iQil\ufffd\ufffdPZP^\u0014\ufffd\ufffd\ufffdG\u001a\ufffd\u000f\ufffd\ufffd\u042c\ufffd@\ufffd\ufffd8\u0015G&\r4F\\\f\ufffdEq\u0019-\u001eOP}(N'\ufffdV\u001c\u001d\u000f\ufffd\ufffd&-\n\ufffd\ufffd\ufffd\ufffd\ufffdH\u000e\ufffd\u0014J\u000b\u028b\ufffd\u00b8\u0017\ufffdm\ufffd\ufffd\u0235P\u000f\ufffd]\ufffd\ufffd\u0014\ufffd\u001f\ufffdK\ufffdz~\ufffd\ufffd_\ufffd\ufffdG\ufffd\ufffd(\u069d\ufffd\n`\ufffd\ufffd\ufffd\b`3)\ufffdW(\/\ufffd\ufffd\ufffdA,\ufffd-\ufffd\u001eYW\u036e\ufffduf\u001d\ufffd{iS\ufffdk\ufffd\ufffdlo\ufffd\u03e8m\u0014\ufffd\ufffd\ufffdBy\ufffd\ufffd@\ufffd\ufffdm\ufffd\ufffd\u0236\u0412\ufffd\ufffd&h\ufffdP\ufffdP\ufffd\ufffd\ufffdU\ufffd\ufffd\ufffd\ufffd&?\u06a4E\ufffd\ufffdp\ufffd(\ufffdZO\n\ufffd\u0015\u028b\ufffd\u001b\ufffd\u0005\ufffd\u06d2\ufffd1\u0014 \ufffd\ufffd\u0018\ufffd\u001f\ufffd\u02e8\ufffdw\u2f7f\ufffd\u024f6iQ49\ufffd6\ufffd\ufffd\u0593By\ufffd\ufffd8\ufffd\ufffd`\u0001\ufffd\ufffdzd\f5\ufffd\ufffd\u05e5u\ufffd\ufffd\u000f\ufffd'\ufffd\ufffd\ufffd\ufffd8\ufffdB\r2\u06a4E!\u001b\ufffd,+\ufffdZO\n\ufffd\u0015\u028b\ufffd\u001b\ufffd\u0005\ufffd\u06d2\ufffd1\u0014 \ufffd\ufffd\u0018\ufffd\u001f\ufffd\u02e8\ufffdw\u2f7f\ufffd\ufffd\u000f!\ufffd\ufffd9m\ufffdD\ufffd\u00050\/\ufffdD\ufffdvCy\ufffd\u0496\u0769G\ufffdBW\ufffd\ufffd\ufffd0\fZ\ufffd}\ufffd6\u000f\ufffd[\ufffd\ufffd\ufffd\ufffd\u0005\ufffd\u001d\ufffdn4TD]2y.@E\u001c+Y\ufffd\ufffd\r\ufffd\ufffdJ[v\ufffd\u001eh\ufffdUw\u039e\ufffdG\u0000\ufffde\ufffd\ufffd\u03a3\ufffdeK\ufffd93y\ufffd\ufffd\u001b\u0005UQM\ufffd\u0006^\u0015\ufffdN^\ufffdvCy\ufffd\u0496]\ufffd\u0007\ufffdn\ufffd\ufffds\ufffd\ufffd\ufffd\u0018q(\ufffd\ufffd}\ufffd:\ufffd\ufffd\ufffd-\ufffd\ufffdF>\ufffd\ufffd\u0797\ufffd\ufffdl\u0014\ufffd\u0006\ufffd\ufffd\ufffd%\u0012\ufffd\"U\ufffd\ufffd\r\ufffd\ufffdJ[v\ufffd\u001eh\ufffdU~\ufffd\r~?*\ufffd\ufffd\ufffd\u03c9c\ufffdw\u0537l)Gg\ufffd4\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdu\u0086j7\ufffd\ufffd+m\u0651z\ufffd\ufffdV\ufffd\u0019\ufffd\u0012\ufffd\ufffd\ufffd\ufffd00\/\ufffd\ufffdX\u0016\ufffd\u00feeJ\ufffd:\u0019\ufffd.\ufffdu\\^Xm\ufffdl\u0019\ufffdd\ufffd\ufffd\ufffd\ufffd\u0495\ufffd\ufffdF=\ufffdv+\ufffd1\ufffdFO\ufffd\u001b\ufffd\ufffdy\ufffd\ufffd\ufffdo\ufffdR|\u001c\u0681P\ufffd\u0016\ufffd7\ufffd\ufffd\ufffd\ufffdo\ufffd\u074c\ufffd)\ufffd\ufffdY\ufffd\ufffd*\ufffdm\ufffd\ufffdV\ufffd\ufffd2\ufffd\u0003bC\ufffd[(\ufffd\u000e4Y\ufffd*Xh\ufffd\u0015!6\ufffd\ufffd`\ufffd\u05d83d\u0001[\ufffd\ufffd\u0015'\ufffd\u0017\ufffd\ufffd\u001d\ufffd\ufffdB\ufffd\ufffdb\u001b\u06ec\ufffd\ufffdv3\ufffd\ufffd\u0571t\u000b\ufffd\ufffdX\ufffdp`\ufffd\ufffd\ufffd\ufffdL\ufffdg]\ufffd\u0018\ufffd\ufffdB\ufffdv\ufffd\ufffdB\u0525y\ufffd\u0019\u07c2\u001dW\ufffd9o\b\ufffd\ufffds\u06aa\ufffd\ufffd8\ufffdk\ufffd%\ufffd8\u0010\ufffd\ufffdB\ufffd\ufffd\ufffd\ufffdL\u001ch\ufffdn\ufffdf\u000f^\u001eQ7\ufffd\ufffda\u001a\ufffdl\ufffd\ufffdV\ufffdi\ufffdK\u001aC\ufffd[(\ufffd.\ufffd]\ufffd\ufffd4n7z\nA\ufffd\ufffd\ufffdz\ufffdj\u0010\ufffd\ufffd\ufffd\ufffd\ufffd\u068a\ufffd\u0012[fFF\ufffdv\u000b\ufffd;3\r\uba22\ufffd\ufffd\ufffd\ufffd\u0016\ufffd&\ufffdy\u001d\ufffd\ufffd*\ufffd\ufffd\ufffd\u068a\u3a9e\u001cW\ufffd@\ufffdv\u000b\u016bv\ufffdSQ\u0007\ufffd\ufffd\u001b=\ufffdh\r\ufffdJ\ufffd\ufffdcM\u00f1\ufffd\ufffd\u068a3\r\ufffduIc\ufffdv\u000b\ufffd\u06e5\ufffd\u000bQ\ufffd\ufffd\ufffdV\ufffd\u0016\uce1aMyCx\u0544\ufffdV}m\ufffdiR\u0017.k\ufffd@\ufffdv\u000b\ufffdk\ufffd\u0010\ufffdH;\u0430\ufffd\ufffd\u0702\u001d\ufffd7\ufffdMWa*\ufffdm\ufffd\ufffdV\ufffd\ufffd0\ufffdC\"C\ufffd[(\ufffd\u000e5]\ufffd\ufffd4l7\ufffdY\ufffdz\ufffd!h\ufffd\u001b\u012b&\ufffd\ufffd\ufffdk+N\ufffd\ufffdpYs\u0007B\ufffd[(^s\ufffd\ufffdD\u0681f\ufffdV\ufffd\u0016\uc63e\u0019o\ufffd\u0006\ufffdql\ufffd\ufffd\ufffd\ufffdL\ufffdk\ufffdQ\u0019\ufffd\ufffdB\ufffdv\ufffd\ufffd\ufffd\u0524Y\ufffd\u057a\u0005;\ufffdh3\ufffd0^5a\ufffdU_[q\ufffd\u0505\u02da;\u0010\ufffd\ufffdB\ufffd;\ufffd%\ufffd\u000e4j7\ufffd.\/\ufffd\ufffd\u0019\u001c7\ufffd5\ufffdi\u000b\ufffdV}m\ufffdi\ufffd\/\ufffd\ufffd#T\ufffd\ufffd\u2755vuU\ufffdF\ufffdF?&b\ufffd\u0122aM\u001a\ufffd2\ufffda\\[\ufffd\ufffd\u0015\ufffdaU9\ufffd\u0081P\ufffd\u0016\ufffdWa\u0001'\u00198\u0428\ufffdj=\ufffdh(\ufffd\u0011\ufffdA\ufffd\ufffd\u0002\ufffdU_[q\ufffd\ufffd\u02ec\ufffd\b\ufffdn\ufffdxg\ufffd]]\u0573I\ufffd\ufffd\u0013\ufffd6\ufffd\ufffdj\ufffd[\ufffd3d9[\ufffd\ufffd\u0015'\ufffd\u0017\ufffd\ufffd\u001d\ufffd\ufffdB\ufffd\ufffdb\u001b\u06ecs\ufffdv\ufffd\ufffd\u0122\ufffd\ufffd&\ufffd6\ufffd\ufffd+\ufffd\ufffd\ufffd\u068a\ufffd\ufffd\ufffd3t T\ufffd\ufffd\ufffd\ufffdvo\ufffd@\ufffdv\ufffd\ufffdr\ufffd6y\ufffd\ufffd\ufffdI\u0003\u0016\ufffdU_[q\u0002Z1\ufffd\u0521\ufffd-\u0014\ufffdL6\ufffd\ufffdJ7h\ufffd&\ufffde\ufffd\u001d\ufffd\ufffdm\u0620\ufffdj2r1\u001b\u000e\ufffdj\ufffdP\ufffd6<\ufffd\ufffd\u0018\ufffd\u06ed\ufffdt\ufffd\ufffd\u569d\ufffd~{\ufffd$\ufffdbV\u001c\b\ufffdn\ufffdx\ufffd\ufffd6\ufffdA\ufffd[\ufffd\ufffd2\ufffd\ufffd5\ufffd\\\ufffd\ufffd\ufffdI\ufffd\u016c8\u0010\ufffd\ufffdB\ufffdZ1m\ufffd\ufffd\ufffdn\ufffdf\ufffde\u001e\ufffdk\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd\ufffd\ufffdq T\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdF\ufffd\ufffdn\u0366\ufffd<.\ufffd\ufffdr\ufffd\u06eb&\u001f\u0017\ufffd\ufffd@\ufffdv\u000b\ufffdk\u01f5\u064dR\ufffd\ufffd\u001aN\ufffdy\\\ufffd\ufffd\ufffd\ufffdWM:.f\u0241P\ufffd\u0016\ufffd\u05d2m3\u001b\ufffdn\ufffd5\ufffd.\ufffd\\\ufffd\ufffd\ufffdm\ufffd\ufffdt\\\u0312\u0003\ufffd\ufffd-\u0014\ufffd%\ufffdf6L\ufffdvk:]\ufffdq\ufffdf\ufffd\ufffd\ufffd^5\u0678\ufffd-\u0007B\ufffd[(^[\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffdr\ufffd\u000eW\ufffd\ufffdj\ufffdq1K\u000e\fB\ufffd[(^K\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd\ufffdty\ufffd\ufffd\ufffd>\u0017\ufffd%\u038a\ufffdLAJ_\ufffdz\ufffd\ufffd\u04f4n\ufffd_\ufffd:\u0018\ufffd|\ufffd\ufffd\ufffdx\ufffd<k\ufffdrM\ufffd\ufffd}\ufffd?gEO\ufffd \ufffd\ufffd?\ufffdJ\ufffd\/a|o\ufffdZ\ufffd\ufffd4\ufffd.\ufffd\ufffd\u0730\ufffdF\ufffd\ufffdsf\ufffdG\ufffdQ\ufffd}\ufffd,\ufffd\ufffd\ufffdb\ufffdD\ufffd!\ufffd\ufffd\ufffd\ufffd\ufffde\u001e\ufffdk\ufffd5\ufffdj\u001a\u0017\ufffdX\ufffd\u03d9\u0005\ufffd\ufffd_,\ufffd\ufffd?D\ufffd\ufffdba\ufffd\ufffd\ufffdr\u0376\ufffd\ufffdYM\ufffd\ufffd\u0016\ufffd\ufffd9\ufffd!\ufffd\ufffd\ufffd\r\u0017\ufffd\u01e8\ufffd_,L\ufffdy\\\ufffd\ufffd\ufffdB\ufffd\ufffd,\ufffd\ufffd\u0002:\ufffd\u001en}\ufffd\ufffdK\ufffdv\ufffdK]\ufffd\ufffd\u0618.\u04f8<S\ufffd\ufffd\ufffd\ufffd\ufffd6]\ufffd\ufffdK\ufffd\ufffdp\ufffd\ufffd\u01c1%\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd%\ufffd\ufffdT\ufffd\ufffd\ufffd\/6\ufffd\ufffd\u044c\ufffd\ufffd:>+;\u0010\ufffd\ufffdm\ufffd\rWJ5\ufffd\ufffd9@\ufffd$W1\ufffdm\u0014\ufffd\u0017\u06ce\ufffd\ufffdW\ufffd\ufffdPK\ufffd\ufffdk\ufffd\ufffd\ufffdR\ufffdg\ufffd\ufffd\u0014I,\ufffd\ufffd\ufffd\ufffdg\ufffdE-J\u001d\ufffd\r\ufffd\ufffdD\ufffd\u0016\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd;h\ufffd4\ufffd\/\ufffd9\ufffd\ufffd\ufffd\ufffd\u0007\ufffdFi\ufffds\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\ufffd\ufffd9\ufffd\\\u059e\ufffd\u04f9\ufffdL]_\ufffd\ufffd\ufffd\ufffd\u02ca\u0010\ufffd6\ufffd\u048c\ufffd\u0017c\ufffdK=\u001e\ufffd.LeO\ufffda\ufffd\u000b\ufffd\ufffdf\u02f2\u0013q\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffdty\ufffdt\ufffd0\u0298\ufffd\ufffdR\ufffdg#+\u0019\ufffd\u000e\ufffd\u00033\ufffd\u0000Ms\ufffdL\ufffdg\ufffdD\ufffd<;\ufffd\u000e\ufffd\u0003\ufffd\u001c\ufffd\u0014b\ufffd^4\ufffd\ufffd\u000e\ufffd\u0003\ufffd\u0000;\ufffd\u0501%1\u0017p\ufffd\ufffd\ufffdz.\ufffd\u000e\ufffd\u0003\ufffd@\ufffd\u001c\ufffd\ufffd\ufffdr\ufffd\u0694+\ufffd\u000e\ufffd\u0003\ufffd\ufffd@O\ufffd\ufffdty\ufffd\ufffd\ufffd\u0573\u0003\ufffd@\ufffd\u001c\ufffd\ufffdi\ufffdu\ufffdF\\\u001bv\ufffd\u001d`\u0007\ufffd\ufffd\u0001\ufffd.Ow\u0005X=;\ufffd\u000e\ufffd\u0003\ufffdr\ufffd\u001eX4S\u000f\u001b\ufffdV\ufffdqm\ufffd\u0001v\ufffd\ufffd\u000eXy`Q\u0017\ufffd\ufffd:\ufffd\u0003\ufffd\u0000;\u0010\ufffd\u0001+\ufffd\ufffd\f#\ufffdY\ufffd\u0001v\ufffd\u001d\ufffd\u0003t\u0007v\ufffd\ufffd\ufffd\ufffd:\ufffd\u0003\ufffd\u0000;0\ufffd\u000e\ufffdz`\u0474\u059fu\ufffd\u0003\ufffd\u0000;\ufffd2\u0007\ufffd=\ufffd\ufffde\u0015c9\ufffd\u0000;\ufffd\u000eL\ufffd\u0003\ufffdlo~`\u0454\ufffd\u001d\ufffdf\u0007\u0601N:\ufffd\u000f,\ufffdd\ufffdr\ufffd\ufffd\u0001v`\ufffd\u001d\ufffd\u0007\u0016Mq\ufffdtv\ufffd\u001d\ufffd\u0003t\u00076?\u07f3\ufffd\r\ufffdub\u0007\u0601\ufffdu\ufffd\ufffd\ufffd\ufffd\u06a6c\ufffd\ufffd\u0000;\ufffdM\u0007\ufffd\ufffd\ufffdE\ufffdlX\ufffd\u0015;\ufffd\u000eL\ufffd\u0003\u0003\ufffd\u0003{Z\ufffd\ufffdu\ufffd\u0003\ufffd@G\u001d\ufffd[J\ufffd\u001d\ufffd\u001aW\ufffd\u001d`\u0007\u0601it`\ufffd\ufffdo`Oc\ufffdY3;\ufffd\u000e\ufffd\u0003\ufffds`\ufffd\u052f}\ufffd\u008a\ufffd\u0001v`\ufffd\u001d\ufffd=r\ufffd\ufffd\ufffd\\wv\ufffd\u001dh\ufffd\u0003\u000b\ufffd+%ml\u0016\ufffd\ufffd\u000e\ufffd\u0003\ufffd\ufffd\u0000\ufffdJ\ufffd\ufffd=\u05dc\u001d`\u0007Z\ufffd\u0000?v\ufffd\ufffd\ufffd\u00a2\ufffd\u0001v`\ufffd\u001d\ufffd\ufffd.\ufffdp\ufffds\ufffd\ufffd\u0001v\ufffd\ufffd\u000e\ufffds\ufffd\u06e8\ufffd5\ufffd\u0003\ufffd\u0000;0\ufffd\u000e\ufffdx\ufffd\u072c6=\u05db\u001d`\u0007\ufffd\ufffd\u0000\ufffd[m\ufffd2V\ufffd\u000e\ufffd\u0003\ufffd\ufffdl:0\ufffd{\ufffdf\ufffd\ufffd\ufffd\ufffd\u0000;\ufffdV\u0007V\ufffd\ufffd\u0018mm\u001a\ufffd\ufffd\u000e\ufffd\u0003\ufffd\ufffd\u0000\ufffd[\ufffd\u035as\ufffd\ufffd\u0001v\ufffd\u001dh\ufffd\u0003\ufffd\ufffd[\ufffd\ufffdl\u0018V\ufffd\u000e\ufffd\u0003\ufffd\ufffd\ufffd\u0006\ufffdx\u052c6=\u05db\u001d`\u0007Z\ufffd\u0000\ufffdki\u00f0,v\ufffd\u001d\ufffdU\u0007\ufffd\u01e3f\ufffd\ufffd\ufffd\ufffd\u0000;\ufffdV\u0007\ufffd\u01e3\ufffd\ufffd2\ufffd\ufffd\u001d`\u0007f\ufffd\u0001\ufffd\ufffd\u0019mx\ufffd6;\ufffd\u000e\ufffd\ufffd\u0001\ufffd\ud963\uddb6\f\ufffdb\u0007\u0601Yu\ufffd~<jsV\ufffd\ufffd\ufffdf\u0007\ufffd\u0001v\ufffd\ufffd\u000e\ufffd\ufffdG\ufffd\ufffdQX\u0012;\ufffd\u000e\u0334\u0003\ufffd`\ufffd\ufffdn~\ufffd<;\ufffd\u000e\ufffd\ufffd\u0001~0F\ufffd\u0684\u0015\ufffd\u0003\ufffd\ufffdL;\ufffd\u000f\u0198\ufffd\ufffd\ufffd\u02b3\u0003\ufffd@\u000b\u001dX\ufffd~-l\u0015\ufffd\ufffd\u000e\ufffd\u00033\ufffd\u0000_\ufffd\ufffd\ufffd\ufffd\u7ab3\u0003\ufffd@+\u001d\ufffd\ufffd~\ufffdl\u0016\u0016\ufffd\u000e\ufffd\u0003\ufffd\ufffd\u0000\ufffd\ufffd7\ufffdm\ufffd5g\u0007\u0601V:@?\ufffd\ufffd\ufffdJa,\ufffd\u001d`\u0007\u0601\u0019u\ufffd\u001f\ufffd9\ufffd\r\ufffd\ufffdf\u0007\u0601\ufffd:\ufffd&\ufffdZ[\ufffd\ufffd.v\ufffd\u001d`\u0007f\ufffd\u0001\u06ba\u071b\ufffdjs\ufffd\ufffd\u0001v\ufffd\u001dh\ufffd\u0003KBl\ufffdV\u001c\u000bc\u0007\ufffd\u0001v`\ufffd\u001c\ufffd\u02f3\ufffd\ufffd\\cv\ufffd\u001dh\ufffd\u0003\ufffduy\ufffdn\ufffd\ufffd\ufffd\u001d`\u0007\u0601\ufffdr\ufffd\ufffd.\ufffdTsse\ufffd\u0001v\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\u0000;\ufffd\u000e\u030e\u0003\ufffduyv\u069ak\ufffd\u000e\ufffd\u0003S\ufffd\ufffd\ufffd\u0010\ufffdS!\ufffdE\ufffd\u0003\ufffd\u0000;0\u001b\u000e\ufffd\ufffd\ufffd\ufffdhg\ufffd%;\ufffd\u000eL\ufffd\u0003\u02fcuyz\u001a\ufffd\ufffd\ufffd\u0003\ufffd\ufffd,8\ufffd[\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd\u0000;0M\u000e\ufffd\ufffd\ufffdij-\ufffd\ufffd\u000e\ufffd\u00033\ufffd\u0000o]\ufffd\ufffdF\ufffd*\ufffd\u0003\ufffd\ufffd49\ufffd\ufffdO]\ufffd\ufffd\ufffdb\ufffd\ufffd\u0000;0\u0003\u000e,\ufffd9\ufffd\u0001{\u0006\u0699\ufffd\ufffd\u000e\ufffd\u0003S\ufffd\u0000\ufffdb\ufffdO\ufffdX\u0016\ufffd\u000e\ufffd\ufffd\ufffd{\ufffddUy\ufffd\ufffd0\u0200\ufffd \u0017\ufffd\ufffdDE\ufffd\ufffd m\f\ufffd\u0007$F8\ufffd&h\ufffd\ufffd\ufffd\ufffd\u0016\ufffd\\4\ufffd\b\u00135'\ufffd#x\ufffdE\ufffd\ufffd\ufffd\ufffdt\ufffd\u0005\ufffd\u0371\ufffdH\u0014\ufffd\ufffd\u001a!\ufffd\ufffd\u0016\/\ufffd\ufffd\ufffd\u0017\u0005%\u0016\ufffd8@\u000ff\ufffd\ufffdaj\ufffd\ufffdYkW_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u06b7\ufffd\u05b3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk}\ufffd\ufffd\ufffdy)V\ufffd\ufffd6\u0004 \u0010>\ufffd\ufffd>n\ufffd\u000e\ufffd\ufffdd\b\u0001\b\ufffdD\ufffd\u001b\ufffd}\ufffd\u0016\ufffdB\u0000\u0002\u0011\u0010\u0018\ufffd\u0006\ufffd\b\ufffdL\ufffd\u0010\ufffd\ufffdG\u0004\ufffd(\u0006\u03ce\ufffd^\ufffd\n\u0001\b\ufffdO\ufffd\ufffdbL\ufffd\ufffd%\u0019B\u0000\u0002\u0010\ufffd\ufffd\u0000\ufffd\u0018\u0794\ufffd@!\u0000\ufffd8\b0\ufffd\u0011G\ufffd\ufffd\u0012\u0002\u0010\ufffd\ufffd\u0000\ufffd\u0018\ufffd\u050aH!\u0000\ufffd(\b\ufffd\u0018~\u0014e&I\b@\ufffd\u001f\u0002,\ufffd\ufffdO\ufffd\ufffd\u0014\u0002\u0010\ufffd\ufffd\ufffd:c\ufffd\ufffd\u0011G\ufffd\ufffd\u0012\u0002\u0010\ufffd\ufffd\ufffd\u001d\ufffd\u0018\ufffd#R\ufffd\ufffd\u0000\u0004 \u0010\u0005\u0001;\ufffd1\ufffd$\u045d\ufffdt\ufffd4\ufffd\ub44d?\ufffdu\u000f\ufffd!\u0000\u0001\b@ [\u0002v\u0014crI\ufffd\ufffdMc\ufffd\ufffd\ufffd\ufffd\\t\ufffd\u001c\ufffdE\ufffd\ufffd\u0000\u0001\b@\u0000\u0002Y\u0013h=\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?>\ufffdl\ufffd\ufffd\ufffd\u000e\ufffd3\ufffd\ufffdq\ufffdg\ufffdC\u0000\u0002\u0010\ufffd@\ufffd\u0004Z\ufffdb$\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffd\u001ehs\ufffd\ufffd7\ufffdn\ufffd\ufffd{\b@\u0000\u0002\u0010\u021c@\ufffdQ\ufffd\u0005_N~\ufffd\ufffd\u02d9\u03de}\ufffd[\ufffdI\ufffd\ufffd\ufffd\ufffdy\ufffd\u0015\u000b\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\u04ff;8\ufffd8\ufffd\ufffd\ufffdsN\ufffd\ufffd!w\u028dg\ufffdz\ufffd}.\ufffd;.8\ufffd\r\ufffd\ufffd\u07b0A\u0000\u0002\u0010\ufffd@g\u0002\ufffdG1\u0016|\ufffd~\ufffdo'\ufffd\ufffd\ufffdy\ufffd\ufffdk\ufffd\ufffdB\ufffd#\u0321\/^\ufffd\ufffd\ufffdl\ufffdo\ufffd\ufffdu\ufffdp\ufffd\ufffd\ufffd}\ufffd3\u0006\ufffd\u0011;\ufffd\ufffd?7G\ufffd\ufffd\ufffd\ufffdw&\ufffd?\ufffd:\ufffdE\ufffd\ufffdK:\ufffd\ufffd\u0002\u0002\u0010\ufffd\u0000\u0004\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffdW\ufffd\t\u0019?\ufffd\ufffd\u054f\ufffdb\ufffd\\i>8\ufffdlz\ufffd\ufffd[\ufffd\ufffd\ufffd?\ufffdl\ufffd\ufffde\ufffd\ufffd\ufffd\u0006\ufffdIr\ufffd\ufffd=\ufffd\ufffd\\<\ufffd\ufffd\ufffd\u001dH\ufffdZ}\ufffdc\ufffd\ufffdW\ufffd\ufffd\ufffd\u001b\u0002\u0010\ufffd\u0000\u0004\u0004\u0002mF1\ufffd\/\ufffdn\u001f\ufffd\ufffd\u001c\ufffd?c_?gnl\ufffd\ufffd\ufffd\u01db\ufffd\ufffd\ufffd\u000b\ufffd7\ufffd\ufffdZ\ufffdm\ufffd\ufffd\ufffd\u0003v\ufffdw\ufffd?5y\ufffd\ufffd\u0007\ud6c7V\ufffd\u067e\ufffdA\u0000\u0002\u0010\ufffd@\u0007\u0002\ufffd\ufffdw\ufffdl6\/\ufffd\ufffd\ufffd>\ufffd\ufffd#\ufffd\ufffdV2\ufffd\ufffd1\ufffdv{\ufffd\u0019N}\ufffd\ufffd\ufffd\ufffd\ufffd\u000bv\ufffdc\ufffd\ufffd\u00063f{\ufffd`}\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffds\ufffd\ufffd>\ufffdC(\u001c\ufffd\u0000\u0004 \u0000\u0001;\ufffd\ufffd\ufffd\u2392\u0006\ufffd\ufffd\ufffd\u0018?\ufffd\ufffdb\ufffdn\u000e>6\u076eN}\ufffd\ufffd\ufffd\ufffd\ufffd\u05a4\ufffd\ufffds\ufffd\/?\ufffd\ufffdY\ufffd\u01edm\ufffd{\ufffd\ufffdg\ufffd@\u0000\u0002\u0010\ufffd@{\u0002#\ufffd\ufffd(i\ufffd\ufffd|9\ufffd\ufffd\ufffddf\ufffd\u001b\ufffd\ufffdp\ufffd\ufffdM\u001fS_n\ufffd\ufffd\ufffd\u02c7\ufffd\ufffd;e\ufffd\u001d'\ufffd\ufffd\u0739\ufffd\ufffd\u0000\u0004 \u0000\ufffd\u000e\u0004\u068fb,\ufffd\ufffdH\ufffd99IN<t\ufffdm\ufffd\u0013\ufffd\ufffd\ufffd\u0018_^\ufffd\ufffd\ufffdr\ufffd\ufffd\u0005_~\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffdV\ufffde\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffd0\u0004 \u0000\u0001\b,3\ufffd\ufffd\ufffd\ufffdn\ufffd\u0717\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\u07f13\r_^\ufffd\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\ufffdU'm\ufffd\ufffd\ufffd\ufffd\ufffd%\u000f\ufffds\u0137g\ufffd:zo\ufffd\ufffd\u001f\u001b\u0004 \u0000\u0001\b,G`\ufffd\ufffd(F\ufffd\/\u000f\ufffd\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd\u07db4|y\ufffdc\u00d7\u0017>\/\ufffdrr\u055ef\ufffdy\ufffd\u0016;;\ufffd@{\ufffdoY.\u0012\ufffdA\u0000\u0002\u0010\ufffd\ufffd%`\ufffd(\u0019\ufffdA\ufffd\ufffd\ufffd5-`\ufffd\ufffd\ufffdd\ufffd\u03ee\ufffd\u0007\ufffd\ufffd\u01ef\ufffd\ufffdu\u0276\ufffd.\ufffd\ufffd\ufffd\u001d\t6\b@\u0000\u0002\ufffd\u0011h{G\ufffdr'q\f\u0002\u0010\ufffd\u0000\u0004r#\ufffd\ufffd\ufffd\ufffd\ufffdz\ufffda\b@\u0000\u0002\u0010X\ufffd\ufffd\ufffdIo\u0001YF\ufffd!\b@\u0000\u0002\u0010(\ufffd\ufffdT\ufffd\u0019,\ufffd;\ufffd\ufffd\u0000\u0004 \u0000\ufffd\u000e\u0004\u0006L\u001f?\ufffdu`\ufffda\b@\u0000\u0002\u0005\u0012\u00185f\ufffd\ufffd\ufffd\ufffd\n\u0002\u0010\ufffd\u0000\u0004\ufffd'0i\ufffd\u0017l\u0010\ufffd\u0000\u0004 P\u0015\u0002u;\ufffdQ\ufffdJ0\ufffd\u0001\u0001\b@\u0000\u0002\ufffd]\ufffd\ufffd\u0006\u0006\b@\u0000\u0002\u0010\ufffd\f\u0001\ufffd\\\ufffd~\ufffd_e\ufffd&\u0010\b@\u0000\u0002\ufffd\u0012\ufffd7\ufffd\ufffd3\ufffd\u0011lyI\f\u0002\u0010\ufffd\u00007\ufffdyX4B\ufffd\u0000\u0004B&\ufffd\ufffd\u0001\ufffd!\ufffdLn\u0010\ufffd\u0000\u0004*L\ufffd\ufffd\ufffd7P\ufffd\ufffd\b\r\u0002\u0010\ufffd@t\u0004\u0006M\ufffddtI\ufffd0\u0004 \u0000\ufffd\ufffd\u0012`\ufffd\ufffd\ufffd\u0586\ufffd \u0000\ufffd(\t\ufffd\u001b\ufffdX\ufffd(\ufffd\u02934\u0004 PQ\u0002\ufffd\ufffdW\ufffd\ufffd\u0010\u0016\u0004 \u0010-\u0001{\ufffd\ufffdD\ufffd\u02538\u0004 \u0000\ufffd\ufffd\u0011\ufffd\ufffd~\ufffd\u000b\ufffd\ufffd \u0000\u0001\b\ufffdF\ufffd=\u044f\u001b\ufffdB\ufffd*\ufffd@\u0000\u0002>\u0013\u00184\ufffd)r>\u0017\ufffd\ufffd!\u0000\ufffd\ufffd\b0E.\ufffd\ufffd\ufffd\u000f\u0004 \ufffd9\u0001\ufffd\ufffdy^@\u0087\u0000\u0004B#P\ufffdg-\ufffd\ufffdjJ>\u0010\ufffd\ufffd\ufffd\u0004\ufffd*r5\ufffd3 z\b@\u0000\u0002A\u0011\u00187f4\ufffd\ufffdH\u0006\u0002\u0010\ufffd\ufffd\ufffd\u0004&YE\ufffd\ufffd\u0002\u0012=\u0004 \u0010\u001a\u0001w\ufffd\ufffdThI\ufffd\u000f\u0004 \u0000\u0001\ufffd\tp\ufffd\ufffd\ufffd\ufffd#t\b@ D\u0002\ufffd\u001dbU\ufffd\t\u0002\u0010\ufffd{D\t\ufffd_{\\@B\ufffd\u0000\u0004\ufffd#`\u0007\ufffd\ufffd\ufffd:\ufffd\ufffd\ufffd\u0010\u0004 \ufffd1\ufffdQc\ufffd=\u000e\ufffd\ufffd!\u0000\u0001\b\ufffdF\ufffdf\u033a\ufffdr\"\u001f\b@\u0000\u0002\u001e\u0013\ufffd\ufffd{\ufffd3\ufffd\ufffdq\u0001\t\u001d\u0002\u0010\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdJB\u0010\ufffd\ufffd\ufffd\u0004X\ufffd\ufffd\ufffd\ufffd\u0011:\u0004 \u0010\"\u0001\u0016\ufffd\f\ufffd\ufffd\ufffd\u0004\u0001\bxL\ufffd\ufffd==.\u001e\ufffdC\u0000\u0002A\u0012`q\ufffd \ufffdJR\u0010\ufffd\ufffd\ufffd\u0004\ufffd\ufffd2\ufffd{\ufffd[>\"\ufffd\u0000\u0004\ufffd#\ufffd\ufffdrx5%#\b@\ufffdk\u0002\f.{]>\ufffd\ufffd\u0000\u0004\u0002$\ufffd\ufffdr\ufffdE%%\b@\ufffdg\u0002\f.\ufffd\\=b\ufffd\u0000\u0004\u0002$\ufffd\ufffdr\ufffdE%%\b@\ufffdg\u0002\f.\ufffd\\=b\ufffd\u0000\u0004B$0hL-\u013c\ufffd\t\u0002\u0010\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\\\ufffd\ufffdv\ufffd\r\u0001\b\u0004I\ufffd5\ufffd\ufffd,+IA\u0000\u0002\ufffd\u0012`\ufffdekG\ufffd\u0010\ufffd@\ufffd\u0004\u0006Xs9\ufffd\u0092\u0015\u0004 \ufffd+\ufffd\u0011\u001e\ufffd\ufffdk\ufffd\u001b\u0002\u0010\b\ufffd\ufffd\ufffd1CafFV\u0010\ufffd\u0000\u0004\ufffd$0\ufffdg\u0006x\ufffd\ufffd\ufffd\ufffd#h\b@ L\u0002\ufffd\u0001\ufffd\ufffd\u0003\ufffd\u00ac-YA\u0000\u0002~\u0012\u00182f\ufffd\ufffd\u0209\u001a\u0002\u0010\ufffd@\ufffd\u0004\u018d\u0019\t21\ufffd\ufffd\u0000\u0004 \ufffd'\u0001\ufffdZ\u0440\ufffd\ufffd\u00135\u0004 \u0000\ufffd \t\ufffdZQ\ufffde%)\b@\ufffdc\u0002,\ufffd\ufffdq\ufffd\b\u001d\u0002\u0010\b\ufffd\u0000\ufffd\u0015\ufffdXUr\ufffd\u0000\u0004<&`W+\u001a\ufffd8|B\ufffd\u0000\u0004 \u0010\u001a\ufffd\ufffd>\ufffd\ufffd\r%\ufffdU\ufffd| \u0000\u0001\ufffd\tpC\ufffd\ufffd\ufffd#t\b@ H\u0002\ufffd\ufffd\ufffd\ufffd \u0013#)\b@\u0000\u0002~\u0012\ufffd\ufffd\ufffd\ufffd\u0012?KG\ufffd\u0010\ufffd@\ufffd\u0004\ufffd\ufffd\/\u033a\ufffd\u0015\u0004 \ufffd-\u0001\ufffd\ufffd\ufffd>~\ufffd\ufffd|\u0004\u000e\u0001\b\u0004H\ufffd'\ufffd\u0004XTR\ufffd\u0000\u0004|&\ufffdo~>W\ufffd\ufffd!\u0000\ufffd\u0000\t\ufffdE\ufffdxBI\ufffdu%%\b@\ufffd[\u0002,\"\ufffdm\ufffd\b\u001c\u0002\u0010\b\ufffd\u0000\ufffd\ufffd\ufffdYW\ufffd\ufffd\u0000\u0004\ufffd%\ufffdo~\ufffd\u058e\ufffd!\u0000\ufffd \t\ufffd_\ufffde%)\b@\ufffd_\u0002\ufffd\ufffd\ufffdo\ufffd\u001c\u0002\u0010\b\ufffd\u0000\ufffd\ufffd\u0005YV\ufffd\ufffd\u0000\u0004\ufffd%\ufffdo~\ufffd\u058e\ufffd!\u0000\ufffd0\t\ufffd_\ufffdu%+\b@\ufffd[\u0002\ufffd\ufffd\ufffdm\ufffd\b\u001c\u0002\u0010\b\ufffd\u0000\ufffd\ufffd\ufffdYW\ufffd\ufffd\u0000\u0004\ufffd%\ufffdo~\u0796\ufffd\ufffd!\u0000\ufffd0\t\ufffd_\ufffdu%+\b@\ufffd[\u0002\ufffdy~f\ufffd\ufffd\ufffd\t\u001c\u0002\u0010\ufffd@x\u0004\ufffd\ufffd\/\ufffd\ufffd\ufffd\u0011\u0004 \ufffd5\u0001\ufffd<?\ufffd\ufffd\ufffd\ufffd\ufffd\u0004\u000f\u0001\b\u0004F`\u0098\ufffd\ufffdR\"\u001d\b@\u0000\u0002>\u0013\ufffd\ufffd3\ufffd<\ufffd\ufffd\ufffd\n\u0012;\u0004 \u0010\u0018\ufffdz\ufffd\ufffd\ufffd7\ufffd\ufffd\ufffdJ:\u0010\ufffd\ufffd\ufffd\u0004\u0006\ufffd\ufffd\ufffd:\u0001\ufffd\ufffd\u0000\u0004 \u0010\u0016\u0001;\u0015c,\ufffd\ufffd\ufffd\u0006\u0002\u0010\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\ufffd\ufffd\u0011<\u0004 \u0010\u001e\ufffd\ufffd1\u0003\ufffdeEF\u0010\ufffd\u0000\u0004\ufffd%`\ufffdb\ufffd1\u0015\ufffd\ufffd\ufffd\u00118\u0004 \u0010\u001e\u0001{\ufffd5S1\ufffd++\u0019A\u0000\u0002\u001e\u0013\ufffd\ufffdb0\u0015\ufffd\ufffd\ufffd\u0011:\u0004 \u0010\u001c\u0001\ufffdb\u0004WR\u0012\ufffd\u0000\u0004\ufffd&\ufffd\ufffd\u0018~\u05cf\ufffd!\u0000\ufffd\ufffd\b\ufffdU1\ufffd\ufffd\u0011\\UI\b\u0002\u0010\ud820\udc1d\ufffd1\ufffdT\f\ufffd\u000bH\ufffd\u0010\ufffd@h\u0004\ufffd\u0003JX\u0015#\ufffd\ufffd\ufffd\u000f\u0004 \ufffd1\u0001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0013:\u0004 \u0000\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd*J>\u0010\ufffd\ufffd\ufffd\u0004Fy@\ufffd\ufffd\u0015$|\b@ 0\u0002v\ufffd\ufffdu\ufffd\ufffdD:\u0010\ufffd\u0000\u0004|&0ig\ufffd1\u0015\ufffd\ufffd\n\u0012;\u0004 \u0010\u0018\ufffd);\u0015c*\ufffd\ufffdH\u0007\u0002\u0010\ufffd\ufffd\ufffd\u0004X\ufffd\ufffd\ufffd\ufffd\u0011:\u0004 \u0010$\u0001\ufffd\u0728\ufffd \u0013#)\b@\u0000\u0002~\u0012\ufffd3\ufffdF\ufffd\ufffd\ufffd\ufffd!\u0000\u0001\b\u0004I\ufffd\u014a\ufffd,+IA\u0000\u0002\ufffd\u0012\ufffd3\ufffdX\ufffd\ufffd\ufffd\ufffd\u00119\u0004 \u0010\u001e\u0001\u0016+\n\ufffd\ufffdd\u0004\u0001\bxM\ufffd\u0019r^\ufffd\ufffd\ufffd!\u0000\ufffd\ufffd\b0C.\ufffd\ufffd\ufffd\u0011\u0004 \ufffd7\u0001\ufffd\ufffd\u001c3\ufffd\ufffd.!\ufffdC\u0000\u0002a\u0011\ufffdq~a\u0553l \u0000\u0001\ufffd\t\ufffd\ufffd\ufffd\ufffd\ufffd5$\u0001\b@ (\u0002v\ufffd\ufffd`P\t\ufffd\f\u0004 \u0000\u0001\ufffd\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5$z\b@ (\u0002v\ufffdr?\ufffd\u001cTII\u0006\u0002\u0010\ud82c\udc1b\ufffd\ufffdSV\ufffd\ufffd!\ufffdC\u0000\u0002A\u0011pOY\u0156\ufffd*)\ufffd@\u0000\u0002~\u0013p\ufffd\ufffd\ufffde\ufffdkH\ufffd\u0010\ufffd@X\u0004\ufffd\ufffd\u001cV=\ufffd\u0006\u0002\u0010\ud838\udc35\ufffd!\ufffd \u0001\b@\u0000\u0002\ufffd\u0010\ufffd\u0013\ufffd\ufffd\ufffdp\ufffdI&\u0010\ufffd\ufffd\ufffd\u0004\ufffd-3q\ufffd\ufffd2\ufffd\u0001\u0004 \u0010\u000e\u0001V\\\u000e\ufffd\ufffdd\u0002\u0001\b\u0004A\ufffd\ufffd2\u0013\ufffd\ufffd\ufffd$I@\u0000\u0002\ufffd\u0010\ufffd\ufffdc\u02c1\ufffd\ufffd4 \u0000\ufffd0\b0q9\ufffd:\ufffd\u0005\u0004 \u0010\u000e\ufffdu\ufffdO\u0012N1\ufffd\u0004\u0002\u0010\b\ufffd\ufffd\ufffd\ufffd<\u0012B\u001e\ufffd\u0000\u0001\b@ \u0010\u0002,\ufffd\u001fH!I\u0003\u0002\u0010\b\ufffd\ufffd\ufffd\ufffd\ufffdB\ufffd\ufffd\u0014\ufffd< \u0000\ufffd\u0010\bp?I\bU$\u0007\b@  \u0002\ufffdO\u0012P1I\u0005\u0002\u0010\b\ufffd\u0000\ufffd\ufffd\ufffdPEr\ufffd\u0000\u0004\u0002\"P\ufffd6\ufffd\ufffd\ufffdI*\u0010\ufffd@\u0000\u0004\ufffd\ufffd$\u0013\u0001\ufffdA\n\u0010\ufffd\u0000\u0004\u0002!\ufffdm~\ufffd\u0014\ufffd4 \u0000\ufffd`\b\fr\ufffd_0\ufffd$\u0011G`kmn\ufffd\ufffd\u0017 \ufffdj\ufffd\u06df\ufffd3\ufffd\u29cf\ufffdWp\u0004\u0002=\u0010\ufffd6\ufffd\u001e\ufffdqj\u0015\t\\m\ufffd\ufffdW\u001a\u07a3;\ufffd\ufffd\u0006sG\ufffd\ufffd77\ufffdX\ufffd\u06ad\ufffd5\u001c\ufffd\ufffdJ\t\ufffd\u0628\ufffd\ufffd\u3f2a\u0012\ufffdg\ufffd\ufffd\ufffdW\ufffd\u07f7\ufffd\ufffd^i\ufffdk.L\ufffd\ufffd>\ufffd\ufffdO\ufffdl\ufffd`\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffd\u001a\ufffd@`\ufffd\u0004\ufffd\ufffd\u0015\ufffd\ufffdj\u0013\ufffdj^\ufffdK\ufffd\u0397\ufffd\ufffd6\ufffd\u05fb\ufffd3'\ufffd\u06b2\ufffd\ufffd\ufffd\u0010\ufffd\u0000w_w\u03cc3| 0\ufffd\ufffd_\ufffdr\ufffd\u07de\ufffdX\ufffd\u000f\ufffd\ufffd\u000b\ufffdm\ufffd\u07f8b\ufffd\ufffd3^\ufffd\u047a}\ufffd\ufffd\ufffd\ufffdv\u05b5;\ufffd\ufffd\ufffd\ufffd\u030dg\ufffdz\ufffd}\ufffd\u03c6W\ufffd`\ufffd\ufffd\ufffd\u001a~\ufffd\u001a\ufffd\u0017\ufffd=\ufffdoY\ufffd\ufffd\ufffd-\ufffd\ufffds\ufffd%\u000f\u0677n\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffd1\ufffdFc\ufffdB\ufffd\ufffd\u0000w_7\ufffd\ufffd}@\u0004\ufffd|\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\u89a7\ufffd~\ufffdI\ufffd\ufffd\ufffd\ufffd\ufffdC\ufffd;\ufffd\ufffd\ufffd\u031f%\ufffd\ufffdv\ufffd{\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd?7G\ufffd\ufffd\ufffd\ufffdw\ufffdy\ufffd9\ufffd\ufffd-7\ufffd\ufffd\ufffdu\ufffd\ufffd'=y\ufffdG\ufffdd\ufffdy\ufffd\ufffdg\f\ufffd#\ufffd\ufffd\ufffd\ufffdf}\ufffd~\ufffd\u04e6\u001b;x\ufffd@F\u0004\ufffd\ufffd@\ufffdL\ufffd\b\ufffd\ufffd\ufffd\ufffdG\u0753$\ufffd6\ufffd&\ufffd\ufffd\u0007\ufffd\ufffd\ufffd\ufffd\u0013\ufffd';\ufffd_3\ufffd<\ufffdY\u06d2\ufffd\ufffdw{\ufffd\ufffd\ufffdM\ufffd\u2664\ufffd\ufffd@\ufffd\ufffdq\f\ufffd\ufffd_6g\u05d3\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffdlL\ufffd\ufffd\ufffd\ufffdT7\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd'\ufffd\/\ufffdl\u0010\u020e\ufffd\ufffd1\ufffd\ufffd\ufffd\ufffd\ufffd \u0010\u001c\ufffdy_v\ufffd\ufffd|k\ufffd%x\ufffd\t\u0597\ufffd7\ufffdw\ufffdz\ufffdc\ufffd\u017f\ufffd\ufffdM\u0007O;\ufffd}\u001b~\ufffd\ufffd\u000b\ufffd|\ufffd\u001a7||\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffdW\bdC\ufffdE1\ufffd\ufffdH+U$\ufffd\ufffd\u02cf\ufffd\ufffdf~|\ufffd\ufffd\u000e\ufffd\u0013\ufffd\/o\ufffd\u001f\/\ufffd\ufffd|\ufffd\ufffd\u0377~!\ufffd\ufffd6\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffdc\u0727\ufffd\ufffd\ufffd\ufffd\ufffd}\ufffda\ufffd\ufffd\ufffd\ufffd~3\ufffd\ufffd\ufffd\ufffd\u07dc\ufffd\r\u0002\ufffd\u0010\ufffd\ufffd\ufffd\ufffdH+\ufffd$\ufffd\ufffd\ufffd.\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\t\rGn\ufffdN\ufffd\ufffd\u001a\ufffd\ufffd\u06e6\ufffd\u000e>\ufffd\u0339\\\ufffd|\ufffd\ufffd\u0017\ufffd{\u000e|\ufffd#\ufffd\ufffd\ufffdI\ufffds3\ufffd\u0739\ufffd\ufffd\ufffd\ufffd\t\ufffdV\u044a\ufffdq\ufffd\u0007\u0004\u0016\ufffd\ufffd\u0007|u&IN8\ufffd\u0657m\u0012\ufffd\ufffd\ufffd\u0012\ufffdO\ufffd\ufffd\ufffdC\ufffd\ufffde\ufffdq\u00ce\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd|y\ufffdq\ufffd\u07f1\ufffd\ufffd\r\u0002\ufffd\u0010`\ufffd\ufffd^\ufffdqn\ufffd\t,\ufffd\ufffd\ufffd\ufffd\u0640\ufffd\ufffdyB\ufffd\/O>\ufffd\ufffd\ufffd\u0007\ufffd%\ufffd\ufffd\ufffdW\ufffd\ufffdo\ufffd\ufffd\ufffdkw\ufffd\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffd\ufffdv\ufffd|\ufffd\ufffd\ufffd\n\ufffd \ufffd\u0005\u0001\ufffd*\u0282\"mT\ufffd\ufffdb_>\ufffd76%\ufffd\ufffdi\ufffdG\ufffd\/O\ufffd\ufffdS\ufffd>\ufffd\ufffd\/\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd:i\ufffd\ufffdO9\ufffd^s~c>\ufffd\ufffd{\ufffd\ufffd\u000f\ufffdo;\u842dK}\ufffd\ufffd\ufffdx\ufffd_\ufffdu\ufffd\ufffd\ufffdB 2\ufffd\b`\ufffd~\u054bh\ufffd&\ufffd\u0617o\\\ufffd\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffd^\ufffd\ufffd_\u00dd\ufffd\ufffdD\ufffd\u06ac\ufffd\ufffdd\ufffd`r\u055ef\ufffdy\ufffd\ufffd\ufffdq\u012a\u00036\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd.\ufffd\ufffd\u05cb~\ufffduh\ufffd\u0000\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\ufffd\u0121\ufffdG\ufffd\u000b\ufffd\ufffd\b\ufffd|\ufffd\ufffd\ufffd'[\ufffd\ufffd\ufffd9\ufffd-\ufffd\ufffd\ufffdu?u;\ufffd\u000e>x\ufffd?~\u034eD'\u000f\\}\ufffd\ufffdRq[>\ufffd\/.\ufffd\ufffd\\s\ufffd\ufffd\ufffd@\/\u0004X\u0014\ufffd\u0017z\ufffd\u000b\u0001\b@ s\u0002\ufffdr\ufffdHi\u0010\u0002\u0010\ufffd@\/\u0004F\ufffd\u0019\ufffd\ufffd|\u0385\u0000\u0004 \u0000\ufffdL\t\ufffd(F\ufffd8i\f\u0002\u0010\ufffd@\ufffd\u0004\ufffd\ufffd^\tr>\u0004 \u0000\ufffdL\t`\u02d9\ufffd1\b@\u0000\u0002\ufffd\u0012`\t\ufffd^\tr>\u0004 \u0000\ufffdL\t\ufffdVQ\ufffd8i\f\u0002\u0010\ufffd@\ufffd\u0004\ufffd\ufffd^\tr>\u0004 \u0000\ufffdL\t`\u02d9\ufffd1\b@\u0000\u0002\ufffd\u0012\ufffd\ufffd{%\ufffd\ufffd\u0010\ufffd\u0000\u00042%\ufffd-g\ufffd\ufffd\ufffd \u0000\u0001\b\ufffdJ\ufffd\ufffd\ufffdoxDd\ufffd\u00149\u001f\u0002\u0010\ufffd@f\u0004X\ufffd33\ufffd4\u0004\u0001\b@ \u000b\u0002\ufffdr\u0016\u0014i\u0003\u0002\u0010\ufffd@f\u0004\ufffd\ufffd\ufffdP\ufffd\u0010\u0004 \u0000\ufffd,\b`\ufffdYP\ufffd\r\b@\u0000\u0002\ufffd\u0011\ufffd\ufffd3CIC\u0010\ufffd\u0000\u00042!0\ufffdS\ufffd2\ufffdH#\u0010\ufffd\u0000\u00042\"\ufffd\ufffdI2\u0002I3\u0010\ufffd\u0000\u0004\ufffd!\ufffd-g\u00d1V \u0000\u0001\bdD\u0000[\ufffd\b$\ufffd@\u0000\u0002\u0010\u0206\u0000\ufffd\ufffd\rGZ)\ufffd@}\ufffd\ufffd&\u0012\ufffd60V\/\ufffd,}U\ufffd\u0000\ufffd\\\ufffd2\u0010DW\u0004F\ufffd\ufffd,G\ufffd\ufffd\ufffd\ufffd\u0002\u0632\ufffd5\ufffd\/\ufffd\ufffd5\ufffd\ufffd\ufffdZ\u0014\u06c4\ufffd'j\ufffd\ufffd\u001c\ufffdE\ufffd-\ufffdU\ufffd@\ufffd\u001d\ufffd\u02a9\ufffd\ufffd\ufffd\u0002)\u001ciH\u0004\ufffde\t\u0013\ufffd\ufffd\u0011\u00180C\u0015\ufffd(\ufffdp\ufffd\ufffd@\ufffd\ufffd\ufffdx\ufffd\b`\ufffd\u056a\u0007\u0448\u0004\ufffd\ufffd\u0010\ufffdA\ufffd&\ufffd\t\"\u000f\ufffd\ufffd\b`\ufffd\u0012&D\ufffd#`L\ufffdr1\ufffd\u0018P\r_\u0391n\u055a\ufffd\ufffd\ufffd\ufffdj1\u0011\u000f\u0004\u0004\u0002\ufffd\ufffd\u0000\t\ufffd\ufffd\u0004\ufffd-\u000f\ufffd3\ufffd\ufffd\ufffd\ufffd>h|9\ufffdK T\u0000\ufffdr\ufffd\ufffd\ufffd \/|9\ufffd\"G\ufffd\"\ufffd\u001ce\ufffd\u0003I:>_\ufffd\ufffdl\u0003\ufffdt\ufffdO\u0003[^\ufffd\u000fG+M 2_\ufffd\u0013\ufffdk\ufffd\ufffd\u0007\ufffdeC\u0000[\u0386#\ufffd\ufffdC 6\ufffd\ufffd-\ufffdr\ufffd\ufffd\ufffd{\u0156K\/\u0001\u0001\ufffdB 6\ufffd\ufffd-\ufffd^\ufffd\r\ufffd\u0156\ufffd\ufffd\u001d\ufffd;\u0002\ufffd\ufffdTl\ufffdFy\ufffd\ufffd\ufffd\u0005\ufffd \u0017e\ufffdI:6\ufffd\ufffd-\ufffd`.\ufffd.\u0012\u0019\u01d6\ufffd\ufffd\ufffd\ufffd\ufffd\u0004b\ufffd\ufffd\ufffd\ufffd5\ufffdsL\ufffdr\u0380i>\u0002\ufffd\ufffdTl\ufffd\ufffd\u0005U\ufffd\u0007l\ufffdj\u0015!\ufffd\ufffd\t\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffd\u0019\u0632\ufffd\u0005$|G 6\ufffd\ufffd-\ufffd\u062erl9\ufffd\ufffd\ufffd\ufffdol>\u0015[\ufffda^\ufffdm\ufffd\u0096\u06e2\ufffdO\u0004b\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd=\ufffdQfb\ufffd\u000e\ufffd\u0016*@ 6\ufffd\ufffd-\ufffd\n\\b\u0145\ufffd\ufffd$\u0171\ufffd\ufffd\\\t\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffdS\ufffd\u01b1\ufffd\u0015\ufffdpVL 6\ufffd\ufffd-\ufffd\u0015_\u0018\ufffd\ufffd\ufffd-\ufffdW3\"nC 6\ufffd\ufffd-\ufffd6e\u000fp\ufffd\ufffd\ufffd\u001e!\u001c`\tIi\ufffd@l>\u0015[\ufffd\ufffd\u000e\ufffd\r\ufffd\u001cz\ufffd\ufffd\ufffd\/6\ufffd\ufffd-\ufffdH.\ufffd:\ufffd\u001cI\ufffd#I36\ufffd\ufffd-\ufffd8.\ufffd\ufffd\u0000\ufffd\u0018qT:\ufffd,c\ufffd\ufffd\ufffd\ufffd:\u0196\ufffd(sLI\ufffd\ufffdS\ufffd\ufffd\u001b\u00f5\ufffd-\ufffdP\ufffdr\ufffd\u0367b\ufffd7\ufffd\ufffd\ufffd\ufffd\ufffdh\u0004y\ufffdbD\u0004b\ufffd\ufffd\ufffd\r\ufffdRv\ufffd<\u001e~\ufffdd\u0018\u0015\ufffd\ufffd|*\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdK\u001cc\ufffd\ufffd\ufffdTl\ufffd\ufffd~Mc\u02e1W8\ufffd\ufffdb\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffdc\u0010#\ufffd\u0012\u01d9^l>\u0015[\ufffda_\ufffd\ufffdr\ufffd\ufffd\ufffd7\ufffd\ufffd|*\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001bsr\ufffd\ufffdTl\ufffd\ufffd|mc\ufffd!W7\ufffd\ufffdb\ufffd\ufffd\ufffd\r\ufffd\uadb6\ufffd7\u0019p~\ufffd\u00161\u0001\u0767\ufffdcv\ufffdh5\ufffd\ufffd\ufffd\ufffdZB=_\ufffdEt\ufffd\u0010\ufffd\ufffd\ufffd\ufffdN\ufffdE\u0010\ufffd}j\ufffd\ufffd\ufffd<\u0017\u0548\bK\ufffdWl\u000fYI\u0004\ufffd\ufffd\ufffd\ufffdm\u0011\u0004T\ufffd\ufffd[\u0003\u001c\ufffd\ufffdUr\ufffd\ufffd\ufffd<\u001a\ufffd\u001b\ufffd\ufffdo\u0011\ufffd\ufffdc\ufffd\u0004&\u0018\ufffdX9<\u03ac<\u0001\u0567\ufffdd\ufffd+#e\ufffd_\ufffd1\ufffd_5_\ufffd5T%\u0011\u00187\ufffd-\ufffd\ufffd\ufffdn\ufffd \ufffd\ufffd\ufffd@\ufffd\u001f\ufffd3d\u00064Zj\ufffdZk\ufffd\ufffd!\ufffd-\ufffd\u00dd^\ufffd\"\ufffd\ufffd\ufffd1\u0013E\ufffd\ufffd\ufffd~&\ufffd\ufffdNS\ufffd\ufffdZCU\n\u0001k\ufffd\u0003S\ufffd\ufffdL\ufffd\u0010(\ufffd\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffd\ufffdvR\u00d7\ufffdB\tu\ufffd\ufffd9a@\ufffd9!T\u0004\ufffd\u00158\u0001\ufffdoU]I\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd-\ufffd\\\u0002t\ufffd,\ufffd\ufffd\uadea\ufffd\ufffd\ufffd\ufffd{\u00d7\ufffdQ\ufffd\ufffd\ufffd\ufffd\ufffd \u07d6C\ufffdr\ufffd\ufffd\ufffd~\ufffd\ufffdJ\ufffd\/\ufffd\u0004\ufffd\ufffdn\ufffd\ufffdx\ufffdj\ufffd\ufffd\ufffdx\u0002\ufffd\u07ea\ufffd\ufffd3H{\ufffd\ufffd\ufffd}\ufffd\ufffdx\u001e%\ufffd\ufffd[\ufffd\ufffd\ufffd7\ufffd\u0012(\u0004VH@\ufffd)U\ufffd\ufffd0z=\ufffdN`\ufffdIm\ufffd:\ufffd1D\u0005\u0013\ufffd\ufffd\u000b\u0006Nw%\u0011P}J\u0555\ufffdF\ufffd\u01a7\ufffd\ufffd\u0283~\ufffd!0i\ufffd-\ufffd\ufffd\u000f-\ufffd\n\ufffd Py\u0002\ufffdO\ufffd\ufffd\ufffd\u0012V\ufffdSue\ufffdA\ufffd\ufffd\t\ufffd\ufffdg{6\u001c\t\ufffd\ufffd\ufffdS\ufffd\ufffd,:j|\ufffd\ufffd\ufffd<\ufffd-\u0001l\ufffd-\u001a\u000e\ufffdF@\ufffd)UW\u0016\u001f5>UWV\u001e\ufffd\u06ce\ufffd8+\u0015\ufffdC\ufffd\ufffd\ufffd\b\ufffd>\ufffd\ufffd\ufffd\u0002\ufffd\u01a7\ufffd\ufffd\u0283~\ufffd\u0010`I\ufffd6`\ufffd\u001d\"\u0001\u0567T]Y\ufffd\ufffd\ufffdT]Yy\ufffdok\u0002\ufffdrk.\ufffd\r\ufffd\ufffd\ufffdS\ufffd\ufffd,Jj|\ufffd\ufffd\ufffd<\ufffd%\u0001\ufffdT\u0006\ufffd\ufffdhI\ufffd\ufffdA\u0012P}J\u0555\u0005I\ufffdO\u0555\ufffd\u0007\ufffd\ufffd\"\ufffd\ufffd\u0018\ufffd\ufffd\ufffd\/\\\u0002\ufffdO\ufffd\ufffd\ufffdH\ufffd\ud967\udeb2\ufffd\ufffd\u0016\u0004X\u0012\ufffd\u0005\u0014v\ufffdL@\ufffd)UW\u0016+5>UWV\u001e\ufffd\ufffd\ufffd\u00007\ufffd-A\u008e\ufffd\t\ufffd>\ufffd\ufffd\ufffd\ufffd\u01a7\ufffd\ufffd\u0283~w%\ufffd-\ufffdJ\ufffd\ufffd\ufffd\u0013P}J\u0555EL\ufffdO\u0555\ufffd\u0007\ufffd\ufffdB`\ufffd\ufffd{=\ufffd\ufffd>>B p\u0002\ufffdO\ufffd\ufffd\ufffdp\ufffd\ud967\udeb2\ufffd\ufffd\ufffd\u0004\ufffd\ufffdo1\u000f>\ufffdA@\ufffd)UW\u001655>UWV\u001e\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\b\u0007\u001fb!\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd++\u000f\ufffdm&\ufffd\ufffd&\ufffd5\ufffd\ufffd=\u0004\ufffd \ufffd\ufffd\ufffd\ufffd+\u000b\ufffd\u001a\ufffd\ufffd++\u000f\ufffdm\"\ufffdM~M0x\u001b\u0013\u0001\u0567T]Y\ufffd\ufffd\ufffdT]Yy\ufffd\ufffd\u0002\u0001w\ufffd\ufffd\ufffd\ufffdG\ufffdA \u001a\u0002\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ud967\udeb2\ufffd\ufffdy\u0002\ufffd\ufffd7\ufffd\ufffd7\ufffd\u0011P}J\u0555\ufffdO\ufffdO\u0555\ufffd\u0007\ufffd\ufffd\u0012p\u000fX]\ufffd=\ufffd\u0011f\u0010\b\ufffd\ufffd\ufffdS\ufffd\ufffd,>j|\ufffd\ufffd\ufffd<\ufffdA\ufffd\ufffdI\ufffd\u0012b&\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd++\u000f\ufffdM\t\ufffd'\ufffd\ufffd\ufffd\u0002\u0002\ufffd\u0012P}J\u0555\ufffdQ\ufffdO\u0555\ufffd\u0007\ufffd:\u0002L[\ufffd:\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd,\ufffdj|\ufffd\ufffd\ufffd<\ufffd\ufffd\u0012p\ufffd\ufffd\u001a\ufffd\u0004\u0004\ufffd%\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd++\u000f\ufffdM\ufffd1{7\t\ufffd\ufffd\u0012b&\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd++\u000f\ufffdM\ufffd\ufffd8l\ufffd\u000b!j\u0002\ufffdO\ufffd\ufffd\ufffd`\ufffd\ud967\udeb2\ufffd_7?\ufffdGFE\u0019\ufffd\u000e@\ufffd)UW\u0016O5>UWV\u001e\ufffd\ufffd\ufffd\ufffd\ufffd\u062f\u0000\ufffdw\u0004T\ufffdRueQU\ufffdSue\ufffd\u0011y\ufffd\ufffd\ufffd\u030f\ufffd\ufffd\u0012 }G@\ufffd)UW\u0016U5>UWV\u001eq\ufffd[\ufffd3\ufffd\ufffd\u0018q_\u0003d\ufffd\b\ufffd>\ufffd\ufffd\u02a2\ufffd\u01a7\ufffd\ufffd\ufffd#\ufffd~\ufffd\ufffdq\u0013Q\u0013 y\b\ufffd\u0004T\ufffdRu\ufffd\ufffd>\\{\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0002\ufffd!\ufffd\ufffd(\ufffd\ufffddV\b\ufffd&\ufffd\ufffd\ufffd\ufffdkM\ufffd\u0003fC\ufffd\u0003\u000b{\ufffd\ufffd,|\ufffd\ufffd\ufffd\u001a\ufffd\ufffd\ufffd>\u0002\ufffd\ufffd\u0000\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd!\ufffd\ufffd\ufffd\ufffdkMF\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdR\ufffd\ufffd\ufffdy\ufffd77\u0002n\"\ufffd \ufffd\ufffd\ufffd\u0197\ufffd\ufffd\"\ufffd\ufffd\ufffd\ufffdk\ufffd<\ufffd\u071a\u000b{\ufffd\b\ufffd\ufffd^\u000f\ufffd}\ufffd\/\u0004\"'\ufffd\ufffd\ufffd\ufffdk\ufffd3\ufffd\ufffd\u000f~\ufffd\ufffd7\ufffdr\ufffd&Im\ufffdW7\ufffdu\ufffd\ufffdN%\ufffd#\ufffd\u07f3'l\u001f\ufffdnr\ufffd\ufffd\ufffd\ufffd_i}\ufffd\ufffdW\ufffdO\ufffdI\ufffd\"\u028a\ufffd[\ufffdh,\ufffd\ufffdh\u0007\u0002\ufffd\u0013P}J\u0575\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdN\ufffd\ufffd\ufffd?J\ufffdh\ufffd]\ufffd\ufffdG\ufffd\ufffd\u001eN6\ufffd\ufffd\ufffd\u0013\ufffd\ufffd%\u001d\ufffd\ufffd\u0010\ufffd\ufffd\ufffd\ufffd>Y\u06ab\u01a7\ufffdN\u0011eD`\ufffd\ufffdq\u0019\ufffd\ufffd\ufffd0\b\ufffd>\ufffd\ufffdZSi\ufffd\ufffd\ufffd[\ufffd\ufffd\u0016\ufffdn\ufffd\ufffd{}3I\ufffd0\ufffd\ufffd\ufffd\t\ufffd\u02ed\ufffd\u0170\ufffd\u034fcE\ufffd\u0018*M\ufffd\"\u0001\ufffdoU]\ufffdn\u001b\ufffd\ufffd\"{pz\ufffdE\u0597\ufffd\ufffdd\ufffd?pf\ufffd\ufffd2\ufffd\u071a\\\f{\ufffd\ufffdU\ufffd\ufffd\ufffd\u0018*M\ufffd*\u0001\ufffdoU]\ufffd~\u001b\ufffd\ufffd\ufffd\ufffd\ufffdj\ufffd\ufffd7\ufffdw\ufffd0\ufffd\ufffde\u0007\"\ufffd\ufffd\ufffd\ufffd\ufffd\/\u0000\ufffdoA@\ufffd[U\u05e2\u000b\ufffd\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\u0019\ufffd8\ufffdc\u0012\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffdN\ufffd\ufffd\u0012P\ufffdV\u0575\ufffdlW_\u001eu\ufffd\u000b\ufffdC\r_\ufffd\u0017_n\ufffd-\ufffd\ufffd\ufffdA~\u030f\ufffd\ufffd\u0424\ufffd\u0015\u0001\ufffdoU]\ufffd\ufffdw\ufffd\ufffdZ\u064e\ufffd\u000f\ufffd\ufffd\ufffd\ufffd?\ufffd\ufffdj|\ufffd5\ufffd\ufffd\ufffd\ufffd \ufffd\ufffdkL\ufffd+ \ufffd\ufffd\ufffd\ufffdk\u001d\u00ae\ufffdl\ufffd=\ufffd\ufffdO\ufffd\ufffd'\ufffd\ufffdu\ufffd\u03d3o\ufffd\ufffd\ufffd\ufffd8\ufffdC\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\ufffdWT\ufffd\u0011p\u00131X?\ufffd7\ufffd\ufffd\u001d\"\u0001\u0567T]kF\ufffd\ufffd\ufffd\u001fo\ufffd\ufffd\ufffd\ufffd$\u00196\ufffd=i\ufffdk\ufffd\ufffd\ufffd\ufffdi\ufffd\ufffdw\ufffd\ufffd\rt\u072b\u01a7\ufffd:v\ufffd\ufffdw\u0002v\"\u0006\ufffd\ufffdz\ufffdH\u000b\ufffd\u0011P}J\ufffd)\ufffd\ufffdh6<\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffdc\ufffdI\u07ec\ufffdE\ufffdO\u056d,\n\ufffd\ufffd\u0000O\ufffd\ufffd\u0002\u0016\u04b8\b\ufffd>\ufffd\ufffd\u0014z\u0597\u0015YW\u001a5>U\ufffdU\ufffdW@ ]\u0011\ufffd\ufffd\ufffdV@\ufffdS\ufffd'\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd\ufffd\n\ufffd\ufffd5\ufffd\u0017\ufffdtZN\ufffdy\ufffd\u001e\u0004V@@\ufffd[U\ufffd\ufffdp\ufffd\ufffd_Wd]i\ufffd\ufffdT]W\ufffd#\ufffd\u0000\ufffd\ufffdu\ufffd\ufffd\u0013\"\"\ufffd\ufffd\ufffd\ufffd+\u000b\ufffd\u001a\ufffd\ufffd++\ufffdH\ufffd\ufffd\u0017\ufffdH\nM\ufffd+#\ufffd\ufffd\ufffd\ufffd[Y\u0014\ufffd\ufffd\ufffd\u01a7\ufffdz\ufffd\ufffd\u0016\ufffd\u0012\ufffd\u000f\u001a3\ufffd\ufffdr[>\u001c\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd,\ufffdj|\ufffd\ufffd\ufffd<b\ufffd7\ufffd\ufffd\u000f[\ufffd\ufffd\ufffd\ufffdB\u0002\ufffdO\ufffd\ufffd\u0015\ufffd\ufffd\ufffdij|\ufffd\ufffd\ufffdh\ufffd\u001d\ufffd\u001a\ufffd\ufffd\ufffdC\ufffd~\b4\b\ufffd>\ufffd\ufffd\ufffd\ufffd\u01a7\ufffd\ufffd\ufffd#\ufffd~\ufffd\ufffd\/\ufffd\u001a\ufffda\ufffd\u0004T\ufffdRt\ufffdx\ufffd\ufffdh\ufffd\u0576\ufffdl`S\ufffd\u074b\ufffdJ|\ufffd\u0004U\ufffd\ufffdq>dG\ufffd\ufffd\ufffd\ufffd=~\ufffd\u19250\t\ufffd>%\ufffd\u001e>\ufffd\ufffd3ztG\ufffd\ufffd`\ufffdh\ufffd\ufffd\ufffd^\ufffdr\ufffd\ufffd\ufffdB|\ufffd^\ufffd-j\ufffd\u000fY\u0011\ufffd\u0017\ufffd\ufffdH\ufffdN\ufffd\u0004T\ufffd\u0012tun\u000f\ufffd\ufffd\\\ufffd$_}\ufffd\u000f[\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\u07fcS\ufffd\/\ufffd\ufffd\ufffd\ufffdy\ufffd\u0015\ufffd\ufffd~\ufffd\ufffd'\ufffd\ufffde\ufffd\ufffdv\ufffd%\ufffd\ufffdTg\ufffd\ufffd{\ufffdg[\ufffdts\ufffd\ufffdv\ufffd\u8936\ufffd\ufffd\u000et\ufffd\ufffd\ufffdTus\ufffd\ufffd7C\u0002\ufffd\ufffd<\ufffd:C\ufffd4\u0015*\u0001\u0567:\ufffd\ufffdu\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd4\ufffdX\ufffd\ufffd|\ufffd\ufffdS\ufffdz\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd>\ufffd\u0015\u001fM\ufffd&\ufffdq\ufffd)o\ufffdw\ufffd\ufffd\ufffd_~\ufffd\ufffd\ufffd&;>\ufffd\ufffd\ufffd\ufffds\ufffdt\ufffd\ufffd\ufffd\/\u0018~\u4fc6\u001f\ufffd\ufffd}\ufffd\ufffdS.\ufffd\ufffd\ufffdl\u001c\ufffdr\ufffd9\ufffd]\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffd}]v\ufffd\u001c_\ufffdtU\ufffdlg\u001c\\\u0011\ufffdQ;\ufffd<\ufffd\ufffd39\t\u0002q\u0011P}\ufffd\ufffd\ufffd\ufffdm\ufffd\ufffd\ufffdY\ufffd\ufffd\ufffd1\ufffd\ufffd\ufffdlM\ufffd\u0007\u0373O\\\ufffd\ufffd\u0017\ufffd\ufffd\ufffdC\ufffd;\ufffd\ufffd\ufffd\u031f\ufffd\ufffd\ufffd\ufffd\ufffd\u0017\u001db.I\ufffd\ufffd\ufffd\ufffd\ufffd>\ufffdN\u000f\ufffd\ufffd\ufffd\fs~r\ufffd\ufffd\u6823\ufffd\ufffd\ufffd\u0197\u05d9\ufffd\ufffd\ufffd\ufffdU\u001fI\ufffd\r\ufffd\ufffd\ufffd\ufffd1`\ufffd\ufffd\u0003\ufffd\ufffd3\ufffde_\ufffd\ufffd:\ufffd\ufffd8]\ufffd-\ufffd\u0019\u0007W@ }\ufffd\u001f\ufffdW]\u00019N\ufffd\ufffd\ufffd\ufffdS\u001du\u000f\ufffd\ufffd[z\ufffd_\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffdL\ufffd\ufffdY\ufffdoM.]u\ufffd\ufffdd\ufffd\ufffdk\ufffd\ufffd\ufffdV\ufffd\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd\u0597\ufffd\ufffde&\ufffd\ufffdY\ufffd\ufffd\u001f\ufffdeOt\ufffd\u0018\u0397\ufffdl\u03ae'[\ufffd\ufffd\ufffd>\ufffd\ufffdO\u0658$\u0017\ufffd\ufffd\ufffd\ufffd3O\ufffd\/\ufffdn\u001d\ufffd=[\ufffd-\ufffd\u0019\u0007\ufffd'\ufffd\ufffd\ufffd\u001bdh\ufffd{p\ufffd\u0011#\u0001\u0567:\ufffdh~\ufffd$\ufffd\ufffd\u000e:\ufffd\ufffdZ_>\ufffd\u01be\ufffd\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\u000eSO\u07ba\ufffdA\ufffd\ufffd\ufffdo\ufffd\ufffd|\ufffd}w\ufffdz\ufffd\ufffd\ufffd\u01be\ufffd\ufffd\ufffdYk\ufffd\ufffdOw\ufffd\u000fX_~\ufffd}w\ufffd\ufffd\u067e^\ufffdD\ufffd\ufffdr[\ufffd\ufffdfOVu\ufffd\ufffd\u0171\ufffd\t\ufffd\ufffdI\ufffd\ufffd\u000f\ufffd \u0000\u0001\ufffd\ufffd\ufffdS\u001du\u001f3\ufffdJ\ufffd\t\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\u0019\ufffd\ufffd\ufffd\u0330\ufffd\ufffdmv\u07e5\u0597O\ufffd\ufffd\ufffd\u001b\ufffd\ufffdT\ufffd\ufffdv\ufffd\ufffdn\u000f\ufffd\ufffd?\ufffd\ufffdw\ufffd\/?\ufffd\u0018\ufffd{z\ufffd?\ufffd\ufffd\ufffd~\"\u0690\ufffd\ufffd\u01b9\ufffdr[\ufffd\ufffdfOVu\ufffd\ufffd\u0171\ufffd\tp3I\ufffd\ufffd8!f\u0002\ufffdOu\ufffd}\ufffd\u063b?\ufffd\ufffdz\u0007\ufffd\u0012\ufffdu\ufffd9\ufffd\ufffdt\ufffd:u\ufffd\/\u001f\ufffd\ufffd\ufffd\ufffd\u0002\ufffd\u02f7Z\ufffd\u0597\ufffd=\ufffd\ufffd\ufffd\u0013\ufffd}\ufffd\ufffd\u0017\ufffd\u0006\ufffd\u0003_:\ufffd\ufffd\r_\ufffd\ufffd\u0654\ufffdn\ufffd\ufffd1\ufffd\ufffdSU]\ufffd\ufffd8\ufffd=\u0001n&\ufffd\u0019g\ufffdL@\ufffd\ufffd\ufffd\ufffdk\ufffd\/\ufffd\ufffd?\ufffd\ufffdu0\ufffd`\ufffd\u03ac}\ufffd\u001cV\ufffdM\ufffd\ufffd\ufffd'\ufffd\ufffd\u073e\ufffd\/_h.\ufffd\u00137.i\ufffd\ufffdc\ufffdt\ufffd\ufffd\ufffd\ufffdv\ufffd\/4\ufffd\ufffd=wr\ufffd\ufffd\u001d\ufffd=I\u0575\ufffd}+#\ufffd\ufffd\ufffdY>ne\ufffd8+N\u0002\ufffdOu\ufffdm0\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd\u0003\ufffd;\ufffdn\u01d7O<\ufffd\ufffd=\ufffd\t{\u000f\ufffd\ufffd\/_\ufffd\ufffd.\ufffd\ufffd\u01c7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffd5\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffd\ufffdC\ufffdp\ufffd\ufffdc|\ufffd'\ufffd\ufffd\ufffd\ufffd\ufffdXW\u0004\ufffd\ufffd\ufffdPWg \ufffd@\ufffd\u0004T\ufffd\uaa1bz\ufffd\ufffd-\ufffdw\ufffd\ufffd\ufffd\ufffd\ufffdn\u000f\ufffd\ufffd_2\ufffdo\ufffd\ufffd\ufffd~\ufffd\ufffd4\ufffd\ufffd\u0003\ufffd\u001c\ufffd\ud67b\ufffd\ufffd\ufffd\ufffdY_>o\ufffd\ufffd'\ufffd\u07bf\ufffd\ufffd2\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd\u001fL\ufffdv\ufffd![\u0017\ufffd\ufffdK^\u06a9L\u001d\ufffdm@\ufffdu\ufffd\ufffd*\ufffd1\ufffd\ufffd\ufffdqU\ufffd\u000e\u0002\u0010\ufffd\u0004T\ufffd\ufffd;\ufffd<\ufffd\u070eW\ufffd\ufffd\ufffd\ufffd\u00167r\ufffd=\ufffdn\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffdm\u0007\ufffd}O\ufffd\ufffd\ufffd_\ufffd\u056a\ufffd\ufffd)f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd%G\ufffd:`s:\ufffd3{\ufffdU\ufffd\u07de\ufffd\ufffd\/\u001d_\u07b9\ufffd\u0015V\ufffd\ufffd\ufffd9\ufffd\ufffd\ufffdn\ufffd\ufffd8(\u0013p\ufffd\ufffd\ufffd\ufffd\ufffd,\ufffdB\b\u0001G@\ufffd\ufffd\u03ba\ufffd\u0007\ufffda\ufffd\ufffd;W\ufffd\ufffd\ufffd\ufffd\u03fd\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\ufffd4m\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdS7\\~\ufffd\ufffd\u030d\ufffd<\ufffd<p\ufffd\ufffdv\ufffd\ufffdm[>\ufffd\/\uec80\ufffdW\ufffd\ufffd4\u001d#\ufffd<\u001aQ\ufffd\t\u0001f-g\ufffd\ufffdFb#\ufffd\ufffdo\u001bD:\ufffd\ufffd\ufffd\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffd\ud1df\ufffd-\u01b3\ufffd\u0631\ufffd\ufffd\ufffdyt\ufffd\n\ufffdL\ufffdY\ufffd2*\ufffd\u0010h\"\ufffd\ufffd\ufffd]\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?r\ufffd\ufffd_k\ufffd\ufffd\ufffd\ufffd\ufffdw\ufffdF2\u0323c_\bD\u0002vh\ufffd\ufffd\ufffde\u0011\u00162\b,\u0010\ufffd\ufffd\ufffdf\u03b2\ufffd\r}\ufffd\ufffd}\ufffd\ufffd\ufffd\ufffd\/\ufffd\ufffd\u017b\u02ee\ufffd\ufffdJ\ufffdyt\ufffd\f\ufffdB\ufffd\ufffde\ufffd\u0012\u001a\b\ufffd \u0010\ufffd\ufffd\ufffd\ufffdG\ufffd\u0012y\ufffd\ufffd=]\ufffd\u00051<-\u001ea\ufffdL \u0014?\u000b%\ufffd\ufffd\/\ufffd\ufffdwk-\ufffd Fv<i)*\u0002\ufffd\ufffdY(y\ufffdr\ud9a7\udd56\u0019Z\u000e\ufffd\ufffd\ufffdQ4\ufffdP\ufffd,\ufffd<\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd;\ufffd\ufffd\ufffd\ufffd\u000f\\Z\ufffd\ufffd@(~\u0016J\u001eA\\r\ufffd1~\ufffd\ufffd\ufffd\ufffdA\ufffdC\u0012\u0010(\ufffd@(~\u0016J\u001eE\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdh\u001e\r\ufffd&\u0004\"!\u0010\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffdW\ufffd?\u000f2\ufffd@y\u0004B\ufffdP\ufffd(\ufffdJ\u0228\ufffdtQ\u03e6[\ufffd3j\ufffdf \u0010\u0013\ufffdP\ufffd,\ufffd<|\ufffd\ufffd\ufffd\ufffd8\u0016\ufffd\ufffd\ufffd\ufffd\ufffd_6\ufffdP\ufffd,\ufffd<\u02be\u001ez\ufffd\ufffdq=\u0002\ufffdt\b8\u0002\ufffd\ufffdY(yx}U\ufffd\u0007\ufffd\u001e\ufffdu\u0001\t\ufffd*\u0004B\ufffdP\ufffd\ufffdu\ufffd\ufffd8\ufffd\ufffdqL\ufffd[\t9\u0381\ufffdb\u0002\ufffd\ufffdY(y,\ufffd\ufffdW\ufffd\u0703I\ufffd#\ufffd\ufffd \u0000\ufffd\u001e\t\ufffd\ufffdg\ufffd\ufffd\ufffdc9\ufffd;\ufffd\ufffd\ufffd\u01c3I\ufffd\ufffdO\ufffdA\u0011\b\ufffd\ufffdB\ufffd\ufffd\u05cb\ufffd\ufffd\ufffd\ufffd\ufffdq\ufffdV\ufffd\ufffd\ufffdF \u0014?\u000b%\ufffd\ufffd]\u001fb<n\f\ufffd[\ufffdDX\ufffd \u0409@(~\u0016J\u001e\ufffd\ufffdU\ufffd\ufffd\ufffd\ufffdW\u0272\u0010\ufffd\ufffd\u0004B\ufffdP\ufffd\ufffd\ufffdJb\u0005|\u001f\ufffdF\ufffdU&\u0010\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd\ufffd6\ufffd\ufffde\ufffdX\u0001\ufffd\r\u001cvC`%\u0004B\ufffdP\ufffdXI\rK='\u001d\u00d8(5\u0004:\ufffd@h\u0004B\ufffdP\ufffd\ufffd\ufffd\ufffdrc\u0018\u0003,S\ufffd[\u0648\ufffd\ufffd\u0004B\ufffdP\ufffd\ufffd\ufffdkx<\ufffdoW\"|\ufffd@\u0006\u0004B\ufffdP\ufffd\u0220\ufffd\u000561b\ufffdZf\f\ufffd@\ufffdt\u0015\t\ufffdP\ufffd,\ufffd<|\ufffd\ufffd\ufffd1\f\ufffd\ufffd\ufffdS\u0248\ufffd\u0013\u0002\ufffd\ufffdY(yxr\u06780\ufffd\ufffd<\f\ufffd\ufffd\ufffdQ\ufffd\b\ufffd\u001b\u0002\ufffd\ufffdY(yxs\ufffd\ufffd0\u0018\ufffd\ufffd\\\u0004\ufffd\u0017\ufffdP\ufffd,\ufffd<|\ufffdz\u071a\ufffd\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffd\u0019\ufffd@\ufffd\ufffd\u001eH\u001e\ufffd\\=\ufffd\ufffd$\ufffd\ufffd\ufffdK\ufffd\ufffd\ufffd?\u0002\ufffd\ufffdY\ufffd\u0018m\ufffdS\ufffd\u05ffJ\u0016\u0018\ufffd{\ufffd*kz\u0016\b\ufffd\ufffdb#\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\ufffde\ufffd\ufffd\ufffd%Q\ufffd\ufffd\ufffdx\ufffdsIJ.\u0002\ufffd\u0007M@\ufffd)UW\u0012,|\ufffd0\ufffd\ufffd\ufffd\ufffduGG\u0010\ufffd\ufffd\ufffd\uadea\ufffd$\ufffd\ufffdrQ\ufffd\ufffd\u0002\ufffd\ufffdx]\u0014m\ufffd\ufffd\ufffd\ufffd\uadea\ufffd$\ufffd\ufffdrA\ufffd\ufffd\ufffd\ufffd \ufffdt\u00135\u0001\ufffdo\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffd\/\u0017q\u0019\ufffd\u0007\ufffd\ufffd\ufffdZ\u0011=\ufffd\u0007\u0004b&\ufffd\ufffd\ufffd\u0019\ufffd2\ufffd!3\ufffd\ufffd\ufffd\u6af5\u0016\ufffd\u02adR\ufffd\u000f~\ufffd\u0015\ufffdt\ufffd \ufffd\ufffd\ufffd}\ufffd\ufffd6\u0011\ufffd\ufffd$\u0012;}yL\ufffdX\ufffdWk-*U\u076eR\ufffdb\ufffd\n\f\ufffdB k\u0002\ufffdOY\ufffd3C\u00135\ufffdU\u021f\ufffdi@\u0013C681*5\u07ec9\ufffd\ufffd\u001e\ufffd\u0014\ufffd_C2\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdR\u059b\ufffd\ufffd\ufffd6\ufffdAFr\ufffd\ufffd\u0014\ufffd\ufffd8Y\ufffd\ufffd(\ufffd\ufffd\u0003\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd+\u06ed\ufffd}\u000b\ufffd`\u001b\u0018\u0013\ufffd-']\ufffd\ufffd\ufffd\ufffdD\ufffdU\ufffd\ufffd`\ufffd\u0016\u0002y\u0013\ufffd}y.\ufffd\ufffd\ufffdA:\ufffd\ufffd\u0097;7l\ufffd\ufffd\ufffdj\u001b6\u0739\ufffd\u0006\u0016N\ufffd\ufffdx.\ufffd\ufffd\ufffd;3\u6fecR\u0014s\ufffd\u027dx\u0002e\ufffd\ufffd:\ufffd-k\"e\ufffdu\u001e\ufffd\ufffd\u01e4\ufffdBq\ufffd\u0019\u0004\ufffd\ufffd)|\u065bk\ufffd\ufffd\ufffd\ufffd*E\u0794\ufffd@C \ufffd\/\ufffdP\ufffd<sp?\ufffd1i9O\u00b4\r\ufffd]\t\ufffd\u02fb\u0012\ufffds3\ufffd)w\ufffd_\ufffdo\ufffdl\ufffd\ufffd\ufffd\u0010\b\ufffd\u0000\ufffd\u001cF\u001ds\ufffd\ufffd\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd9\u0005C\ufffd\u0010\ufffd\ufffd\u0000\ufffd\u001cK\ufffdW\ufffdg:;N\ufffd\ufffdr\u0005\ufffds\n\u0004 \u041a\u0000\ufffd\u071a\u000b{\ufffd\ufffd\u034ecIO\ufffd\u0004\b\u0014O\u0000_.\ufffd\ufffd\u001f=\ufffd\ufffda\ufffd\ufffd\u0011+QB ,\u0002\ufffdrX\ufffd\ufffd,\ufffd\ufffd[\ufffd~2\ufffd\ufffdh\b\u0002\u0010\ufffd\t\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffd\ufffd\u0011~\ufffd\ufffd\ufffd\ufffdZ%\u0002\ufffdr\ufffd\ufffdQ\ufffdX\u0717\ufffd\ufffdZU\ufffd!\u000e\b\ufffdF\u0000_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdrgF( \ufffd'\u0001|9O\ufffd^\ufffd\ufffd\ufffdw]\ufffd2t\ufffd\ufffd@\u0018\u0004\ufffd\ufffd0\ufffd]\u0016n\ufffd\"F\ufffd\ufffd\ufffdIK\u0010\ufffd\u0000\ufffd\ufffd=\ufffd\ufffd\ufffd\ufffd\ufffdr\ufffd\ufffd%7_\b\ufffd\u02feT\ufffd\ufffd8\u0757e\u0016)*\u00045\ufffd@\ufffd=\u0001|\ufffd=\ufffd\u83b8\/\ufffd,R\u0014]\ufffdI\ufffdz\u0004\ufffd\ufffd\ufffd\u0564\ufffd\ufffd\ufffd\ufffd\\\u0016y\ufffd\ufffd\ufffdb\u0002\ufffd\ufffdb\u001e\ufffd~\ufffd\ufffdr\ufffd\ufffd'\ufffd\u0011\ufffd\ufffd\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffdrI\ufffd\ufffd\u0016\u0002K\t\ufffd\ufffdK\ufffdD\ufffd\ufffd\/\ufffd\u0011\u0016\ufffd\ufffd\ufffdK\u0000_\ufffdnm\ufffd\ufffd\ufffd\/\ufffd\u0171\ufffd'\bt&\ufffd\/wf\u0014\ufffd\u00ad\ufffd\ufffd4\ufffd\u042bL~>\u0011\ufffd\ufffd}\ufffdV\u001e\ufffd\ufffd\u001aF\u001eTi\u0013\u0002\ufffd\u0010\ufffd\ufffd{\ufffd\u0017\ufffd\ufffd,\u001d\u0017@\u0011I!4\u0002\ufffdrh\u0015\ufffd*\u001f\ufffd\u0004?V\ufffd\ufffd\n\u0019b\b\ufffdO\u0000_\u039fqu{\u0018\ufffdO\ufffdc\ufffd\ufffd\ufffd\u0587\ufffdb%\ufffd\/\ufffdZ\ufffd$\ufffd\u001a\ufffd_\ufffdy\ufffd_\ufffd\u0017\u0000\ufffdW\ufffd\u0000\ufffd\\\ufffd\ufffd\ufffd\u001d\u0628\ufffd\ufffd<8\ufffdw\/\ufffd\u000f\u0001\btM\u0000_\ufffd\u001aY\u0018'\ufffd\ufffd\u001aEca\ufffdB\u0016\u0010\b\ufffd\u0000\ufffd\u001cXA\ufffdt\ufffd\ufffdq,\ufffd\ufffdB\u0005\ufffd\ufffd\t\ufffd\ufffdE\u0013\ufffdB\u0013\uee6a\u0013U\ufffd\ufffd\u0018 \u0000\ufffd\ufffd\u0004\ufffd\ufffdLB\ufffd\ufffd\ufffd\ufffd+L~\ufffd\u0013\ufffd\ufffd}\ufffd`\ufffd\ufffd\ufffd\ufffd\ufffd\u0006&\ufffd>\ufffd\u0013 \u0000\ufffd\ufffd\b\ufffd\ufffdE\ufffd\ufffdH?\ufffdvr\\\u001f\ufffd\ufffd*R\r\u0080@K\u0002\ufffdrK,\ufffd\ueb3b\ufffd\ufffd\u001c\u0017jy\ufffd+\u0014\u0002\ufffdr(\ufffdT\ufffdHW\ufffd\u001bW\ufffdh \u0000\ufffd\ufffd\b\ufffd\ufffd\ufffd\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<T\/\ufffd[\ufffd\ufffd\u0000\u0004\ufffd$\ufffd\/w\t\ufffd_9\ufffda\ufffd[;\"\ufffd\ufffd\u0000\ufffd\u001cI\ufffdY\f#\ufffdB\ufffdf\b\u0004\ufffd\ufffd\u0010\ufffd\ufffd1\u0007~\ufffd\ufffd\b\u0001\u0004\ufffdC\u0000_\ufffdN-\ufffdd\ufffd=)\ufffd\ufffd\ufffd\ufffd\u0003L\ufffd\u0010\u0214\u0000\ufffd\ufffd)\ufffdJ6\ufffd,\ufffd{_%KCP\u0010hI\u0000_n\ufffd%\ufffd\ufffd\ufffd\u0012E\ufffd\ufffd\ufffd\u0017PII%x\u0002\ufffdr\ufffd%vw]3\ufffd\u0011x\ufffdI\/4\u0002\ufffdrh\u0015]\ufffd\ufffd[e\u064c2ey\u0011\u0014>@\ufffd\ufffd\u0004\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\u070d$\ufffdu\ufffd\u0003AN\ufffd@)\u0004\ufffd\ufffdR\ufffd\u0017\u04a9{P\u0014\ufffd,\u0017\ufffd\ufffdN \ufffd)\u0001|9S\ufffd\u0015j\u032d}\ufffd\ufffdq\u0015*\b\ufffd@@&\ufffd\/\u02e8\ufffd\u0012\ufffd\ufffd\ufffd\r\ufffdTU\ufffd\ufffdF\ufffd\u0010\ufffd%\ufffd\/\ufffdx)\ufffd\ufffd\ufffd\r\ufffdBL\ufffd\ufffd \u0010\u0001\u0001|9\ufffd\"\ufffd\u0015\ufffdx\ufffdu\ufffd\ufffd%\ufffdX\b\ufffd\ufffd\ufffdU:\ufffd\u001b7\ufffd\u0738\ufffd\nKB\ufffd\u0010\ufffd\ufffd\u0003\ufffd\ufffd\ufffd:\ufffd\ufffd\u0005VR\u0489\ufffd\u0000\ufffd\u001cT\ufffd\u04c1\ufffd\ufffdZP9\ufffd\f\u0004\ufffd#\ufffd\/\ufffdT\ufffd\ufffd\ufffd\ubc502\"\u0017\b\ufffdH\u0000_\u000e\ufffd\ufffdn\u01b2a`9\ufffd\ufffd\ufffdI\ufffd\u0004\ufffd\ufffdPJ_s\ufffdyr\ufffdu(\ufffd$\ufffd\ufffd\t\ufffd\ufffda\ufffd\ufffd\ufffd\u0014F-\ufffdd\ufffd\u0002\u0002\ufffd\u0013\ufffd\ufffdC\ufffd\u0000\ufffd5\ufffd\ufffdy I\b\ufffd$\u0007\b$\t\ufffd\u001c\ufffdU\ufffd\u0016(b)\ufffd\u0000\nI\n\u0010h\u0010\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\ufffdXc\ufffd\ufffd2\ufffd\u0000\u0004\u0016\b\ufffd\ufffd\u02e3n\ufffdN\u2d85@\nzWB\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\u0002E\ufffdB\ufffdu\b\u0014K\ufffd\u0004\ufffdr_\ufffdf\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd9\ufffd\ufffd\ufffd\r\ufffd\ufffd\uc0b6!\u0000\ufffd\ufffd\t\ufffd\ufffdS#\rS\u001e\ufffd\ufffdF\ufffdN7,_N'a\ufffd\ufffd}\ufffd\u0017\u0011\u001dB g\u0002%\ufffd\ufffd\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffdo^\u0015\ufffd\ufffd?\ufffd1\t#\/\ufffd\ufffd\u000b\ufffd\ufffd\b\ufffd\ufffdSv\ufffd@c\ufffd+>\ufffd2\ufffd\ufffd%\u02c6+\ufffdH\ufffd\\\ufffd\ufffd(\u0004\ufffd%P\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffdP\ud9a5\uddd1o\u001eY\ufffd\ufffd0\ufffdX\ufffd3\u000f\ufffd\ufffd\t\ufffd\ufffd\t\ufffd\ufffdS\u0013s\ufffd<Q|\ufffde\ufffd}\ufffd\rW\ufffd)Q\u0653\ufffdE\bT\ufffd@)>5;\ufffdQ\ufffd0F\u0010\ufffd\ufffd\ufffdS\ufffd\u0006\ufffd\u001f\ufffd\ufffd\ufffd\ufffdJ\f\u0010\ufffd\ufffd@)\ufffd<;\ufffdQ\ufffd0F\u0000\ufffd\ufffdX\ufffd\ufffd\u0016\ufffd\ufffdI\ufffd\u0010\ufffd\ufffd@)\ufffd<;\ufffdQ\ufffd0\ufffd\ufffd\ufffd\ufffd\ufffd2\u000b\ufffdG\ufffd\ufffd\ufffd\ufffdc!P\ufffd\/'\ufffd@F\u0019\ufffd\u0018\ufffd\ufffdr\u00d5\ufffd\u001a\u0017\u02ffN\ufffd@9\ufffd\ufffd\u000ed\ufffd1\ufffd\ufffd\/\ufffd\u02b1\ufffd+%\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffdnFF)_\ufffd\ufffd\ufffd7\ufffd\ufffd\nW\u0382\"m@\ufffd\u0007\u0002\ufffd\ufffdT\ufffd\ufffdr)\ufffdo\ufffd\u0277\ufffd+\u0001W\ufffd!-@\ufffd\u0017\u0002%\ufffd\ufffd:c\u0595\ufffd\ufffd\ufffd|{\ufffd\u0015W\ufffd\u0011 \ufffdC\ufffd+\u0002\ufffdO\ufffd\ufffd\u0006\u0737\ufffd*n\u0003c\ufffdwo=\ufffd\ufffd\u0011W\ufffdN-\ufffd\u0004\u0002E\u0010\ufffd}jv\u0015\ufffd,ly~}\ufffd,\u001a\ufffdmC]\ufffdN\u03b7\b\ufffdR\u001f\ufffd\ufffd\ufffd\t\u0011\u0004\u0002\"\ufffd\ufffd\ufffd\u001b\u0011\u001e\ufffd\ufffde\ufffd\ufffd9\ufffd\ufffd\ufffd\u071b\ufffd\ufffdN\ufffd\ufffd\u001d\ufffd7f5\u07ea\ufffd\u0018W\ufffdJ%\ufffd\u0003\u0002\ufffd\u0011P}jLv\ufffd\ufffdb_\ufffd\ufffd\ufffdWcl\ufffd\ufffdr\ufffd\ufffd|\ufffdk\ufffd\ufffdc\ufffdv\ufffdj\ufffd\ufffdT\ufffd\u0003NO\u0010\ufffd\u0004\u0001\u0567\u0006L)\u04cdUFCf@\ufffd\ufffd\ufffdj\ufffd\ufffdJW'\u0095\ufffdL\ufffd\u0010\ufffd \u0001\u0567\ufffd)\ufffdi\u0019\ufffd\ufffd\ufffd[\u04ea\ufffdj\ufffd\u5a2a\ufffd\ufffd\ufffdm\rV\ufffdz\ufffd\ufffd\ufffd4\u0004b&\ufffd\ufffd\ufffd\ufffd+\ufffde-0_NW\ufffd7<\ufffd\ufffd\ufffd\u02c9n!P.\u0001\ufffdoU]I\u0644\ufffd\ufffd\ufffds\ufffd\ufffdP\ufffd$\ufffdt\u000b\u0001\b\ufffdK@\ufffd[UWR6!\ufffdr\ufffd\ufffdz\b\ufffd\u0797t-\ufffd-\u0004J'\ufffd\ufffd\ufffd\ufffd+)\ufffdp|9\ufffd\u0018\ufffd\ufffds\ufffdJ\ufffd\ufffd\ufffd\u0016\u0002U \ufffd\ufffd\ufffd\ufffd+)'\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\u0458\ufffd\ufffd\u07feX\u0012n\ufffd\ufffd\u0000\u0004\ufffd$\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffde\u06b6\u0013\ufffdk\ufffd\u001c^8\ufffd\ufffd\u0016\ufffd(\ufffd]c\n\u0006\u0013\ufffd#NO\u0010\ufffd&\u0001\u0567T]YY\ufffd\ufffd\ufffd\ufffd`\nF\ufffd\ufffd\ufffd\u0011\u0002\ufffd$\ufffd\ufffd\ufffd\ufffd++K5>UWt\u001eL\ufffd(\ufffd8\ufffdA\ufffd\ufffd\u0004T\ufffdRuee\ufffd\u01a7\ufffd\u0363f\ufffd=\ufffd\ufffd0\u0005\ufffdX\ufffd\ufffd\u0006\ufffd\ufffd\u0012P}J\u0555\ufffd\ufffd\u001a\ufffd\ufffd+0\ufffdz\ufffdc\u001fS0\nDNW\u0010\ufffd6\u0001\u0567T]Y\u066a\ufffd\ufffd\ufffd\u001au\u02de\ufffd\ufffdk\ufffdI\n\u000b\ufffd\ufffd \u0000\ufffd\ufffd\b\ufffd>\ufffd\ufffd\ufffd\ufffdD\ufffdO\ufffd\u0015\ufffdGc\u0000c]\ufffd\ufffd\ufffd\ufffd\u0006\u0002\u0010\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT]\u0011y4\ufffd\ufffd\ufffd1\ufffd\\\u0004l\ufffd\ufffd\ufffdG\u0004T\ufffdRue\ufffd\ufffd\u01a7\ufffd\ufffd\u03e3q\ufffd5\u0003\u0018\ufffd\ufffd\ufffd\u0007\b\ufffdF@\ufffd)UWV\ufffdj|\ufffd.\ufffd<\ufffd\ufffd\ufffd\ufffd\u0012Y\ufffd(g\ufffd4\u000f\u0001\/\t\ufffd>\ufffd\ufffd\u0282\ufffd\u01a7\ufffdr\ufffdcr(\ufffd\ufffd\ufffd\u06eds\ufffdL\ufffd\u0010\ufffd\ufffdS\ufffd\ufffd,\u0010j|\ufffd.\ufffd<\u0487C\ufffdu\ufffdx\ufffd#c\ufffd\ufffd\ufffd\ufffd\u0004T\ufffdRue\ufffdP\ufffdSuy\ufffd15\ufffd~U\u001e\ufffd\u0016\ufffd\ufffd\b\ufffd.\u0004\ufffd'\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd\ufffd'\ufffd\ufffdW\ufffd\ufffd\ufffd|Z\ufffdU\b@ \f\u0002\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001c\ufffdh|U\ufffd\u001b\ufffdr\u000epi\u0012\u0002!\u0011P}J\u0555\ufffdF\ufffdO\ufffde\ufffdG\ufffd\ufffd\u0000_\ufffd3'K\ufffd\u0010\b\ufffd\ufffd\ufffdS\ufffd\ufffd,@j|\ufffd.\ufffd<&\ufffdQe\ufffd*gK\ufffd\ufffd \u0010*\u0001\u0567T]Y\ufffd\ufffd\ufffdT]\ufffdyL\ufffd\ufffd\ufffd\ufffd\ufffd\u0018U\u0390)MA h\u0002\ufffdO\ufffd\ufffd\ufffd`\ufffd\ud967\udeac\uda23\udf41\ufffd\ufffdQ\u5b08\ufffd\u000e\u0004\ufffd'\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\u001a\ufffd\ufffd\ufffd&\ufffd\ufffdt]\ufffd>n\ufffd\ufffd\u0006'\ufffd@ \u0012\u0002\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\f\ufffdh\ufffd\ufffdg\ufffd\ufffdS_\u00060i\u0002\u00021\u0011P}J\u0555\ufffdN\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\ufffdZ\ufffdJ\ufffd\ufffd!\u0010\u001f\u0001\u0567T]Y\u0004\ufffd\ufffdT]Oy0\ufffd\ufffd\u0013>N\ufffd@\ufffd\u0004T\ufffdRue\ufffdT\ufffdSu+\u03e3>>;\ufffd<\ufffd\ufffd68\u0013\u0002\u0010\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd,\ufffdj|\ufffdn\ufffdyL\ufffd\r\ufffd9q\ufffdJ\ufffdB~\ufffd\u0006\u0001\bX\u0002\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ud967\ude95\ufffd15\ufffd.\ufffdl\ufffd\ufffda}+\ufffd\ufffd9\u0010\ufffd@\ufffd\ufffd\ufffdS\ufffd\ufffd,\ufffdj|\ufffd\ufffd\ufffd<&G\u04bbG0\ufffd\ufffdq\u0002\u0004 \ufffd\u000b\u0001\u0567T\ufffd.\ufffd\u0017\ufffdQ\ufffdO\ufffdu\u0017\ufffdD\ufffd\u043d\ufffd\u001b\ufffd\ufffd\ufffdrw\ufffdPC\u0000\u0002K\t\ufffd>\ufffd\ufffd\ufffdP\ufffd\u001e5>U\ufffdG=\ufffd;\ufffd\ufffd\u001f\ufffd\ufffd'\ufffd\ufffd\u0000\u0004 \u0416\ufffd\ufffdS\ufffd\ufffdmG9\u001fP\ufffdSub\ufffdsC\ufffd\u0003\ufffd\u033e\u0010\ufffd!\ufffd\u0000\u0004:\u0011P}J\ufffdu\ufffd\/\ufffd\ufffdj|\ufffdN\ufffds~Hy\ufffd%\ufffd\u0015^h \u0000\u0001\ufffd\ufffd\ufffdS\ufffdN\ufffd5{\ufffd\u001a\ufffd\ufffd\ufffd\u0014a}~H\ufffd\ufffd\u0017\ufffdXq\u001c\u0002\u0010\u8380\ufffdS\ufffd\ufffd\ufffd\u07b3S\ufffd\ufffde#\ufffd\ufffd\ufffd\ufffd\ufffd?\ufffd\ufffdS\ufffd\u0005\ufffdA\b@`%\u0004T\ufffdRu+\ufffd!\ufffds\ufffd\ufffdT]\u06d8\ufffd\ufffd\u001bs\/\fC\ufffdm\u0019q\u0000\u0002\u0010\u8240\ufffdS\ufffd\ufffd\ufffd`z8Y\ufffdO\u0575\f\ufffdzrc\ufffdr\ufffd\u0010\ufffd\u0017-\t\ufffd\u0013\u0002\u0010\u0200\ufffd\ufffdS\ufffd.\ufffd\ufffdV\u0504\u001a\ufffd\ufffd[\u0012\u013c'\ufffduc\u033dX\ufffd\ufffd\u001d\u0010\ufffd@v\u0004T\ufffdRu\ufffdE\ufffd]Kj|\ufffdnQ\ufffd\u000b\ufffd<8Z[t\ufffd\u000f\u0010\ufffd\u0000\u00042'\ufffd\ufffd\ufffd\ufffd\ufffd<@\ufffdA5>U7\ufffd-\ufffd<\ufffd\ufffd7\u0010\ufffd@1\u0004T\ufffdRu\ufffdD\ufffd\ufffd\u00175>U\ufffd\ufffd09\ufffd\ufffd1\ufffdl\ufffd\ufffd\ufffd\u00149{ \u0000\ufffd\ufffd\b\ufffd>\ufffd\ufffdr\n\ufffdc\ufffdj|\ufffdnr|\ufffd\ufffdb\ufffd}\ufffd5c\u0017\u001d\ufffd#\ufffd\u0000\u00042$\ufffd\ufffd\ufffd\ufffd\ufffd0\ufffd\ufffd\ufffdR\ufffd\u0013tM\ufffd\u0737\u000eO\ufffd\f\ufffd!\u0000\ufffd\f\b\b>\ufffd\ufffd\ufffd\ufffd2\biEM\ufffd\ufffd-\ufffdk\ufffdd382\u03bc\ufffd\u0015\u0542\ufffd \u0000\ufffd\ufffd\b,\ufffdS\u000bm\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdo_8\ufffd\ufffdw\ufffd\u001eh)\u07a4\ufffd\ufffd\ufffd\ufffdV\ufffd%\ufffd\ufffd\ufffdN\b@\ufffdx\u0002m}j\ufffdP4\ufffdw\ufffdw\u000fQ\ufffd\ufffd\ufffd]\ufffd\ufffd\ufffd\u001d\ufffd\ufffd6\ufffd\ufffd\ufffd\ufffd\u0329W%\ufffd\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd>\ufffd\ufffd\ufffd\u063f\ufffd{\u075cx\u067f\ufffd\ufffdj\ufffd\ufffd\ufffdb\ufffdk\ufffd^\u001b\u001f]\ufffdx\u0408\ufffd\ufffdo\ufffd\ufffdb\ufffd \u0004 P\u0000\ufffd\ufffd>\u057aSI\ufffd\ufffdk\ufffdy\ufffd7~\ufffd\ufffd\u0017\ufffd\ufffd\u001f]\ufffd\u029a\u000b\u0017}\\\ufffd\ufffdt\ufffd\ufffdw&\ufffd)O8\ufffdm\u0597?\ufffd\ufffdi\ufffd\ufffd=\ufffd_\ufffdd\ufffdA\ufffdX\u0437\ufffd\u0014_}\ufffd\ufffdbWk#m:2U\u001b\u001b]7\ufffd\ufffd\u001e\ufffd\ufffd\u0006\u0018\ufffd!\u0000\ufffd\ufffd\t4\ufffd\u0532}+\ufffd\ufffd}\u000f\ufffd\ufffd52\ufffd\u000e\ufffdW\ufffd\u001ak\ufffd\ufffdE\ufffd\ufffd\ufffd\u00033\ufffd\ufffd\ufffd=t\ufffd+f\ufffdo\ufffd\ufffd\ufffdm\ufffd\/\ufffd~\ufffd\ufffd\ufffdNZ|N\ufffdO\ufffd\ufffd\ufffd801\u4fb2\/\ufffd\u02f5\ufffd\ufffd\ufffd\ufffd\ufffd7d\ufffd\ufffdC\ufffd\u0013\ufffd%\ufffd\u0006\ufffd^\b@\ufffdp\u0002\ufffd\u001dlq(\ufffd\ufffdbsC\u3919\ufffd\ufffd<\ufffd|\ufffdc\ufffd\ufffdm\u001fI~6\ufffd\ufffd\u0005\u00cfl\ufffdj\ufffd\ufffd\ufffdg~j&I~4\ufffd\u000b{\ufffd\ufffd\ufffd\u034d\u0003\ufffdS\ufffdw\ufffd\ufffd8\ufffd\ufffd\ufffd\u001a\ufffd\ufffd2\ufffd\ufffd\ufffd>d\ufffd\ufffd$?4?\ufffd\u0779\ufffd\u001fc6\ufffd\u00d3#}\ufffd+\ufffd\ufffd\ufffdf\ufffd \u001bs\ufffd\ufffd\ufffd\ufffd\u9cc6<^\ufffd\ufffdO\u02c1\ufffd\u0018\u0004 P8\ufffd\ufffd\u000e\ufffd4\fEw\ufffd\ufffd\u04f3'^c\ufffd'o<\ufffd}\ufffd\ufffd\ufffd\ufffd;\ufffd6\u0007\u001d\ufffd\ufffd\u00a7\ufffd`\ufffd\u0017\ufffd\ufffdy\ufffdLr\ufffd\ufffd\ufffd=p\ufffd\ufffd~\ufffd@\ufffd\u000b~\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffd\ufffd\u03f9\ufffd\u5dd8\ufffd\ufffd\ufffd\ufffd\ufffd\u0007\ufffd\ufffd3\ufffde_:m\u0597\ufffdFgo\u0002q\ufffd[KO\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffdX\ufffd\ufffd\u0618\ufffd\ufffd\ufffd\ufffd\u001a\u07d0;A\ufffd8\u0004 P\n\ufffd9\u0007\ufffd\u0539\ufffd\ufffd\ufffdv\ufffd\\+?4\ufffd\ufffd\ufffdI:\\q\ufffdy\ufffdd\ufffd\ufffdls\u04c2\/7\u000e4\ufffd\ufffd\ufffd\ufffd\u063f_5\u0007YK\ufffd\ufffd\ufffd$y\ufffd\u0013\ufffd\ufffd\ufffd:\ufffdz\ufffd\t\ufffd}\ufffd\u0358\ufffd\ufffd\u001d\ufffdo\/\u0019l2\ufffd\ufffd\ufffd}v8\ufffd\ufffd\u001aO\u0017\ufffd\u0000\ufffd\ufffd\u0010\ufffd@\ufffd\u0004\u0004\ufffdM\ufffd\u0013t\ufffd4\ufffd\u0325\ufffdy\ufffdR_\ufffdv\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffdU\ufffd\ufffd\ufffd>\ufffdoO[\ufffd\ufffdE}\ufffd\ufffd\ufffd\ufffd\u02deh\u0007?:m\ufffd\u05bb\ufffd\ufffd\ufffd\u001d\ufffd\u0018\u001d\ufffd_\ufffd\u0740\ufffd\ufffdG\ufffd\ufffd8\u000e\u0001\b@ W\u0002\ufffdO\t\ufffd\u001d\ufffd^6\u0017\ufffdO\u031b\ufffd\ufffd\ufffd\/\ufffd\ufffd\ufffd\ufffd\u0316\ufffd|\ufffd\ufffd\ufffd=\ufffd\ufffdw\ufffdu\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\ufffd\ufffd<\ufffd\ufffdJ\ufffd\u017ev\ufffdv\ufffd\ufffd\u0018\u001d\ufffdu\ufffd\ufffd'\ny,>\ufffdO\u0010\ufffd\u0000\u0004\n&\ufffd\ufffd\ufffd\ufffd{\ufffdS\ufffd\ufffd~\ufffd\ufffd\ufffd\/\ufffd\ufffd\ufffd&\ufffd]\\h\u0483\/;x\u0597?k\ufffd\ufffd4\ufffd\ufffd=\ufffd\ufffd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffd\u0013f\ufffd\ufffd\ufffd\ufffdo\ufffd9g\ufffd'\ufffd\u0522G\ufffd(\ufffd<\u069c\ufffdn\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\/\ufffd\ufffdF\ufffd3\u0003\ufffd7\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\ufffdsw\ufffd\ufffdg\ufffd\ufffd\ufffd5\ufffd|\ufffd\ufffdt\ufffd\ufffd\ufffd\ufffdw\ufffd\ufffd'\ufffd\ufffd\\j\ufffd\uff9a\ufffdn|\ufffdls\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\u0445\ufffdo\ufffd\ufffd\ufffd8\n\u0001\bT\ufffd\ufffd\ufffd.zE\ufffd\ufffd\ufffd\ufffd\ufffd\u019a\ufffd\ufffdy}\ufffd\ufffdqo\ufffd\ufffdw\ufffd3\u0016|\ufffdMP\ufffdg\ufffd\ufffdZ_v\ufffd\ufffdf\ufffd\/\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd\u0003\u001e\ufffd\ufffd\ufffd6\ufffdM\ufffdf>l\ufffd]h~b_\ufffdv\ufffd}\ufffd5\ufffd\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffd\u02dd\ufffdq\u001c\u0002\u0010\ufffd*\u0001\ufffdo]\ufffd\ufffdW\u001f\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\u06f1\ufffdw\ufffd\ufffd\ufffdmo\ufffd3\ufffd\ufffd\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffd=g\ufffd$\ufffd\ufffdU\ufffdL_\ufffd\ufffd\u0517\ufffd\ufffd\ufffd\ufffds\ufffd\ufffdO\ufffd\ufffdo\ufffd\ufffd\ufffd\ufffd<`s2sl\ufffd\u000f\ufffd\ufffd\u001e\ufffdRw\ufffd%\ufffdkC\ufffd\ufffd\ufffd\ufffd\ufffd\u03b9c\ufffd\ufffdf|y\u000e\u0007!\u0000\u0001\ufffd\bH~k\ufffd\ufffdt\ufffd=\ufffd\r\ufffd\ufffd\ufffd\u0687\ufffd\u0019\u000f>\ufffd<a\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffdU\u0007l\ufffdp\ufffd\u000b\ufffd\ufffd5\ufffd\ufffdY\u0016\/3k\ufffd\ufffd}\ufffd\ufffd\ufffd;\ufffd v\ufffda\ufffd\ufffd\ufffd\ufffde{X\u0361w\ufffd]\ufffd\u001cn\ufffd1G\ufffd)\ufffd;\ufffduS5:m\ufffd^k\ufffd\ufffd\u01db?5\u001d\u0010\ufffdh>\ufffd\ufffd\u0010\ufffd\u0000\u0004\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0187\u001a)<z\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd>v\ufffd\ufffd\ufffd?\ufffd\u001cM\u05cc\ufffd\u0019\ufffd\ufffd\ufffd\ufffd#\ufffd\u0003\ufffd\ufffd\ufffdU\u0013\ufffd\ufffd\ufffd\/\ufffdyG\ufffdg\ufffd\ufffd\u031e\ufffd\ufffd=\ufffd\ufffd\u0018\ufffd\u07ea\ufffd6\ufffd\ufffd\u0015\u0002\u0010\ufffd@\ufffd\u0004T\ufffdRum3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\ufffd9|\ufffd\u001b\ufffd\u001cX\ufffd[\ufffdO\ufffd-j\ufffd\u000f\u0010\ufffd\u0000\u0004\n$\ufffd\ufffd\ufffd\ufffdk\u001bz'_\ufffd{\ufffdj\ufffd\ufffd\ufffd\ufffd\ufffd\u001a\ufffd%.=\ufffdh\ufffd\u001a\ufffd\ufffd[\ufffd8\u001f \u0000\u0001\b\u0014H@\ufffd)U\ufffd6\ufffd\ufffd\u0003\ufffd\u001ej\u001c\u0018v30\ufffdn\ufffd\ufffd\u0011iaS\ufffdSuB\ufffdH \u0000\u0001\b\ufffdB@\ufffd)U\ufffdK\ufffdB\ufffdj|\ufffdN\ufffd\u0012\t\u0004 \u0000\ufffd\\\b\ufffd>\ufffd\ufffdr\tRhT\ufffdO\ufffd\t]\"\ufffd\u0000\u0004 \ufffd\u000b\u0001\u0567T].A\n\ufffd\ufffd\ufffd:\ufffdK$\u0010\ufffd\u0000\u0004r!\ufffd\ufffd\ufffd\ufffd\ufffd%H\ufffdQ5>U't\ufffd\u0004\u0002\u0010\ufffd@.\u0004T\ufffdRu\ufffd\u0004)4\ufffd\u01a7\ufffd.\ufffd@\u0000\u0002\u0010\u0205\ufffd\ufffdS\ufffd.\ufffd \ufffdF\ufffd\ufffdT\ufffd\ufffd%\u0012\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\u0012\ufffd\u0428\u001a\ufffd\ufffd\u0013\ufffdD\u0002\u0001\b@ \u0017\u0002\ufffdO\ufffd\ufffd\\\ufffd\u0014\u001aU\ufffdSuB\ufffdH \u0000\u0001\b\ufffdB@\ufffd)U\ufffdK\ufffdB\ufffdj|\ufffdN\ufffd\u0012\t\u0004 \u0000\ufffd\\\b\ufffd>\ufffd\ufffdr\tRhT\ufffdO\ufffd\t]\"\ufffd\u0000\u0004 \ufffd\u000b\u0001\u0567T].A\n\ufffd\ufffd\ufffd:\ufffdK$\u0010\ufffd\u0000\u0004r!\ufffd\ufffd\ufffd\ufffd\ufffd%H\ufffdQ5>U't\ufffd\u0004\u0002\u0010\ufffd@.\u0004T\ufffdRu\ufffd\u0004)4\ufffd\u01a7\ufffd.\ufffd@\u0000\u0002\u0010\u0205\ufffd\ufffdS\ufffd.\ufffd \ufffdF\ufffd\ufffdT\ufffd\ufffd%\u0012\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\u0012\ufffd\u0428\u001a\ufffd\ufffd\u0013\ufffdD\u0002\u0001\b@ \u0017\u0002\ufffdO\ufffd\ufffd\\\ufffd\u0014\u001aU\ufffdSuB\ufffdH \u0000\u0001\b\ufffdB@\ufffd)U\ufffdK\ufffdB\ufffdj|\ufffdN\ufffd\u0012\t\u0004 \u0000\ufffd\\\b\ufffd>\ufffd\ufffdr\tRhT\ufffdO\ufffd\t]\"\ufffd\u0000\u0004 \ufffd\u000b\u0001\u0567T].A\n\ufffd\ufffd\ufffd:\ufffdK$\u0010\ufffd\u0000\u0004r!\ufffd\ufffd\ufffd\ufffd\ufffd%H\ufffdQ5>U't\ufffd\u0004\u0002\u0010\ufffd@.\u0004T\ufffdRu\ufffd\u0004)4\ufffd\u01a7\ufffd.\ufffd@\u0000\u0002\u0010\u0205\ufffd\ufffdS\ufffd.\ufffd \ufffdF\ufffd\ufffdT\ufffd\ufffd%\u0012\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\u0012\ufffd\u0428\u001a\ufffd\ufffd\u0013\ufffdD\u0002\u0001\b@ \u0017\u0002\ufffdO\ufffd\ufffd\\\ufffd\u0014\u001aU\ufffdSuB\ufffdH \u0000\u0001\b\ufffdB@\ufffd)U\ufffdK\ufffdB\ufffdj|\ufffdN\ufffd\u0012\t\u0004 \u0000\ufffd\\\b\ufffd>\ufffd\ufffdr\tRhT\ufffdO\ufffd\t]\"\ufffd\u0000\u0004 \ufffd\u000b\u0001\u0567T].A\n\ufffd\ufffd\ufffd:\ufffdK$\u0010\ufffd\u0000\u0004r!\ufffd\ufffd\ufffd\ufffd\ufffd%H\ufffdQ5>U't\ufffd\u0004\u0002\u0010\ufffd@.\u0004T\ufffdRu\ufffd\u0004)4\ufffd\u01a7\ufffd.\ufffd@\u0000\u0002\u0010\u0205\ufffd\ufffdS\ufffd.\ufffd \ufffdF\ufffd\ufffdT\ufffd\ufffd%\u0012\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\u0012\ufffd\u0428\u001a\ufffd\ufffd\u0013\ufffdD\u0002\u0001\b@ \u0017\u0002\ufffdO\ufffd\ufffd\\\ufffd\u0014\u001aU\ufffdSuB\ufffdH \u0000\u0001\b\ufffdB@\ufffd)U\ufffdK\ufffdB\ufffdj|\ufffdN\ufffd\u0012\t\u0004 \u0000\ufffd\\\b\ufffd>\ufffd\ufffdr\tRhT\ufffdO\ufffd\t]\"\ufffd\u0000\u0004 \ufffd\u000b\u0001\u0567T].A\n\ufffd\ufffd\ufffd:\ufffdK$\u0010\ufffd\u0000\u0004r!\ufffd\ufffd\ufffd\ufffd\ufffd%H\ufffdQ5>U't\ufffd\u0004\u0002\u0010\ufffd@.\u0004T\ufffdRu\ufffd\u0004)4\ufffd\u01a7\ufffd.\ufffd@\u0000\u0002\u0010\u0205\ufffd\ufffdS\ufffd.\ufffd \ufffdF\ufffd\ufffdT\ufffd\ufffd%\u0012\b@\u0000\u0002\ufffd\u0010P}J\ufffd\ufffd\u0012\ufffd\u0428\u001a\ufffd\ufffd\u0013\ufffdD\u0002\u0001\b@ \u0017\u0002\ufffdO\ufffd\ufffd\\\ufffd\ufffd\ufffdh]\ufffdO\ufffdu\ufffd\u0012\u0005\u0004 \u0000\ufffd|\b\ufffd>\ufffd\ufffd\ufffdc\ufffd5c\ufffd\u001dENP\ufffd<\ufffd\u001c\u0010A\u0000\u0002a\u0013P}J\u0555D\ufffd\ufffd\ufffd\ufffds\ufffd\ufffd\u0412@\u0005\u0001\b\u0004M@\ufffd)UW\u0012,|\ufffd$\ufffdt\u000b\u0001\bdO@\ufffd[U\ufffd}\ufffdR\ufffd\ufffd\ufffd\ufffd\t\u0011\u0004 \ufffd\u0003\u0001\ufffdoU]I9\ufffd\ufffd%\ufffd\ufffd[\b@ {\u0002\ufffd\ufffd\u001a3\ufffd}\ufffd\u06758\ufffd\ufffdrv0i\t\u0002\u0010(\ufffd\ufffd\ufffd\ufffd\u0003f\ufffd\ufffd@\ufffd\ufffd}\ufffd\f,\/\ufffd;\ufffd\ufffd;\ufffd\ufffd\/\u0004 \u0000\ufffd\ufffd\t\ufffd>5\ufffdND+:\ufffd\ufffd?;}yL\ufffdX\ufffdWk\r\u0015\u0004 \u0000\ufffd\ufffd\t\ufffd>e\ufffd\ufffd\fM\ufffd\u0726M\u0014\ufffd>\ufffd\u0016-\ufffd\u04c0&\ufffdlpbTj\ufffd-:c\u0017\u0004 \u0000\ufffdB\b\ufffd>5b\ufffd\ufffd\ufffd\u06c8HK\ufffdWl\u000f\u0019\u0004 \u0000\ufffd\ufffd\t\ufffd>U\u001f\u001b\ufffd\ufffd\/\u000f\ufffd\ufffd\u07d6\ufffd\ufffd\/\ufffd\ufffd\ufffd \u0000\ufffd\ufffd\t\ufffd<\ufffdwc\ufffd \u001d@(\ufffdE\ufffd\ufffd\ufffd\ufffdw\ufffdL\ufffdB\u0000\u0002\u0010(\ufffd@l>\u0015[\ufffd\ufffd\\E\ufffd\u0002\u0001\bdI 6\ufffd\ufffd-\ufffd,\ufffd\u0015\u0682\u0000\u0004\ufffd!\u0010\ufffdO\u0156o1W\u0011\ufffd@\u0000\u0002Y\u0012\ufffd\u0367b\ufffd7\ufffdk\ufffd\ufffd \u0000\ufffdb\b\ufffd\ufffdS\ufffd\ufffd[\ufffdUD\/\u0010\ufffd@\ufffd\u0004b\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd-\b@\ufffd\u0018\u0002\ufffd\ufffdTl\ufffd\u0016s\u0015\ufffd\u000b\u0004 \ufffd%\ufffd\ufffd|*\ufffd|\ufffd\ufffdVh\u000b\u0002\u0010(\ufffd@l>\u0015[\ufffd\ufffd\\E\ufffd\u0002\u0001\bdI 6\ufffd\ufffd-\ufffd,\ufffd\u0015\u0682\u0000\u0004\ufffd!\u0010\ufffdO\u0156o1W\u0011\ufffd@\u0000\u0002Y\u0012\ufffd\u0367b\ufffd7\ufffdk\ufffd\ufffd \u0000\ufffdb\b\ufffd\ufffdS\ufffd\ufffd[\ufffdUD\/\u0010\ufffd@\ufffd\u0004b\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd-\b@\ufffd\u0018\u0002\ufffd\ufffdTl\ufffd\u0016s\u0015\ufffd\u000b\u0004 \ufffd%\ufffd\ufffd|*\ufffd|\ufffd\ufffdVh\u000b\u0002\u0010(\ufffd@l>\u0015[\ufffd\ufffd\\E\ufffd\u0002\u0001\bdI 6\ufffd\ufffd-\ufffd,\ufffd\u0015\u0682\u0000\u0004\ufffd!\u0010\ufffdO\u0156o1W\u0011\ufffd@\u0000\u0002Y\u0012\ufffd\u0367b\ufffd7\ufffdk\ufffd\ufffd \u0000\ufffdb\b\ufffd\ufffdS\ufffd\ufffd[\ufffdUD\/\u0010\ufffd@\ufffd\u0004b\ufffd\ufffd\ufffd\ufffd\ufffdZ\ufffd-\b@\ufffd\u0018\u0002\ufffd\ufffdTl\ufffd\u0016s\u0015\ufffd\u000b\u0004 \ufffd%\ufffd\ufffd|*\ufffd|\ufffd\ufffdVh\u000b\u0002\u0010(\ufffd@l>\u0015[\ufffd\ufffd\\E\ufffd\u0002\u0001\bdI 6\ufffd\ufffd-\ufffd,\ufffd\u0015\u0682\u0000\u0004\ufffd!\u0010\ufffdO\u0156o1W\u0011\ufffd@\u0000\u0002Y\u0012\ufffd\u0327\ufffd\ufffd\ufffdB[\u0010\ufffd@A\u0004\"\ufffd1\ufffd\ufffd\ufffd\ufffd\r\u0004 \u0000\ufffd\ufffd\u0011\ufffd\u03d7W\u0189\ufffd \u0000\u0001\b\u0014E\u0000_.\ufffd4\ufffd@\u0000\u0002\u0010\ufffd\b\ufffd\ufffd\u001a'T\u0010\ufffd\u0000\u0004\ufffd\"\ufffd\/\u0017E\ufffd~ \u0000\u0001\bh\u0004\ufffd\ufffd\u0404a\ufffd&\ufffd\t#\u0011\ufffd\ufffd\u0000\u0004\ufffd%0`\ufffd\ufffdMnifCf`\ufffdN\ufffd@\u0000\u0002\u0010\ufffd\u0012\ufffd\ufffd\ufffd&\ufffd\ufffd\ufffd\ufffdcU\ufffdO,\u0010\ufffd\u0000\u0004\ufffd\u0012\ufffdNe\ufffd&jn\u000bxbo=Mpb\ufffd&\u001bp\ufffdK\ufffd\ufffd\u001e\b@\ufffdK\u0002#\u05ab\"\ufffdF\ufffd,\u0012AC\u0000\u0002q\u0011\ufffd\ufffd\r\ufffd\ufffd\ufffd\u0003c|[\ufffd\ufffd\ufffd&[\bxN\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001f{~u\u0012>\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b@\u0000\u0002\u0010\ufffd\u0000\u0004 \u0000\u0001\b\ufffdB\ufffd\ufffd\u0003\u0015\ufffdH>\nendstream\nendobj\n24 0 obj\n47831\nendobj\n26 0 obj\n<< \/Length 27 0 R \/N 1 \/Alternate \/DeviceGray \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffdWwXS\ufffd\u0016\ufffd[\ufffdP\ufffd\u042b\ufffd\u0411f@z\ufffd\ufffd\u0000\u048b`#&\u0001\u0002!\u0110\ufffd 6dQ\ufffd\ufffd\ufffd\u0005\u02ca.\ufffd\ufffd\ufffdV\u0004\u058a\u0005\u000bk\u01ee\u000fT\u0014\ufffduq\u0015\u001b\ufffd77\u0001\u0004\ufffd\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffdo\ufffd\ufffd9s\ufffd\ufffd9\ufffdwf\ufffd\u0002\ufffd\ufffdr\ufffdX,D\u0001\u0000\ufffd\"\ufffd$,\ufffd\ufffd:!5\ufffd\u0001\ufffdC?\u000e7_\u030a\ufffd\ufffd\"\u0004\ufffd<\u0011h`\b\ufffd\ufffd\u0001\u0010\ufffds\u0351\ufffd5$\ufffdg\ufffd\ufffd\ufffd\ufffds\ufffd\ufffdq\ufffd\ny\ufffd\ufffd\\\u0000\u0010_\u0000\ufffd\u0539b\ufffd\u0014\u0000eb]\ufffd\u0019R1\ufffd\ufffd\u0010k\ufffd$\ufffd\u0007A\\\nu\ufffd\u0003s\ufffd\u0018\ufffd\ufffd\ufffdE|\ufffd\ufffd\ufffd\b\ufffdp\n\u0019a\ufffd\ufffd\\\u000e\ufffd\ufffd\u0245\u0011+\ufffd\ufffd\u0010\b\ufffd\ufffd\ufffd\u0124\ufffd\ufffd+\ufffd\u0011~\u0013?\u0013\u0628\ufffd9\t\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd%\t\ufffd\ufffd\ufffd\u001f\ufffd\u001a.'$\u0001\ufffd:\ufffd\u001f\ufffd\ufffd\ufffd\by\u0004\u0000\ufffdrYN\u0012\u000bb\u0007\ufffd\ufffddHB\ufffd\u0014\ufffd\u0018\ufffd(+1\u0005bh\u0013\u000b\u0016H\u0649\u0010GC<M4-:\u0006bo\ufffd\ufffd\ufffd\ufffdE\u0012v\ufffd!~\ufffd\ufffd\u000fJ\ufffd\ufffd\u0016\u0000\ufffd\ufffd\ufffdg\u0013\ufffd\ufffd\ufffd\u0615\ufffd\u000f\u000e\ufffd\u0018\ufffd\ufffd'd\ufffd\ufffd\t\ufffd\ufffd\u0010\ufffd\ufffd\u0017$\u0010rO\ufffd\ufffd\u0014e\u0005\ufffdqb-\ufffdf6'\"\u0016bk\ufffd\ufffd\ufffd\ufffdxb-;\ufffd\ufffd\ufffd\ufffd0b-\u0002\ufffd\u0013Kc\t9\ufffdv\ufffd\ufffd\ufffd\ufffdZ\ufffd\u0010\ufffd\ufffd\ufffdc\ufffd}\ufffd\ufffd4+1\u001c\ufffd] ^$\ufffd$\u0012s\ufffd?\ufffd\ufffd\fA(\u001b\ufffdP\ufffd\u001f\ufffd\ufffd\ufffdz\ufffdy\ufffdXJd\ufffdo0.\ufffd\ufffd#\t\t\ufffd\u0018\u6132\ufffd\/J\"\ufffd\u0006k\ufffdr\ufffd\ufffd\t&r+\ufffd\u0019$#\u001c\ufffd\u0007y`\u001a\ufffd\ufffd\u0005\"\ufffd\t\u0018 \u001f\b@\ufffd\u001ce\u0002\u000e\u0205\ufffd\u0001=p\ufffd-\fj\ufffd`\ufffd\u0000\u0001B\u00039P\ufffd\u0001e\u0012\ufffdQ(G\ufffd\ufffd\ufffd\ufffd\u0013\ufffdg\u00001\u001c\ufffd\u0003\u0019PS\b5\ufffd\ufffd\ufffd\u0015\u0006\ufffd$,\ufffd\ufffd\ufffd`#z\ufffd\ufffdn\ufffd\ufffd;\ufffd*aE\ufffd\ufffd03V\u001e\ufffd\ufffdo\"F\u00b3\ufffd\u0001\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd(\ufffd\t\ufffd\u0448@\u0011\u001c#\ufffd\ufffd\f\ufffd\u00d9\ufffdX\ufffd|\ufffd(\ufffd\u000fgB\ufffd`\ufffd\u001c\ufffdr_\ufffd\ufffd\u0005\u05ba\u000b\ufffd\u001d\ufffd-\"\u001f=C\ufffdN\u0007\ufffd\u0011\u0019#F\ufffdeS\ufffd\ufffdrC\ufffd\ufffdX\\\ufffd4\ufffd=\ufffdF\ufffd\ufffd\ufffd\ufffd\u0012\ufffdT\u0001\ufffd\u04b2\ufffd\u0011\ufffd\ufffd\b\u0014\ufffd\u03c4\u001e+zC\ufffd\ufffd:PD\u0207\ufffd\t\ufffdq\ufffdm\ufffd\ufffd\ufffd\ufffd+\u0001\u019a3`\ufffdK\ufffd\ufffd\ufffd\/\ufffd8\ufffd\nZ\ufffd\u000f\ufffd\u0003\u018d%\ufffd\ufffd\u0001F\ufffdz\ufffd\ufffdo\ufffd\ufffd\u3353\ufffdQ[\ufffdA\ufffd\ufffdj\ufffd\ufffd'\ufffdo\ufffd\bc#]%]&= ]\u0007\f\ufffd~Lj'uCt\ufffdt\u000f>\ufffd\ufffd\ufffd\ufffd\ufffd1\u0010\ufffd\ufffd\u000b\u001b\ufffd\u000e_\u038d\ufffd\u0003\u0019\ufffdR\ufffd\ufffd\f(\u0015A?G\ufffdx\ufffd*\ufffd\ufffd\u0004\ufffd&\ufffd\u0019\u0011BD\u0003U\ufffd\u000f\ufffd\ufffd\u0004y\u02c16\ufffdg\ufffd``\u061e\ufffd.S\n\ufffd\ufffd\ufffd\f\ufffd-\n6\ufffd\ufffd\u0014\ufffd\ufffd\ufffdC\ufffd0\b&\ufffd\u000b\ufffd\ufffdF\ufffd\u0012\u0007\ufffd^\ufffd\u000b\ufffdvf\u001d\ufffd5\ufffd\ufffd7\r\ufffdM\ufffd\u001f\ufffdv\ufffdV8\ufffd\u001c\ufffdMpA\u0527\ufffdm\ufffd=\ufffdg\u0004\ufffd\u03c3;\u001b[\ufffd\u001d\u010e`MX3\ufffd\u0006\u0018\ufffd\u05cc\ufffd\ufffd\ufffd\ufffd\u000e;\f\ufffd}C+\ufffd\ufffd\u0019\n{#w\u0006\ufffd\u0007\ufffd\ufffdN V\ufffd\u000edj\ufffd\ufffd\u0019<%\ufffdS\ufffd\ufffdh\ufffd!B\ufffd\ufffdl9S\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd?\ufffdh\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"\ufffdl\ufffd-\ufffd\ufffdt\n\u074e\ufffdFg\ufffd\u0011\ufffd\u0019|\\\ufffd\u0010Y\ufffd\ufffd\ufffdQt=8\u001aN\ufffd\ufffd\u0007\ufffdG\r\ufffdc\ufffd_!\ufffd\u0010U\ufffd8\u0013\u0007\ufffd\ufffd8\u0015z9X}D|Y\ufffd\u0013\ufffd\ufffd\u0019\ufffd@\ufffd\ufffd\ufffd\u0019\u0188]C\ufffd\ufffd\u0002\ufffd\u0004u\u0005`\u0006\ufffd$\ufffd\ufffd!\ufffdP$?w\ufffdU\r\ufffdM\ufffd#a=\u000f\ufffd(gax}\r\ufffdI&\ufffd3\u0386gR\f`\ufffd,\ufffd\r\u000f\u001c\ufffd\ufffd9\ufffd\u000b\u001f\ufffdRx\ufffd\u0007\ufffdQ<\u0018\ufffd$N0\ufffd7\u0646\u001cB\ufffd\ufffd\ufffd\ufffd\ufffd\u0017r09\ufffd\u001c\n\u0018dgBN\u001eC\ufffd\ufffd\u060b\ufffd\u001aQ\ufffd\\8C\ufffd\ufffd\ufffd\ufffdM1|\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\u0005\ufffd\ufffd<q\ufffdD\ufffd\ufffd%e\ufffd\ufffd\ufffd\u0010\ufffd\ufffd\u0016q\ufffd\u001c\u0018.L&\ufffd\ufffd\ufffd}[\ufffd\ufffd\ufffd3!\ufffdm\\\ufffd\ufffd\ufffd\ufffd\u0007\ufffdc\ufffd\u000f\t\ufffd\u001dj@\u001b\u0018\ufffd[\ufffd\u0002\ufffd\ufffd0*\u000f\ufffd\u0003\ufffd\ufffd\u0010\ufffd\ufffd\u0010\u0003\u0012A*\ufffd\u0002\ufffd\ufffd\u0005\ufffd\ufffd\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\fT\ufffd\ufffd`\r\ufffd\u0000\ufffd\ufffd\ufffd\ufffd\u0016\u0503\ufffd\ufffd\u00108\fN\ufffd3\ufffd\u0002\ufffd\f\ufffd\ufffd]\ufffd\u0001\ufffd\ufffds\ufffd\u000b\u0782~\u0004A(\b\r\ufffdB\f\u0010S\ufffd\n\ufffdG\\\u0010O\ufffd\u001f\tA\ufffd\ufffdx$\u0015IG2\u0011\u0011\"C\ufffd\ufffd\u0005H\u0005\ufffd\u0012\u0640lEj\ufffd}H\u0013r\u00029\ufffd\\An#\ufffdH\u000f\ufffd\u0017\ufffd\u0011\ufffdP*\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\u0018\ufffd\u0013e\ufffd\ufffdh\":\u0019\ufffdD\ufffd\ufffdEh)\ufffd\u0014]\ufffdV\ufffduh\u0003z\u0002\ufffd\ufffd\ufffd\ufffd\u001d\ufffds\ufffd\u000f\u0003\ufffd*\ufffd\ufffd\ufffda\ufffd\ufffd'\u0016\ufffd\ufffd`iX\u0006&\ufffd\ufffd`\ufffdX%V\ufffd\ufffd\ufffd]\u070a]\ufffd:\ufffd\u0017\ufffd\u0007\ufffd\ufffdk\ufffd\f\ufffd\u0011\ufffd\u0018\ufffd'\ufffd\\|:>\u0007_\ufffdo\ufffdw\ufffd\r\ufffd)\ufffd\u001a\u0789\ufffd\ufffd_H4\ufffd\u0011\u025e\ufffdMb\ufffd&\ufffd2I3He\ufffdJR\r\ufffd \ufffd4<_\ufffdHo\ufffdd\ufffd.\ufffd\ufffd\u0003r\ufffdJ\ufffd&\ufffd\"\/!o\"\ufffd!\u001f'_!?\"\ufffdQ(\u0014\u0003\ufffd=\u014f\u0012C\ufffdP\ufffd\ufffd2\ufffdzJ\u001d\ufffd\u0018\ufffd*\ufffd\ufffd\ufffd^IU\ufffdT\ufffdE)T)MI\ufffdT\ufffdT\ufffd\ufffdK\ufffd\ufffdU\ufffd\ufffdJ\ufffd\ufffd\ufffd\ufffdV\ufffd\ufffd\ufffd1\ufffd<\ufffdB\ufffde\ufffd\u06d5\ufffd\ufffd\/)w)\ufffd\ufffdh\ufffd\u0628\ufffd\ufffd$\ufffdd\ufffd\ufffdWY\ufffdR\ufffdrZ\ufffd\ufffdkUUUsU\/\ufffd8U\ufffd\ufffd<\ufffdu\ufffd{U\u03eav\ufffd~\ufffdjR\ufffd\ufffdA\ufffdIT\u0019u)u\u0007\ufffd8\ufffd6\ufffd5\ufffdF\ufffd\ufffd\u0005\ufffd\ufffdhR\ufffdRZ-\ufffd$\ufffd\u0001\ufffd=]\ufffd\ufffdDg\ufffdy\ufffd\ufffd\ufffd*z\u0003\ufffd*\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001aKm\ufffdZ\ufffdZ\ufffd\ufffd\u0001\ufffdKj\/\u0515\u056d\u0543\ufffd9\ufffds\u052b\u051b\ufffdo\ufffd\ufffdihi8k\ufffdh\ufffdj,\ufffd\u0625qN\ufffd[\ufffd\ufffdi\ufffd\u0019\ufffd\ufffd\ufffd,\ufffd\u0726yR\ufffd\u0016\ufffde\ufffd\u0015\ufffd\ufffd\ufffdZ\ufffd\ufffd]\ufffdV\ufffd6Y\ufffdF\ufffd\ufffd\ufffd\ufffd]\ufffd\ufffd\ufffd\ufffdE\ufffd^\u001dM\u001dW\ufffdd\ufffd\ufffd:U:Gt:t1]k]\ufffd\ufffdPw\ufffd\ufffd~\ufffd\u001b\ufffd\u001f\ufffd\ufffd\ufffdXz|\ufffd\ufffdz\ufffdzW\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffdh\ufffd0\b1\ufffd1Xap\ufffd\ufffd!nhg\u0018g8\ufffdp\ufffd\ufffdi\ufffd\u0017\ufffd\ufffdG\ufffd\ufffd\ufffd*\u001f\ufffd\ufffd\u001d#\ufffd\ufffd\ufffd(\ufffdh\ufffd\ufffd6\ufffd6\ufffd>c\u0013\ufffd0c\ufffd\ufffdz\ufffd\ufffd\/LtM\u0002M\ufffdMV\ufffd\u001c5\ufffd1\ufffd2\ufffd7\u0015\ufffd\ufffd6=f\ufffd\ufffd\ufffd\ufffd`1\ufffd\ufffdu\ufffdS\ufffd^3#\ufffdp3\ufffd\ufffdV\ufffd\ufffdf\ufffd\ufffd6\ufffdI\ufffd%\ufffd{\ufffd\ufffd[\ufffdXxZdX\ufffd\ufffdh\ufffd\ufffd4\ufffd\u001coYl\ufffd\ufffd\ud9f9\udd72\ufffd\ufffdU\ufffd\ufffdZ\ufffdV\ufffdw\ufffd6\ufffd)\ufffd\u000b\ufffd\u000fYw\ufffd\ufffd\u06f0m\ufffdlv\ufffd\u0733\ufffd\ufffd\u0006\ufffdN\ufffd\ufffd\ufffd\ufffd>\ufffd<\ufffdst\ufffd\ufffdM\ufffd\/\u06e1vnvYvUv\ufffd\ufffdQ{w{\ufffd\ufffd&\ufffd+\u000e$\u0007\/\u0007\ufffdC\ufffd\ufffdMG\ufffd#\u02f1\ufffdq\ufffdc\ufffd\ufffd\ufffdS\ufffdS\ufffd\ufffd!\ufffd\ufffdc,\u01e4\ufffdY1\ufffdu\ufffd\u0017\ufffd\u001bS\bo\ufffd\ufffd\u039a\ufffd\u0011\ufffd%\ufffd\ufffd\ufffd\ufffd\u0639p]\ufffd\\\ufffd\ufffd\ufffd\ufffd\r\u001d;wl\ufffd\ufffdW\ufffd\ufffd\ufffd|\ufffd\u036e\ufffd\u0734\ufffd\u01bb-tkq\ufffd\ufffd\ufffd\ufffd.q\ufffdw\ufffd\ufffd\ufffdH\ufffd\ufffd\ufffdq\ufffdS\ufffd3\ufffds\ufffd\ufffdY\/\ufffd\ufffd8\ufffd\ufffd^\ufffd\ufffd>x\ufffd{K\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd\ufffd\u02e7\ufffd\ufffd\u0197\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001f\ufffdo\ufffd_\ufffd?\ufffd?\ufffd\ufffd'\ufffd\ufffd\u0000\ufffd\u0000N@u\ufffd\ufffd@\ufffd@^`M\ufffdS\ufffdhV6\ufffd\ufffd\ufffdr\u001cs\ufffdd\ufffd\ufffdq\uf0bc\ufffdf\u0007\u001d\u000f\u0182\u00c2\u02c3\/\ufffdh\ufffd$\ufffdl\by\u0010j\u001e\ufffd\u0019\ufffd;\ufffd7\ufffd-lV\ufffd\ufffdpRxd\ufffd\ufffd\ufffdlc6\ufffd]\ufffd\ufffd\ufffd\ufffd\ufffd\u001dq*\ufffd\u001a\ufffd\u0010\ufffd!\ufffda\ufffd]\ufffd$\ufffdy<:>b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\u0447b@\f;fU\ufffd\ufffdX\ufffd\ufffd\u9c7f\u0151\ufffdb\ufffd\ufffd\ufffd;\ufffd\u0017\u01f7&h%LM\u0615\ufffd6q\\\ufffd\u013bI\ufffdI\ufffd\ufffd\ufffdd\ufffd\ufffdI\u0275\ufffd\ufffdR\ufffdSV\ufffdtL\u00183a\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd4JZrZMZ\ufffd\u0110\ufffdk&vMr\ufffdT6\ufffd\ufffdd\ufffd\ufffd3'\ufffd\ufffdb8E8\ufffd\ufffdT\ufffd\ufffd\ufffd\ufffd\u0007\ufffdI\ufffd)\ufffd\ufffd?qb8\u055c\ufffdi\ufffdi\u001b\ufffd\ufffdr\ufffd\ufffdk\ufffd\ufffdy\ufffd\ufffd\u057c\u001e\ufffd\u001f%\ufffdi\ufffd_\ufffd\u028c\ufffdL\ufffd\ufffdU\ufffd=Y\u0001Y\ufffdY\/\u0004A\ufffd\r\ufffdW\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd*L\u0011\ufffd\ufffdU\ufffdM\ufffdm\u0012i\ufffdrD\ufffd\ufffdL\ufffdf\ufffd]\u0011\u06cb\ufffd\ufffd\u001d\u04fd\ufffd\ufffd\ufffd\ufffd+\ufffd\ufffd\ufffd\ufffd#\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\u001f\ufffd6\ufffd\ufffd\ufffd\u0007Yg\ufffdAU\ufffd\ufffd\u0019\ufffd3\u000e\ufffd\u0518)\ufffd\ufffdVhW\ufffd\ufffd\ufffdiQh\ufffd\u03f3\ufffdY\ufffdY-\ufffdf\ufffd\ufffd;g\ufffdfo\ufffd\ufffd\u03196\ufffde\ufffd\ufffd\ufffd\u04b9]\ufffd\ufffd\ufffd\ud72f2?g\ufffd\ufffd%\u0312\ufffd%o\u0016\ufffd,h.5.\ufffdW\ufffd\u81f0\u001fv\ufffd\ufffd\ufffd$e7\u0017\ufffd,\u0732\b_$Xtq\ufffd\ufffd\ufffd\ufffd\u0017)\u755f\ufffd`VTV|Z\ufffd]r\ufffdG\ufffd\u001f\ufffd\ufffd\ufffdui\ufffd\u048b\ufffd\u0717m^N^.Z~cE\ufffd\ufffd\ufffd+5V\u0016\ufffd|\ufffdj\ufffd\ufffd\ufffd\u054c\ufffd\ufffd\u07ec\ufffd\ufffd\ufffd\\\ufffdk\u55b5*kek;\ufffdE\ufffdk\\o\ufffd~\ufffd\ufffdO\u001b\ufffd6\ufffdW\ufffd\ufffd\u06b3\ufffdh\ufffd\ufffd\ufffd6\ufffd6]\ufffd\u001c\ufffd\ufffd~\ufffd\ufffd-\u001f\u0012\ufffdtkk\ufffd\u0586j\ufffd\ufffd\ufffdm\ufffdm\u0005\u06delO\ufffd\ufffd\ufffd\ufffd\ufffd\u03f55\ufffd5\u00155\ufffdw\ufffdvt\ufffd\ufffdy\ufffd\u05a3\ufffdv\ufffd\u046ee\ufffd\ufffd\u0772\ufffd=u\ufffd\ufffd.\ufffd\u0012\ufffdKc\ufffdc\ufffd\ufffd=\ufffd{*\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufef1?r\ufffd\u0001\ufffd\u0003\ufffd\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0006\ufffd\ufffd\ufffd\ufffd\ufffdP\u05a1\ufffd\ufffd\ufffd\ufffd+M\u0011M-\ufffd>\ufffd\u0007s\ufffdm\ufffda\ufffd\ufffdUGt\ufffd,;\ufffdr\ufffd\ufffd\ufffd\ufffdcE\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd8\ufffdy\ufffdQ\ufffd\u0516\ufffd''\ufffd\ufffd~*\ufffd\ufffd\ufffd\u04d1\ufffd\u03de\t=s\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd6\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd~\ufffd\ufffd\u0146K\u001e\ufffd\u001a\/{]n\ufffd\ufffd{\ufffd\ufffd\u0540\ufffd'\ufffd\u0005_;s\ufffd}\ufffdB{t\ufffd\ufffd\u001bI7n\u075ct\ufffd\ufffd\u0016\ufffdV\ufffdm\ufffd\ufffdWw\n\ufffd\ufffd\u07dd\u0007?\ufffd\ufffd\ufffd\u07ef|`\ufffd\ufffd\ufffd_\ufffd\ufffd\ufffd\ufffd\u00fd\ufffdHgpg\ufffd\u00c4\ufffdw\u001fq\u001f=\ufffd\ufffd\ufffdSW\ufffd\u0013\u0693\u02a7\ufffdOk\ufffd]\ufffd\u000f\ufffd\ufffd\ufffd\\~6\ufffdY\ufffds\ufffd\ufffd\ufffd\u0017eh\ufffd\ufffd\ufffd\ufffd\ufffd_\ufffd\f\ufffd\ufffd\ufffdwBo\ufffd+\u026b\ufffd-ym\ufffdz\ufffd\u001b\ufffd7-}\ufffd}\u000f\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\u001fZ?\ufffd||\ufffd?\ufffd\u0013\ufffd\u04fa\u03e3?7\ufffd\ufffdr\ufffdk\ufffd\u05ef\ufffd\u0006\ufffdT\ufffd\ufffd\nendstream\nendobj\n27 0 obj\n3323\nendobj\n25 0 obj\n[ \/ICCBased 26 0 R ]\nendobj\n29 0 obj\n<< \/Length 30 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd\\\ufffd\u0736\u0011\ufffd\ufffd\ufffdT\ufffd\ufffd\ufffdT\ufffdN\"\ufffd\ufffd]\u0012?\u000e\ufffd\ufffd\ufffd\u0013\ufffd\ufffd5i\ufffd\u02c7\ufffdh\ufffd\ufffdq\ufffd4\ufffd?\ufffd\u07d0\ufffd\u0011\ufffd Wg'\ufffd\ufffd:I\ufffdp8\ufffd\u0007w\ufffd\ufffdf\ufffdf\ufffd\ufffd\ufffdM\ufffdg]\ufffdg\ufffd\ufffdw\ufffd]\ufffd\ufffd\ufffd\ufffd\ufffd:{\ufffd[V\ufffd\ufffd\ufffd\u01f8\ufffdT\ufffd\ufffd\ufffd\u001fu\ufffd\ufffdU_v*{\ufffda\ufffd\ufffd>\ufffd\ufffd\u02aa\ufffdTv\ufffd>k\ufffd,\ufffd\ufffd\ufffd]\ufffd\u07eb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]v|uS\ufffdCq{u\ufffd\ufffd\u001f.\/\ufffd\u001e\ufffd:\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffdU\ufffd;\u0016\ufffde\ufffd}v\ufffdUv\ufffd\ufffd\bN\u0017V\ufffd)\ufffd\ufffdj\ufffd\ufffd3\ufffd\u001eYrg\ufffd<\ufffd\ufffd\ufffd\ufffd1p}\ufffd*\ufffd\u0018hM@3\ufffdTUS?\u0006\u073b\u0014\ufffd\ufffd\ufffd\ufffdj\ufffd\ufffd\ufffd\u0010z\ufffd$\ufffd\ufffd\u0011\ufffd\ufffd\ufffdcqa\/o\ufffd\ufffd\u0007\ufffdWc\u070b\ufffdT~]\ufffd\ufffd\ufffdUS\ufffdF\ufffd\u001e\ufffd\ufffd\ufffd\u000f\tj;\u0006\u001f\ufffd\ufffdoH\ufffd\ufffdlMo\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffds\ufffd\u0012|\ufffd\u0694]\ufffd\ufffd\ufffd#R\ufffd\ufffdL\u0010^\ufffdTM\ufffd\"\ufffd\u001d!|v\ufffd\ufffd\ufffd\ufffd\ufffd%\u0004\ufffd\ufffdpY\ufffd\u0007\ufffd\u001f\ufffd\ufffdc\ufffd9N\u0018\ufffd\ufffd\u0435\ufffd\t\ufffdu\ufffd\u001d&8aL_\ufffd\u001e\ufffd\ufffd8\ufffd\ufffd'r\ufffd,C;\ufffd\ufffdi7IK\ufffd\u000bu\ufffd\u02a6j\ufffd)\ufffd?\ufffd\u000b\ufffd1`\u02f3\ufffd\ufffd\ufffd;\ufffd\ufffd6\u001e\ufffd\ufffd.\ufffd\ufffd\ufffd)\ufffd\u001f\ufffd#\ufffd7\ufffd\ufffd`\ufffd#\ufffd\ufffd:\ufffd|j\ufffdJ]\ufffd\ufffd\u0002\ufffd\ufffd85\ufffdrh\ufffd:\ufffdc\u0007\ufffduI\ufffd$;\ufffd\"U\ufffd!e\ufffd\u046f\ufffd\u001c\ufffd{\ufffd\ufffd\u038e\ufffd\u02dd{b\ufffd\ufffd\ufffd~l\ufffd\ufffd\ufffd\f\ufffd$#\ufffd\ufffd\ufffd\u0000\u0006\u0013\ufffd?\u0000\ufffd\u018f\ufffd\ufffd\ufffd\u0005\ufffd\u0011?\ufffd\u0407#\ufffd\ufffdPx,c\ufffd\u0013\u000f\u0010\ufffd\u000e\ufffd\u001d\u0010\ufffdV\u001e\ufffd\ufffdf\ufffd\ufffdA0\ufffd=\ufffdP\u000fcw\ufffd\u0018\ufffd,\ufffd\ufffd>Y\ufffd\u0005c\u0198\ufffd\f\ufffd\u070e(\u0011\ufffd\ufffdV!\ufffd\n\ufffd\u0017F\ufffd\ufffdw\\\ufffdv3O\ufffd\ufffd\u0303\ufffd6\ufffdu\ufffd3W=\u0004\ufffd.\ufffdI\ufffd\ufffdx\ufffd3\u05fa\/\ufffd\ufffd\ufffd\ufffdfp\ufffd\/\ufffd7swN+\ufffd\u001a\u0012\/\ufffd\ufffd(zL`f\ufffd($\ufffd\ufffd\ufffd\ufffd\f\ufffdlK|\u0007\ufffd\ufffd\ufffdx\ufffd\ufffd\u0002e\u0004\ufffd\ufffd\ufffdMAOU6\ufffd\ufffd\u03a2uK\ufffd\u0005}\ufffd\ufffdoy(\ufffd\ufffd\u068fX\ufffdqD\ufffdk\u0010c\ufffd3y\ufffd|\ufffd\ufffdw^\ufffdeM\ufffdxAHA$ykJFl\ufffd\u0013\ufffd\u0002R\ufffd=\u0005\ufffd\u06be'&\ufffd`\ufffd)\ufffd\u0013V\u000bK\ufffd\ufffd\u0011\ufffd\ufffdP,P\ufffdm\ufffd.\u0007\ufffd\u0013Z@\u0012\u06f6p\ufffd[\u0014 \ufffdX\u0646\ufffd\ufffd[\u0016\ufffd\ufffd}\b\u0017\u0018\ufffd\ufffd\ufffd\ufffdD\ufffdxfG\u00110G\ufffd\ufffd\t\ufffd\u0010\ufffd\ufffd\ufffd\u0017\\\u0018\ufffd\ufffdav\ufffd\ufffd#\u0017\u0018Y\ufffd*8\"^\ufffdB\ufffd\ufffd?\u0002L\ufffd:\ufffd\u00036\ufffd\ufffd\u000b\u0018\ufffdvi\ufffdi\u03e4\u0401m\ufffd\ufffd\ufffdC\ufffd\ufffd\ufffdA\u0001\ufffd\u060a\ufffd\u0015Tx\ufffd2\ufffd\ufffd\ufffdb\ufffd,\ufffd\b\ufffd\u0019^\ufffd\ufffd\ufffd\ufffd+\ufffdlX`1b\u0002#\ufffd\u00102B\ufffd\u03f8\ufffdX00Y\ufffd\ufffd\u0114\u0002\ufffd3\u0002\ufffd \ufffd\ufffd\u0014\ufffdA`e\u0019\ufffd\u001a|\ufffd\ufffd\u0017\u07921)\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdd\rZh\ufffd^\ufffd7\ufffd0\u0013p H\ufffd\ufffd\u0017\u0019\u0012j\ufffd\u0014\ufffd\n##t\ufffd\ufffd\ufffdL>F\ufffd\ufffd\ufffd\ufffda\u0000b\ufffdy\f`\ufffd\ufffd\b\ufffd\ufffda\u001d\ufffd\ufffd\ufffdl\ufffd\u0017\ufffd\ufffd\ufffd\u0002l1\ufffd\/D5x\u000e\u0019\ufffd\ufffdz\ufffd\ufffd\ufffdM2T\ufffd.\ufffd\ufffd\u0004V\uf39f\ufffdkv|1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\"\ufffd\ufffd\ufffd@@C\u066d\ufffdMbW\ufffd\ufffdB4\ufffd\ufffd\u0010\ufffdbU\u0001\u001b\ufffd `\ufffd\u0010\u0007\u0006\u0001\u0548T&\ufffdJ\u0003\u0010\ufffd\u06cbbO\ufffd\u0004y,\ufffd=U$\ufffd\ufffd&\ufffd\ufffd\ufffd\u49b8(r\ufffd\ufffd?\ufffd\ufffd);p\ufffd}\ufffd\ufffd@d\ufffd\n\ufffd:]V\r\ufffd\ufffd\u0001\ufffd\ufffd\ufffd`C\ufffd\ufffdCRPQ\ufffd\u001d@\ufffd\ufffd5\ufffd\fz\ufffd$\ufffd\u0016\ufffd\u013e@w|B\ufffd\ufffdI\ufffd\ufffd\ufffd[tU\ufffd\ufffd\ufffd\ufffd[\u03bb4G\ufffdM\ufffd\ufffd\u001b\ufffd8,\ufffd\u0004\ufffdu\u001d\ufffd\ufffd\u000e)\ufffd\ufffd.\ufffdh\u06e3\ufffd\ufffd\ufffd\/\ufffdb\ufffd`6\ufffd\ufffd>-\u0016G\ufffd*\ufffd\ufffd\ufffd\ufffd?\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\u0005\u09b8\u0383\ufffdx\u0019(\n\ufffdR|\/\ufffd\ufffd\u02b6\ufffd\ufffd\ufffd\u0004\u0110\ufffdfL\u000b\ufffdT\ufffds\ufffdC\ufffd\ufffd\ufffd\ufffd\u029b\ufffd\ufffd%\ufffd\ufffd=K@\ufffd\u0019V\ufffd\ufffd\ufffd\ufffd\u07c6\ufffd\u03fb1\"\u0010\u0013#\ufffdqt\ufffdb\ufffd\ufffd\u82a5dk+Y\ufffd\ufffd\u0011\ufffd%Ox\ufffd8'\u0016\ufffd\ufffd&H&\u000b\nl\ufffd\u0004\ufffd \ufffd\ufffd\ufffds\r\ufffd1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffd}\u001a\ufffd\ufffd}\ufffd\ufffdkA8\ufffd~g\u0001K\ufffd\ufffd)\u4472\u0005\ufffd\ufffdp\u0011<\ufffda*\ufffd\u0005?Y\u0000\ufffd\u000f\ufffdM2\u0019\ufffdt<\ufffd\u0379\ufffd\u0010\ufffd\ufffd+;\ufffd\ufffd\ufffd\ufffdL\u001d\ufffd\ufffd\u0016\ufffd\u0017\u0014\u0019\ufffd\ufffd\ufffd\ufffdP,\ufffd\/L\u0010\ufffd\ufffdk\ufffd\u0015\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\ufffd\u001b\ufffd\ufffd\/\ufffd\u0001\ufffd\ufffd\t\ufffdM,\ufffdB]\ufffd\u001aXL\ufffd\ufffd\ufffdt\ufffd\ufffdc+1\ufffdQ\ufffd\ufffdk\ufffd\ufffd?\n\ufffd\ufffd\ufffd7yc\u000eEn\u000e\ufffdE\u0014\ufffdnz*\ufffd\ufffd\u89ecov|\u0017\ufffdY\ufffdMY\r5r\ufffd\u0010\ufffdGX,\ufffd\tH?-aS5\ufffdl\t\ufffd\ufffdT\ufffd\"\u000ff1\ufffd\u0018\ufffdI\ufffd#U\ufffdVCWVj\ufffd\tps'\ufffd2\ufffdj@E\ufffd\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd\u00059\ufffdB\ufffdX3\u0017Z\ufffduh'\ufffd\ufffdy\ufffde\ufffd\ufffdE\ufffd^@}\ufffdq\tJv\u000ez`\u00069T\u0016\ufffd\ufffd\ufffd\ufffdZ\ufffd\ufffd\ufffd\u001d\ufffd\ufffdB\ufffd\ufffd\ufffd\b@\ufffdV@\ufffd\ufffd^#\ufffdo\ufffd\ufffd\ufffd9O\ufffd.\u013e\ufffd\ufffdK!\ufffd\ufffd)\ufffd&Xe\ufffd\u0001\ufffd\ufffd\ufffd\u0017\ufffd\ufffdYQ\ufffd.\u001b\ufffd\ufffd\u001e\ufffd-\ufffd\ufffd\ufffdK\u0556\ufffd\ufffdSh\ufffd\ufffd]R\ufffd!\ufffd\u0012H8\ufffd\u001c\u001b\u001c\ufffd\ufffde\ufffd\ufffd\u0014\ufffd\\\ufffdC\ufffd\ufffd\u06ba\ufffd\ufffd4Gd\ufffd\ufffdjT#U\u06f5\tps\ufffdJ\ufffd\ufffd]9\ufffd\ufffdo:\u0011\b=\ufffdF\ufffd}\ufffd`\ufffd\ufffd\u000f\ufffdR<&O\ufffd\ufffdjS\ufffd\ufffd\ufffd\ufffd\ufffd7\u0019a\tgc\ufffdR\ufffd\ufffd5g\ufffd\ufffd%\u001e.9k\ufffd\ud68a\ufffd\ufffd4\u0019\ufffd\ufffd3}\u0012\ufffd&\ufffd3wL\ufffd\u0082\ufffd\u017c\ufffd\ufffd\ufffdR\ufffd\u0003\u0014N8\u2c86e\ufffd\ufffd\ufffd\u0001\ufffd@\ufffd\ufffd,\r\ufffdFa\u0011.\ufffdx\u00040\ufffd\ufffd\u0005\ufffd8\u0712\ufffd\ufffde\ufffd~\ufffd\ufffd\ufffd\/<\u0014*\u0011a\u0018\ufffdQ\ufffd-\ufffdQ\ufffdO\ufffd\ufffd\u0014Ea\ufffd\r\ufffdq\r\u0013V\u051aoC\ufffd\b\ufffd\ufffd\u0007<8c\ufffd\ufffd\ufffdA>\ufffd-\ufffd\ufffdF\ufffd\ufffdb\ufffdr\ufffd\ufffdg^^\ufffd\u0017\u001ej\ufffd\ufffd6v\ufffdO\ufffd\f\ufffdo\ufffd\ufffdM\ufffdY\ufffd\ufffd\ufffd\ufffd\u0012\u0011)h\t\u05c2O\ufffdl!\ufffdn~<\ufffd\ufffd\u001e\ufffd\ufffd\ufffd_i\ufffdZ\u03c5\ufffd\ufffd\ufffdn\ufffd\ufffdC=\ufffd}o`\u001dB&\ufffd\ufffd\u0004\ufffd\u0016\u0015mE!Q\u0007\ufffd\u001f\ufffd;K\u0007W\ufffd\u0000OKg\ufffd\ufffd\u0007\ufffd\ufffd\b\u0004@\ufffd\ufffd\ufffd\u0005N\u00157\ufffd\u001c~\ufffdQ\t\ufffd\b\u001d\ufffd3\ufffd'nl\ufffd\ufffdG\u000f\ufffd\u000fT,\u001a_\ufffd\u0604\u001b\ufffd\ufffd\ufffdyJ\ufffd\ufffdn\u0006tG\r\f\ufffdv\ufffd\u0000\ufffd\u0018M\ufffd\ufffd5\u0006\"\ufffd,V\"\ufffd\ufffd\r\ufffd _\ufffd:n\ufffd\ufffd\ufffdS-V\u72c1(\"\u0012\ufffd8P\ufffd\ufffdBp\ufffd\u001e]c\ufffd\ufffdH\ufffd\ufffd\ufffd%|\ufffd\ufffd\ufffd\ufffd\n\u0007[&\ufffd\"n \ufffd\ufffd\u0011\u0007\ufffd8\ufffd\ufffd\ufffd\ufffd\ufffd\nN\ti\ufffd\u070a\ufffdU\u0013,\ufffdr\u02c7\u0016vt8i\u000e\u000e\ufffd<H}S$\ufffd8\u000b0\u7d6fF\ufffd\ufffd`)\ufffd\ufffd\u001c\u0019b\u000b\u04dct\ufffd\ufffd\ufffd\"\ufffd\uca39w\b\ufffd\u063e\u0018\ufffd\u001a;\ufffd\ufffd\ufffd+\ufffd\ufffd\ufffd\u0004\ufffd\fU\ufffd\u0001TX\ufffdt\ufffd\u0018\ufffd4\u0005\u0004\b'\ufffd\u0012\u001c{\ufffdwc\u0011X\ufffdrT\ufffd8J\u0455\u00118\ufffdu\ufffdh2\ufffd\ufffd(v+}\ufffd\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk\ufffd9\ufffd\ufffd\"\ufffd\u000b\u0016\ufffd\u0003\ufffdu\ufffdw\ufffd]\ufffd\u0740nK\ufffd+\ufffd\ufffd\u0010\\D9V\ufffd\ufffd\\\ufffd\u0014Q\ufffd\ufffd4\ufffd\u0089\b\ufffd\u0002\u0790x\u0013\ufffd+f2\ufffd\ufffd5\ufffdg\nxCpvST\u0007OG\ufffd8[\u0005!\ufffd\ufffdF\ufffd{\u051a1\ufffdT\ufffd+\ufffd=\ufffd\ufffd\ufffd\ufffd??]\u00157\ufffd\ufffd6\ufffdn\u001a\ufffd$\fn\ufffd\ufffd!\ufffd\ufffd\u0108f\ufffd\u0019\ufffd\ufffd\u0002\ufffdB6a\ufffd\\\ufffdR\ufffd\ufffd\ufffd1\bGCp\ufffd\ufffdt\\\u000f\ufffd\"\u0001Ip\ufffd\ufffd0b\ufffd\ufffd\ufffd\ufffd4\ufffd\t\ufffd3&\u001f!\ufffd\ufffdO\ufffd\ufffd\u0305\ufffd\ufffd>9\ufffd\b\u0011N\ufffd}\ufffd\ufffd\ufffdTIA\ufffd\ufffdK0f\ufffdBBp\ufffd\ufffdM\ufffd\u001d\ufffdo\ufffd\ufffd\u0005\u001aY.%\ufffd\ufffdB$\u0017Y\ufffdB\ufffd<\ufffd?\ufffd}e\n\ufffd\ufffd\u028e\ufffd,\u001b\ufffd#\u0003?n\f*\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffd\ufffd\u0398|J\ufffd\ufffd}\ufffd\ufffd\u0016{CQ\ufffdug+\ufffd\ufffd\ufffd\u040a\ufffd\\\ufffd\ufffd\u0010\ufffd6(\ufffd\ufffd\ufffd\ufffd`v\ufffd\ufffd\ufffdg\ufffd\u0006\ufffd\ufffd9\ufffdO\ufffdC\ufffdS\ufffd9\ufffdT\ufffd!\ufffd?\ufffd\ufffdq\ufffd\ufffdj\ufffd\ufffdP\ufffd}\ufffd\ufffdS\ufffd\u000b\ufffdm\u04e1\u000b\u0005\ufffdF'\ufffd\ufffd\u068c\ufffd\u0015\ufffdX\u033a\ufffd8\u0018\u0736\ufffd\ufffdX\ufffd[8\ufffdDQ!\ufffd\u0583\ufffd\u000e-\ufffdo\ufffd\ufffd\ufffdc\u0003\ufffd\u000fg\u0006I\u00044\u000f\ufffd\u01a0p\ufffd2\u0019\ufffd\ufffd\ufffd\u000f\ufffdv\u0001\ufffdx03~\ufffd\ufffd\f\ufffd\u0011,;\ufffd\ufffd\u0018\ufffd\ufffd\u001c\ufffd\u0242*\ufffd.\ufffd\ufffd\ufffdF\ufffd\ufffdw\ufffd\ufffd\ufffd_\ufffd\ufffdo\ufffd\ufffdp\u0001\ufffd\ufffdW\ufffd\ufffdB\b\ufffdY\ufffd\u06d4e?\u0003\ufffd\ufffdn\ufffd\ufffd*Ac\u0738G\u0007Xz*C\ufffdT\ufffd\u0004\ufffd\ufffd\ufffd\ufffdy\ufffd9iP\u001bo\u0010\ufffd\ufffduL\u000f\ufffd\ufffdFOP\ufffdh\ufffd\ufffd\ufffd\u0013\ufffd\u001bd\ufffd\ufffd\ufffd\ufffd \u00191\ufffd2\u0015:0\ufffd\u00043\ufffd\ufffd\ufffddfl\ufffd\ufffdyN2vf\ufffd\u03f2\u0017\ufffdO\ufffd4\ufffd\ufffdF\ufffd\ufffd\ufffd\ufffdc\ufffd\ufffd\u0019g\ufffd\u000e\ufffd\ufffd[C[\u020as\n\ufffd\ufffd\ufffd\ufffdt\ufffd\u001b\u024b}\ufffd\ufffd*\u0014)K3T\ufffdi\ufffd\ufffd\ufffd\ufffd(,}\ufffdc\ufffd\u0015H\ufffd\ufffd\ufffd\/\ufffd\u001c\ufffd\ufffdS\ufffd_\u041b\ufffd\ufffd\u0413\u000f\u0001O\ufffd\ufffd\ufffdxt\ufffd \ufffd(\ufffd\u001e\ufffd\u00144X\ufffd9\ufffd\u001d\u000e\ufffdT\u000b,=X\ufffd\u0012b\ufffd\ufffdE\ufffd\ufffd\n\ufffd\ufffd\ufffdj\ufffdg\ufffd\"\ufffd\ufffd\ufffdr\ufffd\ufffdges\ufffd\ufffd:q\ufffd+t0\ufffdF|n\ufffdH\ufffdvY\ufffd\u0393\ufffd\ufffdY\ufffd\ufffdD\ufffd\n\ufffdN\ufffd\ufffd\u0004\r\u0012\u0014\ufffdf\ufffd\u0019\"`vf.\u0012\ufffdt\u0014\ufffd\ufffd4\ufffdp\ub0d0\ufffd\ufffd]q\ufffd\ufffd\ufffd$\ufffd(G\ufffd\\\u001d\ufffd\ufffd\ufffd\u0002;\ufffd{\ufffdS\ufffd$\ufffd\u0229\u0004\ufffd T\u000f\ufffdT54\ufffdc\u0004\ufffdB\u0005\u0004\ufffdj\u0016\u031a\ufffd\ufffd`V\ufffdN\ufffd\u4861\u000bM[\ufffdQY#{\ufffdvO\u0007f\u0226\ufffd\u0312\ufffdy{\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdsC\ufffdg\ufffd\ufffd>\u000fy\ufffd3\t\ufffd\ufffd\ufffdm\ufffdnp|\ufffd\ufffd\ufffd\ufffd=\r\u001f\ufffdp\u0014?\ufffd\u001ea\ufffd\ufffd\ufffd\ufffd\bA\ufffd\ufffdo;>Ve<\ufffdo\ufffd\ufffd\ufffd\u018e\ufffdWhK\ufffd\ufffdI,\ufffd6\ufffd-\f`\ufffd\ufffd_\ufffdk\u0014\ufffda3\ufffdRt\u0003\ufffd\ufffd\ufffd\u071a=9i\ufffd\u0259\u02e68\ufffd\ufffd\ufffd\ufffdIq1\ufffd\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\ufffd\ufffdh\ufffd\r\ufffdn\ufffd\u001d\ufffdHI\ufffd\ufffd\ufffd+\ufffd\ufffdk\ufffdiq\ufffd\ufffd\ufffd8AC\ufffd\u00038p\f\ufffd\u0011\ufffd\ufffd%}\u0005\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffdI\ufffd`%.GE\ufffd\u0002\t\ufffd_\ufffd.\ufffd\u0303>\u47ff\u031f\ufffd\ufffd\ufffd\ufffd%\ufffdy\ufffds|\u05d0o\ufffdR\ufffd\ufffd[}r4S\ufffd\"\ufffdh\ufffdR\ufffd\ufffd\u0372\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000b\u001b\ufffd\ufffd\u0011\u0010\u0006\ufffdq\ufffdx*\ufffd\ufffd\ufffd\ufffd\ufffd\b~\ufffd|2\bbn+|\ufffd\u0000;\ufffd\ufffd%\u0005^\ufffd8T\ufffd\u0001\ufffd\ufffd\ufffd\u001d\ufffdW=\u0164\ufffdx|\ufffdc\ufffd1\ufffd\u0300\ufffd@\ufffd\u0006y\ufffd\u0005\ufffd\ufffd\u000eX\ufffd\ufffd\ufffd\ufffd\ufffd\u001f6\ufffd'\u074d\ufffd\r\u043dr\ufffdH\ufffdM\u7560\ufffd\ufffdD8\ufffd4\u001e\u0012\u0018\ufffd\u000bI\ufffd\u0334\u0014^-X\u0013\u0006\u0011\ufffdf\ufffdpm\u0001\ufffd\ufffd\u0003\ufffd\ufffd\ufffdZ+\b#\ufffd\ufffdq\ufffd\ufffdQ\ufffd\u0014\ufffd\ufffd\ufffdEDL+'\"8\ufffd\ufffdw^\ufffd\ufffd\u0001\ufffda\ufffd\ufffd\ufffd\ufffd=\ufffdp1\ufffd\ufffd#\ufffd|\ufffd!\ufffd)p\u001fd\ufffdX\ufffd\ufffd\ufffd\ft\ufffd\ufffdJ\ufffdL\ufffd\ufffdaS_\ufffdMW\ufffd\ufffd\u06f0\ufffd^=\ufffd\ufffdB\u000fQ\ufffd\ufffdn2DL\ufffd\ufffdQ\ufffdD\"\u0004{\ufffdZ\u07b8\ufffd\ufffd\ufffd\ufffd$\b\ufffde\ufffd\ufffde\ufffdVH\ufffd\u0014~.\ufffd#&\u0002\ufffd\r\ufffd@\u0017\ufffdy\ufffd\ufffd\u000fb\ufffd\"\ufffd\feV\ufffd\ufffdZ\ufffd\ufffd\ufffd8\ufffdkj9\ufffd\ufffd\u001aQc\ufffd\ufffdD\ufffdB\ufffd\ufffd\u0016\u037f\u001b\ufffd\u0011\u000f\u239a\u03b9\ufffd-\n\ufffd\ufffd\b,\ufffdC\ufffd\ufffd\ufffd?\ufffdJw\ufffd}S7\nm^\ufffd\u000e\u0004\ufffd)\ufffd\u0014d\ufffd\t\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffdc%\u001fE\u001c\u0011\u00910\f\ufffdi(\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffdSd\ufffd\ufffdB\ufffd\u001cQ\ufffd\ufffd+\ufffd\ufffd\ufffd|;i\ufffdcc\ufffd\ufffd\r\ufffd5\ufffd\ufffd\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd|zbU\u0018^\ufffd[)\ufffd4b\u0004\ufffd\u0006\ufffd\ufffd*\ufffdW]V\ufffd\ufffd~\ufffd$p!q\ufffd&c&7\u0007\"d\ufffd?\ufffd\ufffd\ufffd\u0002\ufffd\ufffd|\ufffd\ufffd0\ufffd\ufffd\ufffd\u0398\u001a'\ufffd\ufffdQ\ufffd\ufffd9\ufffdL\ufffd\ufffdS\ufffd*\ufffdw\ufffdB\ufffd\ufffd\u02eeB{\u001b\ufffdTh\u0002A\ufffd\u0019\ufffd\ufffd\n\ufffd\ufffd\u0602\ufffdW\ufffd\ufffdX\u0016\ufffd\ufffd[_zxfJ\ufffdT}\ufffd\ufffdP\ufffdo\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd{8\u001e\u0010\ufffd\u0689'7\u001f\ufffd\r\ufffd?\ub4da\n\ufffd\u0500\u001c\ufffd\ufffd\ufffd\ufffd[\ufffd+^\ufffd\ufffdw\u0019\ufffd\u0001\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05c3\bS\ufffdT\ufffd\ufffdk\t\ufffd\u0485C\u06fe_\ufffd?p\ufffd^\ufffd\ufffd\u0447\ufffd\u0626?\ufffd\ufffd\tE(B\u000b:\ufffdV\u0011p\ufffd\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd\ufffda\ufffd\ufffdr.\ufffd\ufffdb\ufffdwG\u026a\ufffdk6S\ufffd-\u0000\ufffdl\ufffd\ufffdR\ufffd\ufffd\ufffdb1G\u0001Xb\ufffdXy\ufffd92Tl\ufffd\ufffdS\ufffd\u0003VW\ufffd\ufffd\u0013\ufffd\ufffdx\ufffd{\u001e\/k,Q\u0017\ufffd\ufffdG=nK\ufffd\ufffd|\ufffd\ufffdyA\ufffdp^Q|\ufffd\ufffdF\ufffd\u0016\ufffd\ufffd\ufffd\ufffdM\ufffd\ufffd\u058f\ufffdK8\u0013\u001c)\u0017n\ufffdF\u00043\ufffd8\u04c0Q\u001c-\u0019\ufffdu\ufffd\ufffd\u02f9\ufffd\ufffd\uc705\ufffd\ufffd\ufffd9\ufffd*>S\ufffdi\ufffd\ufffd'\ufffd\/5*p*\u0001I\ufffd\ufffd\ufffd\ufffd\u6914\ufffd\u0005\ufffd8\u0005\u0003tbI\ufffd\ufffd\u0004\u001c\ufffd\ufffd\u06529\ufffd;\ufffd\ufffd@)\ufffd\ufffd\b\ufffdY\ufffd\u000b\ufffd?\ufffd\\O{?t.\ufffd>\ufffd\u0012\ufffd\ufffdCq\ufffd\u0010!\ufffd@zG\u001e\ufffd\u0320\ufffd\ufffdM@\u0019\u0004~\ufffd\ufffdM\ufffd#\ufffd\ufffd\u00000{\ufffd\ufffd\ufffd~\u0011_\b\ufffd\ufffdQ\ufffd\f\u001d,\ufffdQt\u02f4\ufffd\ufffdZz3\ufffdOR\ufffda\ufffd\u000f\ufffd\ufffd\u001a\u00163\u00047\u0012\ufffdl(=\ufffdcxx\ufffd\ufffd\ufffd\u0012`4\ufffd+\u0006[7h4(qN\ufffdO\ufffd?\u06c2\\\ufffd\u063a\ufffdQ\ufffd\u0006\u0754\t8\ufffd\ufffdT\ufffd\ufffd\ufffd\u0013\ufffd\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd9h\u0654(W\ufffdV\ufffd \ufffd(6\f=~A\ufffdE\u0018\u0010\ufffdA\njg\ufffd\ufffd@W!l\u03fc+\ufffd{:\ufffd\u0017x\u0759\ufffdA\ufffd\u0013'\ufffdz&{\ufffd4)u\ufffdT\ufffd\ufffd\ufffdT\u0012\ufffdg\ufffd\ufffd\ufffd\u0004.\ufffd\ufffd\u01b4\ufffd\u020b\ufffdEhQ6uQ\ufffdYEX3P\u0004\ufffdD\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\ufffd\u3131&\ufffdj\u02c1\ufffd\ufffd\ufffd\u0011\ufffd\ufffdN\u0012\n\ufffd\u0397{\u0017\ufffd\ufffd\ufffd\ufffd!\u01d7T\ufffd\ufffd\ufffd\ufffd9.=\\\ufffd\u000f?\ufffd\ufffd(F\/p\ufffd\ufffdx\u0012\ufffd\ufffd5B\u001a\ufffd\u0001\u0017\ufffd*\ufffdIt\ufffd\ufffd%\u001a\ufffd>\u001b\u0002y\ufffd\ufffd@\ufffd\ufffdW8\\pq.\ufffd\ufffd\u001da\ufffd\ufffd8\ufffd\/[\ufffd\ufffd\ufffd\ufffda\ufffdo\ufffd \ufffdM\ufffd\ufffd\u0013\ufffd\ufffd\ufffdx)\ufffdC\ufffd \ufffd\ufffd\ufffdSd\ufffd\ufffd\ufffdW\ufffd\ufffd\b;v\ufffd\u0007\u001d\ufffd\ufffd\ufffd@\u0000\ufffdT\u0002\ufffd\u13d1\ufffd\ufffd\ufffdQa\ufffd\u0004C\u02af0\ufffd\u0005\u0119\ufffdG\ufffd+\ufffd7b mM\u001f>\b\ufffd\ufffd\ufffd\ufffd\u060ag\t\ufffd\ufffdCp(\ufffd\u0003\ufffd3\ufffdH\u001e\ufffdW\ufffdZ@\ufffdQ\ufffd\ufffd\ufffdY\ufffd\ufffde\ufffd{\ufffd5\u001c\ufffd\ufffdJ\ufffd\ufffd\ufffd\ufffd\u02f6`\u0017)p\u0001\ufffd\ufffd\u0011\u0007>Yq\ufffdc'8p\ufffd\u0016\u000e\ufffdk\ufffd\ufffd=fp!78\ufffdM%_\ufffd\ufffd:T\ufffd\u00058\b\u00113{\ufffd\ufffd\u0005\ufffdt\u000e\"\ufffd\u0000\ufffdh\u000fa\ufffd\ufffd_\ufffd\ufffd6\ufffd%\u000b\ufffd\ufffd\ud3fb\u001f\ufffd\/\ufffd\ufffdJ,)A\ufffdo\ufffdM\ufffdt\ufffd*\ufffd\ufffd\ufffd\u0006%\ufffd\ufffdx\ufffdZ\ufffd8\f\u001b\u0137Y\ufffd\u0002\ufffd\ufffdqv\u01eb\ufffdW\ufffd\u0729\ufffd\ufffd\r\ufffd$\ufffd\u001b\ufffdu\ufffdu\u001c\ufffdq\ufffd\ufffd)\ufffd\ufffda\ufffdV\ufffdSh\ufffd\ufffd\ufffdY\ufffd\ufffd%P_\ufffd\u0517\ufffd3\ufffdw\u0561\ufffd\ufffd;:\ufffd^\ufffd\ufffd=s\ufffd\t\ufffdv\ufffd\ufffd\u000b{\ufffd\ufffd~>\ufffdZ\ufffd\ufffdD3!\ufffd~\ufffd9\u0014\ufffd\ufffd\ufffdTkRZ\u001cO\ufffd\ufffd\ufffd\u0007\u000fgO\ufffd\ufffd\ufffd(\ufffd[\u0011\ufffd\ufffd\ufffd\ufffd\u001d!\ufffd\u061b\ufffdu_\ufffd\u001fg\u00e1-\u001c\ufffdS\ufffd\ufffd\u0013\u000f\u001c\ufffd\rl\ufffd8\u0019\ufffd\ufffd\ufffd2\ufffd\u001e\u000e\ufffd\ufffd\u001c\ufffdh\ufffdH\ufffd\ufffd\ufffdQ\ufffd\u0010b\ufffd\ufffdF\u0000T\ufffd\u001b|\ufffd\ufffd\ufffd\ufffd*\ufffd#\ufffd\u0004\b'\ufffdq\ufffdf\ufffd\u05d8\ufffd\u0016\ufffd\ufffd\ufffd\u0003\ufffdGDg\nendstream\nendobj\n30 0 obj\n4954\nendobj\n28 0 obj\n<< \/Type \/Page \/Parent 3 0 R \/Resources 31 0 R \/Contents 29 0 R \/MediaBox\n[0 0 612 792] >>\nendobj\n31 0 obj\n<< \/ProcSet [ \/PDF \/Text ] \/ColorSpace << \/Cs1 7 0 R >> \/Font << \/TT5.0 16 0 R\n\/TT4.1 15 0 R \/TT2.1 11 0 R >> >>\nendobj\n3 0 obj\n<< \/Type \/Pages \/MediaBox [0 0 612 792] \/Count 3 \/Kids [ 2 0 R 19 0 R 28 0 R\n] >>\nendobj\n32 0 obj\n<< \/Type \/Catalog \/Pages 3 0 R >>\nendobj\n16 0 obj\n<< \/Type \/Font \/Subtype \/TrueType \/BaseFont \/TOSUVF+Arial-BoldItalicMT \/FontDescriptor\n33 0 R \/Encoding \/MacRomanEncoding \/FirstChar 32 \/LastChar 32 \/Widths [ 278\n] >>\nendobj\n33 0 obj\n<< \/Type \/FontDescriptor \/FontName \/TOSUVF+Arial-BoldItalicMT \/Flags 96 \/FontBBox\n[-560 -376 1390 1018] \/ItalicAngle -6 \/Ascent 905 \/Descent -212 \/CapHeight\n715 \/StemV 96 \/Leading 33 \/XHeight 519 \/StemH 81 \/AvgWidth 479 \/MaxWidth 1333\n\/FontFile2 34 0 R >>\nendobj\n34 0 obj\n<< \/Length 35 0 R \/Length1 6980 \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffdY{|T\u0575^k\ufffd3\ufffd\ufffd\ufffd\u0010B\ufffd\u0001\ufffd\u0019&a\ufffdLBB \u0010 &\ufffd\u01e4\ufffd\b\t$\ufffd\fb3\u0001\ufffd\ufffd\ufffdX\ufffd?A\ufffd\ufffd#J\ufffd\ufffd^\ufffd*x\u0015\u0016n\ufffd\u024c\ufffd\u0004\ufffd\ufffd\ufffdZj\ufffd\ufffd\ufffd\ufffdVki+\ufffdj}\ufffd\u06a2\ufffd*\ufffd\ufffd\ufffd3 \ufffdz\ufffd\u001f\ufffd\ufffd|\ufffd[{\ufffd\ufffd\ufffd^\ufffdq\ufffd\ufffdg2p\u0375\ufffd\ufffdM\ufffdH\ufffd\ufffd\ufffd=\ufffd\u023cJV\ufffdJVm\u001eP\ufffd|\ufffdFd\ufffd\ufffdl\ufffdj\ufffd\ufffd\/\ufffd\u0011\u067e\ufffdj\u07565V\ufffd\ufffdv\ud82b\udd7d=F9\ufffd:\u0003\ufffd\\\u000b\ufffd\ufffd#\ufffd\u0001.]\ufffd~\ufffd[V\ufffdd\u0005\u0639n\u3ab4\ufffdd\u001b\ufffd\ufffd\ufffd=\ufffdJ\ufffdOo#\ufffdn\ufffdY\ufffd\u000b\ufffd\ufffd.BR\ufffdic\ufffd\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffd9B\ufffd}\ufffde;\ufffd\ufffd\u00121dA\ufffdP=]N6H.\ufffd\ufffd\ufffd\ufffd\ufffdFt\ufffd\ufffd\ufffda\ufffd\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdb\ufffdY\ufffd\ufffd\ufffdGf\u001a\ufffd\ufffd\u001e\\\ufffd\ufffd\ufffdg\ufffdf)\ufffdR\ufffdO\ufffd\ufffdo\u0018P\ufffd\ufffd0\ufffd\ufffdZ2\ufffd}\ufffd\ufffd\ufffd%Y\ny\ufffda\u0018\ufffd_b\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\ufffdA\ufffd=1{z0%\ufffd']\ufffdj\ufffd\u001d\ufffd\ufffd|\ufffd\u0017&\ufffd\ufffd\ufffd\ufffdh0\ufffd\u000b\ufffd\ufffd\ufffdV\ufffd\ufffd\ufffd&\ufffd[\ufffd;}\ufffdat\ufffd\ufffd2\ufffd\u0005\u0016g\ufffd\ufffd\ufffd5\ufffd\ufffd\u0016\ufffdV\ufffd\/\ufffdD\ufffdH\u06c1\ufffd\ufffd\u000e\u0214\ufffd\u0530\u000b\ufffd$ORb?\ufffd\ufffd\u0207\ufffd\ufffd4?\ufffd\ufffdR\ufffd\ufffd\ufffd4\ufffdv\u0003\ufffd\u0007\ufffd\u0002\ufffd\ufffd6\ufffd\ufffd\ufffd\ufffd\ufffd5\u001a\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffdg\ufffd24\ufffd\r\ufffdF`+p\f0\ufffd\ufffd\ufffd\ufffd\u0019ck\ufffd\ufffd<\ufffd\u0002\ufffd\u0016\ufffd\ufffd\ufffdH\ufffd\u0000\u01c0\ufffd\u0003\u0001l\ufffdk\u0001U\u0001\ufffd@\f\ufffd\rXZ\ufffd\u01c8nAr\ufffd\u001c\ufffd\ufffd\u0005I\ufffd\ufffd\u000b\ufffdY\ufffd\ufffd\ufffd&\ufffd4\u000f\u0015\ufffdC\ufffdy\b\ufffdH\u0019\ufffd\ufffdC\ufffd\ufffd\ufffdb\ufffd\u0019\ufffd\ufffd\ufffda}D\ufffd\ufffd\b6\ufffdX\ufffd\ufffdzSx'Y\ufffdT\ufffdFS\ufffdx\u0007\ufffd\ufffd\ufffd\ufffd\u0014\u0004:\ufffd\u0018\ufffd\np\u00028\u0005`&\ufffd\u000e\u0002{\u0000\rU\u0273\u0006\ufffd&\ufffd_\ufffd\u07208j\u0329)\u0007M\ufffd\u0694\ufffdMY5e5\ufffd\ufffd\ufffdX\ufffd\ufffd(\ufffd\u0018jz\ufffd\ufffdx,X\ufffd}\ufffd~\ufffd!\ufffd\u060f8\ufffd\u0001\ufffd\u0001\ufffd\ufffdm\ufffd\ufffd\u0010\ufffd\ufffdv\ufffd\u0233\ufffduyMWJ\ufffd\u0018\ufffdf\fP3z\ufffdlNe3F\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\b\ufffd\u0003v\ufffd\u00123i+ (\u000f\ufffd\u0002\u0018\ufffdF\ufffd\u001d\ufffd\t\ufffd\u0006\ufffd\u0000N:\ufffd\ufffdM\ufffds>\ufffd\ufffdl\u0005t\ufffdN.Q\ufffd\\\ufffdYW-\ufffd\ufffd\ufffd\ufffdb\ufffd\r\u001d\ufffd\ufffdFH\ufffdNZ\ufffd\ufffdYj\u0016\ufffdp\ufffd\ufffd]+j1\ufffd\/%<3\ufffd\ufffd\ufffd\ufffd9\ufffd\ufffds\ufffd\/\ufffd\tG\r!\ufffd\ufffd$\u05d7\u051b\ufffd~I\ufffdQ\ufffd\ufffdH@0\f7\ufffdys\ufffdci\ufffdjq\ufffd?c:\ufffd\u0012\ufffd\ufffd\u0016\ufffdX4\u0362j\ufffd\ufffd,\ufffd[4\u0162r\ufffd<\u0016\ufffd\ufffd\ufffd\u0422q\u0016\u0015X4\u05a2|\ufffdr,\u02b6(\u02e0\ufffd?\u001d\ufffd\ufffd\n\ufffdg\u0005\u3cc2\ufffdY\ufffd\ufffd\ufffd`|V0>+\u0018\ufffd\u0015\ufffd\ufffd\n\ufffdg\u0005\u3cc2\ufffdY\ufffd\ufffd\ufffd`|V0>+\u0018\ufffd\u0015\ufffd\ufffd\n\ufffdg\u0005\u3cc2\ufffdG\ufffdc0f\ufffd\ufffdVI\ufffd_Z\ufffd\ufffdE\ufffd\ufffd\ufffdh0\u000b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0013_\u0011T\ufffd7\u0000\ufffd\ufffd\u00180\u0015\ufffd\u0003>\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\ufffdS@\rI\u056bt7eH\ufffd\ufffdF`+\ufffd\u0013\ufffd\ufffd\ufffdI\u0563(\u060f\ufffdl\ufffdP\ufffdt\ufffdlw#=\u0000\u001c\u0001\ufffd\ufffd6!\ufffd\u001eD\ufffd;\u001b\ufffd\ufffd~\ufffdA\ufffd\ufffd\ufffd\f'\ufffd\by\ufffdE\ufffd,Zj\ufffd;\ufffd\b>\ufffd\u0003\u0006^\u0003\ufffd\u00036\u0000\ufffd\u0003\ufffd\u0001-\ufffd\ufffd@-0\ufffd)\ufffd\u0004\ufffdb\ufffd\ufffd\ufffd\ufffd\ufffd K\u0314\ufffd\u0002\ufffd\ufffd\ufffd\ufffd\u0624\ufffd\ufffd8\ufffd\ufffdE!\ufffd\fqG\ufffdo,\ufffd~*Q~\u0015z\ufffdOR\ufffd\u0324p\ufffd\ufffdM\u05a8\ufffd\ufffd\ufffd\ufffd\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd-\ufffd\u0018\ufffdv'\ufffd5\ufffd\ufffd\u0012~\f\u0010\ufffd&\ufffd'\ufffdV'\ufffdU\u042aDy5\ufffd'Q\ufffd\u0004\ufffd\"\ufffd{Xi\ufffd\ufffd\ufffd\ufffd\ufffd4\u001aXF~\ufffd\u0005^\ufffd\ufffd\ufffd\u0001s\ufffdE\ufffd\t\u000br\ufffdU\ufffd%\ufffd\ufffd{\ufffd\ufffd,\ufffdH}b?|\ufffd\ufffd3\ufffd\ufffd\ufffdbB\ufffd\u0717\ufffd9\ufffd\ufffd\u00d7\u0012\ufffd\u000f*\ufffd\ufffd\u06d5?\ufffdSN>\ufffd\ufffd\ufffd\u07e2\u001c\/O\t\u000e\ufffd)oL}Yy\ufffd\ufffd\ufffd|y\ufffd\ufffd>x\u0006\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdg\ufffd>TjV\ufffd\u02df\ufffdeP?\ufffdS\ufffd\ufffdc1L\ufffd\u001a\ufffd\ufffdPt\ufffd\ufffd\ufffd\tU\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]\ufffd\ufffd\ufffd\u076b\ufffd\ufffdoRb>\ufffd\u000f*\ufffd~\ufffdr\ufffd\ufffd\u0014\ufffd%\ufffd%h\u0006q]\ufffd\u0732\ufffdJ\u0018\ufffd\ufffdO7\ufffd5@iE\ufffd-F\ufffd\t\ufffd\ufffd\u072c1\ufffd\u001a8\ufffdV.\ufffd\ufffd\ufffd\ufffdE\f\ufffd\ufffd\u001eVj\ufffds\ufffdiS\ufffdU\ufffd\ufffd\ufffd2\ufffd\u000f\u0015=\ufffd,\ufffd\ufffd\ufffd\u02585\ufffdbop\ufffdc\ufffdw\ufffd\ufffdk\u001c\ufffdK\u001d\ufffd3\u001c\ufffdU\ufffd\ufffd\ufffdcp\ufffdc\ufffd\ufffd1x\ufffdcp\ufffd\ufffd\ufffd\ufffd\ufffdt9s\ufffd\ufffd\ufffdL\ufffd\ufffdiw\ufffdN\ufffd$gAJ?\u0011\ufffd0\ufffd\ufffd\u0005v\ufffdAv\ufffdHeSv\tCF\ufffd\ufffd\u0004;\u0005-\ufffd|m\ufffd\u0014\u0016\ufffd\ufffdf\ufffd.\u0010N9\ufffd%\u06ac@Xsv\\\u0011\u0019b\ufffd;jh\ufffd\ufffdU\u0014^\ufffdj\ufffdvzS\ufffd\ufffdx\ufffdf\ufffd6\ufffd\ufffd\u001f\ufffdpWs\ufffd&nO1uE\ufffd\u028d\u0002\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd01\u0017\ufffdz\ufffd;\ufffd\ufffdhK\ufffd\u0010\ufffd\ufffdB\ufffd\ufffd(\u0015nn,j\ufffdo\u00183\ufffd\ufffd\ufffd+\ufffd\ufffd\ufffd\ufffd\ufffd\u0006\ufffd\ufffd\ufffd\ufffd\u0014\u0003\ufffdp\u01d6a,\ufffd'\ufffd\u000ee\ufffd\u0003\ufffdNd\u0007\ufffd\uc811-\ufffd\ufffd\ufffd\u0017\ufffdh\ufffd&F\ufffd\u001aC\ufffd'F\ufffd\ufffd\u001d\ufffd\ufffd\u0230(\u0012\ufffd\ufffd\ufffda1\u07a0hdXN\ufffd\ufffd\ufffd\u0012C\/'[\ufffd\ufffd0\ufffd\ufffd\ufffd#\u0015\ufffd\ufffda*5\b~\ufffdNR\r?Rs\ufffd\ufffd\ufffd\ufffdo\ufffd)b\ufffd\ufffdWn\u0010\ufffd\ufffd\ufffd\ufffdb\ufffd)E{M?\ufffd\r\ufffd\ufffd>5\ufffd:\ufffd\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0005>\ufffd\ufffdM\ufffd\ufffd*Ebx\ufffd\ufffdn\u00cb\ufffd\ufffd{\f\/-`V\ufffd\ufffd\ufffde*\u0012\ufffd\ufffd\u0004\ufffd\u0015\ufffdx\ufffd\ufffdR\ufffd\ufffd\ufffd'\ufffd\ufffd}\u07a5\ufffdt\ufffd\ufffd\ufffdr\ufffd\ufffd[\ufffdH\ufffd\ufffdr\ufffd8\ufffd\ufffd\ufffd\ufffdP_g3\ufffd;\"CNj\ufffd\ufffd`\u0000\f.tmj0WFNq\ufffd^\ufffd!zM\ufffd\ufffd\ufffd\u0002Q-\ufffd\u06ecey\ufffd\ufffdo,\n\ufffd\ufffd\ufffdJ\u0014Hle\ufffd2jJ1${\ufffdf\ufffd\ufffd\u00030\ufffd\ufffd\\O\u044d\ufffdC2\ufffd\u0013f\r\ufffdP\ufffdM\ufffdM\ufffdM\ufffd\tk\u07a8<\u0017\uaf34\ufffd\ufffd\u01b9\u001e\ufffd!~\"mrA=\u0006\ufffd~U7\ufffd\ufffd\u0007\u0002\ufffd\u0017\u001a\ufffd\ufffd\ufffdB\ufffd\ufffd]\ufffd\ufffdP_\ufffd\ufffdgH\u0006P\ufffd\ufffd&\u0006\ufffd\u0007\ufffd\ufffd?\u050a\ufffd\u0001\nk\ufffd\u03b0V\ufffdxyd\ufffd\ufffd\bi\ufffdXk\u0014\ufffd\ufffd\ufffdt\ufffdd\ufffd22\ufffd=\ufffd\ufffd\ufffd\ufffd\u0015\u0018\ufffdv\u0000\ufffdc\u0702\u04c285\u0004qd\b\ufffdk\ufffdi@5P5=\ufffd\u0017x\u0010o\ufffd ^\ufffdA\ufffd\ufffd\ufffdxi\u0007\ufffd\ufffd\ufffd\u04d4i\ufffd\ufffd\ufffd\ufffd\ufffd\u0766\ufffd[\u001c\rN\ufffd\u07cf\ufffdS\ufffd\u0005\ufffd\ufffd<\ufffd\ufffd\u0007\u0003\ufffdr0\ufffd\ufffd\u0000\u0013q\ufffd\ufffd\ufffd\ufffdg\ufffdE\ufffdd\ufffdv\ufffdD)\ufffd^C\ufffd._\ufffd\u001e\ufffdk\u0003\ufffdN}\ufffdw @\ufffdC\ufffd6\ufffd8\ufffd\ufffd\ufffd\ufffd&\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffdI\ufffd6\ufffdN?)\ufffd\u000b\ufffd\ufffd\u0004\u000b\u9bd2\ufffd\ufffd\ufffd\ufffd\ufffd\":\ufffd\ufffdt\u0000\ufffd\ufffd\u0017\ufffdIz\ufffd\ufffdt\u0003\ufffd\u032b\ufffd\ufffd\ufffd\ufffd\u0019QJ*\ufffdp\u0010,\ufffd.\ufffdG\/\ufffd\ufffd\ufffd\ufffd\ufffd\u07e7'\ufffd\u0005\ufffd!\u0783\ufffd\ufffd\t\ufffd\ufffde\ufffd\u0012\ufffd\ufffd}\ufffd\ufffd\u001e\ufffdE<N\ufffdO\u001f\ufffd\ufffdO\ufffd\ufffd9\u0501\r\ufffd\ufffd\ufffd\ufffd\ufffd&\ufffdL6\ufffd\u012dz\u0015\ufffd\ufffd-T@\r\ufffd}z\ufffdo\ufffdxJ?N\ufffd\ufffd\ufffd\ufffde\ufffd_\ufffd~.\u0012~\u02a5M\ufffd\ufffdt\n\ufffdU\ufffd:q\ufffd\ufffd\ufffdzh+=\ufffdv\ufffd\ufffdv\ufffd^A\u001b\u8334]\u0014\ufffd8\ufffd\u0013\ufffdv\u04cd\ufffd\ufffdh\ufffd\ufffdG\ufffd\u0001\ufffdj\ufffd@\ufffd4\u000f\u001b\ufffd\ufffd\ufffd\ufffd\u001e\ufffd\u001f\ufffd5\ufffdS\ufffdf>\ufffd\ufffd!\ufffd\ufffd\ufffd{\ufffdC~KzO\ufffd\ufffd\uc53f.\ufc15\ufffd6\ufffd\ufffdI4\ufffd\ufffd\u0433nZI\ufffd\ufffd\ufffd\ufffdg\ufffdX\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffdM\u0018\u0013\ufffd&\ufffd4\ufffdl\ufffd\ufffd\ufffd\u000eJ\u009a\ufffdcx\u001c\/\ufffd\u010d\ufffd\ufffdX\ufffd\ufffd\ufffdM\ufffd\u0018\ufffdf\ufffdf\ufffdt\u000b=G?\ufffd\u000f\ufffd\u0013\ufffd\ufffdT\ufffd\ufffdy\ufffd_\u0015,\ufffd\ufffd\ufffd%U'\ufffd\u0019*\ufffd\ufffd\ufffd\u0012ZA\ufffd\ufffdM4H\u000fP\ufffd\ufffd\ufffdh>'\u0016J-\ufffdu\ufffd& 1\ufffdS|\ufffd\/GL\u07e6$\ufffd\ufffd\ufffdc\ufffd\ufffdy\ufffd\ufffd,>\ufffd<\u04ad\u04a3\ufffdK\ufffdi\ufffdd\ufffd|\u000b|O\ufffd\u0017\u0548\ufffd2\u071d\ufffd?]O\ufffd\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffdt\b\ufffdB\ufffd\ufffd[t\u0012Q\ufffd\ufffd\ufffd|\u0003?\u0307\ufffdS\ufffd\\x\ufffd$Q\/6\ufffd\u0011\ufffd8$\ufffd(\u0015J\ufffd\ufffd.\ufffd\ufffd}\ufffd.\ufffd\u0005\ufffduy\ufffd\ufffd,\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\ufffd\u001c=\ufffd{G\ufffd\ufffd\/\ufffd#\ufffdM\ufffdw\ufffd\ufffd\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd\b\ufffdTA}\u0018\ufffdo\ufffd_[1\ufffd?\ufffdgq\u001f\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd5\u0012\ufffd\ufffd8\ufffd\ufffd\\\ufffd\u000b\ufffd\ufffd\ufffd\ufffd:\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffd\u01bf\u0012\ufffdb\ufffd\u0018'\ufffdE\ufffd\ufffdJl\u0017G\ufffd1i\ufffd4WJ\ufffd\ufffdr\ufffd\u001c\ufffd\ufffd\ufffdW\ufffd\u0003\ufffdv[\r\ue176\u001d\ufffd'l\ufffdl\ufffdm\ufffdlg\ufffd\ufffd\ufffd}x\ufffd\ufffdt\ufffd\ufffd\ufffd\u0475\ufffd\ufffdG\ufffdg\ufffd\ufffd%z\ufffd\u07a7\ufffd\ufffdW\ufffd%\ufffd\ufffd\u001e\ufffd\nc\ufffd \ufffd\ufffd1\ufffd\ufffd\ufffd\u0011\ufffd)\ufffd\ufffdQy\u0003\u047dM\ufffd\ufffdw\ufffd\ufffd\ufffd\ufffdot\ufffd\u000b\ufffd\ufffd\ufffdp\ufffd\ufffd\u0002kk\u0011\ufffd\ufffd\ufffd7a\u0016\ufffd\ufffd\u0007\ufffdQ>\ufffd)~\ufffd\ufffd\ufffd\ufffd\u0015~\ufffd_\ufffd7\ufffd\u000f\ufffdG\ufffd3\u0327\ufffd$\ufffd\ufffd\"\ufffd\" \ufffd\ufffdZ\ufffd\u0015\ufffdvq\ufffdx@\ufffd\u0012\/b\ufffd\u001c\u0013\ufffd\ufffd_\ufffd\ufffd\ufffdG\ufffdK\ufffd$\u130c\ufffd^j\ufffd\u0007T\\\ufffd\/\ufffd\"\ufffd\ufffd\ufffdc\ufffd\ufffd\ufffdk\ufffd\ufffd1\ufffd\ufffd#\ufffds\ufffd\ufffdlds\ufffd\ufffd\ufffdJm\u0015\ufffd\ufffd\ufffdN\u06c8\ufffd\ufffdf\ufffds\ufffdE\ufffd\ufffd\ufffd\r\ufffd[\ufffd\u07f1\ufd67\u001c\ufffd\ufffd\ufffd1\ufffdq\ufffd\ufffd\u000e\u01c3\ufffdG\u001co8\u000b\ufffd^\ufffd\u001e\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd\u0011~\u0001'\ufffd\ufffd8\u02b7q\u0017\ufffdp\ufffd\ufffdT \u0002\ufffd\ufffdM\ufffd@\ufffd\ufffd\ufffd)p\ufffd4\\\ufffd\ufffde\ufffd`\ufffd\u0007t\ufffd\ufffd\"O\u001e\ufffd\ufffd\ufffd\ufffd\ufffdS8I\u03e5\ufffdp\u0003]\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd\ufffd\ufffd*h\ufffdtD\u001a\u0015m\ufffdm\ufffd\u001f\ufffd:\ufffdT:\ufffd}\ufffd8Fk\u0006O\ufffd\ufffd\u0002qT\ufffd\ufffd\ufffd\ufffd+n\u0013\ufffd\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\f\ufffd\u0005\ufffdW\u001c\ufffdcr\ufffd\ufffd\u0018\ufffd-8w\ufffd.\ufffdE3\ufffdc\ufffd_z\u0017O\ufffdzy\u0010O\ufffd\r,\u04e5b.\ufffd\u001d\ufffdk\ufffd!\u0017\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffdp\t\ufffdi\ufffd=\ufffd]\ufffdO\f\ufffdF\ufffd)O\\-\ufffd\udb9f\ude46N\ufffd(%m\ufffd\ufffd\u0003\ufffd%\ufffdq}\ufffd\ufffd\ufffd\ufffdBs\ufffd\ufffd3\u0687z\ufffdG\ufffd!\ufffd\ufffd)\ufffd\u58df\ufffdmR\ufffdxN\ufffd,.\ufffdO\ufffd\u001e\ufffd7\ufffd#n\ufffd\u0019\ufffd4\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\ufffdr\ufffd\ufffd\u0017\ufffdB\ufffd\ufffd%\ufffd\ufffd\ufffdA\ufffd\u001fb\r\ufffd\ufffd\ufffdRB\ufffdW\ufffdKG\ufffd?\ufffdX<C\ufffd\ufffd\u0015\ufffd\u001av4;-\u0016\ufffd\ufffdo\ufffd:\ufffd\ufffdg\ufffd*\ufffd\ufffds(\u03e4\ufffd\ufffd\rtJ\ufffd\ufffd\ufffd8\u02df\ufffd\ufffd\ufffda\ufffd\u0011v\ufffd\u0003\ufffd\ufffdo\ufffd }d\ufffdO\ufffd\u024d\ufffd|\ufffd\ufffd\u0006{\ufffd\ufffd\ufffd\u0615WJ\u001fS\ufffd\ufffd\u0007\ufffd\ufffd\u0006\ufffdc\ufffd\u0011v\ufffdy9\ufffd}\u9bf6\ufffd\ufffdF\ufffd.\ufffd\ufffdg\ufffd\ufffd\u0708}\ufffd\u0007\ufffdy\u001de\ufffd\u0016<\u0001\ufffd\ufffd\ufffdX\ufffd\ufffd`\u0018\ufffd\ufffda\u000f\u0740\ufffdt\u0017\ufffd\ufffdC\ufffd\/\ufffdc\ufffdx\u000f\ufffd\ufffd\ufffdS<\ufffd\u000f\ufffd[\ufffd\ufffd\ufffd\ufffd}D~\ufffd~\ufffd\ufffd}\ufffdN\u001a\ufffd\u001a\ufffd3r\ufffd,\ufffd\ufffd*\ufffd\ufffd\ufffd{\ufffd\ue418\ufffdw\ufffd\ufffd7\ufffd\ufffd\ufffd\u01f6#\ufffd\u0006\u06a7\ufffd\u00be\ufffd\ufffd\ufffd\ufffd}t\ufffd+?A\ufffd\u0006\ufffd\ufffd\ufffd\ufffd\r\ufffd\ufffd\u03dd3\ufffdn\ufffd\ufffd\ufffd\u0019\ufffdk\ufffdUWM\ufffd\ufffd\b\ufffd\ufffd\ufffd\ufffd&\ufffd\ufffdz'yT\u5489\u0013\ufffd%\ufffdE\ufffd\u000b\ufffd\u0015\ufffd\ufffd\u001f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdp:\ufffd6YB0\u0015!o[L\ufffd&\ufffd4y\ufffdw\u07bcJ#\ufffd\ud062\ufffd\u0002ELS\ufffdj\ufffd\ufffdGS\ufffdr=0]\ufffd\u0019\ufffd\ufffd\ufffd\fZ\ufffd\ufffd\ufffd\ufffdR\uba7e\ufffdB\ryU\ufffd\ufffdV\ufffd\ufffd\ufffd\ufffd#\ufffd\ufffdj\ufffdFU\ufffd#S^h\ufffd\ufffdd3\ufffd\ufffd\ufffd\u01c3\u0012j\ufffdhm\ufffd\ufffdqL\rim\ufffd\ufffd\ufffdC\ufffd\ufffd\ufffd\n\u001e\ufffd\ufffdl\ufffd\ufffdfVV\ufffdPf\u0016\ufffd,H\ufffdx\ufffd!\u001e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!|\ufffd\u680fZ\ufffd\ufffd5\ufffd\u0015{Q\u0014\ufffdHe\ufffd\ufffd\ufffdZ\ufffd\ufffdH\ufffd\ufffd\ufffd\ufffdD++4nY\ufffd]\ufffd\ufffdq\ufffd\u000b\ufffd.\ufffdb6\ufffd\ufffd[4\ufffd\u064c\u0687\ufffd\ufffdFw\ufffdC\u0015#\ufffd\u001d)\u0017\ufffd\ufffd\u0005\ufffdW{W\ufffd\ufffd\ufffdhR\u000f\ufffd\bic\u0002h\ufffdU\u001b\ufffd\ufffdE_fQ9\ufffd\ufffd\ufffd]huK\ufffdPQ\ufffdj8\ufffd\u3de9\ufffd\ufffd\ufffd\ufffd\u0005e\ufffd\u001e\ufffd\ufffdh\u0014u\ufffd\ufffd(k\ufffd\ufffd\ufffd\ufffd\ufffd\u000eL\u0015\u0017U!8#|\ufffd+V\ufffdz\ufffd!C\u0013\ufffd\ufffd\ufffdex\ufffd\ufffdk\ufffd\u07c8aBJ\ufffd\u001a-\ufffd\ufffdI\ufffd\ufffd\u0004\ufffdq\ufffd(\t\ufffd\ufffd\u05e35\ufffd\ufffd\u045e\ufffd\tC\u0005\u0014_\ufffd%Y\u001cT\ufffd\/\ufffdTV\f\ufffd\ufffdX\ufffd9\ufffd\ufffd\ufffd\u0016\ufffds.\u0014z1\u0496\u0354LwC\n\/9?\ufffdlD\u474f\ufffd\ufffd\ufffd\ufffdR\u0011I\u010b\ufffd\ufffd\u0019Io\u001d\ufffdW\ufffda\ufffdqE\u0019\ufffd\ufffd\u0558\ufffd>-\ufffd%\u0016w\ufffd1\ufffd\u0018J\ufffdle.\ufffd\u001a?M\ufffdv\ufffdG\u001f^\ufffd\ufffdIk\ufffde\ufffd\ufffdd\u0018\ufffd\ufffdq~\ufffdi\ufffdsN\ufffd\u0002\u0001\ufffd\ufffd7\u0585\ufffd\u0005\u0013\ufffd\u0018\u001b\ufffd|me\ufffd\ufffdX\ufffd\ufffd\ufffdRA\u0018>\ua220XtN\u0015\ufffd\ufffd\ufffd1f\ufffd\ufffdT\ufffdV\"\ufffdm[\u001c\ufffd\ufffd*\ufffdt'(X\ufffd\u00fe\ufffd\u0019\u0016\u031ae\u0019\ufffd\u0530l;g9_<\ufffd\ufffd\ufffd}\ufffd\ufffd\u0000\ufffdq\ufffds\ufffd\ufffd\ufffd<W\ufffd\ufffd\ufffd\ufffd9\u001a\u0017\ufffd\u001f\ufffd^\ufffd\u001e\ufffd\ufffdqLWC\ufffdXz\ufffd\ufffd\ufffd.\ufffdYvc@1n\ufffd\ufffd%\ufffd\nb\ufffd5\ufffdL\ufffd\ufffd\ufffd\ufffdb\ufffd-Y\u001e1\u0014\ufffd\ufffd\ufffd\ufffdyC}\ufffdyx\ufffd\u0010\ufffd6\ufffd%\"\ufffd\ufffd\ufffd\u001c@\u0012n\u026c\n\ufffdv\ufffd\ufffds\ufffd\u0019\ufffdH\ufffdQ\ufffd\\f7z\ufffd\ufffdG\u00b25\u0015\ufffd\ufffdi\ufffd\ufffd<+\ufffdfz<\ufffd\ufffd\ufffdI9\ufffd\u0017\u0014J\u99ccR&}Y,\ufffdemN \ufffd)\ufffd\ufffd\ufffd\u070b\ufffd\u0017E\ufffd\u001d\ufffd\ufffd]\u0614D\ufffdky<\ufffdy\ufffd\ufffd\r\ufffd]<\ufffd\ufffdU\ufffd\ufffdxOJ\u07f6\u04ab\ufffd\ufffd\ufffda\ufffd\u0010[\ufffdB\u0628\ufffd\ufffdO\ufffd\ufffdtkm;\ufffd\ufffd\ufffdZ\ufffd\ufffd5.\ufffdy\ufffd\u02f7\/\u001e\n\ufffd\ufffd\ufffd#\ufffd\ufffdaC\ufffd\ufffd+\ufffd\ufffd\t\ufffd%\ufffd\u001c\u001d*\ufffd-2\ufffd\u0012\u0005M\ufffd8\ufffd5|T#Ga\ufffdS\ufffd\u0010N\ufffd\ufffd\u001e\u000e\u0012m3}eSa\ufffdW\ufffd7\rSg9A\u01f4*%,\ufffd\ufffd\ufffdF\ufffd\ufffdxa\ufffd\ufffd\ufffd\ufffdd\\8\ufffd\ufffd\ufffd\re6$\ufffd\ufffd\ufffdp\u0006\ufffd\u000e\r\ufffdy\ufffd3\u00067\ufffdP\u000e\ufffdR\ufffd\ufffdvGJ\ufffd\u000e\u0016\ufffdM~Z\ufffdL\ufffd\ufffd4S\ufffd\ufffdn{ZHZ\u0191w\ufffdI\ufffdi\ufffd\ufffd\ufffdE\ufffd\ufffd\ufffd\/<[O\ufffd\ufffd]g\ufffdL\ufffd\ufffd\ufffd\ufffd)C\ufffd_v\ufffd*\ufffd\ufffd\t\ufffd\ufffd\u000bR\ufffd\u0011\ufffd`\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffdl\ufffdU\ufffd\ufffd\u0003\ufffdd\u001a\ufffd\u0013b:j;\u0015\u0013u\ufffdw.]\ufffd\u0016h\ufffd\ufffd\ufffdg]e\ufffd\ufffdu\ufffd\ufffd\u000f\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd\u001bJ&K\ufffd\nendstream\nendobj\n35 0 obj\n4648\nendobj\n15 0 obj\n<< \/Type \/Font \/Subtype \/TrueType \/BaseFont \/UUIFTM+Cambria-BoldItalic \/FontDescriptor\n36 0 R \/ToUnicode 37 0 R \/FirstChar 33 \/LastChar 66 \/Widths [ 573 225 614\n452 538 585 540 773 297 499 570 565 866 364 271 220 573 675 500 456 302 573\n625 570 442 573 536 584 571 573 596 500 580 483 ] >>\nendobj\n37 0 obj\n<< \/Length 38 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001]\ufffd\ufffd\ufffd\ufffd0\u0014E\ufffd\ufffd\n-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00130\ufffd2\ufffd@\u0016\u04d6\ufffd\ufffd\u0000Y\ufffdSCc\u001b\ufffdY\ufffd\ufffd{\u079bt\n]\\\ufffd\ufffd\u04d5\u07b5\ufffd\ufffd\ufffd\ufffd\ufffda\u001aWS~\ufffds8\ufffd\ufffd\f\ufffd\u0014s\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffdi\ufffd\ufffdMe\ufffd\u0018\ufffd;\ufffdp\ufffdKQb>\ufffd.k:\u001f\ufffda6m[\u0018S~\ufffdrY\ufffd\ufffd<|\ufffds\ufffd>\u027b\ufffd9\ufffd<N'\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffde\ufffd\ufffd\ufffdiZ\ufffd-\ufffd\ufffd\ufffd4\ufffd\u075b_\ufffd\ufffds2\ufffdZ\u001f\u000f\ufffd\ufffd\ufffd\ufffd\u001eq\ufffd[\ufffd\ufffd$CG86\ufffd-\ufffd9\ufffd\ufffd\ufffdC\ufffd~:\ufffd\ufffd\ufffd\ufffdk__\ufffd\"M\ufffd\ufffd\ufffd\ufffd\u000f\ufffd\ufffdE\ufffdXh\ufffd\ufffd\u001b\u001e\ufffdGeyx\ufffd\ufffd\ufffd\u001aW\ufffd\ufffd\ufffd\u000f\ufffd\u036bM\u05ca\ufffd\ufffd]\ufffdU\u0005\"\ufffdI\u0401\ufffd\ufffdz#X\ufffd\ufffd\u069d\u0013\u0702\b\ufffd\u0005w`\ufffd\ufffd\ufffd'\u0010Y\ufffd4R\u0743\ufffd\ufffdA\u0403\b\ufffd\n\ufffd \u0002k\ufffd\u0000\"P\ufffd\u0011D`\ufffdj\u0002\u0011;\ufffd\ufffd\u0001DD\ufffdT\u001diD\ufffd\ufffd\ufffdH#\"\ufffd H\u001a\u0011\u079d iD`%H\u001a\u0011\u0007\ufffd\u0005I$b+\ufffd\u0012\ufffdi\ufffdZ\ufffdpN\u0003\ufffd\ufffd \ufffd9\r\ufffd\ufffd\u01e1\u0017\u0015^E\ufffd9\rX\ube44s\u001a\ufffd\ufffd\ufffd\ufffdp\"\u0690[p\ufffd\u0013\u1540\ufffdp\"k\ufffdR\ufffd\ufffdf\u0011\ufffd\ufffdInFE\ufffdO\ufffdd\u0015Q\u0005\ufffd\ufffd\ufffdW-\ufffd#c\ufffd1\ufffd\ufffd3\u0013\ufffd\ufffd\ufffd\u000e\ufffd\f\ufffd8\ufffd\ufffd\ufffde\ufffd\u0017\ufffd@\ufffd\u0007w\ufffd\ufffd\nendstream\nendobj\n38 0 obj\n446\nendobj\n36 0 obj\n<< \/Type \/FontDescriptor \/FontName \/UUIFTM+Cambria-BoldItalic \/Flags 68 \/FontBBox\n[-1110 -299 1378 1047] \/ItalicAngle -6 \/Ascent 950 \/Descent -222 \/CapHeight\n667 \/StemV 0 \/XHeight 484 \/AvgWidth 585 \/MaxWidth 1387 \/FontFile2 39 0 R >>\nendobj\n39 0 obj\n<< \/Length 40 0 R \/Length1 14976 \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd{\t`S\u05d9\ufffd9\ufffd\\I\ufffd\ufffd]\ufffdm]\ufffdj\ufffd\ufffdXF\ufffd-\ufffd\u0018\ufffd\"\ufffd\u0006\ufffd\u0010l\u0003\ufffd\ufffd\u0012ll\u0007C\ufffd\u0010\ufffd$@CH\u0002\ufffd\u0018\u0012\u0012\u0012\bYZ\ufffd6\rI\ufffd]\ufffd4c\ufffd:\t3eH\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdt:\ufffdv\u001aZ\ufffdm\ufffdi\ufffd<\ufffd\ufffd\ufffd\u001dC\ufffdy\ufffd6\ufffd{u\ufffd{\ufffd\ufffd\ufffd\ufffd\ufffds\ufffdu\ufffda\ufffdA\ufffd\u0011Au\ufffd\u001b\u00066!\ufffdc\ue1df\u0015\ufffd7m\ufffd\ufffd,b\ufffd\u0010b\ufffd\ufffd7\ufffd\ufffdP\ufffd+\ufffd \ufffd]\ufffdf\ufffd\ufffd\ufffdy\u000b\ufffdP\ufffdgdx\u0000\ufffd\u025fKpo\u001c\ufffd\ufffdb\u0016\ufffd\u00efd\ufffd\ufffd[\ufffdy\ufffd\ufffd\ufffd{p\ufffd\ufffd\ufffdR\ufffd\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd\u044f!\u03cf\u000el\u0018.\ufffdoY\u0002\ufffd\ufffdM\ufffd\ufffdK\ufffd8\ufffd\u0010\ufffd^\ufffd\ufffd^[l;u\ufffd#\ufffd!-\ufffd\ufffd\ufffd\f=\ufffd\ufffd\ufffdA\u001c\ufffd#\ufffd1\ufffd\ufffd.\ufffd\ufffdb\ufffd^\ufffd\ufffd\ufffd>y\ufffd\ufffd\r\ufffd\f\ufffdo#M\ufffd\ufffd\ufffd\ufffd\/\ufffd\u0361\ufffdW\ufffd=}\u03fb\ufffd\ufffd\ufffd4\u02b2~h\ufffd\ufffd\u0011\ufffd\u001f\u0018W\ufffdH\ufffd\u0019!\ufffd\ufffd]\u03e5\u00074J\ufffd\u00159'\u001f*\ufffd\ufffd\u001fA\ufffd\ufffd\ufffd\ufffdm\ufffd\ufffd\u05ff\u0007\ufffd\ufffd\ufffd\ufffd\ufffdw~\ufffd\ufffdO\ufffdA\ufffd\ufffd\ufffd\ufffda\u0013\ufffd\ufffdo\ufffd\ufffd\r\ufffd6\ufffd\r\ufffd\ufffdmvm\ufffdf\ufffdV\ufffdY\u0007\ufffd\ufffd\ufffd\ufffdmx\ufffd\ufffd\u001e\u001e\ufffd{\ufffd\u02f9\u0176#\ufffd\ufffdn\ufffdK\ufffd\ufffd\ufffd\u0015f\ufffdK\ufffd_b\ufffdI\ufffd_\ufffd#\ufffd#\ufffd\ufffda\ufffda\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\u001ff\"\ufffdX=\ufffd\u0018|e\ufffd\ufffd\ufffd:C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdy\u0002\ufffd\ufffdX+\ufffd:\ufffd#\ufffdO\ufffdG\ufffd\ufffd\u385ap\ufffd\ufffd!\ufffdC\fw\ufffd]l\ufffd\ufffdG\ufffdG\ufffd\ufffd\ufffd\ufffd\u022d\ufffd\u0014\ufffd]{|\ufffd\ufffd{qd\u001f\\{\ufffd*\"w\ufffdU\ufffdW\ufffdB\u0019w\ufffd\ufffdh\ufffdZ\u001b\ufffd\ufffdz\ufffd!i\ufffd&\ufffd\ufffdYVe\ufffd\ufffd\u012d\ufffd\ufffd:\ufffd\ufffd\ufffdd\ufffd\ufffd\u001b\f\ufffdC\u0006C\u0018W\ufffd7\u0019y\ufffd?\f\uff2b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\ufffd\u01f4\ufffd\u0001\ufffd#\ufffdh\ufffd\ufffd\u0013\ufffd~\ufffdP\ufffd\ufffd\ufffd\u001e\ufffd\ufffd\ufffdi\ufffdW\ufffd.o6pF\ufffd\ufffd\\\ufffdU\ufffd\u02b4\ufffdUh\u0011f\ufffdJ2\ufffd\ufffd\u0018\ufffd\r\ufffd\u0006\ufffdFYr\ufffdz+\u0667\ufffd\u001czJ\ufffd#\ufffdZ\ufffd4Dc\ufffd\ufffdf\ufffd\ufffdd\ufffd\ufffd&\ufffd\ufffd\ufffd(zT\ufffd\ufffd\ufffd\ufffd\r\ufffd?\ufffduX\/\ufffd\fn\\\ufffds\ufffd\\:+g\u05d9X\ufffd\ufffd3W\ufffdut\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffd\u001d\ufffd\ufffdp\ufffd\ufffdubP\u0019m\r\ufffdV\ufffd\u0006[\ufffd\ufffd\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffdZ\r\ufffd\ufffdVe+iE\ufffd=\ufffd%X2u\ufffd\ufffd%i\u024c\ufffdwqZJF\ufffd\ufffd\t\ufffd'%\"\u0752\ufffdgy\ufffd$\ufffd\ufffd\ufffdTb\ufffd\ufffdc\ufffdDb\ufffd\ufffd3\ufffdc\ufffd,[\ufffd\u001b\ufffdNZ\ufffd\ufffd}\na\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#\ufffdJi\ufffd{qN\ufffd]\ufffd\ufffd\u00124q_e\u001euK\ufffd^\ufffd-\ufffd#W~\ufffdl\ufffdK\ufffdl\ufffdvY\u0356-\ufffd\u001f:\ufffd\ufffd:\ufffd\u000eH\ufffd\tY\u974e\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\ufffd\u0016)\ufffd!E;\u0006\ufffdj(\u000b\u0016\u02e6\ufffd\ufffd\u0014\ufffd\ufffdat\ufffd\ufffd\ufffd[\"[\ufffd\u0017\u0492Cj\ufffduN5\ufffd\ufffd=\ufffd\ufffd\u000b\ufffd\ufffdKKLfE\ufffd4\ufffd\ufffd-\ufffd{\ufffd\ufffdK.!\ufffd-}\u001dr\ufffd=\ufffd%\ufffd\ufffdV\ufffd!\u0010F\ufffdR\ufffd\ufffd\ufffd|Gl\u0002\u04a5\u000f9_LO^\ufffd\ufffd$B\ufffd\u0017i1\ufffd\u0017\ufffd\ufffd\ufffdv\ufffd_\u5b48#s&\/2\ufffdk\ufffdqha\ufffd\ufffd\ufffd\ufffdsT\ufffd\ufffd\u00050\ufffd\ufffd\ufffd\ufffd\ufffd!\ufffd~t\u31d4\u0016\ufffdF\ufffd\ufffd\ufffd\ud3ec\ufffd\ufffd\n|\u001d\ufffd\ufffd7\ufffd\u05e1\ufffd\ufffd\u0609\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffd\u0003'p5zi\ufffd\ufffd.\ufffd\r}\u000b\ufffd\u0011=\ufffd\u001e@\ufffd\ufffd\u0011`\ufffd\u07e1\ufffd\ufffd\u000e\ufffd\ufffd\u0017\ufffd\ufffdt\ufffdQt\u001bJ\ufffd\u001fB\ufffdP\ufffdt)\u00b5\ufffd\ufffd\u001f\ufffdM\ufffd\ufffd\ufffd)\ufffd\ufffd\bPj!:\n\ufffd#\ufffd\u0013\ufffd\ufffd\u001b<\ufffd\ufffd>c\ufffd\ufffd\ufffd1\u001fGw\ufffd\u01e1TBC\ufffd\ufffd\ufffdgA\ufffd\ufffd\ufffd|\t\ufffd1[an\ufffd}9\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\/EmS\ufffdp\u000b\u000e\ufffd*\ufffd\u0143\ufffd\ufffd?D\u0007\ufffd\ufffd\ufffdO\ufffd\u001e\ufffd\ufffd\ufffdU\u05ed\\\ufffd|Y>\ufffdtI\ufffd\u00ab\ufffd\u0017t\u035f\u05d9\u0364\ufffd\ufffdmsZg\ufffd47\ufffd\u001a\u001b\ua4c9Yu\ufffd\ufffdX4\u0012\ufffd\ufffd\u000e\u0005\u0003~\ufffd\ufffd\ufffd=U\ufffd\u0015n\ufffd\ufffda\ufffdY-f\ufffd\ufffd3\ufffduZM\ufffd\ufffdL\ufffdT\ufffd\ufffd\ufffd(\ufffd\u001d\ufffd#\ufffd\ufffdX'93\ufffd\ufffd\ufffdY\ufffd\ufffd%\ufffd\ufffd\u0017\u0017\ufffd%dr{\u0005#\ufffd\ufffd\ufffdc\ufffdV\ufffd\"\"!s\ufffdd\ufffd\u025dDbS^RF\ufffdlr\ufffdD\u0002\ufffd\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffd\u0000|\ufffd\u0005\u0003CRu_\ufffd+p\ufffdwO\ufffd\ufffdaX\u0255\ufffdy\ufffdn\ufffd\t\ufffd\ufffd\u000b\ufffd\ufffd`\ufffd\u001f\ufffd\ufffd\u001e(\ufffd\n\ufffd\ufffdKB=9z\ufffdO\ufffd\ufffd\t\nQ\ufffd7\u000f\ufffd\ufffd\ufffdT5\ufffd\ufffd\ufffd\u044aK\ufffd1\ufffdS (\ufffd\ufffd\ufffd\ufffd\ufffdx\ufffd;\ufffduf\ufffd\u0012\ufffd\ufffdD\u069fI\ufffdJ\ufffd]l\ufffd\ufffdk\ufffd\ufffd\u0001\ufffd\u0002\u001c\ufffd\ufffd\ufffdP\\\u0096\ufffdI\ufffd,a\ufffdBX\ufffd\u53e0\ufffd\ufffd7}\b\r:\ufffd\ufffd\t\u001dCk\ufffd\ufffdC\ufffd\u001f\ufffd\ufffdb\ufffd\ufffd^~\ufffd\u001f\ufffd\ufffd\u0019\ufffdn\ufffdW\ufffd4 Ao\ue926<#d\ufffd\ufffda\u0015\u0000kP\ufffdN\ufffdk\ufffdDC\u000b`[6\ufffd\ufffd\ufffd6,'\u0018mG\ufffdI\u0006\ufffd\ufffd|&:\ufffd\u000ez\ufffd\ufffd\ufffd\u0003\ufffd\ufffd\u0010\ufffd@7\ufffd1P\u0003*\ufffd\ufffd\ufffd*\u0004\u074a\ufffd\u00104\ufffdSX~\ufffd\ufffd\ufffdH\ufffd\ufffd$\ufffd\ufffd\ufffd8 \ufffd\u0003\ufffd\ufffd\ufffd\u9c43\ufffd\u001cZ\ufffd\u001f\ufffd\u000e\tC\u0003+r\u0012\u0019\ufffdI\ufffdD$\ufffd1\ufffdD\ufffd\ufffd\ufffdY\u0006E0\t\ufffd\ufffdGx\ufffd\ufffdY\ufffdF7\ufffd\ufffd\u0018\ufffd\ufffd O\ufffd\ufffd\ufffd]\ufffdB\ufffd\ufffd\u02c7F\ufffd\ufffd)\ufffd\ufffd~!\u000bu\ufffdLn\ufffd\ufffd\ufffd\u001bTAn_\ufffdd\ufffdH:\ufffd\ufffd\ufffds7\u0019\ufffdp\ufffd\ufffdivll\u001f\/=\u079b\ufffdY\ufffdm\ufffd\t\u001c\ufffd(?\ufffd!\ufffd\ufffd`\ufffd\ufffdui\ufffdc\ufffd\ufffdm\ufffd\ufffd\ufffdkH\ufffd\u001c\ufffd\ufffd\u0000\/\ufffd^\ufffd\u000eh\u0006\u07c1\ufffdS\ufffd\ufffd\u001d\ufffd$\ufffd;^\ufffd\u001d\ufffd\u001f\ufffdI\ufffd\ufffd\u0012\ufffd^C\ufffd\ufffd\ufffdR\ufffdAO\u0016~\ufffd\ufffd\u0003\ufffd\ufffdR\u000f\ufffdK\u0003~\ufffd;\ufffde\ufffdE;\u0002\ufffd\ufffd\ufffd\ufffd{Y\ufffdcD\u0000U3\ufffd@ \b\ufffd'\ufffd+\ufffdz\ufffd\ufffd3B;\ufffd\ufffdu\ufffd)\u000e\f\ufffd\ufffd)e\ufffd\ufffd\u0004\r\u0003\ufffd(f@&\ufffd\u0011\f\ufffd\ufffdH\ufffd\u0012\ufffd\u0007-\ufffd\ufffd\u0000\ufffd(\u000ed\ufffdR\u0003\ufffdaa\u001f$\ufffd?\ufffd\ufffd\ufffdE\u00157@R\u0005\ufffd)j\u0005~\ufffd\u000e\ufffd\nH\ufffd\b\ufffd=\u0003u\ufffdc\ufffd\ufffd\\G\ufffdr'\ufffdd2\ufffd9\u0017\u001c\ufffd\u000b\ufffd\ufffd\ufffd.\ufffd\u000eh3\u0016\ufffd@\ufffdDk\u0016\u000b\u077dE.\u0018\ufffd\ufffd\ufffd\ufffd\ufffd%E\u0001\u0006\ufffd\ufffdv\u001e\ufffd\ufffd\ufffd\u02e3\ufffds\ufffd\ufffd\u0015\ufffd\ufffd\"\ufffd)t\ufffd\ufffd\ufffdu\n|\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0002\ufffd\tc'\ufffd\u06b1M\u001d\ufffd\ufffd,\ufffd\u0018\u02bfr\ufffd-u\u001e\ufffdK\\\ufffd\bn\ufffdw\ufffd>\u001e\u0016G\u0002\ufffd\ufffdM\u037d\ufffd\ufffdVu\ufffd#\u0003P\u0002\ufffdv\ufffd\ufffd\ufffd\ufffd\u001a\ufffd\ufffd\u0000\ufffd|xuI\ufffd\ufffdA\u0006\ufffd\u030dqo\ufffd\uad40Nn\ufffd\ufffdB\r\u060aMn\ufffdk\ufffd\"\u000b\u0013Z\ufffd\u0003\ufffd\u0018\ufffdGt\f\ufffd7\ufffd\u00150J\u00187\ufffd\u001a\ufffd\u000ft\ufffd]\\\"\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\ufffdb`o\ufffd\u0014\u0006\ufffdz\ufffd<\u001d\u0018\u0017\ufffdj\ufffdH\ufffd{s\ufffd<\ufffdV\ufffd\ufffdCb<\u0002\ufffd\ufffdOkNO\ufffdX\ufffd\u049a\ufffdS5\ufffd\ufffd\ufffd\u0005\ufffd7\u00075\ufffdd\ufffd\ufffd(\ufffd\u0006l\ufffd\ufffd\ufffd1\ufffd`\ufffd)\ufffd\ufffd\ufffd\ufffd\ufffd5$\ufffd^\u0002k|\ufffdI*\u0003\ufffd\ufffd[o\ufffd\u421b\ufffdM \u0178\tM\ufffdG@=\ufffdJ\ufffd\ufffd\u0711\ufffd\u0004\u0010s\ufffd\u0013\ufffd\ufffd\b\u0012\u0017\ufffd\u0014\ufffd\ufffdiwk\ufffd\ufffd\u0000\ufffd\u0018\ufffd\u0307\ufffd\ufffdS\ufffd\ufffd\b\ufffd\ufffd\u0014G\ufffd\ufffd\ufffdp\ufffd\ufffdm\ufffd\u001c\u0001\ufffd\u0002\ufffd\u0000\ufffd\ufffdMP9\ufffdH|\ufffdX\ufffd\u0001g.\u000b\ufffd\ufffd\ufffdC#\u04e2T\ufffd<\ufffd.]\u001b\ufffd\ufffd\u0013@t\ufffdE2\u0018M\u0002]\u1ad4\ufffd\u0014C\ufffd\ufffd\ufffd\u0015l\ufffdL\ufffd\u0005yIO\ufffd\ufffd\ufffdK\ufffd\ufffd|\u0759\u001c\u000fH\u0004\ufffd\ufffd+'\ufffd\u000e~\ufffdn\ufffd\ufffd\ufffdgeH\u023bi\ufffdT\ufffd\ufffd\ufffd\ufffd\ufffd,\ufffd\ufffd\u001c\ufffd 4q\ufffdX\u001c\u0018\ufffdH\ufffd\ufffdY1\u0016\ufffd\ufffd2\ufffdn`\ufffd\ufffd\u000f\ufffdGZ`Nb\u0018V\ufffd7\ufffdc)\ufffd3Kr%q\ufffd\ufffdI\u0016\u0002xV\u0017]\ufffd\ufffd\ufffd\ufffdT\ufffdj\u0003\ufffd\u0006\ufffd\ufffd\ufffd\\\ufffdp\u0000\ufffd\ufffd\u001c\ufffdT\u0017ew\ufffd1l\ufffd\u0012X\ufffd\ufffd\u0006\ufffd|\ufffd\\7\ufffd\u001et&R'\ufffd\ufffd\"\u0006\ufffd3\ufffd\ufffd\ufffdyy\ufffd\ufffdz\ufffd\u0015\ufffd]S\ufffd\u0000\u001f\ufffd\ufffdw@;Pd\ufffd\u0002\ufffd\ufffd{R\ufffd\ufffd\u0017\/\u02dd\u0002\ufffd\ufffd\u07ff$\ufffd\u001c\ufffd\ufffdL:\ufffd\u000fu\ufffdS<\ufffd@r)CKi!m\ufffd\ufffd\f\ufffd\ufffd0\ufffdsL\ufffd\ufffd\ufffd}JDh\ufffd\\\ufffd\ufffd\u0005r~\u0010\ufffd\f\ufffd\ufffd\ufffd\b\ufffd0\u001a\u0004\ufffdC.\ufffd\ufffd1P\ufffd\u0016\ufffdD\ufffd\f\ufffd\tL\ufffd\ufffd1\u0002\ufffd\u0013`\u04c7$\ufffd'\ufffd\ufffd\ufffd\ufffdX\ufffd\u0012\u001b\u064a\f\b\ufffd-\ufffd!\ufffd\u0011\ufffdNbF\ufffd\ufffd\u0285\u1d24\u0011\u04b4\ufffd\ufffd\ufffd\ufffd\u0017\u02d5\ufffd\\%\ufffd\ufffd\ufffdA8\ufffdq\u0010\ufffd\ufffd~\u0001\ufffd\u001f\u00008\ufffd\ufffd8OY\ufffdr9\u0013\ufffd\ufffd''\u0001A\ufffd\u0001\ufffdz%e`\u0005\\\u0000\ufffd\ufffdH\ufffd\ufffd\u0014\ufffd\u0005\ufffdn\u001e\ufffd\ufffd\ufffdx\ufffd\ufffd{p\ufffd\u0383\ufffd)\ufffdU\u0005\ufffd\u0006\ufffdR\ufffd\ufffd\u0424KR\ufffd\b\ufffd\ufffd\b\u0422S\ufffd\u0003\ufffdv\u001a\u0004f\u001d\u0010\ufffd$\u0014\ufffdp\ufffd\ufffdK\ufffd\b}hn-\ufffd\u0011\u03c3=4_h\ufffd\ufffd\ufffd\ufffd$\u0015A\ufffd\ufffdx~\ufffd$$du\ufffd\fH\ufffd}\ufffd\u0003\ufffd\ufffd@\u0006B\ufffd\ufffd\rYx\u0018\ufffdG\ufffdUia\ufffd\u0002\ufffd\u001a\ufffd\ufffda\u0007X4\ufffd\u0018\ufffd\ufffd\r\ufffdo9\ufffd7(\u0019\u0006\ufffd\ufffd\u0006A\ufffd\ufffdU\u000e\ufffd,W\"\ufffd,\u0012\ufffd\ufffd\ufffd%u-\f\b_\ufffd\ufffd\ufffd\u0080\ufffdU\ufffd(t\ufffdrn_\ufffd\u0001<\ufffd\ufffd40\ufffd\ufffd\fR\ufffd:\u0000u\ufffd\ufffd\ufffd\ufffd\u0005\ufffd\ufffd`\ufffd\ufffd\ufffd\ufffdaz\ufffdQ\ufffdp\ufffd\ufffde\ufffd\u028fRA\ufffd\ufffd\u000bt\r\ufffd\ufffdP\ucbc1\u0012\u0001\ufffdbg\u0018\ufffd,@\ufffd\ufffd\u0018g\ufffd\ufffd*\ufffdr\ufffdl\ufffd.\u0019\ufffd<!l\ufffdB2\ufffd\ufffdE\u0005\t-\ufffdQ\ufffdD\ufffd\ufffd\"\u0011\ufffd\u01ee,\ufffd\ufffd\u0003p\ufffd]Y\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdt\u001f\u07a1H\ufffd2\ufffd\ufffd\/\u001d\u0005\ufffdM\ufffd\ufffd\ufffd`\ufffd\ufffd\ufffd&S}\f\u001e\ufffd\u0222\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0014\b)\ufffd\u0005H\ufffdX\ufffd\ufffd\ufffd\ufffd\u0000\ufffdC\ufffd\ufffd|\n-\ufffd'\ufffdU\ufffd\ufffd\ufffd;\ufffd\u03e0$s\u0003jg\ufffd\ufffd\ufffd~\ufffdT\ufffd\u0006\ufffd_\ufffd\ufffd\u000f\ufffd\u000fO\ufffd\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd%\ufffdWh#\ufffd\u0005\ufffd\u0015\ufffd\ufffd\u001ee\u001c-%?\ufffd|\ufffdE\ufffd!&\ufffdj\ufffd\ufffdK\ufffd\u0011\ufffd?\ufffd6\ufffd\ufffd\u0a82+\u0004\ufffd)\u0199 `\u00061\ufffd\ufffd!\ufffdE>T\ufffd*\u0011\u0018\ufffd\ufffd\u0017\u001b\ufffd\t9\ufffd\u0001\ufffd95\ufffd\ufffd8dC\u0015\ufffd\u00c3\u0014\u0201,H\ufffdx\ufffd<\ufffd\ufffd\u0015z\ufffd\u020e\ufffd\ufffdW\ufffd\ufffd0\ufffd\u000bFB\ufffdvt;\ufffd:\ufffd\ufffd|\ufffd\ufffd\ufffdI6\ufffd\ufffdXqP\u066dr\ufffd\ufffdX6\ufffd\ufffdg\ufffdZ\ufffd\ufffd\ufffd\ufffd.G\ufffd9mB{^w\ufffdnR\ufffd\u05ffi\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdp?0\ufffd1~\ufffdt\ufffd\\\r#\ufffd'\ufffd\u07a5X\ufffd\ufffdQ\u0014\u0561z4 \ufffd-\u0016\ufffdO\ufffd\u0523h$R\ufffdw8\ufffd\ufffd\ufffd8`\ufffd\ufffdCI.\ufffd$+5\ufffd\b\ufffd#fK\ufffd\u0012\u0450d,\ufffdX\ufffd\ufffd\ufffd35\ufffdM\ufffd\ufffdsq\ufffdk\ufffd7\u0014_y\ufffd\ufffd\u0013\u0017-?gl\ufffd\ufffd\ufffd\ufffd\ufffdfc\u00122\ufffd\ufffdpC}\u001b\ufffdj#\r\ufffdA\ufffd\ufffdgTBCcc2Q\ufffdX-\ufffd\ufffd\u0013\ufffd\ufffdn\u0015\u001a\ufffd\ufffdk\ufffd\u0017\ufffdR\ufffd\ufffd~{\ufffdm\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05bb3\ufffd\ufffdm\u0015\u0006k\ufffd\u000fZU\ufffd\ufffd\ufffd\t%\u0019\ufffd\u0504\ufffd\ufffdf\u000b\ufffd\u001bB\ufffdx\ufffdY\ufffd\ufffd\ufffd\u0013UwT\ufffdV&;k\ufffdms:c\ufffdh\ufffd\ufffdB9\ufffd\ufffd\u0013\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffd\u001f?\u000f\ufffdF\ufffd$x\ufffd\ufffd\u001e\ufffd\n\ufffdo\u0018\u001d\u0002@\ufffd,\u0349\ufffd~T\u00db\ufffd5\ufffd\u78dc\ufffd\ufffd0\ufffd\u0018\ufffd\u0004R\u0004\u001f\u0016\u0005\ufffd\ufffdQ;+\ufffdV\ufffd}*\ufffd\u0584\ufffd\u00049\u0693\ufffdd\u0108\ufffdI\ufffd\ufffd\ufffd\u0011w]\ufffd\u0501}nOr\ufffdN\ufffd6\ufffdp3$!5\ufffd\ufffd-:\ufffd\ufffd1\ufffd\ufffdK)b\ufffd\ufffd\ufffd)\ufffd\u0019\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffd>\u0014\ufffd\ufffd\ufffd\r\ufffd)\ufffd\ufffdMa\ufffd\ufffd\ufffdui\ufffd\u001a\n\ufffd\fBC]\ufffd\u0640\ufffd\bS\ufffd\ufffd\ufffd6\ufffd\ufffd\ufffd\ufffdh\ufffd\ufffd\u0014\ufffd\ufffd;Y\u0006k\ufffd\tg\ufffd\ufffdL\ufffdc\ufffd&\ufffd.\u000b\ufffd]\u012ex\ufffd\ufffds\ufffd%|&\ufffdN\ufffdP\ufffd5\u0012\ufffd\ufffd\ufffd\ufffdK\ufffd\f\ufffd\u0012\ufffd\ufffd\u000fQ\u001b\u001f\ufffd\ufffd\u0016\ufffd\ufffd\u0012e\ufffd\u02d5\ufffdB\ufffd\ufffdZ\ufffd.\ufffd\ufffd\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\ufffdVDk\ufffd[S\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\ufffdb,\ufffde\ufffdEf\u001d\ufffd\ufffd6\ufffdSY\ufffd\/L\u0087}\ufffd\ufffd\ufffdT\ufffdGI\u0015A.\u0007w!\ufffd\u001c\ufffdR\ufffdhBE\ufffd\ufffdD\ufffd\u0015\ufffds]\u0000\ufffd\ufffd\/@\b\ufffd-\ufffd>\ufffd\ufffd\ufffdq\ufffdf\ufffdA\ufffd@\ufffdT\ufffd\u8bde\u0015d\"\ufffd!\ufffd\u0010\f\ufffdp\ufffd\ufffd&\u0004\ufffd\ufffd\u0010\ufffd-\ufffdhchN \ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffd\u0003[\ufffd\ufffd\ufffd\u0004\ufffdo\ufffd\ufffd\ufffd\ufffd&\ufffd\u0507c<\ufffd\ufffd.\u0014\ufffd\ufffd\u0017rwv\ufffd\ufffd\ufffdY\ufffd\ufffd\u001e\ufffdr\ufffd\ufffd\ufffd\u023a\u001b\ufffd\u0014K\ufffd~~\ufffds\ufffd\ufffd\ufffd1Mp>\ufffd}eo\u011e\u0586\u0017v\ufffd\ufffd\ufffd-\ufffd2=\ufffd\uc883\u02efY\ufffd(\ufffd'\ufffd3\ufffda\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\u000b`\u0007\ufffdo\ufffd\u000eDp\ufffdD\ufffd\ufffd\ufffd\ufffd;\u001c1}\ufffd\ufffd\b2T\u0012}U\ufffd\u0018\ufffd\ufffd`<\ufffd\ufffd\ufffd\ufffdAE0\ufffd\u00040[\ufffd\ufffd\u0005IP\ufffd\ufffd\ufffd\ufffd\"\ufffd\ud807\ude88\u0018\ufffd\ufffd\u0017Qj\tD\u001c\u056aru\ufffdSY5rp\ufffd\ufffd\u000e\ufffd'\u000e\ufffd\ufffd\ufffdT\u001e\ufffd\ufffdV\ufffdSY\ufffde[\u011d\ufffd\u0000M\u001c8\ufffd\ufffd\u0610qM\ufffd\ufffdn%wv\ufffd\u001c\ufffd<\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u07c4\ufffdX\u000f(b+IKi#\ufffdD\ufffde`\u34b0\ufffd\ufffd$\u0011\ua0f0\ufffd\ufffd\u001f\ufffd,\ufffd'\ufffd\u0013\ufffd\ufffdw\ufffdy\ufffd\u0015\ufffd\ufffdY?\u001b\ufffd+\ufffdT\ufffd\u001e]\ufffd\ufffd\u0010\ufffd\ufffd\u001b\ufffd]U\ufffd\ufffd6\b\ufffd1s\ufffd\n\/\ufffd\ufffd\ufffdW\ufffdz2\ufffdtg\ufffd\np\u0004m\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\u0006\ufffd\ufffdA\ufffdK\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd|\u0011\ufffd.\ufffd ;\ufffd\ufffdn\ufffd\ufffd\u0003$pX,gA\u0010\u0000&\ufffdw\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\"\ufffd_6\ufffd+| \ufffdml2!3-\ufffd\u0000s\ufffd\u001aS\ufffd8\ufffd\ufffd9V\ufffd0L\ufffd\ufffd\ufffd_u\u05d7\ufffd\u03ce\ufffd\ufffd\ufffdf\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffdYV\u0017M%\ufffdF|\u0015Vm\u03cak\ufffd\ufffd;\ufffd\ufffd\ufffd\/\u0017\ufffd\ufffd\ufffd\ufffd<4\ufffd7\ufffd\ufffd\ufffd\ufffd\u000b\ufffd;\ufffd\ud8fb\udc5d6wS\ufffd\ufffdo[s\ufffdU\u000b\ufffd\ufffd\u0123\ufffd_\u0014\ufffd\ufffd\ufffdQ>\ufffd\u001d\ufffd\u001f4\ufffd\u04e5\ufffd\u036a3pq\ufffd\ufffd\ufffd\ufffdJ\ufffd.1\u001cNT\u001at\ufffd:\ufffd;,\ufffd\ufffd\ufffd\u001d6\ufffd\ufffd\ufffdT\ufffd\u13d3\ufffda\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\/c\ufffd\u000f8\nh\u0000\ufffdE\t\u0000\ufffd\u0007Y\/b&\u0015v\ufffd\ufffd\u001a\u0010\ufffd\ufffd^\u0005\u0429\ufffd\ufffd\ufffd\ufffd\ufffdR\ufffd'\ufffd\ufffdK2M%\\\ufffd6\u057dsIt\ufffd_\ufffd_9\ufffd&\ufffdR^\ufffd\u001b\ufffdu\ufffd\ufffdkc\ufffd\ufffd\ufffdjv*\ufffd*U\ufffd\u001b:7\ufffd\ufffd=WQx\ufffd\ufffd\u0007\ufffd\ufffd9&\ufffd\ufffd]}\ufffdwx\ufffd\ufffd8\u0007\ufffd\ub6bc\ufffd.#\u0017A\ufffd\u05e2\u0007K\u050b\"\ufffdhu\ufffdR\ufffd\ufffd\u000b\ufffd\u0011\ufffdZ]\ufffd\ufffd\ufffd\ufffd'\ufffd\ufffde\ufffdGE\ufffd\r#\ufffd\ufffd\u0016\ufffdpLtsE\u001e\ufffd\u0618,\ufffd\f%\ufffd]&\ufffd\ufffd5\ufffd$\ufffdW\ufffd_8J\u001e\ufffd\ufffd\u001f\ufffd'\u0004\u0004\ufffd\u0005)\ufffd\ufffd\u0110\u0012\u0006*\ufffdX\ufffd\u0002D\ufffd[\ufffd\ufffd\u0011\ufffd&\u06a4)\ufffdn\ufffde\ufffd\u0778\ufffds]\u06ec\ufffd\u00e76\u001c\ufffdU\ufffd\u0013\ufffd+\ufffd\ufffdEb\u9ed7x\ufffd\ufffd\ufffdy\r\ufffd-V\ufffdH\ufffdcs\u0003\ufffd\ufffdC\ufffdk\ufffdjOGa\u0017\ufffd(\ufffd\ufffd\ufffd\ufffd\u0099[\ufffd\ufffd\ufffd\ufffdE8<\ufffdh\ufffd\ufffdE\ufffd-\ufffd\ufffd\u001f\ufffd]\ufffdB\ufffdv+\ufffdA~\ufffdX\ufffdEG\ufffd|\ufffd\t\ufffd\ufffd\ufffd\ufffdC|\ufffdU\u0013\ufffdc}\ufffdwTdmV\ufffd\ufffd\ufffd\ufffd\ufffd^a\ufffd \u0015\ufffdDS\ufffd\\\u0000ng\u0001\ufffdL\ufffdE)\ufffd\u000f\ufffd\ufffd.\ufffd9\u0019\ufffdd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e>\ufffd\ufffdJe\ufffd\ufffdT\"Ao\ufffd\ufffd\ufffdU\u0094lZ-@H\ufffd\ufffd\u07b5\ufffd\ufffdZs\ufffd\ufffdjp\ufffd\ufffd\ufffd\ufffdd\u001ekmz\ufffd\ufffdF\u0016\u0735\ufffd\ue39dX}\ufffd\ufffd|\ufffd3\ufffd\ufffd^\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd\u0006\ufffd\ufffd\u000fV\ufffd\ufffd\ufffd\ufffd\u0016^\ufffd\ufffdU\b\ufffd\u0017\ufffd\uaacac(\ufffd\ufffd\u040b%\ufffd5i\fV[0\ufffd\ufffdXZf\ufffd\u0011\ufffd\ufffd~\ufffd\u010e\ufffd~\ufffdl\"f\u04c9\ufffd\ufffdjk$\ufffd\ufffdzRTt\ufffd\u02b1\ufffd\ufffd\ufffd\ufffdN\ufffd\"\ufffdJ\ufffdB\u0011\ufffd\u0015\ufffd,\ufffd\ufffd%d*\ufffd\ufffd\f6\u000b\\\ufffd\ufffd1\ufffdZ&\ufffd\n$?\ufffd\ufffd\ufffd\u001f\u0080\ufffd\ufffd\ufffd\ufffdT\u0015\ufffdp\ufffd\ufffdK\u001a\ufffd\u0015\ufffd\ufffd\n\u00181\ufffd8\ufffd,\ufffd\ufffd\ufffd\ufffd:\ufffdu\u0000H\ufffdZ9\ufffd{\ufffd\u042c\ufffd\ufffdO8\ufffdS\ufffdd\u0562`f\u0006K2\ufffd*\ufffd\ufffd_\u0001Gz\ufffd*\ufffd4\u0153>\ufffd\u0013\ufffd\ufffd\n\u0004\ufffd\ufffd=\ufffd\ufffd\ufffd#\ufffdc\ufffd*\ufffdF\u001f\ufffd\ufffd[\ufffd;\u0004\ufffd\ufffd3T!\ufffdY9\u001f\ufffd\u001b\ufffd\f\ufffdr^\ufffdK\ufffd\ufffdKO;\ufffd\ufffd\ufffd\ufffd\"\ufffdwT$6C5\ufffd>&\u001a\ufffd\ufffdu\ufffdM#\ufffd\ufffdp\ufffd{.\"\u001b\ufffd\ufffd,\ufffd\ufffd\ufffd\u0006L\ufffd1&eQ\ufffd\ufffd\ufffd{v>0\ufffd\ufffde^\ufffd&\u0013\ufffd\u0002<\ufffd\u0002\ufffdnL\u0005\ufffd0\ufffd\ufffd;\ufffd\ufffd\ufffd\u06de\\\ufffd7\ufffdf}\ufffd{\ufffd\u001d}l\u03bd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u073d\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffdy\ufffd\ufffdM\ufffd\ufffd\ufffd\u05ec;\u05b7a\ufffdU[\ufffdkag\ufffd\u00072\ufffd\ufffdy\ufffd\/)\ufffd%\ufffd0\u000e6\ufffd\u001d\ufffd\ufffd2f\ufffdP\u0017z\ufffdD\ufffd\u0016m\ufffdESQ\ufffdc[\u0010\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd=w\ufffdhA)\ufffdNI\ufffd\ufffd\u013a\n\ufffdv\u001e\ufffdrY\ufffd=*r\ufffd\ufffd9\ufffdJ\ufffds\u000e\ufffdsLtN!h\u0448\ufffdf\ufffd\u0012\ufffd\ufffd$\ufffdpQ\ufffdr\ufffd_H\ufffd\u0002\u0002\ufffdS<\r|,C\ufffd\u0001\rd\ufffd\u0004\ufffd}\u001a[M\ufffd\ufffd\ufffd)\ufffd\ufffd;\ufffd\b\u001c\ufffd)\ufffd\u0001\\\ufffd\ufffdg\ufffd\u06fajU\ufffd\ufffdz\u0003\ufffd\ufffd\u001b7wu\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdws\u06f2M\ufffdX\ufffd\ufffd.\ufffd\ufffd\ufffd\u0005\ufffd\ufffd&\ufffd\ufffd\ufffd\ufffd\ufffd\u5579k\ufffdop\ufffd\ufffde\ufffd\ufffd\ufffd\u001c\ufffd\r\ufffd]\ufffd\ufffd-\ufffdl\ufffdv\ufffd?~I\u0777\ufffd\u0006\ufffd\ufffdn\ufffd9\ufffd\ufffdS3\ufffd+l\ufffd\ufffd\u0015^\ufffd\ufffd\ufffdsV\ufffd\ufffd\ufffdt\ufffd\ufffd\u001amb\ufffd\ufffdm4\ufffd\ufffd.\ufffd\ufffd\u023eP8\ufffd\ufffdk~j\u02e7wR\ufffdN\ufffd-\ufffd\u0002\u0709\ufffdO\ufffd\ufffd\ufffd^\ufffd\ufffd\u0011\ufffd)\ufffdW\ufffd\ufffd\u001a\ufffdx\ufffd\u0011\ufffdGpM5\ufffd\ufffd>\ufffd\ufffd\u0001\ufffd\ufffdd\ufffd\ufffd\tP\ufffd\u00199b\ufffdNd\ufffdV\ufffdJ\ufffdf\u0006\u0180b\ufffds\ufffd\u0013E\u0003`\ufffdk\u0002s\ufffd\ufffd\u0017\u000f\u0006P,\u0013\ufffdj\u0001*\ufffd\f\u0000s\ufffd]\ufffd\ufffd$^j\"\u0016\u0001\b\ufffd^\ufffd\ufffd\ufffd\ubbff\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd[\ufffdZ\ufffd\u06af\ufffd\ufffd\ufffd8Zxs\ufffd6\u00059\ufffd\ufffd]\ufffdr\ufffd\ufffd\ufffde\ufffd{k\u0013\ufffd\ufffd_\ufffdf\ufffd\ufffd9g,Zw\ufffd\ufffd\u0013\ufffd\ufffd\u0571\u0012\ufffd\u0000F\ufffd\u0003P\ufffdRl\u0004_\u0286\ufffd)\f\ufffd\u0004\ufffd\ufffd\ufffd\u0005\ufffdi\tC\u0220h`\u00161\ufffd$\ufffd\r\ufffd\ufffd\ufffdO!\ufffd\ufffd\ufffd&\u001c\ufffdp\ufffd\u0454\ufffd\ufffdj\ufffd\ufffdZ,\ufffd\u0013Y\ufffd\ufffd\ufffd4h\ufffd\u0001\ufffd\ufffd\u0011\u0007\ufffd\u0000\ufffd\ufffd\\B\u0007\ufffd\ufffd\ufffds\t\u0019\u001bj?\ufffdQ\ufffd\u0018|N\ufffd\ufffdT\ufffdH\ufffd\ufffd\/L\ufffd\ufffd\u001ae,\ufffd)\ufffd?\ufffd+\u000f\ufffd6\ufffd\ufffdf\ufffd\u01b7\ufffd~\ufffd\ufffdD\u001d\u0017\t\u0002I\ufffd\u049a\ufffd\ufffd\ufffd\u02b4f\ufffdc\ufffd\u0002\ufffdD\ufffdk%\u001a\ufffdu\ufffdD\ufffd\ufffd\ufffdA|\ufffd\ufffd}Q\ufffd;\ufffd\ufffd^\ufffd!&7K\ufffd\ufffdg\ufffd\ufffdGDH\ufffd;\ufffd'\ufffdV\u0007\ufffd\u0006SP{\"\ufffd3Dp\ufffd\ufffdD6,+,\ufffd\ufffd@?\ufffd\ufffd\ufffd\ufffdw\u0447<\u0007\ufffd\ufffd'e%\u000f\ufffdd\ufffddNb\ufffd\ufffd\t\ufffd\u000f\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffd\"\ufffd9\f\ufffd\ufffdv\ufffd%\ufffdU\f8 D\ufffd9f2\ufffdw-\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\ufffd<\ufffd\ufffd\ufffdmk\u07fc\ufffd\ufffdK\ufffd\u0019\n\ufffd\ufffdUntZ\ufffd\u001bf\ufffd\u0019s\ufffd9Y\ufb6fu\ufffdy\ufffd\ufffd\ufffd\ufffdy\ufffdp:\u001dTA\ufffd\ufffd\ufffdP\u0017\ufffd\ufffdlV\ufffdI\ufffd\u001e\ufffd\ufffd\u0019]]\ufffd\ufffd\rk\u0018R^Vf\ufffd\u0013q\ufffd\u0c6c\ufffd\ufffd\ufffd\u0016\ufffd\ufffd\u000f\ufffd\ufffd\ufffdD\ufffd\u0011\ufffd`u\ufffd\u0003\u000e(\ufffd\nSqc\ufffd@e\u0004v\ufffd$\u0016\ufffdc\ufffdo\u0001a\ufffd;\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\ufffd+\ufffd\u0000\u001d*\ufffdWJ\ufffdjoi\ufffd5\ufffd\ufffdM1\ufffd<\u0001\b\ufffd\ufffd\u0694\u0006\ufffd1]\ufffd\u0019Nd9O\f\ufffd\ufffd\ufffd%L\ufffd\ufffd\f\u0018\ufffdk\u0003%yTl\ufffdR\u03c2\u051e\ufffd6N\ufffd@\u0011\ufffd\ufffd\ufffd\u001c\ufffd\"\ufffd\ufffd\ufffd\ufffd\ufffdI\u001ah\ufffd'\ufffd\t\u001a~\ufffd\u000b\ufffd\ufffd\ufffd\u01a7&\ufffd\ufffdw\ufffd\ufffd\ufffdb`\ufffd\u0006\ufffd\u0000OJ\u0019\ufffd)Pp\ufffd\u0018NeFe\ufffd\u0015'\u06fe\ufffd\ufffduk\ufffdLC\u0318F\ufffd\b\u0004\ufffd\ufffd^N1\ufffd\ufffd}\ufffde\ufffd\u001f\ufffd\ufffd\ufffde\u0001\ufffd\ufffd\ufffd\ufffd\u0018O\u0018\ufffdym\ufffd\ufffds\ufffd\ufffdyC[\ufffdw\ufffd\ufffd\u5c13\ufffd\ufffdFM\ufffdxr\ufffdF\ufffd\u001dfKu\ufffdO_\u001f\ufffdq\ufffd\u0010d\ufffd\u0791\ufffd\n{\u0634\ufffd\ufffd5\u0003\ufffd\ufffd\ufffdN\ufffd\u0019\u0609\bz\ufffd\ufffd\u0013\ufffd\n_5\ufffd8fp\ufffd\ufffdz\ufffd^\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffdn#v\u06c9\ufffd\ufffd\ufffd\u0594y\ufffdH\ufffdQ\ufffd\u0003\ufffd\ufffd\u0010\u00149\ufffdEV \ufffdCP\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffd|48\u03bd\u0002\ufffd\ufffd\ufffd\ufffd\u0007\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\ufffdi\u06fc5%D\ufffd\f\ufffdg\u0012h\ufffd@d&]\u0001\ufffd\ufffd\ufffdcu@+\u0007\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\ufffd;\u0005!\ufffd\u0013\ufffdX\ufffd\u0004\ufffd\ufffd\u001c\ufffddo\u0003\ufffd\ufffd\ufffd\ufffdx\u064b\ufffd\/[R\/\ufffdF\ufffd\u001eB\ufffdr\u0015\ufffd\ufffdRI\ufffd\ufffd\ufffd\u0196\u001cy|z\ufffd\ufffd*e\ufffd\ufffd.\u0004\ufffd\ufffdu\ufffd-\ufffd\ufffd\u04fd\ufffdG_\ufffd0'\u001d\ufffd\u032d\ufffd\ufffd\ufffdKv\ufffdEOl\ufffd6f\ufffd\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffd?}\u00de\ufffd;\/\\\ufffd\ufffd\ufffdVz\ufffd\ufffd<\ufffd\ufffd\u03a1\ufffd>S\ufffd\u001c\ufffdt\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\\ZY\ufffdi\ufffd\ufffdH\ufffd\ufffd7\u0005]\ufffdjw\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\ufffdY\ufffdRA\ufffd\ufffd\u0013Y\ufffd!U\u07a0o \rGE=\ufffd\u0000\ufffd\ufffd\ufffd\ufffd\t>\"\ufffdNd\u00057UI%G\ufffdH\u0007\u0019\ufffd\u5c99LQ\ufffd\ufffd\ufffd(Y\ufffd?\ufffd\ufffd\ufffd\ufffd\u03b4p\ufffd`\b\ufffd*\ufffd\ufffd\n\u0001\ufffd\ufffd\u0005q\ufffd\u000f\ufffd\ufffd\rG8e\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd\u0372\ufffdZt\u0018bD\ufffd\u0208\ufffd\ufffd\ufffd\ufffdj\t\ufffd\ufffd\ufffdf\ufffd\ufffd\u001f\ufffd\ufffdcN\ufffd\u000f\ufffdx\u0015T\ufffd\ufffd\u001d\ufffdf\ufffd\ufffd\ufffdz\ufffd\ufffdU:5\u0014\ufffd\b\ufffd`^\ufffd\ufffdH5\ufffd\ufffd>\ufffdp\ufffd\ufffd\u06df}\ufffd\ufffd|\ufffd\ufffd@\ufffdJ\ufffd\ufffd\u0012\ufffdS\u000e\ufffd\u05a6\ufffd\ufffdZ\ufffd\ufffd\ufffd0\ufffd\ufffdvG9a\u0019\ufffd\ufffd\ufffdXbd\ufffd\ufffd\ufffd\u001cfL\u0004\ufffdG\ufffd\ufffdr3\ufffd>xf\u0013\u051d\ufffd \ufffd\u0001j;\ufffd r\u0000r\ufffdZ\ufffd\ufffd\ufffd\u0014\ufffdB\ufffdy\f\ufffd1\ufffd\u0273%\u04e8\u0004^\u0014\ufffd\ufffdDz\ufffd\u0012\"\ufffd\ufffd\ufffdp\ufffd\ufffd\u0002\ufffdM\u01a7\u001b\ufffd\ufffdK\ufffd\ufffd>\ufffd\ufffd\ufffdN\ufffd^\ufffd]\u0439p6\ufffd\ufffd\ufffd\ufffd\ufffd>\ufffddo\ufffda\u0006jL^\u0002_\ua80c>o\ufffd\ufffd\u0449\ufffdz\ufffdE\u0623R\ufffd*\ufffd\ufffdz\r\ufffd;\ufffd!6\u0112\u001e\u0000+\ufffd\ufffd\u07c4v\ufffdI\b{L\f\ufffd,N\ufffd*\u001b6\ufffd<\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\u061c\ufffdD\ufffdl\ufffdO\ufffd\ufffd\ufffdr#\ufffd\ufffd(\ufffdV\ufffd(\ufffd\u0002&8n\ufffd\u000e\ufffdM\ufffdMpgd\ufffd\ufffd\ufffd?\ufffd\ufffd<\ufffd}\ufffd\u0005@n\ufffd!*\ufffdT\ufffd\ufffd\ufffd`\ufffd\ufffd2\ufffdT\ufffd\u0019\ufffd\ufffdP\ufffdy\u016c\ufffdu\ufffd\ufffd\ufffd\u0010\ufffd\u000f-\ufffd\ufffd\u0645'\ufffd\ufffdoS\/\ufffd\ufffd\ufffd\ufffdd3\ufffdVl\ufffd\ufffd\ufffd7\ufffd\ufffd6a\ufffd\ufffdk\ufffd\u000b;\ufffd-\ufffdh\ufffd\ufffd=\u000f|\ufffdi\ufffd\ufffd\ufffd\\\ufffd\ufffd@SSu\ufffd]\u02ee\ufffd\ufffd\ufffde{\ufffdr\ufffdF\ufffdm\ufffd}\u0003d\ufffd\ufffd\ufffdD\ufffd46x)[\ufffd:-N\ufffd\ufffdI4Ht\ufffdO\ufffd\u745f\ufffd\ufffd~\ufffdGY\/\ufffd{\ufffd\ufffd6\ufffd\u0019k\ufffd\ufffd*:\ufffd'\ufffdZ\ufffdC\"ExP\ufffd\t9.OM\ufffd\ufffd\u0012u]N\ufffd\u00189\ufffdq\ufffdq\ufffd;K\ufffd.\ufffdq\ufffd\ufffd\u000fL\ufffd\ufffd\u001aSf\u0001\u000e\ufffdRIUR%@|\ufffd\u0018|J1?\ufffd\ufffdiGO\ufffd\ruz\u06da}\ufffd\ufffd\ufffdYQ\ufffd\u0156\u07fb\ufffd\u07a8\u0496\u0011\ufffd7\ufffd*\ufffd\ufffd\u00be\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\ufffd\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxk!U\ufffd\ufffd \ufffd\ufffd\u00118\ufffd\u0000zm\u0005t\ufffd\ufffd\ufffd\u0007M\ufffd\ufffdD\ufffdjx\ufffd\ufffd\ufffd&\ufffdr\ufffd0SM\ufffd\u068a)\ufffd\u0007a\ufffd\u0013Yp\u001fe\ufffd'\u001b\u001f\u0000p\ufffd\ufffdB\u0006}\nv\ufffd\ufffd\n\ufffd\u0718:\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u07a2kBA?5\ufffd\ufffd\u0011\ufffd\ufffdw\ufffd\ufffd(\ufffd\u0011\u000f\ufffd\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\ufffdt\u00ab\u001f\u015e\ufffd\ufffd+\ufffdk\u052e\ufffd\ufffd\u8c2c\ufffdM\ufffd\ufffd\ufffdypH\ufffdas \ufffd}M\ufffd\ufffd\u0013m%k\ufffd\u001c\ufffdu\u0003Uux3\u0018kQ\ufffd\ufffdR\ufffdg\ufffd\ufffdY?P\u00cc\ufffdK\u0528Rh\ufffdD\u035a\ufffd\ufffd`%\ufffd\ufffd\ufffdLj3V\u001a\ufffdr9<Y\ufffd\u0001E\u001d8\ufffd\u0002\f\ufffd\ufffdV\u00128\ufffdhH\u001a\ufffd\/\ufffd\ufffd!c\ufffd\u0000\ufffd1\ufffd\ufffd\ufffdF\ufffdl\u001e\ufffdX\ufffdUh\ufffd\ufffd\ufffd\ufffd\ufffd`\ufffd\u0000\ufffd\ufffd<t\ufffd\u001f\u04d3\ufffd\ufffd\ufffds\u0013O0\ufffdIW\ufffd\ufffd\ufffd\u0007X\ufffd\u000f\ufffd\u0018x\u0001\u0016\ufffd\ufffd\ufffd\ufffd\ufffd\\\u0004s\ufffd\ufffd\ufffdKs\ufffd\u00130\u03ea\ufffd\ufffd\u0015\ufffd\n\u0005D\ufffd\ufffdY\ufffd*\u0014A\ufffd\u001e\u0014Z\ufffdM\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\u001c\ufffd\ufffd\ufffdJ\u0247u\ufffd\ufffdv\ufffd\u001eM\ufffd\u0529\ufffd\u0016\ufffd\u0014\ufffd5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdg\ufffdAc\ufffd\b\u0004\u0000@P\ufffd\ufffdfi\ufffd\ufffd\ufffd\ufffd\ufffdS\ufffdUF\ufffdx\ufffdko<\ufffd\u0455\ufffd7=\ufffd\ufffd\ufffdE*k\b\u0016\ufffd2\ufffd\ufffd\ufffdr\ufffd\ufffdm\ufffd\ufffdY\\\ufffd\ufffd\ufffd\ufffd\u000b?\ufffd\u0577\ufffd\ufffdo+\ufffd\ufffd\u0019\ufffd;3\ufffd\nL\ufffd\ufffd\ufffdK\ufffd\u925a\u001faS^&\b\ufffd|\u0015<r\u0003\ufffd#\ufffd\ufffd\ufffd\ufffd@:\ufffd\ufffdU{\ufffd\ufffd\ufffd\ufffdfk\ufffd\ufffd\ufffd\ufffdX\ufffdQ\ufffd\\\\Y\ufffd1WTV\ufffdGY\ufffdVV\ufffdjd\/}\ufffd\ufffdeK\ufffd\u001ed&!\nb\ufffd\ufffd\u2a16Irg\u0013\ufffd;K\ufffd\ufffd\u063b\ufffd\ufffd\ufffd\ufffd\u0001?\ufffd?\ufffd\u001d\ufffdes\u0015\ufffd~\u0494\u0011jD\ufffdP-\ufffdJf\u0472F\ufffd\u05c03\ufffd\ufffd\ufffd#s\u000eX}\u0015\ufffdNCa\ufffd\ufffdQ\ufffd\ufffd3\u0014\ufffd\ufffd%b\ufffd\u0011>\ufffd{<\u0006|\u0015sG\u07caZ\ufffd\ufffd\ufffd\ufffd\ufffd\u0007\u000f\ufffd\n\u07ca\ufffdyL\ufffd4\ufffde`0\ufffd\ufffdCi\u0016\ufffd\u0016\ufffd5\ufffd\ufffdo.\ufffd\ufffd3\u0019*t\ufffd\ufffd^3\ufffd\ufffd-5e^\ufffd\u0002\ufffd\ufffdD\u07a8\ufffdD\ufffd\ufffd\ufffd_\ufffd'\u0006\/\u0000\ufffdW\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd\n\ufffd\ufffd\ufffdF\ufffd0\u0018\u0019\r\u000b\ufffd\u0011\ufffd\ufffd\ufffd\ufffdS\ufffdx2\t\ufffd\u0007\u0000SV\ufffd\ufffd\u0017-\ufffdh$\ufffd\u0002I\ufffd\ufffdg\u0012\u0158R\ufffdc\u001b>O]\ufffd\u0019b\u0004\ufffd'\ufffd\ufffd\ufffd$\u001a}\u000e\ufffd\ufffd\ufffdS\ufffd\u0014v-S\ufffdC5\u04e2\ufffd]B\ufffd\ufffd\ufffdC\ufffd\ufffd\ufffdIEW\ufffdU\ufffd<\ufffd\ufffda\ufffd\u0013\ufffdt\ufffd\ufffd1\ufffd\ufffd\ufffd\ufffd o?\ufffd>Y\ufffd\ufffd7\u0016^-\ufffd\ufffd\ufffdc\ufffdZy\ufffdKW\ufffdf\ufffd\ufffd\ufffd\ufffd\u0006x\ufffd\ufffd\ufffdY\u0006\ufffd\u0013\ufffdu\ufffd\u001d\ufffd2T'V0\u0012\ufffd!\ufffdd\u0013!\ufffd\u0320\ufffdv+\ufffd\ufffd!\f\ufffdb\ufffd\ufffd\u0004g\ufffdL\u071e@\u0010fk?\ufffd\u0012\u000e\ufffd\ufffd0\u0011\ufffdf\ufffd0\ufffd\ufffdNf\ufffd\u00851y\ufffd\ufffd\u001a\ufffd\ufffd\u0018\ufffdw\ufffd9j7\ufffd3\ufffd\ufffd\u001dw\ufffd,\ufffd\u001aI\ufffd\ufffd}\nB\u0018\u0018\ufffd\u000eT\u001c\u0003\ufffd\u04ee\ufffd\ufffd\u000b\ufffd\ufffd\ufffd6dGKgp+J\ufffd\ufffd\ufffdUY\ufffdX\u0005\u01d2\ufffd\\\ufffd\ufffd\ufffd\ufffdj\b\ufffd\u001e\u0017\u056a\"\ufffd\u0017\ufffdS'P\ufffd9\ufffd\u001c\ufffdo\ufffd\u0010\ufffd#\u001b\u0017\u000f\ufffdL\ufffd8\u001e5\ufffd\ufffdD6\u0729=Oa\r\ufffd~q\/\ufffd\ufffd>\ufffd`\ufffdg\u03ec\ufffd\ufffdS\u001d\ufffd\u0005\u001b\ufffd\ufffd\ufffd\u02c9\ufffd``N\ufffds\ufffd\ufffd\ufffd&\u001e[\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd}'^\ufffd\ufffd\u04cb\u05dc\ufffd;Rx\ufffd\ufffd\u0017\ufffdtb\u0162\u038a\u06adGq\ufffd\ufffd\ufffd\u000b\ufffd\ufffdy\ufffd\ufffd\ufffd\u001f\/\u0001\ufffd\ufffda\ufffdW`}\ufffdh\ufffd\ufffd:7\ufffdB\ufffdr\ufffdz\ufffd\ufffdY\ufffdp\ufffd\ufffd\ufffd\u0010L$*\ufffd3Y\ufffd\ufffd\ufffd\u000f\u0002\ufffd \ufffdr,\ufffd\ufffd\r\u0013E9{R\u00066\ufffd\ufffdC^\ufffd\ufffd\ufffdg\ufffd\u0004tQ\ufffd1Q\ufffdB8\ufffdT1?4G\u0007W\ufffd\/}\u04fc~ \u025b\ufffd\u0003\ufffd\ufffdR\ufffd\u001dN2\ufffd\ufffd+|\ufffd\ufffd@\ufffd\u0188\ufffd\/W\ufffd\ufffds{\ufffd{\u0012\ufffdJ\ufffd\ufffd\u07f4\u0006G\ufffd=\u000ek\ufffd\u000f{\ufffdb\b\u0794y\ufffd\ufffd\ufffd\u0006VQe\ufffd\ufffdB\ufffd\ufffd1\ufffd`\ufffd\ufffdV\t\u001a\ufffd\ufffdL\u0246\ufffd!\u0012zDT\ufffd]\u0006\ufffd\ufffd\u001a\ufffdR\ufffd\ufffd\ufffd2\u0011\ufffdqQ^%\ufffd\ufffd\ufffd\ufffd{\ufffd5\u4329\ufffdh\u0002\ufffda\ufffdPF\ufffd\ufffd\u0314\u0015\ufffd\ufffd\ufffd\ufffd\ufffd\u0007\ufffd\ufffd\ufffd^z\ufffd:\ufffda\ufffd\u0004\ufffd\u0015]9@8\ufffdf\u0001\ufffd\ufffd\ufffdj\u01ce\ufffd\ufffdC\ufffd\ufffd\ufffd=\ufffd\ufffd*\ufffd\ufffd\ufffd\u020b\ufffd\u000f\ufffd\ufffd\ufffd-O,\ufffd\u000e\ufffd\u046eg\u0012\ufffd\u06c6\ufffd\ufffd\ufffd#\ufffd\ufffdo|\ufffd\u0417\ufffd^\u05b5tt\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdo?~[\ufffdc)\ufffd\ufffd\u000f\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffd'\ufffd\/K\ufffd\ufffd\ufffdue\u0001\ufffd\f\u001f(3\u001e\u0010\ufffdN\ufffd\ufffd\u07a9\ufffd\u0005\ufffdA8a>.\u0006\ufffd\ufffd\ufffd\u0012^\ufffd\ufffd\u06f6\ufffd\u0006\ufffd\ufffd\ufffdE\ufffd\u0013\ufffd\ufffd\u0004\ufffd$\ufffd\ufffd,\u001c\r\u001d\u0017\ufffd)\u0019\ufffd72^\u0005\ufffd*\u001d\ufffdM\ufffd\ufffd\ufffd\u001d \ufffd\ufffdk\u0019\ufffd.pM\ufffd~\ufffd{\ufffd\ufffd\ufffdY\ufffd\u0003\ufffd\ufffd\u0007\ufffd\ufffd7\ufffd$g\ufffd-\rz:I\ufffd\ufffd\ufffd\ufffd(\/\ufffd\ufffd(\ufffd\ufffdA\u00030\ufffd\ufffd\ufffd\ufffd\ufffdi\ufffdX\ufffdyh\ufffd\"f\ufffd\u0007^}p\ufffdG\u000b\u001a\u001e\/\ufffd\u00a2\ufffdso\u0796w\ufffd\ufffd\ufffd\ufffd,\ufffdM\ufffd\ufffdX\ufffdo\ufffdjS\u06ee\ufffdz\ufffd\ufffd\ufffd\n]\ufffd\ufffdkV\u001c\ufffd\ufffd%\ufffd\ufffd\ufffd?\ufffd<\ufffdx\ufffd\ufffdf\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\u0135\ufffd\u0014U\ufffd].\ufffdfxC\ufffd\t\ufffd\ufffd\ufffd%\u06b7\ufffd\reF\ufffd\ufffd\ufffd\ufffd,\ufffdTe\ufffd*\ufffd\u0010\ufffd\u00a8P\ufffd\ufffd\u0001\ufffd\u05cc\ufffd\u0019\ufffd\ufffd\ufffds\u0011\u0007\ufffdxLT\ufffd\ufffdM\ufffd4\ufffd\ufffd\ufffd \ufffdI\ufffd\u0000\ufffd\ufffd*\ufffd\ufffd\ufffd\u0006}\u02c2\nj\t\ufffd\ufffd\ufffdm!\u001a\ufffd\u00a0x)\u001a\u0005\ufffd\ufffd\ufffdpN\ufffdJyS8Yz\u0013B%\ufffd3\u001c*\ufffd4T\ufffd\u00120\ufffd_'\ufffd\ufffd\u0013\ufffd\u06d9\u07ff\ufffd\u0015w\ufffdZ\ufffd\ufffdmy\u05ed\ufffd\ufffd\ufffd\u0005\ufffdv\ufffd\ufffdg7k\nW\ufffd\u054b\ufffdG\u0593\ufffdK_\ufffd\u0005b?\ufffd5\ufffd6Q\u0003\ufffd\ufffdr\ufffd~u\ufffd\ufffd\u0004\u0015i\fo\ufffd\u0272\ro\r8\u0011Z\ufffd\ufffd\ufffds\ufffd\ufffdHf`\ufffd\ufffd\ufffdk\u0007b\ufffd\ub1fa\ufffd\u000e\ufffd_;\ufffd\ufffd\u0013\ufffdg7H\nendstream\nendobj\n40 0 obj\n9167\nendobj\n11 0 obj\n<< \/Type \/Font \/Subtype \/TrueType \/BaseFont \/RNBTQW+Cambria \/FontDescriptor\n41 0 R \/ToUnicode 42 0 R \/FirstChar 33 \/LastChar 107 \/Widths [ 220 324 504\n488 558 611 414 552 494 488 537 547 531 338 504 303 563 832 556 278 271 568\n205 648 430 552 441 307 554 554 554 554 554 593 555 264 205 921 815 687 382\n490 382 774 483 611 623 237 524 393 496 621 264 554 554 332 537 547 375 371\n375 350 350 752 575 629 455 538 554 554 554 221 221 266 681 ] >>\nendobj\n42 0 obj\n<< \/Length 43 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001]\ufffd\u02ce\ufffd@\u0010E\ufffd|E\/'\ufffd\ufffd\ufffd@\u3c44\ufffd\ufffd\ufffdF\ufffd\"\u000f\ufffd\ufffd\u0007`h<H1 \ufffd\u0017\ufffd\ufffd\ufffd[v&\ufffd,.\u04a5\ufffd\ufffd\ufffdT?V\u03fbO\ufffd\ufffd_\ufffd\ufffd\ufffd<6\ufffd\ufffd\ufffd\ufffd\u001f\ufffd9\ufffd\ufffd\ufffd\ufffdDw\ufffd\ufffd~H\u05a9k\ufffdf\ufffd;\ufffd\u05dc\ufffd)Y\ufffd\ufffd\ufffd\ufffd\ufffdx\ufffd\r\ufffd\ufffd\ufffd2qn\ufffd\ufffd\ufffd\ufffd2_\ufffd\ufffd\ufffdv<\ufffd\u000f\ufffd\ufffdun\ufffd\ufffd\u000fG\ufffd\ufffd\ufffdyo\ufffd\ufffdi\ufffd\u0015OqX\ufffdO\ufffd\u02b5\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffd>E\ufffd\ufffd\ufffd\ufffd]K\ufffd_\ufffd\ufffdd\ufffd\u001d\ufffd\ufffd:EGEd\ufffdo%5c\u001b\ufffdS\ufffd\u0139\u001e\ufffd1)\ufffd\ufffd\u0297\ufffd*\ufffdC\ufffd.tO8t\ufffdk='e\ufffd\ufffd\u0018\ucdceO\ufffd'\ufffd|jo\ufffd\ufffd1\ufffd2\u00932R\r\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0015t\ufffd\ue564iUJ\ufffd\ufffd\u06ca\ufffd2,\ufffd~S\ufffd\ufffdX\ufffd}\ufffd\ufffd\rX\ufffd\ufffd\ufffd\u0005\u0016\ufffd\ufffd\ufffdn\ufffd\ufffd\\\ufffd\u0014\ufffdZ1\ufffd\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\ufffd\ufffdX\ufffd\ufffd\ufffd\u0001\ufffd\ufffd\ufffdQ\ufffd\ufffd\"\ufffd6U\ufffdE\ufffdN\u0448E,\ufffd\ufffdvX\ufffd\u0015BFo%\u0006\u000b!\ufffd\ufffd\u00123g\ufffd\ufffdJD[YX%r\ufffdS\ufffd\ufffd*\u0011\ufffd\ufffd`\ufffdn\ufffd\ufffd*\ufffdU\ufffd>\ufffd`X3\ufffdT\ufffd\ufffdJDE\ufffd\ufffd*1\ufffd\ufffd\u000bkv\ufffd}R\u0014V\ufffd\ufffd,\nkf\ufffdy\ufffd(\ufffd\ufffd\ufffd\ufffd`a\ufffd\ufffd63\ufffd\ufffd\ufffd\u0002\ufffd\ufffd9\ufffd\u0012Q\ufffdQ\u000e\ufffd\ufffd\ufffd\ufffd\uc309\ufffd\ufffd+z`b]\ufffd\ufffd\ufffd\ufffdK1Da\ufffd8?\ufffd\ufffd\u001cV\ufffd\\mY\u000e\ufffdD'\u057a\u001cV\t+\"\ufffd\ufffd\ufffd\\\ufffd\ufffd\u00a2\ufffd\ufffde9\ufffd\u0012V\ufffde\ufffdK&\ufffdnlf\ufffdr\u0003d~\ufffd\ufffdI\ufffd,\"\ufffdm\"W\ufffd\u0000\ufffd\u0004\ufffdj\u000e\u0000JD\u054d\u0000\ufffdD\ufffd\ufffd\u0007\u0684%\ufffdu\ufffds\ufffd\u04f7ks\ufffd\blZ)\ufffd7mA\ufffd[\ufffd\u06a2p\ufffd\u0004Y\ufffd-\u0000+Q\ufffd\ufffdX\u0000T\u0002\ufffd\n\u00064 .\ufffd\u000eF\u0000V\ufffd\u0006\ufffd\"\ufffd-\u0011U\u001b\u0003\ufffd\u0012Q\u00c1\ufffda\ufffd\ufffd\u0016\ufffdK\ufffd\ufffda\ufffdXW'\ufffd\ufffda\ufffd*\ufffd\ufffdd\ufffd\f!\ufffd\ufffd&\ufffd2\u000b\u001cw\ufffd\\\ufffd0Q\ufffd$\ufffdv\ufffdKi\ufffdj\ufffd\n6\ufffd+\ufffd\"\ufffd\u0002W\u0018 _\ufffd\ufffdI\ufffd\ufffd9\ufffd\ufffd\ufffdz\ufffd\ufffd\uefbd\ufffd\ufffde\ufffdy\"\ufffdq\ufffd\ufffdS\ufffdb?\u0137\ufffd{\u001a'M`\ufffd\r\ufffdtx\ufffd\nendstream\nendobj\n43 0 obj\n701\nendobj\n41 0 obj\n<< \/Type \/FontDescriptor \/FontName \/RNBTQW+Cambria \/Flags 4 \/FontBBox [-1475 -2463 2867 3117]\n\/ItalicAngle 0 \/Ascent 950 \/Descent -222 \/CapHeight 667 \/StemV 0 \/XHeight\n467 \/AvgWidth 615 \/MaxWidth 2919 \/FontFile2 44 0 R >>\nendobj\n44 0 obj\n<< \/Length 45 0 R \/Length1 26112 \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffd\ufffdy`TE\ufffd7\\uN\ufffd\ufffd\ufffd\ufffd\ufffdY\ufffd\ufffd\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffd\u0013\u0002a\t!@\u0012\ufffd@\u001a\f\ufffd,\ufffd\b*\u0012\ufffd\b\u0006D\ufffd\"\ufffd\ufffd\ufffd\ufffd2\ufffd\ufffd\\\u001ap\ufffd\ufffd,\ufffd\ufffd:\ufffd\u0015GG\ufffd;\ufffdY\ufffdQg\u001c\u0015E\ufffdl(\u9f3f:\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\ufffd\ufffd\ufffd\ufffd\ufffd\u4a6aS\ufffdN\ufffdz\ufffdz\ufffd\ufffd^w\ufffd\ufffd%DM\ufffd\bO\ufffd\u0006\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffdG\ufffd\ufffd\ufffd\ufffd\ufffdu\ufffd\ufffdi#!\ufffdG\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdN\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffd&\ufffd\u000b? d\ufffd\ufffd\u0007\ufffd,\ufffd%\ufffd\ufffdE\ufffdU\ufffd\ufffdH^\ufffd\n\ufffd\ufffd\ufffd\u05edC?\ufffd\ufffd_A\b-[\ufffdj u\ufffdp\n*\ufffd^\ufffdhc\ufffd\ufffd\ufffdw\ufffdv\ufffd\\t\ufffd\u0012\u059a\ufffd%\ufffd q\ufffd\ufffd~I\ufffd>\ufffd!\u0118{\ufffd\ufffdf\u000eky\ufffd\ufffd\ufffd+p5\ufffd\ufffd\"%d\u000f\ufffd\u0011\ufffd\u0018H\ufffd`\ufffd\u02b9\ufffd\\\ufffdK\ufffd\ufffd\ufffdv\u0015K\ufffd\ufffd\u0017\ufffd##N\ufffd\ufffd\ufffd\ufffd?=X\ufffd\n\/\ufffdgm\ufffdk\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\ufffdR\ufffd\u001e\ufffd\u001f\ufffd+\u07db\ufffd%\ufffd\ufffd\ufffd\u05ca\ufffd\ufffd\ufffd\ufffd\u011eR7\ufffdl\ufffdI\u2889'\ufffdv:\ufffdu\ufffd~\ufffd.\\H\u0017\ufffd\ufffd.\ufffd#]\ufffd{\ufffdp>]\ufffd4]\ufffd$]8\ufffd.|\ufffd.|\ufffd.\ufffd)]x?]x\/]x7]\ufffdc\ufffdp6]x']x#]\ufffdU\ufffd\ufffdz\ufffd\ufffd\ufffdt\ufffd\ufffdt\ufffdt\ufffd\ufffdJ\ufffd\ufffd\/]\ufffd;]\u0615.\ufffd\ufffd\u000b\ufffd\u04c5m\ufffd\ufffd\u001d\ufffd\ufffd\ufffdt\ufffd\/]\ufffdM\u0017z\u0485\ufffdt\ufffd3]\ufffd\ufffd.t\ufffd\u000b\ufffd\u04c5\ufffdt\ufffd,]\b\ufffd\u000b%\ufffdBq\ufffd\ufffdL\u0017\ufffd\ufffdT\u0018\u00179\ufffdW1\ufffd\\L?\u0013\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd\u0013\u04cf\ufffd\ufffdC1}_L\ufffd\u0013\ufffdw\ufffd\ufffd\ufffd\ufffd\ufffdAL\ufffd\u0012\ufffd\u07c8\ufffd\u001bbzZL_\u0011\u04d7\ufffd\ufffd%1}QL_\u0010\ufffd\ufffd\ufffd\ufffdY1=%\ufffdO\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\u0015\ufffd#bz@L\ufffd\ufffd\ufffd>1\ufffd%\ufffdw\ufffd\ufffdN1\ufffd!\ufffd#bz\ufffd\ufffd\u000e\ufffd\ufffd\ufffdb\ufffd\u0015\ufffd\ufffd0\ufffd5$^m\u0011\ufffd[\ufffdt\ufffd\ufffd.\u0016\ufffd\u0019b\ufffd)\ufffd\ufffdb\ufffd,\ufffd:\ufffd\ufffd\u0006$M$\u0017\u0010\u00044\u0002\ufffd\u0003\u0016\u0002V\u0001\ufffd\u0000\ufffd\u0006<\u00068\u0002x\u001a\ufffdK\ufffd\ufffd,\ufffd?\ufffd*\r\ufffd%\ufffd\u0000\ufffd\u0001\ufffdS\ufffd\ufffd\u0000\ufffd\u0000\ufffd\u0003\u0014\ufffd5\ufffd^\ufffd\ufffd5\ufffd^\ufffd\ufffd5\ufffd^\ufffd\ufffd5\ufffd^\ufffd\ufffd5\ufffd^\ufffdD\ufffd1T\ufffdu\u0005ZW\ufffdu\u0005ZW\ufffdu\u0005ZW\u00109\ufffd\ufffd!o\u0003>\u0005\ufffdD\ufffd4\u0017\ufffd\bX\bxL\ufffd\u0011<\ufffd\ufffd\ufffd\ufffdSc\u0729\ufffd\ufffd\ufffd\ufffd\u0019;?&If\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019??.Y\u0764\ufffdx1\ufffdSH_\u0003\ufffd\u00038\/\ufffd\n\u001a\ufffd;O\ufffd\ufffd\u0013\u0013}\ufffdQ\ufffdF\ufffdnf\ufffd\ufffd\u001e\ufffd\ufffd#}\u0007\ufffd\ufffd*v-Q<I\ufffd>\ufffdorJ\ufffd\ufffd\f\ufffd\u0016\ufffd&\ufffd}\ufffd\ufffdr\ufffd\ufffd \ufffd\u00110\u001d\ufffd\u0010 #o#\ufffd\u00140\ufffd=\"\ufffd\ufffd\ufffd~\ufffdj\ufffdz\ufffd\ufffdHn\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffdBy\ufffd\rH\ufffd[\ufffdd\ufffd*$\u05ee\ufffd:\ufffd]\ufffd\ufffd\ufffd\ufffdu\ufffd3,Y\ufffd,G\ufffdt\u0019\ufffd%\ufffd\u0019\ufffd%\ufffd\ufffdk2\u001dk\ufffd7\ufffd8\u071b\u0000\ufffd\ufffd\u0010w\/y\b\ufffd\ufffd,\ufffd\u016c\ufffd=\ufffd\ufffd\ufffd\u001e&\u001a\ufffd.n\u0017w7\ufffd\u0011n\u0007\ufffd\ufffdh\ufffd\ufffd{\ufffd\ufffd\u0000\u0000%\ufffd\ufffd\u0001~\u0002\ufffd-@\ufffd\u001d@\ufffdCD\ufffd=\ufffdg\u001fG\ufffd\b\ufffd}\ufffdh\ufffd?\ufffdv\u001d\ufffd\ufffd\u051eDa\/+4er\ufffdq\ufffd\ufffd\ufffd\u0000w+w3\ufffd\"\ufffd\ufffd\ufffd\ufffdH\ufffdoN\ufffd7rs\ufffd\ufffd\u001b\ufffdk\ufffd\ufffd\u001an\ufffd1i\ufffdu\ufffd[}\ufffd\ufffd\ufffd\u0019w=\ufffd\ufffd+Q\/a\ufffds\ufffd\ufffd\u00b5\u02a6&n\rq\u0000\u000e\ufffd>*\ufffdf\u0019\ufffd\ufffdB\ufffd\u0003\u0000\ufffd\ufffd\ufffdm\u0002E\u0003\ufffd\u0010r\ufffd\ufffd\u0016\ufffdl\u001c7\ufffd\ufffdM\ufffdl\ufffd\ufffdF\ufffd\ufffdz\u0001n\u0003rv}*_\ufffd\u0297\ufffd\u06adC\ufffd\u06adM\u5af8\ufffd\ufffd\ufffd\u00a6N\\Sr\u0007K\ufffd\ufffd\ufffd\u0002n!H8\ufffd\ufffd\ufffdf\"\ufffd\ufffdM\ufffd:AJ57\r0\ufffd\ufffd\ufffd\ufffdd\u0002\u02bd(o\u0000\ufffd\ufffd\ufffd\u00f8\ufffd!\ufffd\ufffdB\ufffd\ufffd\ufffdkA\ufffd\u0001\ufffd\ufffd\u0004y?zZ\ufffd|\u0019\ufffdp\u0003\ufffd~\ufffd|\ufffd\f\ufffd4@\ufffd\ufffd\ufffdTk\ufffd`T\ufffd\u0013R\ufffd\r\ufffdfX\ufffdsFP\ufffd\ufffd\u0242zJ\u0690\ufffd\u0000\ufffd\t\ufffd\/\ufffd\ufffdZ\ufffdJ\u0569\ufffdn\ufffd\ufffd3*\ufffd\ufffd\ufffd\ufffd\ufffdMV.\ufffd\ufffdQ\ufffd\ufffdK\ufffd36\u0016\ufffd\ufffd\u0003\ufffd\ufffd\b\u000fJ\u0003\u0013\ufffd\ufffdqM\ufffd\u0014\ufffd\u0001\u0000\u0007t\u00e4\u0003\u0010\ufffd\ufffd:\ufffd\ufffdk\ufffd\f\u2adb\ufffd\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\u05e5\ufffdkRyU*\ufffdL\ufffdT^\ufffd\ufffd=\u0017J\ufffde\ufffd\ufffd\ufffdT^\ufffd\u0019\ufffd\ufffdH\ufffdJ\\S\ufffd\ufffd\ufffd$W\u000e\ufffdm\ufffd\ufffds\ufffd)jN\ufffdi\ufffd+8%\ufffd\u0012\ufffd\ufffd\u0000s\ufffd \ufffd\r\ufffdU\ufffd9j0G\r\ufffd\ufffd\ufffd\u001c\u0005\ufffdc\u0003s\u0014\ufffd\ufffd\ufffd\u0013^0#\u001b=\ufffd\"\ufffdDOY\ufffd=`D6 \u0013`\u0003\ufffd\u0001\n\u0012\ufffd3\ufffdT\ufffd\u0019\ufffd\ufffd\ufffdg\ufffdy\ufffd)tV*\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\t\ufffd\u0016\ufffd\ufffdI\ufffd\ufffd\ufffdw\u0018\ufffd\ufffdl*\ufffd~$^\ufffd\ufffd\ufffd\ufffd\ufffd~\u0004Z\u000b'\ufffd)UP\ufffdSTr,\u0014J\u0015\ufffd4'\ufffdO=\ufffd\ufffd\\W-Z\ufffd\u01ca\ufffdkLy\ufffd\u001d\u001d\ufffd\ufffd\ufffdd\ufffd\ufffdrr<\ufffd\ufffd\ufffd\ufffdteV\u05a5J\ufffd3]\ufffd\ufffd\ufffd*\r\ufffd\u0369\ufffd\ufffdT\ufffd\ufffdQz\\\ufffd\u0701\u0012E\ufffd\ufffd\u0524B%!\ufffdI.\ufffdb9FF\ufffdu\ufffd\u0012GF\ufffd{<lD\ufffdG\ufffd9\ufffd\ufffd\u0007N\ufffd8\ufffd?\ufffd{kg\ufffd\ufffd\n\ufffdL\ufffd\u001bi`\u0099\ufffd3\ufffd\u0010Wkk\ufffd9%\r\u0000\u000f\ufffd\ufffd1\ufffd\ufffdVx$XV\ufffd\ufffd^\u001axx\ufffd4\ufffdwT\u0012\ufffd\ufffdC\ufffd\ufffdC\ufffd\ufffd\u0001\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffd|`\ufffd\u80e3\ufffdr\ufffd>\ufffd\ufffd\u0001\ufffd5\ufffd\u0563\ufffd\ufffdON\ufffd\ufffd\ufffd\ufffd\ufffd\t\ufffd\u0012\ufffd\u80fbi\ufffd\ufffdQ\ufffd\ufffdn.`\ufffd\ufffd+\ufffd\ufffd\ufffd\ufffd\ufffd\u074dB\ufffd\ufffd\ufffd?\ufffdU\ufffd\u0018\ufffdE\ufffd\ufffd\u001d;-\t\ufffd\ufffd\ufffdc\ufffd\ufffd\ufffd\ufffd\ufffdi\u001eY1\ufffd\ufffd)\ufffdB'\ufffdm&\u001f\ufffd\"\r\ufffd\ufffdsi7\ufffdJ\ufffd\ufffd\ufffd@\ufffd\ufffdp\ufffd\u000e\ufffd]d\ufffd6\ufffd\ufffdw\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffd]\ufffdY\ufffd\ufffd\u01c7\ufffd\ufffd\ufffd&\r\ufffdG(}\ufffd\ufffd\"\ufffd\ufffd\u0015r\ufffd!}\ufffd\ufffdrL\ufffd8+?V^^\u02f2#\u0018\ufffd\ufffd\ufffd\ufffd\ufffd\u0011\ufffd*\u0018g\u03ec}\ufffde>\ufffd\ud9ed\udc80\ufffd;\ufffdQ\ufffd\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\u0000j\ufffd\ufffd\u0017\ufffd\ufffd,\u0017<O\ufffd\ufffdj;g\ufffdN3@\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd\u0762\ufffd\ufffd\u04ef@\ufffd^i\ufffd\ufffd\ufffd_\ufffd\ufffdY\ufffd\ufffdWl\ufffd\ufffd\ufffd~H\ufffd\ufffd\ufffd\ufffd[\u22c5\ufffd\ufffd^o\ufffd\ufffd\u001fR\ufffd9gv\ufffd\ufffd\ufffd\ufffdQ0F8U__{\ufffd$\ufffd\ufffd\u0011i\ufffd\ufffdf\ufffd\ufffdL\ufffd\ufffd\ufffdF]\ufffd\ufffda\u0017eC\ufffdQU#v\ufffd\ufffd\u001f\u0010\ufffdR\ufffd\u0003}\ufffdK\u001a\ufffdkD\u0012\ufffdsD\u001a\u0018\u0001\u001d\ufffd\ufffd)\u001f\ufffd\ufffdSi\ufffd!.p~\ufffd$\ufffd)H#|\\^Q+|\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffdJ\ufffd\u0013\ufffdyMD\ufffdN\ufffd\u000f\ufffd{\u001f\u0747'Y\ufffd\ufffd!\ufffd\u02057\ufffd@\ufffd[\ufffd\ufffd\ufffd-\u0018\ufffdf\ufffd\ufffd\u001c\ufffd7[\ufffdao\ufffd\ufffda\u001a\ufffd\u0006\ufffd\u001do\ufffd\n(\u001c\ufffd\u001d\ufffd4\ufffd\/\u001d\ufffdm\u00f4j\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffdX*-\ufffd\n\ufffd>l\u0454[\ufffd!\ufffd\ufffd\ufffd\ufffd\u0007-\ufffd\ufffdr\ufffd\u000b\ufffd\ufffdB\ufffd\u0005\ufffd\ufffd\ufffd\u0015\ufffd\ufffdE\u0001]q@\ufffd\ufffd\ufffd\ufffd{\ufffd9\ufffd:W\ufffd\ufffdH\rR.R\ufffdSG\ufffdE\u001e\ufffd\ufffdz\ufffdQ\ufffdT\ufffd52\ufffdB\ufffdK\ufffd\u001aL\u0010\u001a\u0019\u001f\ufffd]]D\ufffdET\ufffd\ufffd\ufffd\ufffdRL Q~\u001d\ufffd=\ufffd[\ufffdLM\u053cZ?\ufffdLP\ufffd\ufffds\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\u0287\ufffd\ufffdE4'\ufffd\ufffdj\ufffd\"\ufffd\ufffdfk\ufffd\ufffdL\ufffd\ufffd`\u04da$\u0019\ufffd\ufffd\ufffdU\u0017\u001e\ufffd\ufffd\ufffd\ufffd\/\/\ufffdvA\ufffdxA\ufffdp\ufffdB\ufffd\ufffd;\u0017\ufffd\ufffd\u0004U\u001f\u000b^\b\ufffd\ufffd\ufffdI#U\u000b\ufffd\ufffd\/#\u0017\"\ufffd\ufffd\ufffd-R\u001c)\ufffd\u0014D|\ufffd\ufffdH^\ufffd\u0015\u02498#\ufffd\ufffd%b\ufffd\ufffd#\u0288,\ufffdGH\ufffd3\ufffdM\ufffd\u000e\ufffd\ufffd\ufffd\u001c7S\ufffd3\ufffd\ufffd\ufffd@\ufffd\t\ufffd\ufffd\u0015\/\u000ft\u0115\ufffds{\ufffdR\ufffd\ufffd\u0017\ufffdqn;\ufffd\ufffd;.\ufffd~\ufffdCfj\ufffd\ufffds\ufffd:\ufffd\ufffda\ufffdI\ufffd7\ufffdw\ufffd\u000f\ufffd\ufffd\u001b\bd\ufffdc\u001d3{\ufffdC\u067d\ufffdrV\ufffd'\ufffd\ufffdt\ufffd\ufffdg\u011d\ufffd\ufffd\ufffd\ufffd}\u05ae[\/V#_\ufffd.\ufffd`m`m\ufffdp\ufffd\ufffd\ufffd\u001a\/j]\u0014\/n\ufffd\u0006\u04b5\ufffd=\ufffd\u0016\ufffdd\ufffd\ufffdS\ufffdt\ufffd|VL\ufffdg\ufffd\ufffdR!]q9O\ufffdb\u0019\u0015k\ufffd:\ufffd\ufffd:\ufffd\ufffduW\ufffd\ufffd\ufffd\ufffd\u0781'\ufffd\u5fae\ufffd\u0012{Lc\ufffdjC\ufffd\b'\ufffdSw\/\ufffd\ufffd\r\ufffd\\\ufffd\u0006\\\ufffd\ufffdQ\ufffd\ufffd\ufffd\ufffdF\ufffd\ufffd\r\ufffd*\u0019\u0013;\ufffd\ufffd\ufffd\\\u02fc\ufffdx\ufffd\ufffd#\ufffd\ufffd9\ufffd?\ufffd\ufffdi\ue23f\ufffd\ufffd\ufffd\u03b9q\ufffd\ufffd\u0019\ufffda\ufffd\ufffd\u0007\ufffd\ufffd\ufffd\ufffd0\u0010k\ufffd\u0012\ufffd\ufffd\ufffd(\ufffd\u0012\u0019\ufffd\ufffds{\ufffd\u0006h\ufffd\ufffd\ufffd\u0017\ufffd\u000b\ufffd\u0002\ufffd\u0001\ufffd;\ufffd<\ufffdS\ufffd'\ufffds\ufffd\ufffd\u0001\u001f\u0001\ufffd\u0004x\u001f\ufffd\u001e\ufffd]\ufffd\u001f\u0001g\u0001\ufffd\u0000\ufffd\u0000\ufffd\n\ufffd:\ufffd\ufffd\ufffdW\u0001\ufffd\u0001\ufffd\u0000\ufffd\u0001\ufffd\u0006\ufffd\u0002\ufffd\u0000\ufffd\u0003\ufffd\u0001\ufffd\u0000\ufffd\u0005\ufffd\u0001z\u0001=\ufffdn@'`\n\ufffd\u00030\u0019P\u0005(\u0003\u0004\u0001%\ufffdb\ufffd\u0012 \u0007H\ufffde\ufffd\ufffd\ufffd>\ufffd}\u0016;\u001f\ufffd4v.\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd\ufffd\u0010{+\ufffd\ufffd\ufffd\u001b\ufffd\u04f1Wb\/\ufffd^\ufffd\ufffd\u0018{!\ufffd\\\ufffd\ufffd\u0629\ufffd\u04f1\ufffd\u014e\u01ce\u018e\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffd\ufffd\ud20d\ufffd\ufffd\r\ufffdn\ufffdm\ufffd\r\u0176\ufffdn\ufffdm\ufffd-\ufffd\u0348u\ufffd\ufffdc\ufffd1]\ucacc\ufffd?s\r\ufffd\ufffd\ufffd\ufffd!\u04bb\ufffd\ufffd\u0010\ufffd,\ufffdd\u0002b\u0104Hl(\ufffd>\ufffdO\ufffde,\ufffd\ufffdE\ufffd\ufffd\ufffdt}\ufffd\ufffdr\u0019O\u001f%Z\ufffd\ufffdhY\/\ufffde\ufffd<\ufffd\u000e1\ufffd\ufef2E\ufffd\ufffd\ufffd9\ufffd6\ufffd+\u0016\ufffda a\ufffd\ufffdd3\ufffd\ufffd\u0019Hf\u0213\ufffd&\ufffd\ufffd\ufffd\ufffd\ufffdo\ufffd\ufffd\ufffdw^%\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd'?$\ufffd\ufffdY\ufffdS\ufffd\ufffd\ufffd\ufffd\ufffd!\ufffd\ufffd\ufffdC\u068d\ufffd>2\ufffd\ufffd\"\u000b\ufffd2\ufffd^C\ufffd\ufffd\u0003\ufffd\ufffd\u0016\ufffd~\u0012\ufffd\u001f!\r\ufffd\ufffdH\ufffd\ufffde\ufffd\u0001\ufffdwz\u0011\ufffd\u001eN\ufffd\\\ufffd\ufffd\ufffd[\ufffd''\ufffd\ufffdd\ufffd\ufffd@F\ufffd\ufffd\ufffd\ufffd{\ufffd1\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\ufffd\u000e\ufffd\ufffd,'k\ufffd!\u0012\u01f312(\ufffdN%\ufffd\ufffdv2\u000fck#\ufffd1\ufffd\ufffdx{\u001f9B\ufffd$K\ufffdQ\ufffd\u0010\ufffdJ\ufffd\u0223\ufffd\ufffd\ufffd\ufffd[\ufffd85\ufffd\ufffd\\\ufffd\ufffd\ufffd\u001dx\ufffd\u0001n\u001d\ufffdw\ufffd\ufffd!\ufffd\ufffd\ufffdL\u001e% X\ufffd\u0013\ufffd\ufffd\ufffd\u073b<\ufffdo,\ufffdC\u001e\u0004\u0016\ufffd\ufffd]\ufffdi\u001f_\ufffdw\ufffd\ufffd\ufffdx\ufffd\ufffd\u000f\ufffdn\ufffd\b\ufffdz\u0006\ufffd\ufffd\b\ufffd\u001c\u0004_\u001e%\ufffdP\/\ufffdK\ufffd\ufffd\ufffdTC\ufffdE~J\u02ef\ufffd\ufffd\ufffdW_w\ufffdGd'\ufffd\ufffd\ufffd\ufffdsr\u0012t;\u0000\ufffd\ufffd\u0002\ufffd\u0582\/\ufffd\ufffd\ufffd;\ufffdn\ufffdpf\u0001UAn\ufffd\ufffd>\ufffd#_\ufffd\ufffd_\ufffd\ufffd\ufffd\ufffdz5da#$\ufffd6\ufffd\ufffdz`\u0783\ufffdi\ufffd\ufffdG>\bX\ufffd~\u0007\\\ufffd\u0006\ufffd\u001d\\\u0002F\ufffd=\ufffd7\ufffd[\ufffdJ\ufffde\ufffd\u0005\ufffd\ufffd\ufffd\u024dh\ufffd-\ufffd\ufffdO~L\ufffd\ufffdv-y\ufffd\u0016\ufffd\u000b\u042a\ufffd\ufffd\ufffd_>\ufffd\u0007\ufffdK\ufffd\u001e\ufffd\ufffd\ufffdP+y\ufffd\ufffd&\ufffd\u0005k\ufffd\ufffd\ufffd\u0007\ufffd\ufffd\b\ufffd'\/\u0012r\ufffd\u001eP\u000f\ufffdB\ufffd~D\u000e\ufffd\ufffd\ufffd&\u000fS'\ufffd\ufffd\ufffd\ufffdY\ufffd\ufffdA\ufffd\u0005\ufffd\u0015\ufffd\ufffd\u0001\/\ufffdn?&\u03c0~\u001f\ufffd\ufffd\ufffd\ufffd'[w|\ufffd\ufffd\u0571\ufffd\ufffd\u001d\ufffd%\ufffd\ufffd@\ufffd\u001d\u000b\ufffd\ufffd\ufffd+\ufffd\u0002\ufffd8D\u001e\ufffd~m\ufffd\f=\t]\ufffd\ufffdK\ufffd\u001d\ufffdN\\\ufffd\u0006\ufffd!?\ufffd\f\u001c\ufffd,\ra\ufffd\ufffd>\ufffd>\u0012\u0006\r\ufffda\ufffdH\u0003\u001d\ufffdy\ufffd>\ufffd?\ufffd\ufffd\ufffd_\u001f?\ufffd\ufffd&SVJ\ufffdT\ufffd5\ufffd\ufffd\ufffd\ufffd\ufffdN\u060a\ufffd\ufffd\ufffd\u0014\ufffd\ufffdH\u0001N~\ufffd]\ufffd\ufffd\ufffd$\ufffd^J\ufffd?\ufffd\u001c\ufffdK\u0012s\ufffd\ufffd0\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\u0784\ufffdk\ufffd~@\ufffd\u0018\ufffd\ufffd\ufffd\ufffd\ufffd'\ufffd\u001f'\ufffd\ufffdFi~bM\ufffdf\ufffde\ufffdI\ufffd\ufffd\ufffd\ufffd<O\ufffd%o\ufffd_\ufffd\ufffd\u025f\ufffd2\ufffdy\ufffd,\ufffd\ufffd\ufffd_\"\ufffd\ufffd\ufffd~\ufffd\ufffdPRJn \u000f|\ufffdW\ufffdJ\u0260d\ufffdd\ufffd\ufffdOR*\ufffdC\ufffd\ufffd\ufffdT\ufffd\ufffd9\ufffd\ufffd\ufffd\ufffdbr-\ufffd\u001a\ufffd\ufffd#\u000fI\ufffd\u0396\ufffd\ufffd\ufffd\ufffd\/\ufffd\u000f\ufffd\ufffd\u0015\ufffd{w\ufffd6\ufffd\u0007KF\ufffd\ufffd%\ufffd\ufffd\u000b\ufffd\u03db\ufffd\ufffd\ufffd3\ufffd\ufffdk\ua50e\u0253\ufffd'\ufffdE[\ufffd\ufffd\ufffd\u0186\ufffd\u0204\ufffd\u069a\ufffd\u028apy\ufffd,XZR\u001c(*,\ufffd\ufffd\ufffd\ufffd\ufffd<\ufffd+7';\u02d9\ufffd\u06ec\ufffd\f\ufffd\ufffdh\ufffd\ufffd\u001a\ufffdJ\ufffd\ufffd\u02e4\u0012\u001e\u0001\ufffdbj\ufffd\ufffd[zZ\ufffd\ufffd\u001d-\ufffd\ufffd\u001e\ufffd+\ufffd\ufffdv~j0NLN\ufffd\ufffd\ufffd\n\u0007{KR\ufffd\ufffd\ufffd@\ufffd\ufffd;\ufffd\u0019\ufffd=G\ufffdP\ufffd\u001b\ufffd\u0005\ufffd\ufffddZ\ufffd\ufffd\u001a>w\ufffd\ufffdNWk\\\ufffd\u017fg\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffdq^\ufffd\u07cbn\ufffd-=n\ufffd3\ufffdy\ufffd?\t\ufffd\ufffd?y\ufffd+\u00167t\ufffd\u001e7\u011aIq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001fkPIj\u073dH\ufffdz\ufffd9\ufffd\ufffd^\ufffd[\u0012\ufffd+\u0006y\u0012\ufffd\ufffd\ufffdW\ufffd9\ufffd\ufffd\u0018\ufffdj\u001c-\ufffd8\ufffd8J4\ufffd\u0013\u000bkv\ufffd\u0006\ufffdD$^\ufffde\ufffd\u05c0\ufffd\ufffd\u001b\t\ufffdi\ufffd\ufffdqj\ufffdS\ufffdT\ufffdt\ufffd+\ufffdc\ufffd\ufffd|\r\rZc\ufffd=\ufffd\ufffde\ufffdh\ufffd\ufffd2M\ufffd')\ufffdv\ufffd\ufffdF\ufffdz\ufffda\ufffd\ufffd-\u000e\u001a+\ufffd\u0019=G\u056a\u0016O\ufffd\u0012\u0015\ufffd\ufffd\ufffd\u0012\u0015\ufffdJ\ufffd\u001a5\ufffd\u0000[V\u001f\ufffd\ufffd\u0006*\u00168Mk\ufffdQ\ufffd(\ufffd \ufffd\ufffd\r\ufffd\ufffd\ufffd\udaa3\udc23\u001f\u0005O\u0014t\ufffd\u001d\ufffd\ufffd;\ufffd,\ufffd\ufffd\u0016\ufffdc\ufffdF\u0004\ufffd\ufffd\u0012\u0015\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\ufffd\u0145Eq\ufffd\ufffdu\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\u0006\ufffd\ufffd?\ufffd\ufffdyb\ufffd\ufffd\ufffd\ufffd\ufffdE\u0018\ufffdQ\ufffd{[\u0007\ufffd\ufffdY\u001d\ufffd}\ufffd\ufffd \u0000\ufffd\ufffd.\ufffd\uea180\ufffdZ\u0007]#\ufffdfm\ufffd\ufffdz\ufffdx\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd~&&\ufffd\ufffd\u0013\ufffd=eK\ufffd6\ufffd)'\ufffd\ufffd=\ufffdZ\ufffd\ufffd@\\\ufffd\u01f57\ufffd\ufffd\ufffdGZ\ufffd\ufffd\\\ufffdrdd\ufffd+\ufffdoF\u03d5w\u076c\r\ufffd\ufffd^R\ufffd\u001ai\ufffd\ufffdm\ufffduy3\ufffdX\ufffd\u0012\ufffdDi\ufffd\u0014\u0013\ufffd#\ufffdX\ufffd\u000f-^\u000e\ufffd\ufffd\ufffd\u03b4\ufffd\ufffdG\fq\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\ufffd'\ufffdv0\u00023\ufffd\ufffd\/g\ufffd,\u01d3\u0012d\ufffd\ufffd\u001dKDTw\ufffd\ufffdA^]\ufffd\u02e3\f\u0603\ufffd~2\u000bO\ufffd\ufffd\ufffd\u000ezZA\ufffd\ufffd\u000bA\u0010<\ufffd{\ufffd\ufffd\ufffd\ufffd\u001dw\u0004\u0603##\ufffdl\ufffd\ufffdb\u0018=\ufffd\f\ufffd\u001dX\u0011c\u0018\ufffd\u000b\ufffd3@1\ufffd\ufffd\ufffd\ufffd-f\ufffd[\ufffd\u0001\ufffd(,\ufffd\ufffd\ufffd\ufffdR\rpG\u0002>\u0105\ufffdho\/C*\u0240\ufffd\u073bMZ\ufffdq\ufffd\ufffdN\ufffd\ufffdxF\ufffd\ufffd~\u000e\ufffdN\ufffd\u0014wt\ufffd\ufffdF\ufffdt\ufffd%\ufffd\ufffdS\ufffd\ufffd<\ufffdrG\ufffdjjG\ufffd\ufffd\ufffd9F$vg\ufffd\ufffdcFR\n\u0006\u0019}X\ufffd\u07ddT`P-\ufffdy4M\ufffd\u0017{=mw\ufffdN\ufffda^O\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffdj\u001b\ufffd\u001fYtb|h\ufffd\ufffde\ufffd\ufffd\u001c\ufffdhFV\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd\u000eg\ufffdmgo\ufffd\ufffd?H\ufffdD\u000e\ufffd\ufffd\u00039\ufffd\u06c6\u057fy\ufffd\\\u01aa6\ufffd\ufffd\"\ufffd\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffdA\ufffd\ufffd\u0003L\ufffdF\f\u001f\u0003{\r\ufffd\ufffd\ufffd\ufffd\ufffdL\r\"\ufffd5\u03b8\ufffd\ufffd\ufffd,\u00064\ufffd\u0007:1\ufffdW\ufffd\ufffd\ufffd\u0004\ufffd\ufffd\ufffd\u0010\ufffddZ\ufffd\ufffdz[\ufffd\ufffdL\u0011\ufffd\ufffd\ufffd+E\ufffda6pF\ufffd\u0016\ufffd\ufffd\ufffdL\ufffdv\ufffd\u0010\ufffdb\\\u0107f\ufffd$\ufffd]d\ufffd\ufffd\u0018\u0011\ufffd\u0001\ufffd\ufffd9\ufffd\ufffdc\ufffd\ufffd\ufffd\f\ufffd\ufffd\\z\ufffd\ufffd\u0003\ufffd\ufffdY`J\ufffd\ufffdo\ufffdo\ufffd\ufffdK\ufffd=b\ufffd\ufffd\\\ufffd\u0330ct\ufffd\ufffd\u0014\ufffd\ufffd\ufffd\u0006\ufffd\ufffd\ufffd\ufffd+@1\ufffd\ufffd\ufffd\u001e\ufffd\u0271&(qN\ufffd\ufffdT\u0001L\u000f\ufffd\ufffd- >\ufffdh\u0002\ufffd9b\ufffd^\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffd\ufffd2\u0018a,)\u06b4\ufffd!\ufffdT\ufffdk\ufffd\ufffd(\ufffd\ufffd$\ufffd\u0010\ufffd\ufffd8\ufffd\ufffdz\u0002\ufffd\n\ufffd\ufffd\ufffd\ufffdjp\ufffd \ufffdZG\ufffdS\u0002x%Zh\ufffdZ\ufffd\u0006\/\ufffdRr\ufffd\ufffd]\ufffd\u001b\ufffd7x\ufffd\ufffd\ufffd$\u0019\ufffd&\u000f\ufffd\ufffd\u0015&\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n,\u0011\t5\ufffd7\ufffdc\ufffd]\\\ufffd\ufffd\ufffd`\ufffd\u0396\u001e\u0017,\u00114w\ufffdXp\ufffd\ufffd\u0006\u0019\ufffd\ufffd\ufffd\ufffdh\u0012z\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffd;\ufffdQf\u0002{ \ufffdh\ufffdL\ufffd8\u0004=I\u06abE\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000fA\ufffdo\ufffd\ufffd;X\ufffd1\tE\ufffd\ufffdU\ufffd\ufffd2\ufffd\ufffdt\ufffd\ufffd\ufffdM\u44e8\u0004x\ufffd$\ufffd\ufffd\ufffd\ufffd\/Q1\ufffd\u0006\ufffd\r\ufffd\uc397e\ufffdd\ufffd\ufffdf\ufffdE\ufffdN\ufffd\ufffd\ufffd`B7\ufffd\ufffd\u0100+_&\ufffdK\ufffd\u0007\u001bI\ufffd\r\ufffd\ufffd\u0006\ufffd#\ufffdO\u0014\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffd\u071e\ufffd\ufffd\r\ufffd\ufffdy#\ufffda\"k>\ufffd\ufffdg\u001c\u0015\ufffd\ufffd\ufffd}='\ufffd\ufffdrm\ufffd\ufffd9\ufffdQ\ufffd\ufffd\ufffd\ufffd\ufffdh>\ufffd\ufffd\ufffdt\ufffd\t\u0012k\u0011\ufffd\ufffdof\ufffd\ufffd\ufffd\ufffd]\ufffd\u000e\ufffd\u078eaC\ufffd\ufffdw\ufffd\u0014\b\u0019\u0012\ufffdJ\ufffd\n\ufffdz\u0000\ufffd^\ufffd.\ufffd\bu\ufffd\f \ufffd+\ufffd\u0019\ufffd\ufffd8\ufffdI\ufffdu\ufffdX\ufffd\ufffd\u0004Cl\ufffd\u000f\u00bc\ufffdx\ufffd\ufffdX\\\ufffd\uce79wp\ufffd\ufffd\ufffd\u0011\ufffdX\ufffd\u0002\b\ufffd\ufffd4\ufffd8\ufffdi8J9\ufffd&\ufffd\ufffd,i\ufffd\ufffd=\u036c\ufffd\ufffd\ufffd7&\ufffde\ufffd^\ufffdi\ufffd\ufffdC9\\'\ufffd\ufffd#\ufffd\u001e\ufffd?\fp\u000fq\ufffd^&\ufffdL\ufffd9\ufffd\ufffd\ufffd\ufffd8,\ufffdiX^w\\\ufffd\u0007\ufffd\ufffdU\u0006z]q\ufffdw2\ufffdMd\u040f\ufffd\ufffdEl\u001cLL\ufffd\ufffd;i\ufffd7\ufffd\ufffd\ufffd!\ufffdL\ufffd+\u04432\ufffd\u0003Z\ufffd\ufffd\ufffd`zf\u000f\r@X\u0017y\ufffd\"\ufffd\ufffd\u001cC\ufffd\ufffd\ufffd\u0000{i\ufffd26\"\ufffd\u000b\ufffdP\ufffd\ufffd..\ufffd%\u0007)\ufffd\ufffd\u0017\u0005{GL\ufffdrq:\ufffdy\ufffd*\ufffd6<\ufffdwL\u0016\r\ufffdX\ufffd\ufffd%^\ufffd\ufffd#\ufffd\ufffd5\u0018\ufffd\ufffd\u0007\ufffd\u0006\ufffd]\ufffd\ufffd\ufffd\f\u03040J|\ufffd_\ufffd\ufffd\ufffd\ufffd%\ufffd\ufffd%>L\ufffd\u0000\u0015\u0014Y\ufffd\ufffds\u0017L\ufffd\ufffdZU\\Y\ufffd\u000e\ufffd\ufffd\ufffd\ufffdRt\ufffdy\/\ufffd\u0090\u0017\ufffd\ufffd\ufffd\u001a\ufffd\u0746\ufffd\u001a#\ufffd]A\ufffd\ufffd\u0003\ufffd\u000enMbc\ufffd\ufffd6\f\ufffd5}\ufffdu3\ufffd\u0004\ufffd\ufffdl\ufffdS\ufffd\ufffd\ufffd\ufffd\u001d\ufffdz'-\ufffd\ufffd\ufffd|^\ufffd\u001a\u000f\ufffd\ufffd\ufffd\ufffd\ufffdK\ufffdeU\ufffd\ufffd\u74b5r\ufffd\ufffdFth\ufffdO\ufffd\u001f\ufffdlbJ\ufffd\ufffd\ufffd\u0014{\u293b\ufffd\t&\ufffd>\u0003\u0011H\ufffd\ufffdW+\ufffdsa8\u0015_\ufffd\u054a\ufffd##\n\ufffd\ufffd?\ufffd\ufffd\ufffdB{)g\ufffd\ufffdZ\ufffdAV\ufffd\u000bs\n\ufffd(\ufffdMZ\ufffd\ufffd\ufffdTQ\"\ufffd\ufffd\ufffd([\ufffd_$2\ufffd{d\ufffdd\ufffd\ufffd \u064b\ufffd\u0003\ufffd.\ufffdAz\u000b\ufffd\ufffd=\bXG\ufffd\ufffd\ufffdd\ufffd\ufffd\u000e\ufffd^z=Y\/\u0641\ufffd\ufffdM\ufffd?\ufffdj\ufffdS\ufffdY\u001a$}\ufffd\ufffd*\ufffdJ\u0016\ufffd\u001f\ufffdN\ufffd\"R\ufffdo#\ufffd$\ufffd\ufffd2\ufffd\ufffdd\ufffd[A\ufffd\ufffd\u0149\ufffd\ufffdD\ufffdj\ufffdL\ufffdM\ufffd\ufffdr\ufffd\u001e)&\ufffd\ufffd\uf419\ufffd\u001b\u0000\ufffdh\ufffd\ufffdL\ufffd\ufffd\ufffdA~:\ufffd\u026f&\u000b\ufffd\u001f\u0012\ufffd\ufffdZ\ufffd)\ufffdYVN\ufffd\ufffd?\u0010\u001b\ufffd\u0019\ufffd\u0013d\u0006\ufffdO\ufffd\u063e\ufffd\u00048\ufffd\ufffdu2\t\ufffd\ufffd}\ufffd\ufffd\ufffd\u03d3e\ufffd\ufffd\ufffd(^\u0006\ufffd\ufffdL\u001ax\u001dy\u0012\u0010\ufffdN\ufffd\ufffd\u0000\u0001\ufffd\u001f\ufffd |?\ufffd{\u0268d%\ufffd\u0015p,\ufffd\u07c3|*\ufffd\u0001\ufffdm\ufffd\ufffd\u0001\ufffd\u000010+yF\u000f\ufffd\r\ufffd\u0679\u000f\ufffdn\ufffd\ufffd(N\ufffd\u0005\ufffd\ufffd\ufffd#;~RD\ufffdH&\ufffd\ufffdH>)$\ufffd\ufffd\t\ufffd\ufffd#^\ufffd\ufffd\ufffdzRF\u0324\ufffdd\u0013;\u0593\ufffdd\"\ufffd\ufffd\u0016\ufffdJL\u0101\ufffdV\ufffdd\ufffd\u0211\u0002\u001bju$B\ufffdI\t\u000e\u0019p\u0010\r\u0017i\"Fb \u5222\ufffd\ufffdJ\ufffd\ufffdGjH#\ufffd%\ufffd\ufffd\ufffdT`c]\ufffds\ufffd\u0016\ufffd>;\u0010?\ufffd\"\ufffd$\ufffd\u0c21\ufffd\ufffd@6\ufffdO\ufffd:z\u0016\ufffd2>\ufffd\ufffd?\ufffd\u0014H\u0016I\ufffd*\ufffd(}U\ufffd {L^$?\ufffd\ufffd)V)>QNTIU\u001bUR_\ufffd\ufffd\ufffdf\ufffd\ufffdN\ufffd\ufffd\u03a6[\ufffd7\ufffd\u0019\u001a\r\ufffd\u001a]\u01b8\ufffdg\ufffd\ufffd\ufffd7o1\ufffdw\u01bc\ufffd\ufffd\ufffd\ufffd\ufffd1\ufffd\ufffd\ufffdG\ufffd\ufffd\ufffd)mn\ufffdL\ufffd\u001a\ufffd\u0001\u06dbv\ufffd}\ufffd\ufffd^\ufffd\ufffd\u001d~\ufffd\f\u01cd\ufffd\ufffd\u001c\ufffds\ufffd:3's0\ufffd\ufffd\ufffdLVk\ufffd\u026c\ufffd\ufffd\ufffd\/16\ty\n\ufffd\u001d\ufffdn\u0423\u0018t\ufffd \u001d\ufffd\ufffd\u0012\ufffd((,&\ufffd\ufffd\ufffdPiE\ufffd\ufffd\ufffdT]\\!\ufffd\ufffd\"\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd!\ufffd4\ufffd.\u000f\ufffd\ufffd\ufffdgN\ufffd\u001bM\ufffdV\u001b\ufffd\ufffdp\ufffdp\ufffd\u00186\ufffd.7\ufffd\ufffd\ufffdP\u0019\ufffd\ufffdh\ufffd\u001b\ufffd\ufffd\n\ufffd'O\ufffd\ufffd=\ufffdUU\ufffd\ufffd\u001c\u0392\ufffd\u000b\u001do\ufffd\ufffd,\ufffdJjt\u001b\u0019p\ufffd2kQ\ufffd\ufffd\ufffd\ufffd75\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\u021d-m\u0003\rY\ufffd\ufffdH\ufffd\ufffdg\ufffd\ufffd\ufffd\u0017\ufffdd\ufffd\ufffd\ufffd5\ufffd\ufffdV\ufffd\ufffd\ufffd\ufffd\ufffd\b\ufffdk=\u001d]\u0019\ufffd\ufffd9\ufffd\ufffdf\ufffd\ufffd\n}\r\ufffdm%\ufffdbA\ufffdl\ufffd\ufffd'\u0793\ufffd\ufffdr\ufffd\ufffd\u001f_|\u001f\b\ufffd\ufffd2\ufffd\ufffd\u0017\ufffd\u0012p&\ufffdl\u0016\ufffd\n\ufffd;O\ufffdV\ufffd\ufffdty\u000e{\ufffd\u02dd\ufffdKu\ufffd\ufffd\ufffd\ufffd|\ufffd\u036cP\ufffde\ufffdT\ufffdjT\u043b\ufffd\ufffd8#\ufffdr\ufffdM4#\ufffd7\ufffd\ufffd\u0007\ufffd\u012a\ufffd9\ufffd\ufffd<\ufffd\ufffd4\ufffd\ufffd\ufffdp\ufffdHla\ufffd\ufffd\ufffd\u001eDt \ufffd\\\ufffdh\"\ufffd\ufffdeX\ufffd\ufffd\u00e6Z$F\ufffd\ufffd\ufffd\u0018\u000e\u001b\ufffd\ufffd:u\ufffdA\ufffd]\ufffd\ufffd\ufffd*~\ufffd[.\ufffdY2\ufffd6\ufffd\u001b\ufffd\ufffd\ufffda\ufffd\ufffd\ufffd,\ufffd\ufffd\ufffdY\ufffd!\ufffdA\ufffdM\ufffd\ufffde\u001a\ufffd\u001b\u0013\ufffdjf\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffdB*{ ?oz\ufffd\ufffd\u0153\ufffd\ufffdFj\ufffd\ufffd\ufffdr\ufffd\ufffdd\ufffd\u0007\ufffdu\ufffd\ufffdC\\\u00167\fM\ufffd\u0004\ufffd\ufffd#~\ufffd\r\ufffd\ufffd\"\ufffd\n\u0013\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffdjT(\ufffdd\u0017\ufffd\u0016\ufffde\ufffd\ufffd%\ufffd\ufffdB6=\u0018\ufffd6i|\ufffdoT#h\ufffd\u0007\ufffd\u001a\ufffdx\ufffd\ufffd\u001d\ufffd\u00169n\t\ufffdj\ufffd\u0002[\ufffd\ufffd\ufffd\ufffd@\u6b31\ufffd\ufffd\ufffd1@2\ufffds\u0001bO\ufffdP\f\ufffdq\u000f\ufffd\ufffd\u0019\ufffd\u018aR\ufffd_\ufffd.\ufffd\"\ufffd!\ufffd\ufffd-\ufffd\ufffd\u00d7#FR\ufffdy\ufffddr\ufffd\ufffd\u001a.\ufffd\u00a5\ufffd\ufffd\ufffdlj(\u04aal>\ufffdy\ufffd\u0005-+fm\u07f9\u9b47\ufffd\u001f|\ufffdd\ufffd\ufffdF\ufffd\u0379\ufffd\ufffd\ufffd\ufffd6M\ufffd\ufffd\ufffd\ufffdC\u0006\ufffdd~Qk\ufffd\u01e2\rE\ufffd\ufffd\ufffd\u0019\ufffd\ufffdW\u0016~o\ufffd\ufffd\ufffdO\ufffd>\ufffdog\ufffd\ufffd*\ufffd\ufffd\u001b\ufffdbl\ufffd\ufffd\ufffd\ufffdE\ufffdni`\u0016\ufffd\ufffd\ufffd\u0012\u0013x\ufffd\"\ufffd\u0004C\ufffdAgi\ufffd\u041b\u0016\ufffdV\ufffdx\ufffd\ufffd\ufffd\u0016\ufffdP\u0005!\ufffd\ufffdY\ufffd\ufffd8\ufffd\ufffd\ufffdrl:^7*\ufffd\ufffd92^6\ufffd#\u02612\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\u0254\ufffd\ufffd%3x\ufffd\ufffd\ufffd,\ufffd\ufffd\u0016\ufffd\ufffdQ\ufffd\u0005\b@\ufffd\ufffd \u0006\ufffd\u0001\ufffdsH\ufffd\u0005F\ufffd\ufffd+\ufffd\ufffd$\"[\u001d6\ufffdd\ufffd<b\ufffd0\ufffd\u02ed\u0012\u04c0}\ufffd\ufffd\ufffdk\u001e\ufffd7\ufffd\ufffd\u0015]\ufffd\u0013]\u0003\u000b\ufffd\u07d0H\\\ufffdFe\ufffd>w\ufffd\ufffd&\ufffd\u045ck\ufffd\ufffdL\ufffd\ufffd\ufffds\ufffd\ufffd\ufffd\n.\u001dH\ufffd\ufffd\ufffd=t\ufffd\u0019\ufffd\ufffdu`\ufffdx\\\u0004\u001e\ufffd\ufffdm'\ufffd\u001e\ufffd\u0017:\ufffd\ufffdv\ufffd*7\ufffdf\ufffd8\ufffdJe\ufffdM\u0002jL\ufffdQAU\ufffd\ufffd\u0002\ufffd\ufffd<\u0007\ufffdyv\ufffd>*\u4556\u001c\ufffd\ufffd*y\ufffdh)o\u072f7\ufffd\ufffdt?\ufffd\ufffd\u076e\ufffd\ufffd\ufffde*\ufffd\u0016\ufffd\ufffd\"\ufffdEt\u0019\ufffd)N'\ufffd\u0017\u0002\ufffd\ufffd\u06c3\ufffdB\ufffd\ufffdB\nc\ufffd\ufffdmd\ufffd\u0005\ufffd\f}\ufffd\ufffd]\ufffd\ufffdW\ufffdyQ\ufffdr!q-\u05bb\ufffd\nk\ufffd\ufffd\ufffd\ufffd\u0014\ufffd\ufffd\ufffd\u000b\u0016\ufffd\ufffd\ufffd3\ufffd:T_\ufffdg\ufffd\u00180_\\\ufffd\u0012\b\ufffd\u012fB\ufffd\ufffds\ufffdcuD\ufffd\ufffdP\ufffd>s\ufffdica\ufffd\ufffdh\ufffd\ud96c\udd01q\ufffd\ufffdC\tz\u0014\ufffdm\ufffdL\ufffd3\ufffd\\\ufffd}\ufffd\ufffdN\ufffd\ufffduJ\ufffdS(\ufffdV^o\ufffd5\u0006\ufffdG\ufffdO\u001b\ufffdJ\ufffduT Jj\ufffdE9\ufffdQeYVnN\ufffd\ufffdhNQ\ufffd\ufffdh\ufffd\ufffdW\ufffd\u0016\ufffd\ufffd\ufffdF\ufffd\ufffd\ufffd\bS\ufffd\ufffdm\ufffdHr\u00155`\u0000\u008c*L\ufffd\ufffd^X0?E\u0011\ufffd\u000b\ufffdHJ\u0000\ufffdUzd0M\ufffd\ufffd\u001a\ufffd\ufffd\ufffd\u0092H(\ufffd\ufffdW\ufffd\ufffd\ufffd\ufffd\u0005K_\u0579\ufffd\n\u0012\ufffd+\ufffd\u0010\ufffd.6\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\u82f6f'6F\u068bp\ufffd\ufffdj\"$\ufffd\ufffdAH{\t\ufffdQ\ufffd,\ufffd\ufffd\ufffd\ufffdY>\ufffd\ufffd}>\r\ufffd-\ufffd\ufffdG\u0005*5\ufffd\ufffd\u0017B\ufffd\ufffd\ufffd\ufffdi\ufffd7\ufffdf\ufffd\ufffd\u001b4\u001a\u000bo\u0019\ufffdH,\u001a\ufffd\u00b0\ufffdh\ufffdJ\ufffd\ufffd\\A\ufffdf\ufffd(\ufffdgkE\u001b`\ufffdQ\ufffd+D\ufffd1\ufffd4\ufffd\ufffd\u06894`\ufffdP\ufffdW\ufffdR\ufffdm_\u0443J\ufffd\ufffd\ufffd\u000e\u0016\ufffd\u0004\ufffd\ufffdi\ufffd\ufffdv\ufffd\u001b\u001b';\ufffd\ufffd\ufffd\ufffd\ufffd\/\u001bpN\ufffdf\ufffdu\ufffd\ufffdN}p\u0546\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd|\ufffd\\j\ufffdV\ufffd\u00e1\ufffd\u067f\ufffd\ufffd?\ufffdd&\ufffd\ufffd-\t\ufffdL|\ufffd\ufffds\ufffd\u000f\ufffd\ufffd\ufffdH_g\ufffd.\u0014\ufffd\u45b64$\ufffd@*\ufffd\u001c\u0510\ufffdBY@\ufffd\ufffdG\ufffd\ufffd\ufffd\u0016\u0018-+\ufffd)-\ufffd\ufffdf?\u0018U\ufffdL\ufffdP\u0005\ufffdW\ufffd\ufffd\ufffd\u001d\ufffdzx\ufffd\ufffdX\ufffd\ufffd\ufffd\u0017m\ufffd\u0006e\ufffd\ufffd\ufffd\ufffd\ufffd`@\ufffdzaf\ufffd\ufffd\ufffd\ufffd\u0016\ufffd7&\ufffd}J\t\ufffd&f\ufffd4'\ufffd\u01af\ufffdUD\u000f\ufffd[\u001aW\ufffd\"\ufffdG\ufffd\ufffd\ufffd\ufffd\u0013\udb6c\udecdco*-\ufffd\ufffd\ufffd\ufffd)\u0006\ufffd\u0003\ufffd~\ufffd\ufffd+6\u0016L\ufffdO\ufffd\u0014\u001b\ufffd\ufffd\ufffd\ufffdXM\ufffdPH\ufffd\ufffd6\ufffd>\ufffd\ufffd\ufffd\u0490o\ufffd\\\ufffd\ufffd\ufffd\ufffdnnM<J\u0017\ufffd\u0011\ufffd\fh\ufffdi\ufffdJb\ufffd\ufffd\u0002\ufffdL\ufffd\/\ufffd\ufffd\n\ufffd\ufffd`Tn1\ufffdM\u0007\ufffdf\ufffd\ufffd\u0011-8\u0010\ufffd\u0007S\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd;\u0206\ufffd\ufffd7\u000e\ufffdi\u001fD\ufffdc{\ufffdV\ufffd\u00172$R^:*H\ufffd:\ufffd\ufffd`T\ufffd\ufffdK\ufffd-\ufffd\ufffd\ufffd\u0017\ufffdq\ufffd\ufffd\ufffd\ufffd\u0005\ufffd\u001f\ufffd\u0006\ufffd8[\\\ufffd\u0007\ufffd`\ufffd\ufffd;\ufffd=\ufffd\ufffd\ufffd\ufffdz*\ufffd5\ufffd\ufffd;\ufffd\n{\ufffdZ\u0007{$\ufffd$\ufffd\"\ufffd)>3}o%s\ufffd\u001aR\ufffd\u0017\tV\u001f\u03d3\ufffd\u0010\u0019\ufffd)s\ufffd\ufffd\ufffdP\u0019&7\ufffd\ufffd\u000f\ufffd\u0002_\ufffdP\ufffd\ufffd(3\ufffd\u0006\ufffdUm\ufffd:\ufffd^y`Ku\ufffd\r\ufffdJ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxl\u000bg\ufffdf6M4fU\ufffd\ufffdc\u00137\u0013[NN\ufffd\ufffdM\u076c\ufffd\u0017\ufffd\ufffd\ufffd\u0013\ufffd;9\ufffd\ufffdi\ufffd\ufffd\ufffdb\ufffd\ufffd\ufffd\ufffd>\ufffdjhjL\ufffd\u92ba\ufffdH^b\ufffd7\ufffd\ufffd\ufffdK\ufffd\ufffd\ufffd[\ufffdu\ufffd\ud887\udf79\ufffd\u06b2Z\ufffd\ufffd\ufffd+\t\ufffd\ufffd\ufffd\ufffd\ufffd\u001dc\ufffdv\ufffd\ufffdJC!\ufffdj5\ufffd\ufffd\ufffd\u0706\u0002\ufffd\ufffd \u001dI*I\f\ufffdR\u000e\ufffd(\ufffd\ufffd\u04a0\ufffd4\ufffdRi#j\ufffd\ufffd\ufffd\u001a\ufffd\u00a8\ufffdvXm\u0583Q\u001b\ufffdR\ufffdW(\\d\ufffd!\ufffd\ufffdWr+e\ufffdD\ufffd\ufffdE\ufffd\\m\ufffdEa\ufffd\u07e5\ufffd@]\ufffd;\u01d9\ufffd$\ufffd\ufffd\ufffd\ufffd\u001c(\ufffd\ufffd5\ufffdT\u0016od\ufffd\ufffd\ufffd\u02ab\fVHcv5c\ufffdl'Y\u01a4\ufffd\ufffd,\u0015&T8\u0004\ufffd\ufffd\ufffd\ufffd\b{\ufffd:?\ufffd\ufffd\ufffd?\u0018\ufffdzI(\u001c:\u0018\ufffd\ufffd9\ufffd0\ufffdW\u0621\ufffd\u0015\u0015\ufffd\ufffdsV[%o2\ufffdd:\ufffd|\ufffdP\ufffd\ufffd\u0013\u0006\ufffd\u0016fst \fc%\ufffd\u0016\"w\ufffd\ufffd\u0016\ufffd\ufffd\ufffd0>W\u9b29\u0683]ch\ufffd\ufffd\u0562\u001fC\ufffd[\ufffde* \ufffdiam\ufffdA)3&\u05adM\u0703yD\ufffd\ufffd\/\ufffd\ufffd\u0012\ufffd\ufffd\ufffdF\ufffd\ufffd\ufffd\ufffd\ufffd^|,\ufffd3\ufffd\ufffd\ufffd\u0019t\ufffd\u001eZY{\ufffd\ufffdZ\ufffd8\ufffd\ufffd\u013d_\ufffdN\u0017\ufffd\ufffdiF\ufffd\ufffd\/\ufffd@\ufffd\ufffd\ufffd\ufffd\b\ufffdI+.\ufffd\ufffd\f\ufffd\ufffd\ufffd\ufffd,]\u0005o\u0019\ufffd%6^\ufffd\ufffdrfU\ufffd\ufffd\ufffdh\ufffd\/e\ufffd\ufffd\ufffd\ufffd\u000b\ufffdI\u0015\ufffdV\ufffd-\ufffd\ufffd`vEd\ufffd\ufffd5z(T\ufffd!k\ufffd\u0017\ufffd\ufffd\u001f\ufffd\u000fej\ufffd\n\ufffd\ufffd[J\u0007K\ufffd6\ufffd\ufffd7*\ufffd\ufffdF9\ufffd'l\ufffd%Tk\ufffd\ufffdH_M=\ufffd\ufffd\ufffd_\ufffd\ny\ufffd\ufffdB\ufffd\f\ufffd0\ufffd\ufffd\ufffd\ufffd\ufffds:\ufffdS\u0013\u05fd\ufffd\ufffd\u05e0\ufffd\ufffdq6S\u05c82\u0019 Q\ufffd\ufffd\ufffd\ufffd]\ufffdBV\u0016\ufffd|\ufffd^\ufffd\u05aa\ufffd\/\u001c5\ufffd[\ufffd\ufffdKrE\ufffdUn\u0014\ufffd\u03e4\u001b\ufffdP\u0013\u001do\ufffd?\ufffd)\ufffdzR\ufffd\ufffd\ufffd\u0016\u001b\ufffd<e\ufffd\ufffdd\ufffd\ufffd\ufffd~W\ufffd,\r%&\ufffd\ufffdu\ufffd\ufffd\ufffd\ufffdor`U\ufffd\ufffd5\ufffdM+\ufffd\ufffd\ufffdy\ufffd|lB[\ufffdM}\ufffd\ufffd=\ufffd\ufffd\ufffd\ufffd\ufffdK%3'\u0739f\ufffd\u06b6lI\n\ufffd\u0002\ufffd \u058aK\ufffd\ufffd,'\t\ufffd\b\u001f\ufffdGA&\ufffd\ufffd2\ufffd\ufffd`\ufffd\ufffdg\ufffd\u000fF3&\ufffd\u0013F3\ufffd\ufffd\ufffd\\\ufffd\u03cbS\u0006\ufffdTW7xCt\ufffd\u0016\ufffdD\ufffd\ufffdd\ufffd\u0012\u0001\ufffd\ufffd8\ufffd2\u00d3b`\u001a;qM\ufffd|\ufffd\ufffd\u0014\ufffdQt\ufffdm6\u0467\u0000K\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd%\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffdV_i\ufffd!\ufffd\ufffd\ufffd\u000f\ufffd\uca5fS\ufffd\u7be9+K|\u42fa{\n\u0081Ph\ufffd9+\ufffdU7\u077e\ufffd\ufffd\ufffd\ufffd\ufffd~{\ufffd\ufffd\ufffd\ufffdJo\ufffd\ufffd\ufffd;OU)\u001c\ufffd\u0017\ufffdo\ufffdR\ufffd\bU\ufffd\ufffdxhJ{\ufffd\ufffd\ufffd\ufffd\u063f9\ufffd6\ufffd]xK3\ufffdv\ufffd\ufffdy~7\ufffd\ufffd22,\ufffd\ufffd\ufffd\u000e\ufffd\u0004QO\ufffd\u0012+s9\"\ufffd\ufffd\ufffd\ufffd'\ufffd]\ufffd!\ufffdD\ufffd\ufffd\ufffdY\ufffd\ufffd|IV\ufffd\ufffd\ufffd\ufffd\n%fs\u0016\ufffd5j\ufffd\ufffd\ufffdO\ufffdQ\ufffd\ufffd\ufffduN\ufffd\/+8'\ufffd\ufffd\ufffd\ufffdeI\ufffd\u0004\ufffd\u0006\ufffd\ufffd\ufffd1\/\ufffd\ufffdnF FA\ufffd\u00031\ufffd\ufffdT\ufffd>\ufffdP\ufffd9\ufffd\u0003\ufffdEw\ufffd\u0014\ufffd.\ufffd\b\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\ufffd\ufffdn)11\ufffd\ufffd\u0011]1k\ufffd\ufffd\r\ufffd\ufffdooY\ufffd\u001f[\ufffd\ufffd^7`k[\ufffd\ufffdtM$\ufffdb\ufffd\ufffd]\u04db\ufffd?\ufffd\ufffd[\ufffdiu\ufffd\ufffd\u040d\ufffd;\ufffd\ufffdE\ufffdV\ufffd6u\ufffd\ufffd>CV\ufffd\ufffd\ufffd\ufffd\ufffdE-\u0013\u0017wW\b+\ufffdZ\ufffdltna%51\ufffd\ufffd\fI\ufffd\u0019r\ufffd\"\ufffd\ufffd\u0012\ufffd\u0248i\ufffd\ufffd\ufffds\ufffd\ufffd\ufffd\ufffd5*\u001d\ufffd\ufffd; 3<\ufffd\ufffd\u05e9r\ufffd\u0379\ufffd].\ufffdj\ufffd\u075e\ufffdfX0#v6@\r\ufffd\ufffd\ufffdj\ufffd*G+\ufffd\ufffd\ufffd\ufffdn8W<\ufffd\ufffdpH*\ufffd\ufffd%w\ufffd\ufffdn\ufffd5PV]\ufffdE\ufffd\ufffdj\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd\u0015\u0001\ufffd\u0000\ufffd\ufffd\ufffd\ufffdc\u0015\u058b$%\ufffdr\ufffd-\ufffd!\"!\ufffd\ufffde\ufffd\u0018u\u001f\ufffdLoa\ufffd!\u0012\u0016\ufffd\u0014\ufffdv*\ufffd\ufffd\u0012\ufffdj\ufffdD\u0011\ufffd\ufffd}>_8s\ufffd.9B\ufffd\u001c\ufffd#\ufffdDe\ufffd\u0019r\ufffd\ufffd\ufffd\u001eh\ufffdZ\bb\ufffd\u0014\u036a(\ufffdW\ufffdDK2\ufffd>\ufffd\ufffd\ufffd\ufffdM?XS\ufffd2\ufffd\ufffd~x?\ufffd\ufffd\ufffdNi[>1\ufffd\ufffd\u0000w\ufffd\u0005\f\ufffd7\ufffdM\ufa2b\ufffdTTu\u04e1[\ufffd{\ufffdU\ufffdl\ufffdN\ufffd\ufffdE\u0016\ufffd>\ufffd\u001d\ufffd\ufffd{\u0013\ufffd&\ufffd\u001c\ufffd\ufffd\ufffd\u000b\ufffd\ufffd_\ufffd\ufffd\u0003\u0003\/\ufffd\ufffd$6\ufffd_\u0013@l:\ufffdR\ufffdR\ufffd\ufffdb\ufffd\ufffd\ufffdP\ufffd\ufffdSQI\ufffd\ufffd\ufffdN\ufffd\ufffd,<gR;sx\ufffd\u0012n\ufffd9K\ufffd#\ufffd<\ufffd\ufffd\ufffd\ufffd[,98\ufffdo2)2\ufffd8\ufffd\ufffd\ufffdW`\ufffd\ufffd\ufffdVT\\f\ufffdP\ufffd\ufffdF`\ufffd\t\ufffd%\u000fNRL*\ufffd<s\u001b\ufffd\ufffd}3\ufffd\ufffd\ufffdK\ufffd\u0004\/\ufffd\u001e\ufffd\u0007\ufffdS\ufffdN\ufffd\u0784\ufffdT\ufffd\ufffd\ufffd\u001bB&\ufffdK\ufffd\ufffd;T\ufffdq <\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\tICtv\ufffd\u0001\ufffd_S\u0016\ufffd\ufffd\ufffd_\ufffdP\ufffd\ufffd\ufffdQ\ufffd\ufffd\u001d\u0013\ufffd\ufffd*\ufffd\u001c\ufffd\ufffd)_\ufffd\u0124n\u0001\ufffd\u0007}\u0001\ufffd$&T\u0012\ufffdA\ufffd9_.\ufffdP)\ufffd\u0002\ufffd\ufffd\u0018\u0015\u0014z\u0013$\ufffddRZ5\u0019\u0019\u001a^\u0003\ufffdd\ufffdo6[\ufffdj\ufffd|\ufffdL\ufffd\ufffdX\u0010\ufffd\ufffd\ufffd\r#c\ufffd&*YR\ufffd\u048b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\ufffd\ufffdsWRw\ufffd\ufffd\ufffdc\ufffdg\ufffd\u0013\u9c96\ufffd\ufffd<\ufffd\ufffd1\ufffd\u0007\ufffd\ufffd\ufffd\ufffd|\ufffd\u01fc\ufffd\ufffdc\ufffd\ufffd\ufffdIb4$yQ\ubb18\u001b\ufffds\ufffd\u060c\ufffd\t\ufffd\u0011\ufffd\ufffd\ufffdC\ufffd\ufffdO8\ufffd=\ufffd\ufffd\ufffdz\u0003\u000e\u079e\u0018\ufffd@P\ufffd\u0012WJ\ufffd%\u0005\ufffd\ufffd\u0011\ufffdJ}{\ufffdZ\ufffd\ufffd\ufffd\u000f\b\ufffd\ufffdC\ufffd\ufffd\ufffdZB\ufffd\u0006u\ufffd\ufffd\u001e\ufffd>\ufffdT\u00eb\u054e2Z*)\ufffdK\u001f\u0015$Vo\ufffd\ufffd\ufffd\ufffd\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffdfI\u0019\u0012\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0012s\u0006\ufffd\u001cZK\ufffd\ufffd\u0004+A\ufffdbp\u0018x\u00c3\u000e\ufffd9#C\ufffd3L\ufffd>\ufffd\ufffd\ufffdT\tw\ufffd\ufffd\ufffd\ufffdhX\ufffd+\ufffd@P`\ufffd\u0000\u0012\u0005\ufffd\ufffd\ufffdi\ufffdD$\f\ufffd\bA\ufffd5\ufffd\ufffdk\u0010\u001cI\ufffdl\ufffd4\ufffdIjp@t\ufffd\u0002\u0001\ufffd\ufffdH\ufffd\ufffd*+\ufffd\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd\u0001\u0016\u000b\ufffd\u0012\ufffd3[[\ufffd\ufffd$#%\ufffd\u0013\ufffd9\u000f\u035e\ufffd\ufffd\u0001\ufffd\ufffd\ufffd\u0005\ufffd\u06e7-\ufffdo\ufffd\u001f\u001aj\u001e\ufffd\u0018\ufffdT\u0019\ufffd\ufffd\ufffd'\ufffd\ufffdx\ufffd\ufffd\ufffd,\ufffd\ufffd\ufffdnI\ufffd\ufffd\t\u05f6\ufffd\ufffd\ufffd\ufffdipcMW\ufffdm\ufffdAg\ufffdm[\u0013\ufffd'\ufffdW\ufffdZ5!\ufffd\"7\ufffd\ufffd\ufffd\ufffd\u047c\u0014_l\"e\ufffd\ufffd\u0005\ufffd\u001eDNK\ufffd\u0002\ufffd[L\u000b\ufffd\ufffd{\ufffd\bR\u0003|!\ufffdA\ufffd\ufffdzx\ufffdnAk\ufffdt\u001c\ufffdf\ufffd,\ufffd\ufffd\ufffdc\ufffd\ufffd2\ufffd\ufffd|e\ufffd\ufffd\u04aca\ufffd\ufffd:f\u0014\ufffd\ufffd\\B\u001e\ufffd\ufffd\ufffd\u06182]\ufffd\ubca5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd~\u0018\bh\u0007\ufffd\u0007\b'm53_\u0016:_\ufffd6`\u00b5\u000f\ufffd\u001cx\ufffd\ufffd\ufffd[\ufffd\ufffdZy\ufffd\ufffd\u001f\ufffd|\ufffd\ufffd\ufffd8\ufffdl\ufffd\ufffdk\ufffd\ufffd\ufffd\ufffd\ufffds\ufffdf\ufffduo=\ufffd\ufffd\u0675\u03bcz\ufffd\ufffd\ufffdJe\ufffdIY\ufffd\ufffd\ufffd\ufffd\ufffds#\ufffd\ufffd\ufffd{\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\u0409e\ufffd\ufffd\u000b\u0012\ufffd&7\bQ\u0017\u000e!rq|\ufffd(w\ufffd<\ufffdEL\u0006\ufffd\ufffd\ufffd+sM\u0014\ufffd\ufffd@\ufffd\ufffdW\ufffdn\ufffd\u06f1t\ufffd#\u062d\ufffd\b\u0003\ufffd\u0016r\r\u0006\ufffd\ufffd\ufffd2\ufffd=\ufffd\ufffdG\ufffd\ufffd)\ufffdC\ufffd\ufffdq\ufffd\u0003\ufffd=H\u0018\ufffdI\ufffdc\ufffd;\ufffd\ufffd|=\ufffd\u0002\ufffds\b\ufffd\ufffd\ufffd\ufffd\u0006\ufffd[\ufffd\ufffd \ufffd<\ufffdT\ufffd8\u0013\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd\u0361\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\b\ufffd\ufffdi\ufffds\ufffd?{q\ufffd\u02f7w\ufffd\ufffd\u000f\ufffd\ufffd\u0511\ufffdwbx\ufffd]\ufffd\ufffd\ufffdhsM}\ufffd\ufffd\ufffds\ufffd\ufffd3\ufffd\u0011\ufffdp\ufffd\u0004\ufffd\ufffd<\ufffd\ufffd\ufffd\b\ufffd\ufffd\ufffd\u0006\ufffd\ufffdP\ufffd`\tg\u0004\ufffdA>\u0210\ufffd+\ufffd\ufffd\u0005W\u0019\u001er\u0661\ufffd\ufffd(\ufffdj\u0614\ufffd\ufffd{\u0018+\ufffdx{<5\ufffd\f\ufffd\ufffdT\ufffd\ufffdI\u114d\u0007\ufffd\ufffd\ufffd\ufffd\ufffde\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd\u49f1\ufffd1\ufffdB\ufffd1\ufffd\ufffd\ufffdK*yI\ufffd\ufffd\ufffd@\ufffd\ufffd\u0011\ufffd\ufffdq\ufffd\ufffd\ufffd\ufffdc\ub7bf\ufffdyE\ufffd\ufffd]\ufffd\u0012\u001c\ufffdc\ufffd\ufffd\u2e9a:\ufffd\ufffd\n.\ufffd8\ufffd\ufffd\ufffd\ufffd\ufffdP\ud5f4\ufffd\u0014\\\ufffdh\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffdi\u000b\ufffd\ufffd\u04e7N\ufffd\ufffdw\u05d5a\ufffd\u0007\n\f\ufffd\ufffd\ufffd\ufffd\ufffd\u000e\ufffdw\ufffd\ufffd\ufffd2[s\ufffdF\ufffd\ufffd\ufffd\ufffdv\ufffd\ufffdd\ufffd\ufffdm\u01e7\u000e\ufffd8\f\u000e\ufffd\ufffd\u0003\ufffd\u000e\ufffdUb\ufffd{`\u001e\ufffd9|\ufffdnA\ufffd;6\u0013q\ufffd\f[33=\ufffd\ufffd\ufffd\"\u001d>3\u055e1\u0582\ufffdi\ufffd&Yl8\u0003\ufffd\u26f1\ufffd`\ufffd\ufffd\f}z\ufffd\ufffd\u0000\u001c27\ufffd0 \ufffd\ufffdl}\b\ufffd\u61c4k\ufffd\ufffd\ufffd\ufffd\ufffdk_\ufffdu\u026eYA~l\ufffdr\u04e2\ufffd\ufffdM\ufffd\u028a\ufffd\ufffd\ufffd\u0724>\ufffd2%\ufffd\ufffd\ufffdv\ufffdw\ufffd\ufffd\ufffd\ufffdM\u001b\u001e\ufffd[\ufffdJg\ufffd\ufffds\u0481\ufffd\ufffdM\ufffd\u000e4\ufffd,}\u0004\ufffd\ufffd\u0015\ufffdK%W\ufffd\u000fE\u0015\u0016\ufffd\tl\ufffd\ufffdO\u0002z\ufffd2\ufffd\\\ufffdS\ufffd\ufffd\\R-\ufffd\r\ufffdS\ufffd=\ufffd\ufffd\ufffdB\ufffd7\ufffd\ufffd \u001b>\u0018\ufffd>\ufffd\np\ufffdv\u0004N\u001d7\u0429z\ufffd\ufffd>+\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd2\ufffdm<\u0017.gr\ufffdZ<\\v-x\ufffd\u0016\ufffdX\ufffd5@Q\u0011\ufffdg\u0016\u000bK\tK\ufffd\u001b\ufffdT\ufffd(,I\\S\ucce86\ufffd\u001c6\ufffdV\ufffd\ufffd_?\ufffd7\ufffdz\ufffd\u001c.u\ufffd\ufffd\ufffd\ufffdO\ufffd9cO\ufffdD=\u0016LT\u001ak\ufffd\ufffd\ufffd\ufffd\u000f\ufffdI\ufffd\f\ufffd^\ufffd\ufffd\u07ef\ufffd\u1110\ufffd',\ufffd\ufffd\f\u0013\u0017iL4\ufffd\u0004\/\u02f1\ufffd2\ufffd\ufffd\u0017\ufffd4\ufffd\ufffd\ufffd~\ufffd\"\ufffd\ufffd\ufffd\u0015\ufffdOUQ}UnU\ufffd\ufffdWVU\u0005\ufffd]\ufffdK \u0006j\ufffd-\ufffd\u001br\rA\u00e7\ufffdq\ufffd\ufffd\ufffd\u001b\f\ufffdv\ufffd.x\ufffdP\ufffdw\ufffd\ufffd\ufffd\ufffd\u0005GV\ufffd\ufffdo\ufffd\u001d4\ufffdU\ufffd\ufffd)\ufffd\ufffdH\ufffd D~~\ufffd\ufffd\ufffdyJ\ufffd\ufffd`\ufffdSZsr\ufffd9eAHR4\ufffdv\ufffd\u0001j!\ufffdZ\u0084\u031a\ufffdf\u0001\ufffd\u001e-\ufffdX,\ufffd\u00b7\u0017\ufffd\u0002r:\u0000\ufffd1O\r\ufffd\u0001\"\ufffd\ufffd\ufffd\ufffd\u0001\ufffd\u0015\ufffd\ufffd\u001b\ufffd\u02f1\ufffd\ufffdl\u0012RVP\ufffd\u0019&?\ufffd\r\ufffd\ufffd\u0006QLm\u001c\ufffdV-\u0014\ufffd\/\u0017\ufffd\ufffdX\ufffd\ufffd>jX\ufffd\u0010D\ufffd):\ufffd\ufffdl\u02a8\u0012SfLmn*\ufffd\u0018\ufffdV`s\ufffdY\ufffd2.-z<y\ufffd\u001fO*s\ufffd_:932%\ufffd%z~\ufffd\u001d\ufffd+^\u067e\ufffd\ufffd\rM\ufffdS\ufffdU\u008c\ufffd\ufffd\ufffd%#\ufffd\ufffd\u0013\ufffd\ufffd\ufffdK\ufffd\ufffd\ufffd%\ufffd\ufffd\ufffd5\u000bc\ufffdp\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffdu\ufffdg\ufffds\ufffd\ufffd\ufffdk\u001b\ufffd8j\ufffd\ufffd\ufffd\ufffd\f\u036b&\/\ufffd\ufffd\ufffd^;\ufffd\ufffd\ufffd\u001a\ufffdyry\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd2\ufffd\u0418xm\ufffdv\ufffd7\u0533\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffdf\ufffd\ufffdE\ufffd*\ufffd\u001c\ufffda\ufffd\ufffd$y\ufffdSud\ufffd\u0010\ufffd\u0019u\ufffd\u0002$\ufffd%\ufffd%\u0006s\ufffd\/(,8\u00145\u0015Z\\T\fX\ufffdy\ufffd\ufffd\ufffdP\ufffd\ufffd\ufffdR\u0370\ufffd\u001e!\ufffd\u1c94\b\ufffd\ufffd\ufffdtWN9l\ufffd\ufffdG\ufffd>Xr\ufffd\ufffda\ufffd}8\ufffd,\ufffd\nA\u0016i\ufffdrJ\/\ufffd%g\"z\ufffdd\ufffd\ufffd\ufffdp\ufffd\ufffd\ufffd\f\ufffdBb\ufffd?\u03e6uN\ufffdX t\u0007\ufffd\u0019\ufffd\ufffd\ufffd:&\ufffd9\ufffd,\ufffd\u0019hz\ufffd+\ufffdr\ufffd]\ufffdms\u001a=\ufffd\ufffdiL\ufffd\ufffd(\ufffd\r\ufffd\u0556\ufffd>%\ufffd\ufffd5Z\ufffdw`A)J=\u07da\ufffd\ufffd`\ufffdfB\ufffd\ufffd\ufffd]`\u001eVk\ufffdPd\ufffd8$\ufffd\ufffd\u000eK\ufffdz\ube41\ufffd<\ufffd\ufffdo\ufffd_\ufffd\ufffd\ufffd\ufffdV\ufffd<\u0329R.\brQ\ufffdU\ufffd@\u0e73\ufffd\ufffd$8\ufffd\ufffdsI\ufffd\ufffd\ufffd^\ufffd!\u0795r\ufffd\ufffd,+\ufffd\ufffdn9\ufffd\ufffd\ufffdi%\ufffdP\ufffd_\ufffd\r%\ufffd\ufffdFi\ufffd\ufffdg\ufffd8\ufffd\ufffd7\ufffd\ufffd'\ufffdiA\ufffd\ufffdR9V9\ufffd\u0163\u0015\ufffd\ufffd4\ufffdJ\u05cbc\ufffd!\ufffd\u001aR+\u0014\ufffd;xPPdY2\u000eE\ufffd\ufffd-\u0018\ufffd\ufffd\ufffd\ufffd*\\J\ufffd\ufffdNo\ufffdl\ufffdW\u061c\ufffdo\ufffde\n#\u001aU6\ufffd\ufffds\ufffd\ufffd_\ufffd\ufffd\ufffdY\ufffd\u049c\ufffd\f^\u001e7]\ufffd\ufffdcuw\u000f\ufffd54\u0015Ye\u0019E\ufffd\u001f\u058b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0003\ufffd\ufffd\u001d\u071f\ufffdE\ufffdvu\ufffd\ufffd\ufffd\ufffdF\ufffdY\u0004r&\ufffd;O\u0012\ufffd\ufffd\u0007\ufffda\ufffd\ufffd'\ufffd\u0019l!Z\ufffd\ufffd\ufffd\ufffdz\ufffd\ufffd)\ufffd\ufffd\ufffd\u0002\ufffdM`N\ufffd3\ufffdzGV\ufffd\/\r\ufffd\u001e\ufffd:\ufffd\u0016\ufffd\ufffdPT\ufffdo\ufffd?\u0014m \u0002\ufffd\u0019-\ufffd|))\u001a\ufffdJ\u047d\ufffdI\u001f\ufffd\u001e\ufffd\ufffd\u000e\ufffd!\ufffd\fJ\ufffd\u0159\ufffdma\ufffd\n\ufffd\ufffd(\ufffd\ufffd#VcW\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffdYlF\ufffd\u0002\u0014\u0017\ufffd~L\u0014\u001eq]\ufffd\u0016\u04d4H\ufffdp\ufffd-\ufffdHuiP\ufffd\ufffd\u0016\ufffd#\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019e\ufffd\ufffdL\ufffd:\ufffd\u41bcl\ufffd\ufffd\ufffd\ufffdqm\ufffd\ufffd(O\ufffd&W\"W\u0006\u0081\ufffd\u0003\ufffd\ufffd<\u0019\ufffd\t\ufffd\ufffd\ufffd\u0012\u06db\u001ba\ufffdyc\ufffd>\ufffd\ufffda_I\ufffd\ufffd\ufffd\ufffd6\ufffd\ufffdRu\ufffdx&\ufffdH\u0007*ZI\ufffd`\ufffd`Mw(\n\ufffdd>\u0014\ufffd \u0016\ufffd\ufffd!\ufffd\ufffd\u0014!\ufffdI\ufffd\/I\u0006\ufffdeX<\ufffd\nUK\ufffd\ufffd\ufffd\ufffd}\ufffdo\ufffdf\ufffd\u0016\ufffd\ufffd|\ufffdYa\ufffdZ\u0001f\ufffdX\ufffdO\ufffdB\"a\ufffd<K8vIYBX\ufffd\b\ufffd\ufffd\ufffd\ufffd\ufffd.iUe\u0561hgf\ufffde\ufffd\ufffd\u0005\u000b\ufffd\u001f\ufffd.\ufffdSeA\ufffdM\ufffd\"k\ufffd[\ufffdhe\u0006e\ufffdp\ufffdI\u0003l?\ufffd\u0005f\ufffd\"\ufffd\u001e\ufffd\ufffdM[\u0786w\ufffd\u0014\f7\ufffd\u0000\ufffd\ufffd\ufffd{q?i\u001f\ufffd\ufffdS\u01cdt*rQ\ufffd\u0611D\u05ae\u0007\n\bQ`\ufffd\ufffd@\u0000v]t\ufffdP\ufffdu1\ufffd\u001ca\u000bc\ufffdiJ\ufffd\ufffd \u0015)\ufffd\u0010W\ufffd0O\ufffdO\ufffd\ufffdc\ufffdh\u0125\ufffd\ufffd(\ufffd\u0012\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0015J\ufffdJ\u0017\ufffd\ufffd\ufffd\ufffd\ufffdb\uf63f\ufffd\ufffdeQK\ufffd\ufffd\ufffd+I\ufffd\ufffd\f\ufffd\ufffd\ufffd\ufffd+\ufffd\u0015\ufffd\ufffd\u023f\\\ufffd\ufffd\ufffd\ufffdJ\ufffd\u000b\ufffd;|2m\ufffd\u05db\ufffd\ufffds\ufffd5\ufffd&|X\ufffd\ufffdI\"\ufffd^\u00fc\ufffdS\ufffd\ufffd\ufffd\u00197^\ufffd\ufffd6\ufffd\ufffde\ufffd\u000eD\u02ba\ufffdZ\ufffd\ufffd\ufffd2\ufffd\ufffdL\ufffdH\ufffdw\ufffd\ufffd\ufffd\ufffd\ufffd\"\ufffd\ufffd\ufffd6\ufffd8qgm$\ufffdbf3\ufffdUf\ufffdi(8,\t\ufffd\ufffd\u0011\ufffdA\ufffd\/e\f(a\ufffd\ufffd\ufffd%\u0001\ufffd8\ufffd\"8\u001c\ufffda\ufffdA-\ufffd\ufffd\u000b\n\ufffd\ufffd\ufffd\u0005\ufffdb\ufffd\ufffd\ufffd9\ufffde\ufffd\ufffda\ufffd\ufffd\ufffd\ufffd(c8\u000f\ufffdx\ufffd\ufffd\ufffdO=i0\ufffd)y\ufffdA\ufffd\u0017\ufffd\u0015\u0018\ufffd\ufffd|\ufffd\"\ufffd\u020c\ufffd\ufffdN\ufffd\u0003\ufffdi\u0012_)\ufffd\u063b\ufffd\u000e\u02d3,I\ufffd\ufffd%\ufffd\ufffdD\ufffd0;\ufffde~[\ufffdO4\ufffdi+\ufffda\ufffdZ7y\ufffd\ufffd\ufffd\ufffdYME\u0016E\ufffd\/\ufffd&T\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffdS&\ufffd%v$\ufffd\ufffdjb<!\ufffd\u0010<\ufffd\ufffd\ufffd+f&\ufffd\ufffd6\ufffdQ)\ufffd?\u0003\u000fH\ufffd5\ufffd$!\ufffd\ufffd\ufffd\ufffd-\u0010\ufffd<\ufffd\ufffd\ufffd-7X\rj:\u057aU\ufffd\ufffd@\/T9:H\ufffd\u000fQ\ufffd\ufffd\ufffd3\ufffdE%\u000f}d\ufffd\t\ufffd\ufffd\u000eH\ufffdLz\ufffd;g\ufffd\ufffdW{\r\\\ufffdk\ufffd]\ufffd\ufffd\u0419\u07ed|9\ufffd}\ufffd-\u000b&d6\ufffdn\ufffdt\ufffd\ufffdo\ufffd\u000f\ufffd\ufffd\ufffd\ufffd_\u000e\ufffd\ufffd\ufffd~\ufffd\ufffd\ufffdV\ufffdN\ufffd\ufffd\u0679\ufffd\ufffd\ufffd5)\ufffd%Q\ufffd\ufffd\u0005\ufffdg\u001b\u0012\ufffdX\ufffd\u0013\ufffd\n'\ufffd\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffdU\ufffd\ufffd\ufffd0\u001f\u0783%\ufffd\ufffd0\\\u001aL\u0014\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001cKHhO(TG\ufffd|\ufffd8I\bJ\ufffd\ufffd<\ufffd=\r$\ufffd\ufffd\ufffd\u0669\u0003\ufffd:\ufffd\u000b\ufffd\ufffd\ufffdZ\\\\&\ufffdT\ufffd0\ufffd\ufffd\u000e\ufffd\u0012\ufffdc\ufffd\ufffdp\u017a\ufffdO\ufffd\ufffd*\r\ufffd\ufffd\ufffdj\ufffd-P\ufffd\u0018\ufffd\/\ufffd+$\u001a\ufffd\ufffd\ufffdz\ufffd\ufffd\ufffd}\ufffd\u0102\u0003GcO\ufffd>yc\ufffd\ufffd~ft\u04cd\ufffd\ufffd\ufffd\ufffdt\ufffd\ufffd$x\ufffd,\ufffdb)l\ufffd\ufffd\ufffd\ufffd\ufffd\u000b2M\ufffdJ\ufffd\u0013\ufffd\ufffdZ\ufffd\ufffd\u001f\ufffd\u001c8\ufffd\ufffdA\u0017\ufffd\u000f6\ufffd^z\ufffdn\ufffdL\ufffdT$\ufffdH@\u001f\u0017x\ufffd\ufffd(Z\ufffd\ufffd\ufffd\u0011\ufffd\ufffd:K\u0015E\u001alU\ufffd\u00114Vk\ufffd\ufffd\f\ufffd|\ufffd\ufffd`\ufffd\ufffd\fV\u01f0B\ufffd\t[\ufffd\ufffdBa\ufffdV}r-\u0016>\ufffd3\u0006\ufffd\ufffd\u0010\u0325\ufffd\ufffd%\ufffd<)\ufffdW\ufffd<\ufffd\ufffdj\ufffdh1\ufffdBc\ufffd\ufffd\u0012L\ufffdJ\f\ufffd\u0005l\u02aa\ufffd\ufffd\u000b\u0007\ufffd\ufffd}u\ufffd\ufffd\ufffd#mQ\ufffd\ufffd$?\ufffdnZ\ufffdw\ufffdZU4\ufffdvB\ufffd.\u04453&\ufffd\ufffdf\ufffd[?\ufffd\ufffd\ufffd\u001f\u001d|M\ufffd\ufffd\ufffd\ufffd\ufffd\t\ufffd\u0005V\u0015\ufffd\ufffd\ufffd\ufffd\u0013s_\ufffd\u0019V_yuA\ufffd\ufffd\u0012\ufffd\ufffd\/\u0001\ufffd~\u011br\ufffd\u000e;\ufffd\u0004v\u000b\ufffd\ufffd\ufffd\u000e{\ufffdz\ufffd!\n\ufffd\ufffd\ufffd\ufffd\u0015\ufffd!\r\ufffd}M\u0006k;\ufffd4\u001a\ufffdA\ufffdP\u0014\ufffd\ufffdi8'\ufffd\ufffd9lJeq~\u0004TN\ufffd\u000b\ufffdlM\u0002_\u0019\ufffdh\ufffdIHr;\ufffd\u0465\ufffd \ufffdf\ufffd\ufffd\ufffd\ufffdU\ufffd\ufffd\u0005\u05f5\ufffd\u0005\ufffd\u062b\ufffd\ufffd\u0013\ufffd\u001d\ufffdp8q\ufffd\u0015\ufffd\ufffd\u02b7L-\ufffd\ufffd\ufffd*T\ufffd\ufffdV\ufffd\ufffd\ufffd\ufffdV\u0017\ufffd\ufffd]a\ufffd*T\f\ufffd\u0005XW\ufffd\ufffdY\ufffd<$X\ufffd\ufffd\ufffd\ufffd\ufffd3\ufffd\ufffd3\ufffd0\ufffdL\u0017\ufffd1\u04d7M\ufffd\u001c\ufffd\ufffd\ufffd\ufffdA\ufffd\u0013\ufffd\u0527\u0660\ufffdC\ufffdy5\ufffd\u001a\ufffd'\u001a\u0003\u000e\ufffdtj\ufffd5R\ufffdT\ufffd]j\ufffd\u0006\ufffdn\ufffdb-\ufffd\ufffd\ufffd\ufffdRC\ufffd\u0001\ufffd\ufffd\ufffd\ufffd\u2efb\n\ufffdp^^X1\ufffd\\U\ufffd\u0000\ufffd\ufffd$\ufffd\u0016,\ufffd\ufffdd\ufffd7Pb\ufffd|\u0010\ufffd9\u0018\ufffd\u0001\ufffd\ufffd\ufffd\u01d4\f+\ufffd~C:\ufffd\r\u0007#\ufffd\u0016\ufffd\ufffd}\u0000\ufffd\u0015\ufffd\ufffd77\ufffdo\ufffdL\ufffd\ufffd\\\ufffd\ufffd\\\ufffdtUc\ufffd\ufffdm\ufffd\u074fv,v.\ufffd\ufffd\ufffdZ\ufffd*\ufffd^>wec\ufffdw\ufffd4\ufffd4\ufffd;\u001bi\ufffd\ufffdh*\ufffdT\u0004\ufffd'\/\ufffdN_\u0011\ufffdqd\ufffd>o\ufffd\ufffd\u0013)\t\u000b\ufffd%\ufffd\ufffd\ufffd-]\ufffd\u0004\ufffd\ufffd\ufffd\u024b\ufffd[?+9\u000e{5[\b\ufffd\f|\ufffd\ufffd,\ufffd\ufffd\ufffdfA\ufffdo7\u001b\ufffd\u062c\ufffdJ\/\ufffd\u001a^&\u0017T\u0004\u0395\ufffd\u0013\ufffd\u079c\ufffdT\ufffd\u0225\ufffda\ufffd\ufffd\ufffdeL?\ufffd\ufffdhX{\ufffd\ufffd^\ufffd8v&\u0010\ufffd\ufffd\ufffdB\ufffd\ufffd\u0010\ufffd\ufffdm\u00117\ufffd\u0662\ufffd&\ufffd5\ufffd\ufffd\ufffd\ufffd\u0006O\ufffdz\u0017mI\ufffd\ufffdP\\S\\\u0416W2qK\ufffd\ufffd[\ufffd\ufffdG\u0014\u0005\ufffd\u000b\ufffd\ufffdcI\ufffde\ufffd\u06a6,wnUk\ufffdCOp\ufffd\ufffd9%\ufffd\u00101\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd}8+\ufffdy(\ufffde\ufffd\ufffd\ufffd#\ufffd\ufffd{\u0004\ufffd\ufffd\\L\ufffd\ufffd\ufffdP\ufffdu\u0615\u0003\ufffdM\ufffd\u00005\ufffdRn\u0018QHDL\ufffd\u0007\u00140\ufffd\ufffd\ufffd\ufffd)fl\ufffd\ucb00\ufffd\ufffdv\ufffd\ufffd&\ufffd%\b\u04cb\ufffdG\ufffd\ufffdf\ufffd\ufffdx\ufffd\f\ufffd\ufffdx\ufffd\ufffd%\ufffd\u0012\ufffd6\ufffd7\ufffd\ufffd\ufffdf{e:\ufffd\ufffdO\ufffd\ufffd\ufffdV\ufffd_\/\ufffd\ufffd\ufffd3e\ufffd:\ufffd\ufffd\ufffd\ufffdi\ufffd_cCQN\ufffd\ufffd\u0010\ufffd\ufffd6yN`l\ufffd\ufffdh*P\ufffd\ufffd\ufffd~\ufffdm\ufffd\ufffd\ufffdF\/\ufffd\ufffd\"\ufffd\ufffd\ufffd%*\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd,3\u00c9*S\ufffd\ufffd\u0014\ufffd\ufffd\u0005\ufffd\u0014b\n\ufffd\ne\ufffd\ufffdj0\ufffd\ufffd\ufffd&=\u0014\ufffdj\ufffd?.%z\ufffd\u000e\u001cj\ufffd\ufffdq9\ufffdJ\ufffd\ufffd\u0005\ufffd\ufffd\u0017O\ufffd\ufffd\ufffd\u00005\ufffd\u0003\ufffdL\ufffd7\ufffdx7~\ufffd\u0002?8AY\ufffd\u001f\u0007\ufffd\ufffd\ufffd\ufffd\ufffdxj\ufffd\u001cQp\u032a\ufffd{\ufffd>\ufffdV\ufffdo\ufffdd\u0018J\"t\ufffd\ufffd\ufffd(;qdC\ufffd,\ufffd\u001f\ufffd\b\ufffd3\\N\ufffd\u0004BF\ufffd\/kp\u0016\u0015#\u02afpO\u0014\u019c\ufffdGSk\ufffd\u0014\ufffd\ufffd\ufffd\u001e\ufffdRV\f\ufffd\ufffd\ufffdY\ufffd\ufffd3\ufffd\ufffd\u0005\u0012D\ufffd\ufffd\u00072\ufffd-\u001b\ufffd\f\u0017\u0012#Kt\ufffd\\\ufffd\u0012\ufffd\ufffd\ufffd\u0016\ufffd\u0017\u0000\nd\u0018Xj\u0014S\ufffdz=\ufffd\u00062\\,5&\ufffd\f\/O-\u0124WaG@\f\ufffdH\ufffd\ufffd\ufffd<\ufffdB\ufffd\ufffd\ufffd\ufffd\ufffd6s\ufffdh4c\ufffdG\ufffd\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\ufffd\u000b\ufffdv\u0002@\ufffd\ufffd\ufffd\u0003\ufffdW\ufffd\b\ufffd\ufffdc?\ufffd\ufffd~\u0014\u0004\ufffdD\u0004\ufffd\ufffd\ufffd\u001d\ufffd\ufffdn\ufffd\ufffd@N\ufffd\u001d\ufffdm\ufffd\u0010\ufffd\u001du\ufffd\u001a\u0377(\ufffd\ubb78\ufffdTRE\ufffdCl\u074e\ufffd\ufffd\u06f8\ufffd\ufffd\f\u071f\ufffd'd3_\ufffd\ufffdg$\ufffdx\ufffd\ufffd\/\ufffd_|\ufffd9E8\u0015\u0018\ufffd\ufffd\ufffd1\u0017$\u0086\u0010\ufffd\/@\ufffdj\u0012;I\ufffd\ufffd\ufffd\u025c'\ufffd\u0004\ufffd?\ufffd2\u0014\ufffdED'\ufffd,^>\u03d3\u0007\ufffd\ufffd\ufffdU\ufffd|\ufffd,\ufffd`S\ufffd\ufffd\ufffdE\u0012\uc514)\ufffd&S\ufffd7\ufffd2\ufffd\"\ufffdqi\u000b\ufffd\ufffd>\ufffd\ufffd-{h\ufffdb\ufffds\ufffdz\u01dc\ufffd\ufffdb\ufffd\ufffd\ufffd\u0011Hl\u001f\ufffd\u04c4`\ufffd\ufffd)n\ufffdd\ufffd\ufffd\u04c9\ufffd\u9d7f|\/4\u035fX9Sg\u001e\ufffdk4{\u000b\u0012\ufffd\u0715\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdJ\ufffdO\ufffdX\ufffd\ufffd\u0003\u03b0\u04d6#\u000f\ufffd\ufffd\ufffd\ufffdD\ufffdts\ufffd\u001e\ufffdu\ufffd\ufffd\ufffdx\ufffdE\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd&\ufffd\ufffd\u001a?\/\ufffd\u001f\ufffd\ufffd\ufffdRHSn+\ufffdbv #1Y\u050fR\ufffdG\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u000b(\ufffd\ufffd\u0013\ufffd\u001c\ufffd\u0002r\ufffd\u0000WG\ufffd=A\ufffd\ufffd\"\u0006\ufffd\ufffd_\ufffdN\u0011\ufffd!\ufffd\ufffd\u0015\u0007\ufffdr\ufffd\ufffd\ufffd\\\ufffd\ufffd$\ufffda\ufffd\ufffd]\"\u0006\u001c~1b\b\ufffd\ufffd\n\ufffdw`>\f\ufffd\ufffdM\u0557\ufffds\ufffd\ufffd\u0016\ufffdL\u027f\ufffd\f\ufffd\ufffd\u001e\ufffd<\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffd\u0013\f\ufffd\u0006\u0012\u001f8\ufffd>?\ufffd\u0013\ufffd\ufffd\ufffd\ufffdc\/\u001a\ufffd\ufffd\ufffd\ufffd\u000eu\u077cw\ufffd\ufffd\ufffdB\ufffd\ufffdf]\/\ufffd\u0664\ufffd\u001c\ufffdej\ufffd;\ufffdY\ufffdO\ufffd\ufffd;\u0005-\u0641\ufffd.\u0001\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\f\ud9e1\udc01\ufffd*\u000e\ufffd\t\ufffd\ufffd\ufffd\ufffdK\ufffdm\ufffdu\u001c\ufffdu\ufffd\b\ufffd(k\ufffdj\ufffd>CGT\u0006\u0015\ufffd\ufffdUR\u000eg#w\u000b\ufffd\ufffd\ufffd`j\ufffd\ufffdJ\ufffdf\ufffd\\\u020eD\ufffd\u0014L\ufffd\u04aa\ufffd\ufffd\u0003DT6\u001c\ufffde\ufffd\ufffd\ufffdT\ufffd\ufffd(\u0002\\AX\ufffd\u0000\ufffd\u0015bd\ufffdm%\ufffdB\ufffdc\ufffd\u0006\ufffd\ufffd\ufffd\u07b0i-\ufffd`\ufffdxxN\ufffdO\ufffd\u0019!q?I\ufffdc\ufffdg^Lp\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffds\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd+*|\ufffd\u000e\ufffd\ufffd\ufffdC\ufffd\ufffd\ufffd\ufffdH\r\ufffd\u0017a\ufffdL\ufffdb\u0735'>\ufffd-\ufffd\ufffd\u000b-\ufffd\b&\u0671SZ\ufffda%\ufffdk\ufffd\ufffdj\ufffd^\ufffdW\ufffdP\u0012N%\u0005\u0003\ufffd\u001fc\u045a<\ufffd\ufffdN$U\ufffdi\ufffd\ufffdl\u067c\ufffdpi\ufffd\ufffd\ufffd\ufffdh\u06fa\ufffd\ufffd\ufffdeSq\ufffdv2\ufffd\ufffd&\ufffd\ufffdu8_\ufffd\ufffd\ufffd\ufffd\u0006\ufffdg\ufffdW\ufffd\ufffd\ufffd\ufffdC\u01b8\ufffdQj\ufffd\ufffd\"\ufffd\u0011}3\ufffdz\u001b\ufffd\ufffd\ufffdz\ufffd\ufffd<\"5xa\u0010\ufffd\ufffd\ufffd\ufffd\ufffd\u030eE\/\ufffd\ufffd\u27fcx\ufffd\ufffd\ufffd\ufffd>\ufffd\u0010o?\f\u052e\ufffd\ufffdy\ufffdP\u000f\u000b\ufffd\\\ufffd\ufffd\u0006\ufffd\ufffdw\ufffd\ufffd\ufffdR=\ufffd\ufffd\u308cr\ufffd#2\ufffdRv\ufffd\u0000:h8\u001b.\u0017\ufffd\ufffdS\ufffdx%\ufffd!*\ufffd7]\ufffd\ufffd\/\ufffd\ufffd>\ufffdpl\ufffd\u0007\u001f\ufffdZ\u05e1\ufffdjP\ufffd'6A\ufffd\u01c78z\ufffd\ufffd\u0012q\ufffd\u0004\ufffd\ufffd`\ufffd\ufffd\ufffd_\ufffd\u0000\ufffd\ufffd\ufffd\u0002\ufffd7\ufffdGl\/\ufffd\u0019\ufffd*\ufffd\ufffd&\ufffd\ufffd\ufffd\ufffd\u0294GT:)\ufffd5\ufffd\ufffd5\u0018\ufffdL\ufffd\u0011;a\u0004H\ufffdfc\u001a\ufffd<W\ufffdoK\ufffd.\ufffd)\ufffd?\ufffd{\ufffd\ufffd\ufffd\u0005\ufffd1\ufffd\ufffd\ufffdp\u0011n\u001e\ufffd\ufffd\u0012L\u001c\ufffd'\u0005Bqf\ufffdJ\ufffd\ufffd\u0014\ufffdAxR'\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\u0012e\ufffd5\ufffd\ufffd\ufffd\ufffd*\ufffd\ufffd>\/\ufffd\u0001N\ufffd\ufffdI\ufffd`\ufffd)\ufffdz\ufffd\u04e9\ufffd.\ufffd\ufffd(\ufffd\u001b\rlL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0019\ufffdi\ufffdsp4\ufffd\ufffd\ufffd_\ufffd*y\ufffdF\ufffd?sQ}\ufffdX\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffd008;\u04b8\ufffd;\ufffd5J\u00e4l\"\ufffd]:\u000f\ufffd\ufffd\u0011\ufffd`\ufffdc|\u0257\ufffd1\ufffd^D\ufffd\u0325\ufffdd\ufffd\ufffd@\ufffd\ufffd.\ufffd\ufffd%-#m\ufffdh\u000b\ufffd\ufffd\u0587Je\u001a\ufffd\u001e\ufffd\ufffdy\ufffdi\ufffd\t\ufffd\ufffd\ufffdD[\ufffd\ufffd2\ufffd9\ufffdJ\ufffd\u0003Ys\u00bb\u0012\u0004\u001c5\u0011\ufffd\n\ufffd<\ufffdj\ufffdj\ufffdB\ufffdt:,.\ufffdC}\ufffdw\u001c7\u0002\ufffd\ufffd\ufffd\ufffd\ufffd\f\ufffd(\ufffd1u\ufffd\ufffdq\ufffd<\ufffd~\u001a\ufffd\u01b9\u001f\ufffd\n2\ufffd\u0252as_u\ufffd\u07d3S\ufffd\ufffdg\ufffdV\ufffd\ufffd\t\u04e5\"}\ufffd.Jv\ufffd\u54ea\ufffdn\ufffdm\ufffdq\ufffd\u0005~m\t29\ufffd?\ufffd=(\ufffd \ufffdT\u000b\ufffd\n\ufffdKn%\ufffd4;\ufffdi\ufffd9u:\r~\ufffd\ufffdt\ufffd\ufffd\u001f\ufffd$G\u0236\ufffd\fgX\n[\ufffdf9\ufffd\u00c6\ufffd\ufffd\ufffd\ufffd\ufffd\ueaeehX\ufffd\ufffd\u031cY[\ufffd1\u0019\ufffd'\ufffd\ufffd\ufffd=l0\ufffd\ufffd)U\ufffd\ufffd\ufffd5&\ufffdv\ufffd\ufffdq\ufffd!\ufffd\ufffd\ufffd\u0000#\ufffdI\ufffd\ufffd\ufffd)\ufffd$\ufffd\u0167\ufffd:\ufffdY\u001a\ufffd\ufffd\u0608\ufffdc\ufffd\ufffd\ufffd\ufffdX\u9df87\ufffd{\ufffd\ufffd\u0013y+\ufffd}21\ufffd{W\ufffd0\ufffdp\u0142M\ufffd)\ufffd\u0001AE\t6\ufffd\u001e Nu\ufffd\ufffdv\ufffd\u0515\ufffd\u0018<\ufffdN6\ufffd#\ufffd\ufffd*\ufffd\ufffd\ufffd\u0006\u0013\u039bX\ufffd\u00107\u0013\ufffdp\b\u0706sv6k\ufffd{\ufffd\ufffdn\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdmU\ufffd\ufffd\ufffd\u001c\ufffd\u0454\ufffd\ufffd*\ufffd',HL]\ufffd:~\ufffd1\ufffdf\ufffd\u0019o.\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd{\ufffd\ufffd\ufffd\ufffdc\ufffd\ufffdB\ufffd\ufffda\u0014\ufffd\ufffd\ufffd\ufffd2*grT4G-\ufffd\ufffdbI\ufffd\ufffd\ufffd\u05632c_\u0019??\ufffd\ufffd\u07ecD(2\ufffdWY\ufffd\ufffd}\ufffd\ufffd\u0013\ufffd\ufffdAI\u001f^\ufffdz\ufffdX\u23c9\ufffd\u0012G\ufffd\u001a\u0014\ufffd\ufffd\u001a\u0014%\ufffd%\ufffd\ufffdo\ufffd\ufffdrF)\u000e\ufffd\ufffd\u0003\u0002G\t|iP\n\ufffd\ufffdaJ\ufffd\n\ufffdR \ufffd\ufffd\ufffdr\ufffd\u0000\ufffd\ufffdv\ufffd\ufffd>\ufffd\ufffd\ufffdb\ufffd)o\ufffd\ufffd\ufffd\u001f\ufffdaxv!>\ufffd\ufffdS&\ufffd)\ufffd\ufffd\ufffd\u0007\ufffdS\u0291a\ufffdO\ufffdy\ufffd}\u00bb\ufffd-\ufffdA\ufffd:\ufffd\ufffdT\ufffd\ufffdK\ufffd8;\u0015B\ufffd\ufffd\ufffd?\u01b7B\u0016\ufffd?$\ufffd\u0005#I\ufffd\ufffd\ufffdH\u0010\ufffd\ufffd\u0002#\ufffd\ufffd\ufffdu\ufffd\ufffdj\ufffd\ufffd1]*JL\ufffd\ufffd\ufffd\u00165p\ufffdH\ufffd\u0018o\ufffd\ufffd\ufffd5l\u0004\ufffd\ufffd\u0014\ufffd\ufffdVt\ufffd\ufffd\ufffd\ufffdHx\ufffd\ufffd\u0007\ufffd\ufffds\ufffdA\ufffdY9)\u0010,\ufffd\ufffd^\u0003\ufffd\u000e\ufffd`\ufffd\ufffd{\ufffd\ufffd\u001c\ufffd\u02d3cF\u0014\ufffd4\ufffd\ufffd\ufffd|\ufffd+\ufffdn\u072c\ufffdnaY&gi\\\ufffd@%\ufffd\r\u0006\ufffd\ufffdV\ufffdA\ufffd\ufffdT\u0015\ufffd\u0006\u0005\u0004\u001b\ufffd\u0006\ufffd\u0015\ufffdY\ufffd\ufffd\ufffd{\u0015\u0012\ufffd\u038c\ufffd\u001c\ufffdN^\f\u0016\\\ufffd`d\ufffd\u001e\u000e\ufffd4`\ufffd\ufffd\u0018\u06e9\ufffd\ufffd\n\u0015\ufffd\ufffdE@\ufffd\ufffd\u07fc\u0474~\ufffd\ufffd\u07dey?\u0011\u0674e\ufffd\ufffd\u0235SZ\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#\u0749K\u001cN<\ufffd\ufffd\u037d\ufffd\ufffdq\ufffd4\ufffd\ufffd\ufffd\ufffdf\ufffd\u0735\ufffd\ufffd\ufffd\ufffd\u0018\ufffd\ufffd\ufffd\u0018Q&f\ufffd\u001c\ufffd\u0015\ufffd\ufffdQ\u0214\n\ufffdC8W\ufffd\ufffd\ufffd\ufffdY\ufffdJ\u0019\ufffd\ufffd5\ufffd\ufffde9E\ufffd\ufffd\u0002\u000e\u02c4\ufffd>\u0019i\u0014\ufffd-\ufffd\ufffdcnl\ufffd+}\ufffd\ufffd\ufffdm00\u0018E\u001a\ufffdY\ufffd\u001fi\ufffd\r\u000b\ufffd\ufffde\ufffdZXn\ufffdr\ufffd6\ufffd)\ufffdoV\u02e8\ufffdn\ufffd\u05e2\ufffd&M\ufffd\u001a\ufffd\u001a\ufffd\ufffd@\ufffd\ufffd\ufffdn*\ufffd\ufffd\u001f\u0198n\u0158^\u0098\n\ufffdb!\ufffd\ufffd\ufffd\ufffd\u0016\ufffd\u076a\u0236\ufffd\u0587\ufffdl|1@0\ufffd\u06e5\u0005\ufffd\u0002\ufffd\ufffd1\ufffd\ufffdaRJ\ufffd2\ufffdN\ufffd\ufffd\ufffdQ\ufffdT\ufffdw9\ufffdg\ufffdA\ufffd\u0007?;S~\ufffd\ufffd\u000b\u66fc\u0010`>\u001c\ufffdR\ufffdp\u0013\ufffd\ufffd\ufffd\u0016f-\ufffd\ufffd\u000b\ufffd\ufffd\u0000KZU\ufffd\\d\ufffd|a\ufffd{N\ufffd\ufffd!\u000f\ufffd\ufffd\nE\ufffd-\ufffdY\u018b\/\u0005\ufffdc]\ufffd\ufffd\ufffd^6\ufffd\ufffdM\ufffd\ufffd\ufffd\ufffd\ufffdS\ufffd\ufffd)\ufffd\ufffd<\u057bO\ufffdU\u0012L\ufffd\ufffdl\ufffd\ufffdv\u000f5\ufffd\/\ufffd\u001f\ufffdX\ufffd\ufffd\u06a9\ufffd\ufffd\u0013\u000fW\ufffd\u0389]\ufffd\ufffd\u0007\ufffd\ufffd=\ufffd\ufffd\ufffd\ufffd[\u0019\ufffdE\ufffdj5^\ufffd\ufffd\ufffd{\ufffd\n>\ufffd\u0577\ufffd\ufffdL\ufffdI\ufffd|&\ufffd\ufffdSb\ufffd\ufffd\u001d9{\u0005\ufffdYR\ufffd\u04d2\ufffd%\u0012\ufffd\ufffd\ufffd+*\ufffd\/,e*v\u0016\u0015e\ufffdv\ufffd\ufffd\ufffd\ufffd]\u026f\ufffd\ufffdUk\u001a\ufffd\ufc48\u06fei\\\ufffd,\ufffdZ\ufffd\f\u02f6\ufffd\ufffd=\ufffd6\ufffd_\ufffdJYfK\u000e\ufffd\n\ufffd\ufffd\ufffdY\ufffd\ufffd{\ufffd\u0011\u0016\ufffd\ufffd\ufffd\ufffd\ufffd{y\ufffd\ufffd\ufffd}\u045b\u0016\u05ef\ufffd\\\ufffd\ufffd\ufffd\u067f\ufffd\ufffd\u0473v\ufffd\ufffd\ufffd\ufffdm'\ufffd6\ufffdY\ufffd!KR\ufffdTuU\ufffd\u05b9\ufffdn\ufffd\/U\ufffd+\ufffd\ufffdw\ufffd{r\ufffd\ufffdzsp\ufffd\ufffd\u001d\ufffd\ufffd\ufffdQ\ufffd\ufffd^\ufffdq\ufffd2\ufffd\ufffdT\u010c\ufffd\ufffdy@4\ufffd,L~\ufffd%\u023e\ufffdW\ufffd\ufffdRU\ufffd\u0014g\u0007\u001f\u0191w\ufffd\"\u04ce6\u0007\ufffd\ufffd.\u0005~CSe\ufffd3\ufffd\ufffdVH\ufffd\ufffd|\ufffd\\<\ufffdd\u00f6\ufffd\ufffd\u0011jH\ufffd\ufffdK\ufffdb\ufffdt\u0003\ufffdmL2\ufffd{\ufffdD%\ufffdO\ufffd\ufffd\ufffd\ufffde\ufffdc[F<c\t\/\u0003\ufffd\ufffd\u001e\ufffdIp\ufffdt\ufffdMn\ufffd\u0756\ufffdr\ufffdn\ufffd\ufffdx8vy\ufffd\u0013\ufffdM&Q%6\ufffd\ufffd'\ufffdw\ufffdk\/>a\f\ufffd^\u075f<\nK\ufffd\/,\ufffd\u02c4\ufffd\ufffd\ufffd}{\u0000\\\ufffd5l\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\u001ai\ufffd!\ufffd\ufffd\t>cV\ufffd^\ufffd\ufffd\u0000\ufffd#\ufffd>\ufffd\ufffd\ufffd#\ufffd\u001a\ufffd\ufffd\ufffdF\ufffd\u00176p\ufffd\ufffd5\u001bqj\ufffd1\u001c\ufffd\ufffd\u001e?\ufffd\u001ay\ufffd\ufffd\ufffd\ufffdg\ufffd0\u0018\ufffd{\ufffdBQ\ufffd\ufffd\ufffd\ufffd\u0018{\ufffd\ufffdVLG\\\ufffd\ufffd\ufffds43\ufffd\ufffdW\u0724&\ufffd\ufffd\u0006\ufffd\ufffdUR\ufffd\ufffd\ufffd+\ufffd\u00026\ufffd\u0019\u0015\ufffd\ufffd\ufffd\ufffdd\b\ufffdq5\ufffd\ufffd\ufffd*\u000f\ufffd=,w\u001b\u0153\ufffd\ufffd\ufffd\ufffd\u0003\ufffdr6\ufffd\u000foo\ufffdqFtqM'\ufffd\ufffd\ufffd1i\ufffd\ufffd\u01de\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffd\ufffdo\ufffd\ufffd\ufffd\ufffd\u0365\ufffd\ufffd\u001e[\ufffd\ufffd\ufffdh\nr\ufffd\ufffdm\ufffd\u000f\u0012\ufffd\ufffd\ufffdE\ufffd7\ufffdq*\u0006\ufffd\u0786X\ufffd\n\ufffd\ufffd\ufffd\ufffdVf\u000b\ufffd9R\ufffd\u0328T\"\ufffd\ufffd\ufffd\ufffdT:|\u000e\u001cY\u0013\u001c\u0012#\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdL\ufffd\ufffd+\u0010\bzvf$\ufffd\u011a\u000b1\ufffd\ufffd\ufffdr:\ufffd\ufffd)\ufffd\ufffdB\u001cv\u0192'\ufffd\ufffd+\ufffd-\ufffd\ufffd\ufffdj\ufffd\ufffd\u0005\u0006\ufffdRaR&\ufffd\ufffd\ufffd{?\ufffd\ufffdK\ufffd\ufffd\ufffd\ufffd5\ufffdu\ufffd^\ufffdo\ufffd~\ufffd\u001a\u001eH\ufffd\ufffd\ufffdv\ufffd42\ufffdl\u8d8e\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffd\ufffd\ufffdI\\\u0012\ufffd\u00198\ufffd\ufffd_\\\u000fS\ufffd<F\ufffd\ufffd<\ufffd\u0018\ufffd\ufffdZ\ufffdRk\ufffd5\ufffdO\ufffdX1\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\u000b\u0012\u000e\ufffd\ufffdt\ufffd\ufffde\u0016\u03d5i42\ufffd\u001d{\ufffd\ufffd\u01f4\ufffdL\ufffd+\ufffdt\u0006\ufffdZ\u0013<\ufffd<\u0018\u0010\ufffd\u0339\ufffdD:\ufffdAM\/*Y\ufffd\ufffd\u0005A\ufffdl\u0006\ufffd4\ufffd\u0004\ufffd(|\ufffdJ\ufffd\ufffd\ufffd\ufffd,\ufffdn|\ufffd\ufffd\u01e3\ufffd3\ufffd^\u0018r[\u03733\ufffd>\ufffd\ufffd\ufffd7C\ufffd\ufffdz}Vi\ufffdF\ufffd\u07fe\nr7\u000ezg\ufffd\u078dd\ufffdP\ufffdI\ufffd(\ufffd\ufffd\ufffd\ufffd\ufffd^\ufffdcSx`T\u0014\ufffd\ufffd\ufffd\u0015\u0014f[\ufffd\u000f\ufffdI\ufffdw\ufffd\ufffd\u055a\ufffd\ufffd\ufffdf\ufffddguuS\ufffdN|\ufffd\u0004C\ufffd\ufffdP\ufffde\ufffd\ufffdb\u0000\u05164\u0017\ufffd\ufffd'=O\ufffd\ufffd\u0010\ufffd\u001fL\u0000\ufffdnZ\ufffdRQ\ufffd\u0525\ufffd\ufffd\ufffd\u071au\ufffd\ufffdk\ufffd\ufffdU\ufffdE\ufffd\ufffd\ufffd\\\ufffd\ufffd\ufffd{\ufffd\u001bX1\u0016\ufffdj\u0018h\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0277\f\ufffds\ufffd\ufffdN\ufffdZ_\u07fcq\ufffd\ufffd%\ufffdN\ufffdum\ufffdwoXlQ\ufffd\ufffd\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk\ufffd=o\ufffdC\u05ee|\ufffd\ufffd&\fN)i\ufffd\ufffd\u05779r\ufffd\ufffd\u03db\ufffdt\ufffd\ufffd\ufffd\ufffd\u05ffcR\ufffd4\ufffd<\ufffdH\f\ufffd\ufffdH\ufffd\ufffdR\ufffd-\u0004r!\ufffdJSZ\u0012\ufffd\ufffd\ufffd\u001d\ufffdD\ufffd\tG\u000f\ufffd\ufffd$R\u000f\ufffdZ\ufffd]\u001eOY\ufffd]8\ufffd\u0348\u0001\ufffd\ufffd\ufffd\ufffd[\ufffd4\u021f\n\ufffd\ufffdK\ufffdlJ\ufffd\ufffd$r3\ufffdP\ufffd\ufffd\u0018\f\ufffd\ufffd;Oo\ufffd\ufffd\ufffd0\ufffd\ufffd\ufffd_\ufffd\ufffd\u06c9\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0461\ufffd)\ufffd\ufffd\ufffd\ufffd\u0018l\u02b9\ufffd\u001f\ufffd\ufffd\ufffd\ufffdO\ufffd`\ufffd\ufffd&&\ufffd\ufffd8!q\ufffd\ufffd\ufffd\ufffdZ\ufffd\u07ea\ufffd,*\ufffd\ufffd\ufffd\u0003L\bw\ufffd\ufffd\ufffd~\ufffd\u001c\ufffd\u0000\ufffd#\ufffd$\ufffd\ufffdi\ufffd\ufffd3\ufffd\u0004Z\u0016]\ufffd\ufffd\ufffde\ufffd\ufffd\u0017\ufffd\ufffd\ufffd5\nendstream\nendobj\n45 0 obj\n17398\nendobj\n9 0 obj\n<< \/Type \/Font \/Subtype \/TrueType \/BaseFont \/VLPMHS+Cambria-Bold \/FontDescriptor\n46 0 R \/ToUnicode 47 0 R \/FirstChar 33 \/LastChar 59 \/Widths [ 651 314 365\n469 569 604 220 679 531 798 461 592 705 535 639 308 459 232 531 592 232 592\n551 520 597 592 280 ] >>\nendobj\n47 0 obj\n<< \/Length 48 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001]\ufffd\ufffd\ufffd\ufffd0\u0010\ufffd\ufffd~\n\u001d\ufffd\ufffd\u014a\ufffd8\r\u0018C\ufffde!\ufffdmK\ufffd>\ufffd,\ufffdSCc\u001b\ufffd9\ufffd\ufffd\ufffd\ufffdb\ufffd\ufffd\ufffdo\ufffd\ufffdk\ufffd\ufffd\ufffdS\ufffd\u001c_\ufffd\u3c18\ufffd{\ufffd\ufffdI\u0016\ufffd\u000fcLr\ufffdn)\ufffd\ufffd\ufffd<\ufffd\u01662q\b\ufffdJ\ufffd,\\\ufffd\\\ufffd\u0014\ufffd\ufffd\ufffdE.\u01f1\ufffdL\ufffd\u0014\u0194?(\ufffd.\ufffdn\ufffd\ufffd\u0129\ufffdOz\ufffd-EI\ufffdx6O\ufffd^N\ufffd\ufffdt\ufffd\ufffd?r\ufffdq1\ufffdh[\u0013\ufffd\ufffd\u077b\ufffd\ufffd\ufffd\ufffd\ufffd2\ufffd>\u001f#\ufffd\ufffd\u071f\ufffd\ufffdw\ufffd\ufffd}\u0016\ufffdDTl\u001e#\ufffd)\ufffdu\ufffdA\ufffd\u001f\ufffdR4\u05b6\ufffd\ufffd[[\ufffd\u0018\ufffd\ufffd\u0582\ufffd\u000f\ufffd}*\ufffdj\ufffdr\ufffd\u001e\f\ufffd\u0223\ufffd<\ufffd\u0355\ub76a~\ufffd\ufffd\ufffd\ufffd\ufffd\u0566mT\ufffdn\ufffd\ufffd\u0016\u0015\ufffd\ufffd\ufffd\u000f\ufffd\u000eD\ufffd\uedca[\u0010\ufffd:\ufffd\u001d\ufffd\ufffd^\ufffd\u0006\u0011(\ufffd\ufffdAD\ufffd\u0007\u0010\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd^\ufffd\u0003\u0011\ufffd\ufffd\b \ufffdr\ufffdn\u0004\u0011\ufffd\ufffd\u0018\u0002\"\u070d\ufffd=\ufffd\ufffd\u0769\ufffd\ufffd\\*\u0720H8\u0015\ufffdufG8\u0015_'\ufffd\ufffds\ufffd\ufffd\ufffd\ufffd\ufffdSYK\u0007\ufffdp*.k\u0004G8\u0015\ufffdFp|n\u0015S\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd*\u079b\/\ufffd\ufffd\ufffd\f\ufffdKV\u0015\ufffd\ufffd\ufffd\u001e?D\ufffd.\ufffd\ufffd\ufffd[J\ufffdM\ufffd\u063cR\ufffd*\ufffd(\u001fK=O\ufffd\ufffdF\ufffd_\ufffdv\ufffd\ufffd\nendstream\nendobj\n48 0 obj\n413\nendobj\n46 0 obj\n<< \/Type \/FontDescriptor \/FontName \/VLPMHS+Cambria-Bold \/Flags 4 \/FontBBox\n[-1110 -299 1372 1047] \/ItalicAngle 0 \/Ascent 950 \/Descent -222 \/CapHeight\n667 \/StemV 0 \/XHeight 484 \/AvgWidth 600 \/MaxWidth 1380 \/FontFile2 49 0 R >>\nendobj\n49 0 obj\n<< \/Length 50 0 R \/Length1 12976 \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffdz\u000bxT\u0579\ufffdZ{\ufffd\ufffd\ufffd\ufffd=\ufffd<\ufffd';3\ufffdd&\ufffd\ufffd!\ufffd\ufffd$\ufffdL&!!\u0004\ufffd\u0010t\ufffd\bL\ufffd\u0000\u0001\ufffd7*\"\u0010 \ufffd\f\ufffdZ,\u001a\u001f\ufffdz{%\ufffd\ufffd\u001e\u0771\ufffd\r=G\u0156\u000f\ufffdT\ufffdk\ub8de\ufffdc\ufffdZO\ufffd\ufffdJ}P*2\ufffd\ufffd\ufffd3\u0013\u0001\ufffd\ufffds\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\ufffdz\ufffd\ufffd\ufffd5\ufffdy\ufffd\ufffdH\ufffd\ufffd\u0011\ufffd\ufffd\u0006o\u001aX\ufffd\u010f\ufffd\u000ex\ufffd\u001b\ufffdy3\ufffd\ufffd\ufffd7#D\ufffd[\ufffd~\ufffdM\u067c\ufffd$B\ufffd\ufffd\ufffdk\ufffd\ufffd\ufffd\ufffdmf\ufffd\u001c\ufffd\ufffd\ufffd\u000f\ufffd\ufffdy\ufffd9\ufffdg\fAA6\ufffd\ufffd\u00fbd\ufffd\u0377f\ufffdV;\ufffd\u05efY7\ufffd\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\u0006n\u034d\ufffd\u0780<\ufffdv\ufffd\ufffdY\ufffdj2\ufffd\ufffd\ufffd\u001b\ufffd\ufffd\ufffdq\u001c!\ufffd\ufffd\ufffd\ufffd\ufffd,m\u001e\ufffd\u0010\u0090v\ufffd;\ufffd\u0002\u001d@2D!\u0006\ufffd\u0010\u0318\ufffd\ufffd\ufffd\u000f\u058b\ufffdz\ufffd?\ufffd\ufffd\ufffd\/K\ufffd\ufffdO\ufffdZ!6>\ufffd\ufffdh#I<\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\u20ea\u000b\ufffd$\ufffd*\ufffd\ufffd\ufffd\u0007\ufffd\ufffd\u07df\ufffdGH\ufffd\ufffd\ufffd\ufffdU\u0017\u011er\ufffd\ufffd\ufffdy\u001c\ufffd\ufffd\ufffd#\ufffd\u001d\ufffda'\ufffd+\ufffdp\ufffd\u0013\ufffd|\u009aO\u0018\ufffd\tC>\ufffd\ufffd'\ufffd\ufffd\ufffd*\ufffdP\ufffd\u0013\ufffd|B\ufffdOH\ufffd\t\t\ufffd\ufffd8\ufffd\u0005\u0011&\ufffd\ufffdE\ufffd\ufffd\ufffd\/\ufffdD\ufffd\ufffd\ufffd_\u0017\ufffd\ufffd\">-\ufffd\u0017E\ufffd\ufffd\ufffd\ufffd\u0017\ufffd)\u0011\ufffd\u0014\ufffd\ufffdD|B\ufffdO\ufffdx\\\u010f\ufffd\ufffd\ufffd\ufffd\u000f\ufffd8-\ufffd\u0003\"\ufffd'\ufffd\"\u001e\u0011\ufffd\u001e\u0011\ufffd\u0016\ufffd.\u0011\u000f\ufffdx\ufffd\ufffdw\ufffdx\ufffd\ufffd{D\ufffd-\ufffd\u000e\u0011\ufffd\u0013\u001c\ufffd\u0015\ufffd>\ufffd\f0\u001f`)\ufffd:\ufffd\ufffd\u0000w\u0002<\u0004\ufffd8\ufffd3\u0000\ufffd\u0007@\ufffd\ufffdp\t\n\u00014\u0003\ufffd\u0007X\n\ufffd\u000e`'\ufffd\ufffd\u0000\u000f\u0001<\u000e\ufffd\f\ufffd\u001a6\ufffd\ufffdo\u017f;c\ufffd9_y\u0015\u0436\u06ed\ufffdm\ufffd\u0017\ufffd\ufffdW\ufffd\ufffd\ufffd\u0016@7\ufffd\u0007\ufffdf\u001d\ufffd\u001b\ufffdZ\u001d7\ufffd\u0779\ufffdp\ufffd\u0016\ufffd\u0179r5\ufffd\u0015\ufffd\u0000-\u001f2;\ufffd\u000f\ufffd\ufffdPX\ufffd\ufffdz[K\ufffdg+\ufffd\ufffd9\ufffds\ufffd\ufffd\u0011\u00076\ufffd\u0010\u06de\ufffd\ufffd\u05d2O\ufffdz\ufffdi\ufffd}\ufffdS\u0001\ufffd~\ufffd\ufffdn\ufffd\ufffd\ufffdT`b\ufffd,\ufffd\ufffd\ufffd\ufffdW\u000e\ufffd\u0007\ufffd\u001b\ufffd\ufffdA\ufffd\ufffd\ufffd\u0014\u0006g\u0017y\ufffdG\ufffd\ufffd?:\ufffd\u0015\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd;\ufffd\u0003\ufffd\ufffd\ufffd\ufffd#T\ufffd9\ufffd\ufffd\ufffd\ufffd\ufffd\u0011\ufffd\u0016\u001c\u0088@\ufffd\ufffdb9\ufffd\ufffdd\u0006\ufffd,\ufffd\ufffd\ufffd\ufffdR\ufffd#\ufffd\u0002\u0007\u0001\u000e\u0000\ufffd\ufffd\ufffd\u0002\ufffdv\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\ufffd\ufffd;\ufffd\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffd\ufffd\u001e\u0000G\ufffd\ufffd>\ufffdb\ufffd\ufffd\u0018\ufffd[\ufffda\ufffd\ufffd\u06a2\ufffdf\ufffdUY\ufffd\u0005UZ&0\ufffd\u000f\ufffd4y|~]\ufffd_\ufffd\/\u01e5\ufffd'\u0003\ufffd\ufffd\ufffd?\ufffdW\ufffd'\ufffd\ufffd\ufffdU\ufffd\ufffd\u039e\ufffd\ufffd\u0001]0\ufffd\/\ufffdt%\ufffd\ufffd]\ufffdc\ufffd\ufffdz\u01a0Q\ufffd\ufffd\u001a\ufffd\\\ufffd\ufffd%R\r\u0094FF\ufffd\ufffd\ufffd\ufffdN=\ufffdF3Q\ufffd^\ufffd\ufffdL\ufffdW~\u001f\u001dS\ufffdV\ufffdT#5\ufffd\ufffd\ufffdD3\ufffd\t\ufffd_y3\ufffdY\ufffd\u0000z@y\ufffd\ufffd\ufffd\ufffd7Hw\u001c{p1o\ufffd;\ufffdKk\ufffd\u0017j-\ufffdMk\ufffd\ufffd\ufffdE\ufffdt\ufffdC\u0014\u00150\u0003\u0010\u0002h\u0006x\b\ufffd\u0019\ufffd\ufffd}\ufffd`\ufffd<R\u001a\ufffdEJ\"\ufffd\u00116\ufffd8\"\ufffd\ufffd%b\ufffd\ufffd#\u0288,BGP\ufffd;\u0707\u0005c'\ufffd\ufffd\n&\f\ufffd\u0005Q!\u001c\u8720\ufffd^\ufffd:\ufffd)(\ufffd\ufffd\ufffd\ufffd\u00183\u0001\ufffd\u0002u\ufffd\u0004F}\ufffd\ufffd\t\n^\u0196E\ufffd\ufffd\t\\@\ufffd\ufffd:\ufffd#\ufffd\ufffd\u0419\ufffd\ufffd\ufffdD \ufffd\u0012R\ufffd\u000b\ufffd\u00b0+!T\ufffd\ufffd]\ufffd\u0004\ufffd\u0014\ufffd{\u0004\u0007\u0017\r\\\ufffd\u0674Y,\u0674y\u02e55\ufffd\ufffdOZ\ufffd\ufffd\u0006\ufffd\ufffd\\L8\u05fa\n2I\ufffd\u001c\u0017\ufffdD\ufffd6\t\ufffdB\ufffdu@(\ufffdB\u001f\u0017\ufffd\ufffde\u0000_\ufffd\u000blB0@v\f\ufffd\u06b4)\ufffdi\ufffd&\ufffd\u0012\ufffdB3\ufffd\ufffdr\ufffd@`\\I\u0016\ufffd\ufffd\u001b\u0015\ufffd\ufffd\u001b:\ufffdTo\ufffd\ufffd\ufffd\ufffdO\n\ufffd\\\ufffdSx\u001er3\ufffd\ufffd\u0005\r\u0017\u0774i\ufffd8\ufffdZ\ufffd\ufffd)\ufffdd\ufffd\ufffd\ufffd\ufffd\\\u060dR\ufffd\u0005\ufffd\u0004\ufffd\u0001X\u0001\ufffd\u0000\u0006\u0000=\ufffd\u0016@\u0005\ufffd\u0004P\u0000\ufffd\u0000\ufffd\u0000\u0012\ufffd+u!\ufffdY\ufffd\ufffd\ufffd;\ufffd\u07e7\ufffdJ\ufffd\ufffdz=\ufffdr\ufffdt\ufffd\ufffd\ufffd\u000b\ufffd\ufffdS\ufffdR'S?K\ufffdH=\ufffd\u001aO=\ufffd:\ufffd:\ufffdJ\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffdFR{R\ufffdS\ufffdR\u00e9\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\ufffdTw\ufffd#\u055e\ufffdr]\ufffdP\u001e6\ufffd\ufffd\u00118'\ufffdB\ufffdG\u0001\u0011#I5\ufffds\u001f\ufffdL6=yv\ufffd;\bM\ufffd%\ufffd\u0004gz\ufffd\ufffd<]\ufffd-\u06ce\u0018\ufffdq\ufffd,\u0005\ufffd&\ufffd\u000b\u0014\ufffd\ufffd\ubbde#~\ufffd\ufffd\ufffdToGo\ufffd\ufffdI\u0002}\u001b\r\ufffd!x\ufffd\ufffd\ufffd\ufffd\u0011%\ufffd\u0006\ufffd\ufffdZ\ufffd\ufffdkU\\\ufffd\u001c7\ufffd\u0019\ufffd\u0002\ufffd\ufffd\ufffd\ufffd\u0001\\\u0005\ufffdjG\ufffd\b5\ufffdW\ufffdR\ufffd\ufffdT\ufffd\u001dh\u000bz\t\u001dE\u000f\ufffdo\ufffdMh\b\ufffd\ufffd#t\u0006\ufffd\ufffdeh\ufffd\u0014\u0015\ufffd_\u0014\ufffd\b-\u0012\ufffd#V`\u001d\ufffdD\ufffd@\ufffd\ufffd;E\ufffdE\ufffd\u0015\ufffd\"\ufffdf\ufffd\ufffd\ufffd\ufffd\u0012t+\ufffd\ufffd\ufffdA; \ufffdx\u001bH\ufffd\ufffd}\u0018c\ua0c3$)\ufffd4\ufffd\u3ed0\ufffd\u0006\ufffd\ufffd\u0001\ufffd,\ufffd\ufffd\ufffd\ufffde\u0002J\ufffd\ufffd\b=\ufffd6\ufffd9b\ufffd\u0014\ufffd=\ufffd\u0014\ufffdf\u061f]\ufffd\/g\ufffdkP\ufffd\u0005-DMy\u0002\u0700\ufffdA\ufffd\ufffd\t\ufffd\ufffd\u000ez\u0005\ufffdCI\ufffd\u001b\ufffd3t\u0002\ufffd8\ufffduP\ufffdcX\ufffd\u0019\ufffd&ZD\ufffd`\ufffd\ufffd\ufffd\ufffd\ufffdf\ufffd\ufffd\u001b\ufffd\ufffd3\ufffd9yV\ufffd\u0001\ufffd|L\u0789\u0010\ufffdhyj\ufffd\ufffd7\ufffd\/J\ufffd\u0017\ufffd\ufffdv\ufffd\ufffd\ufffd\ufffd>\ufffd-\ufffd\u0012\ufffd\ufffd775Ff6\ufffd\ufffd\ufffd\u03a8\ufffd\u001e\ufffd\ufffdV\u0015\ufffd\ufffd\b\u0006\ufffd\ufffdJ\ufffd>o\tW\ufffda\ufffd\ufffd.\ufffd\ufffd\ufffd\ufffdn\ufffdZ\ufffd&\ufffd\ufffd\ufffd\ufffd\u001a\ufffdJ\ufffd\ufffd\u02e4\u0012\ufffd\ufffd(\ufffd\ud0bd%\u07baZ(hI\ufffd\u001e\ufffd8\ufffd\u00154\ufffd\ufffdv\ufffd\u0004dtx8\u0003\u001b\u000e%*rT\ufffd4  S\ufffd`\ue38f#\ufffd.!\ufffd\u0002W\ufffd\ufffd\u0013h\/\ufffd\u0007\u001aw9\ufffdVA\u2147\ufffd3\ufffd\u0012J{\ufffd\u001e\ufffdy\ufffd1U\ufffd\ufffdn\ufffd\u0096\ufffd\ufffd\ufffd\u0010(\/<\u001dP\u0005\u03dc\u00016%0\ufffdP\u000e\u0015bI\ufffd\ufffd\ufffd\ufffd\u0004&&\u07ee\ufffdBT\ufffdI\u0000\ufffd\u000b\ufffd|6Az\ufffd.\ufffdI\u001e\u0007\ufffd:q\ufffd4\ufffd\ufffd43\ufffd)h\ufffd\t\ufffd<\ufffd4o\u000b\ufffdB\ufffd\ufffd\ufffd!\u0001E\ufffdR0\ufffd^\u0006Rbo($`\ufffdG\u00026\t\ufffd\ufffd\u0005K\ufffd|\b\ufffd\ufffdL\ufffdUx\u041aZ\u0375\ufffdV\u0001GS\ufffd\/xz6\ufffdQ\u000f\ufffdf\u04fdqC\ufffd\ufffd\ufffd\u0006+\ufffd\u0013\u001fW\ufffdZ\ufffd\ufffd\ufffd*X\u0005\ufffd\u0006(@\ufffd*5\ufffd\ufffdI\u0001l\ufffd\ufffdq\ufffdi\ufffdb\ufffd\u04b46\ufffdSH\ufffd\u0005\ufffd\u0019\ufffdt[\t\ufffd\u0016\ufffd\ufffdIHp1\ufffd\u001b\u0518\ufffd\ufffd\ufffd\ufffd<q\ufffd\ufffd*\u0004\u0372D\b\ufffd\ufffd\u0014\u0016\ufffd\u0014d-\ufffd<;\tv\ufffd\ufffd\u000f\b\ufffd ;\u001e<\ufffd>4\ufffd\ufffde\u0240&\u0165\u0006n\ufffd\u000b\ufffd\u0000Lj\u001c\ufffd\ufffd\u05a1>\ufffd\ufffd\u067d\b\ufffd`\u0012\u0000\ufffd!\ufffdlwLDd\ufffd\ufffd\ufffd!6\ryB\ufffd\u0004\ufffd\u0160\ufffd\ufffd\u5a61\ufffdI\"&8\ufffd\u0160N\ufffd\u0012\ufffd\ufffd9\ufffd\u0000w\u001a\ufffd\ufffd*\u0018\u0002\ufffd\u0016\ufffdko{\ufffdA\ufffd[\ufffd\ufffdX\ufffdM\ufffd\ufffd\ufffd\ufffdw{\ufffd\ufffdz\b\r\b\ufffd\ufffd\"\u0226[9\u0018\r:k]\u001d%;\u0016\ufffd\ufffd6Q\u001a;R\ufffd\ufffd\ufffd\u0007\u0007Xax\ufffdj\ufffd\u0019<\u0003\ufffd\ufffd\ufffd\ufffdI3\ufffd\ufffd\u0007v\u0007\ufffd\u0007Z\u0012\ufffd \f&\ufffdJ\ufffd&KY\r-%\ufffdb\ufffd\u0007\ufffd\ufffdK=$.\r\ufffdm]\u001d#@\u001a\ufffd\ufffd\ufffd\ufffd\ufffdzQ\ufffdu\ufffd\u0003\ufffd\ufffd\u001f\u0010\u0018\u0002\ufffdi\ufffdm=\u001e\ufffd @\u001a\ufffd\u04edd\ufffd\u0003)\ufffd=\ufffd\f<\u0005\ufffd\ufffda\u001a\ufffd\f\ufffd#\ufffda>-\u0002\ufffd'\ufffdP\ufffd\ufffd\u00070\"?\u0010K\ufffdr\u0004P#\ufffd}\u0010\ufffdd,\ufffd \ufffd\ufffdn\ufffd \ufffd\ufffdVrl\ufffdt*\ufffd\n\ufffd\u0000\ufffd9\tu'*\ufffd\ufffd\ufffd\ufffd\ufffd\u0018\ufffdN\ufffd\ufffdZ\ufffd\u001f\ufffd\u001d\u001f@\ufffd\ufffd{\ufffd\u0018\u06c1&\u001d\ufffd\ufffd0\ufffd\ufffd,\ufffd:{\ufffdR0D\ufffdCP\ufffd\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0003i\ufffd^\ufffd\ufffd\ufffd\ufffdq:;\ufffd\r\ufffd6\ufffd-\ufffdN\ufffdql[:\ufffd\u001e\ufffd\ufffd\u001c^\u01b1\f\ufffd\u001e\ufffdh\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd\u0018\ufffdz\ufffd!\ufffd\u001dJ\bLr\b7\ufffd;D\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffdDL=\ufffdd\ufffd\ufffd\u0621\u0001(\ufffd\ufffd\ufffd\ufffd\ufffd9<\ufffd)\u001a\ufffd\"W\ufffd\ufffd\ufffd\u001cH?\ufffd\u0000\u04794\ufffdgX\ufffd\u0006\ufffd\ufffd\ufffdm#\ufffd\u0006B\ufffd:\ufffd\ufffd\ufffd\u0011\ufffd\ufffd\t-\ufffd\ufffdN\f\ufffd\u0010\ufffd)\u0011\ufffd\ufffd@`G9\ufffd\ufffd\ufffd\to\ufffd\u00059f9<0\ufffd(<\ufffd\u0006\ufffd\ufffdJ\ufffd\u0013\ufffd\ufffd\ufffd\ufffd\ufffd\t\u001e-\ufffd\ufffd0\ufffd\u0013\ufffd\ufffdY\ufffd\ufffd\ufffd\u0004\ufffdC\u0001\ufffd\ufffd$\ufffd9\ufffd\ufffd\ufffd,$5\ufffd\ufffd\ufffd\ufffd\ufffdI\u000e\ufffd\ufffdN\u0002KQ>\ufffd%\ufffd`\u06e7d;m\ufffd\ufffdl=1\ufffd0;x:R\u0089>X\ufffd\ufffd:A\u0001\u001c\u0013\ufffd\ufffd\ufffd\u0012\ufffd\u001d\u0014!\ufffd\u0014\ufffdIJ\u0015\u0000\ufffd\u0010\u0011l\u0001\ufffd!\ufffd\tX\ufffd4\u00f1\/q\u0002\u0013\u0010\ufffd-\ufffd\u0013\ufffdH\ufffde\f`,1\u0434\u0003!\ufffdT\ufffd%\ufffd\u0005L\ufffd(23\u0002\ufffd\b\ufffdJ\ufffd\u0011\ufffdU\ufffd\u001e\ufffd}[\u001dTN\t\u0012\u06daN\ufffd\u0004\ufffd\ufffde\u0001)\ufffdN\rM\ufffdRv\ufffddm\ufffdz\ufffd\u0003\ufffdud\ufffd`0rd\ufffd\/\u0012\ufffd\ufffd;\u0006o\u001b\ufffd+\ufffd\u0012\ufffdQs\u0012\ufffd\ufffd\ufffd;A\ufffdg\u0011\ufffd|\u001d-q\u0016,\u0011hn\ufffd\ufffd`[\ufffd!\ufffd\ufffd\u0002\ufffd\ufffd\ufffd&!\ufffd \ufffd\ufffd\ufffd\ufffd3\ufffd\u00181\ufffdq\ufffdA q\ufffdD\u001c\u0004=\ufffd\ufffd\ufffdE\ufffd\"\ufffd\ufffd\n\ufffd0\b\ufffd\ufffdC\ufffd\ufffd\u0006\ufffd\u0013_\u000e+`k`X\ufffd\ufffd\ufffd\ufffdxN\ufffd\ufffd}\u0012\ufffd\u0000\ufffd\ufffd K\ufffd\ufffd~\ufffd\ufffdy\u001a0l\ufffd\ufffd\u001e\ufffd\ufffd\ufffd\u0005;\bj\ufffd]\ufffd\ufffd\ufffdN\u0011\ufffd&\ufffd\ufffdj\ufffd6\ufffd\ufffd\ufffd\u013a\ufffdx\ufffd\ufffd\bm\ufffd\ufffd\ufffd6@\ufffd\ufffd0[\u030bk'\ufffd\ufffdWTw\ufffd\ufffd|lw\ufffd\u0006t\ufffd\u0222\ufffd\u001c\ufffd\ufffdg\ufffd\ufffdw,X\u0014?\u000ea2{G_\ufffd\t\nS-\ufffdhb\ufffd\u0004\ufffd\ufffd\ufffdY\b\ufffd\ufffdR8\\$\ufffd\ufffd\ufffd\ufffd\ufffd$\ufffd:1\ufffd\ufffd\u0004\ufffd\u0010\ufffd\u001d\ufffdy\ufffd\ufffd\ufffdZ\ufffdX \ufffd\u0007\ufffd&\ufffde\ufffd\ufffd\f\ufffdA8\ufffd\ufffdeL\ufffd\ufffd\ufffd2I\ufffd\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\u0014[\ufffdC`\ufffd\ufffd\u001clzJ\ufffd\ufffd'\ufffd\ufffd\ufffd\u0004a6\ufffdf\u0005\u0010$\ufffdkB\u0002\ufffd5\ufffdcJ\ufffd\u0011T\ufffd\ufffd\u68a4\ufffd\ufffd\ufffd7g\ufffde\ufffd\\\ufffdEA\ufffdA9\ufffd\tP\ufffdt\ufffd\u0003\ufffd\u0007\u0003\u001cG\u000e\ufffd \"L\ufffd\ufffd\ufffd\u0013\ufffd\ufffd`AO\ufffd\ufffd\ufffd\b2\ufffd\r\u0000``\ufffd\ufffd\u0004+H\ufffds\ufffdn6\ufffd$\u0014\ufffd\u0016\ufffd\u0007\u0007\ufffd<\ufffd\ufffdB[\ufffd\ufffdc0!(\ufffd:\u0004\ufffd\u000eA\t=(s=\u0000E\ufffd\ufffd\u0006\ufffd3i4\b\ufffd:\ufffd\ufffdI(\u0006\ufffd\u0018N\b\ufffd\u0000\u00194\ufffd\ufffd\u0308e!\u001ej\ufffd\u001a\u0004\ufffd\/;I\ufffd\ufffd\f\u0014J\ufffd\ufffd\\\ufffd\ufffdNd^A\ufffd\ufffd\u000f-`\ufffd9\ufffd!\u0014K\u001c\ufffd\ufffd\ufffd\ufffd?\ufffdG\ufffd\ufffd\ufffd\u000fr@5\ufffdda\u0007$hp\u0001\b\ufffd\ufffdG\u001e\u0015\ufffd7(Y\u000e^]\ufffd\u0003\ufffd\n\ufffd\u0002E\u0016+\u0011Y\u0016\ufffdUkU\ufffd\ufffd\u0012:\ufffd\ufffd\ufffd\u0555\ufffd!<\ufffd\u00040\ufffd,^\ufffd\ufffd\ufffd\u0011\ufffd\u060c\ufffd\ufffd\u0019\ufffd.ae\ufffd\u0001p\u0007\ufffd:\ufffd\\\ufffd\ufffd\u000f\ufffd'\ufffd\u03d2nz&P\/w\ufffd\ufffdE\ufffd\ufffdC\u0261Z\ufffdz;\u0006 X\u0236WC\t\u0007q_\ufffd1\ufffd\ufffd\ufffd\"\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\\#\u0006\ufffd}\u0013\ufffdc\ufffdV\ufffd$\ufffdOE\ufffd\u0013P_\ufffd\b&\ufffd{\u0002\u0123D\ufffd\ufffd\u0002\ufffd\u001f\f\ufffd\ufffd\ufffdR\ufffdX\ufffdN+\ufffdWo\ufffd\ufffdB;\ufffd&\ufffd\ufffd\ufffd\ufffd@V\u0011\u000b>\u0005\ufffd(\ufffdu\f\u001c\ufffd3N\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdpJ\ufffd\ufffd\ufffd\ufffd\uf864d\u0015\ufffd\u05e1\ufffdR\u0017\ufffdJ\ufffdQ\ufffd>\ufffd\ufffd%\ufffd\u0000e\ufffd\ufffd\u001aA\u001d\ufffdC\r\ufffd-\ufffdA\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffdq\ufffdA\ufffd\u0000\ufffdPF^\ufffds\ufffd\u0007Z\ufffdl\u0010\ufffd\ufffd\ufffd\ufffdN5\ufffdQx\ufffd\ufffd<\ufffd6\u0000\u001c\u0005\ufffd\ufffd.\ufffd\u001c\ufffd\ufffd\ufffd\ufffde$\ufffdE#\ufffdA\u000eD\ufffd\ufffd\ufffd\u0011\ufffdvz81c$\ufffd;X\u000b\ufffd\ufffd5\ufffdFr\ufffd\ufffd\ufffdi\u05ca\u0328\u0000\u0641V\ufffdT\u0204\n\ufffd\ufffdt\u0002\ufffd\u0014\ufffd\u00120\ufffd0\ufffdG\ufffdC\ufffdK\ufffd$\ufffd\ufffdN\ufffdK\ufffd\ufffd\ufffdz\ufffd1ETqTY\ufffd|W\ufffdX\ufffd\ufffd\ufffdK}Z\ufffd\ufffd\u01ad\tk\ufffd\u045c\ufffd\ufffd\u0014ZJ\ufffd\u04c0\ufffdI\ufffdP)\n\ufffd*4\u001d\ufffd\ufffd\u00164\ufffd\/\ufffdgw\u001c\ufffd0\ufffd\u0016kF\ufffd\u0016\ufffd\ufffdY\ufffdG\ufffd\ufffd\ufffd\u033b\ufffd;\ufffd;8\ufffdA\ufffdiU\ufffdfz\u0013U\ufffdD\ufffdL\ufffdq\ufffd:J\ufffd\ufffd\u0318\u0011\ufffdvS\u00163dt\ufffd\ufffdb\ufffdp5\ufffd\ufffd1\u0010\ufffdje\ufffd\ufffd\u0012\ufffd\u03e1\ufffd\ufffd\ufffdV\ufffd\u0014(\ufffd\ufffd\u0003-m\ufffdMN}I$\ufffd\ufffd,r\ufffd]\ufffd\ufffd2z\ufffd\ufffd:\ufffd_V\ufffd\ufffd\ufffd\ufffd_\u0010\n\ufffds\ufffd\ufffd\ufffdj\ufffdnw\ufffd+\ufffdV\ufffdkjl\ufffd\ufffd\u0004\ufffd\ufffdN\ufffd\u0687\u001f\u03bc#\ufffd\ufffd\ufffd\n\ufffd_?\ufffd\u0001\u031e\ufffd3-\ufffd\ufffd\u0001w\f,\ufffd\ufffd\u001e=\u0006v\ufffdea\ufffd\ufffd\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdU\u0019<\\Ue-\ufffd\ufffd\u000e[y\ufffd\ufffdX\ufffdJ+Ct\u8c12W\ufffd\ufffd\u0154,\ufffdp\ufffd\ufffd\ufffd;\ufffd\ufffd\ufffd\ufffd\u001dz\ufffd\ufffd\u07ea6\u0587\ufffdz\ufffd-C}=\n\u0005P\ufffd\ufffd\ufffd \ufffd\ufffd\u0379\u0014$C\ufffd\u001f\u0004\ufffdU9x\ufffd?6\u00024\ufffdv\/\tl\ufffdC\ufffd\ufffd\ufffd<5\ufffdO\ufffd\ufffdJ\ufffd_\u3a76Ym\ufffdX\uab5e\u0001GZ\u001fpYn0X\ufffdb\ufffd\ufffd\ufffd8\ufffd\ufffdCw\ufffd\u001c8~\ufffd\ufffdQo\ufffd\"\ufffdZ\u0002>\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd6\ufffde\ufffdf^Hm\ufffd\ufffd\ufffd\u001co\ufffd\ufffd\ufffdZ\ufffd-V\u049e\ufffd<H\ufffd\"8\ufffd%\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdV\ufffd\\E\/\t\ufffd\u0005\ufffd\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd@\u00cdK\u0016\f\ufffdK3%\u0017\ufffd\u04a1-+\ufffdW6\ufffd@*\ufffd\ufffd\ufffd\b\ufffd\u0549*\ufffd\ufffd\u001cW=\ufffd\n\ufffd\u2c13w:\ufffd\u015c\ufffd\ufffdE\ufffd\u000e\ufffdy=s,\ufffd\ufffdm\ufffd\ufffdC\ufffd\u001d\u0016\ufffdA\ufffd\ufffd\ufffd\ufffd\ufffd0\ufffd\ufffd\ufffd\u001d\\\ufffdO\u04ea\u0012\ufffd\ufffdM[\ufffd2\ufffd\f\ufffdK\ufffd\ufffd\ufffd\u001f\ufffd3\ufffd7\ufffd!jh\ufffd\ufffdc7N\ufffd\ufffd\ufffd\u0536\ufffd\u000fg\u001a\ufffd\ufffd\u000f\u001b;\ufffdv\ufffd\ufffdgyJV\u001c\ufffd\ufffd\ufffd.\ufffd\ufffd\ufffd\ufffd\u04fb\u001e<\u001f\ufffd\ufffd\ufffdb\ufffd\ufffd#\u0017Jh\ufffd^\u07ba\ufffd\ufffdy\ufffd\ufffd-\u0014h#\ufffd-?\ufffd\u0000\ufffds\u001c\ufffdE\u001c\ufffdz\ufffd\ufffdI8\ufffd\ufffdW\ufffd\u000b\ufffd\ufffd\ufffdI\ufffd\ufffd\ufffd\u0017p\u0007h\ufffda\u001e\ufffd:\u0015\ufffd\ufffdmO\ufffd\ufffd\u06e1\ufffdn\ufffd\u0010&Yx\ufffd\ufffdX\ufffdB\u02d4\n\u5c58\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffdl\u0015n\ufffdC\ufffd\u0017\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd9\u0003\nOI\u001c\ufffd3'\ufffd\ufffd\ufffd\u0000u x\ufffd;\u0015\ufffd,sj1ag\ufffd\ufffd\ufffdl\b\ufffd\ufffd\ufffd\u0011\u0013^\ufffd\ufffd\ufffdY.\ufffdV\u0003GD\ufffd@\ufffd\ufffd6\ufffd\ufffdPX\ufffd\ufffd\u02b8\ufffd\ufffd\ufffd\ufffd\ufffd~\ue027\ufffd\ufffdzv8\u0014\ufffd\ufffd7l\ufffd\u0014WW\u000e_\ufffd\ufffd-\ufffd\u0018\ufffd\u0468\ufffd^\ufffdW\u044b\ufffd2\ufffd\ufffd\ufffd\ufffd\u0016\ufffdv\u015a2s\ufffd[\ufffd\ufffdb.\u00069t\ufffd\u001eT\ufffdo\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffd%\u0016O\b\ufffdU\u001e\u000f{,\ufffd\u0015\u0016\ufffd\ufffdb\u0005\u0016\ufffd\u0015e\ufffd\u001a\ufffd|WYY\ufffd~\ufffd#\/\ufffd\ufffdp\u0018\ufffd,g\r\ufffd\ufffd\ufffd^Rf\ufffd\ufffd\u00136:\ufffd\ufffd\ufffd\u001cw\ufffd\ufffd*\ufffd-`\ufffd\f\u001c\ufffd\ufffd9\ufffd\ufffd`\ufffdZ\ufffd\ufffd\ufffd\ufffd\u0016\ufffdf\ufffd\ufffd>C\ufffd\ufffd\ufffdRg\ufffd\u01e6\ufffdd\ufffd\ufffd\u0003J\ufffd\ufffd?#\ufffd\ufffd\ufffdF[V\ufffd\ufffd\ufffde\ufffd\ufffde\ufffdZe\ufffd\u02a4\u000b\ufffdZ\ufffd\ufffd\ufffd\ufffd\ufffd1Zut\u046f?\ufffd<\ufffd\u0019\ufffdt\u0468\ufffd^\ufffd\u0014\ufffd\u0007:\ufffd}\ufffd\ufffd\ufffd\ufffd\u001aN\ufffd?\u010e\ufffd\ufffdjp\ufffd5Q\ufffd\u000f\ufffd\rJ~\u000b\ufffd)F\ufffd\u001c|F\ufffd\ufffd:Z\ufffd\ufffd\u000b\ufffdz9-?\ufffd\ufffdi\u000f\ufffd\ufffdc1d48\ufffd\ufffd\u03b1C&+\ufffd\fF\\\u000f\ufffd\ufffdZ\ufffdi\ufffd\ufffdy\ufffd\u0003\u0019\u0003\u0780\ufffd;\rR\u0006\ufffdi\u000e\ufffd\ufffd\u06bdMI\u0395\ufffd\u0012Y\t\u027a\u0007\ufffd\u0002\\\ufffd\u0014dD\ufffd\u001d\ufffd\ufffd|\ufffd]\ufffd\u0013\ufffdC\ufffd\ufffd\u0003\ufffd\ufffd\u000e\ufffd\ufffd\u000ewq\ufffd\ufffd]\u0014\ufffd\ufffd\ufffdV>\ufffd\ufffd\ufffd\ufffd3\ufffd\ufffd\u0002\/\ufffd<\u001c\ufffd+\ufffdF\ufffd\u739c\ufffd\ufffdU\ufffd\ufffd\ufffd C\ufffd\u0005\ufffd\u0015Fgs\ufffd\ufffdR\ufffdy?\ufffd\ufffd\ufffdn5\ufffd^\ufffd\ufffdj\ufffd\ufffdRd\ufffdi\ufffdU\ufffd\ufffd\ufffd`hf\ufffdw0\ufffd\ufffd\ufffdX)\ufffda:\ufffdBL\ufffd2K$\ufffd\u0006\ufffdX\u0011V\ufffdJ\u0611p\ufffdFa\ufffd-\ufffd\ufffd\n\"3\ufffd\u0014\ufffd&\n\ufffd\ufffd-\ufffd\ufffdA\ufffd\ufffd\ufffd\ufffd\u0110\u06db\ufffdJHT\u0012\b\u0016o\ufffd,aR\ufffd\n<\ufffd!\ufffd\ufffd\ufffd\u001b&\ufffd\ufffd\ufffdd\\\ufffd\ufffdW3\ufffd\u011b5{`\u00169p\u001d\ufffdjp\u0018Y\ufffdzh\ufffd\ufffdb\ufffdz\u000b\ufffd\u0011}\ufffd\u0003\ufffd_\ufffds\u0016\\C\ufffd\u02a3\ufffd\ufffd-3\ufffdO\ufffdp\ufffd-KB[\ufffd\ufffd.\u04da]\ufffd\ufffdC\ufffd\u0007\ufffd\ufffd\"\ufffd\ufffdU{\ufffd\ufffd\ufffd\ufffd\ufffd;\ufffd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u001f\ufffd\u0005]\u001a\ufffd\ufffd\ufffd\ufffd\u06e2\ufffdE\ufffd\ufffd\ufffd\ufffd%k\ufffd\ufffdfM\ufffd\u0004\ufffd\ufffd<K\u0007\ufffd\ufffd\ufffd6\ufffdv\ufffd\u0368\ufffd\ufffd&\ufffd4\u02ab\u0019$\ufffd8i\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd3\u0010k\ufffd#\u03e9b\u0018\ufffdM\ufffd)\ufffd5\ufffd\ufffd j\/\u0012\u000eZ\ufffd\ufffd\ufffd\u000b\ufffd\\N\ufffd\ufffd6\ufffd\u000f5\ufffdI\ufffd\u0001z\ufffd\u0011\u001f\ufffd\ufffd\u0000\ufffdJ\ufffdMww-\ufffd\u025a\ufffdxg\ufffd\ufffd\ufffd\ufffd<\u001c=\ufffd\ufffd\ufffdy[\ufffd\ufffd\ufffd\ue195`M\ufffd\u000b&?\ufffd\ufffd\u001fn\ufffd\ufffd\ufffd\ufffd\ufffd:o\ufffd}[\ufffd<|}5\ufffd\u0015Y\ufffd\ufffd`=\u0005\u0010G<\ufffd[Q\u0003k\ufffd\ufffdQ~\ufffd\t\ufffdME\ufffd\ufffd\ufffd\ufffd&\ufffd\ufffd6\ufffdT\ufffd\nl\ufffd(\ufffdbP\u0001V\ufffd\u00054m\ufffd\ufffdGx\ufffdZ\ufffd\ufffd#\ufffd\ufffd\u016ciD\ufffd\ufffd\ufffd9U\ufffd.\u0011\u0019\ufffd4\u0018\u0011\ufffd\u001d\ufffd\ufffd\ufffd\uc13e\ufffd0\ufffd\t\ufffdUzLx\/\ufffd\u000e\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\ufffd\u0005?\ufffd\u0015\ufffd\ufffd\ufffd\ufffdV<\ufffd\ufffd\ufffd?m}\ufffd\ufffd\ufffd\u0003\ufffdX\ufffd\u024c\/\ufffd\ufffd;w\u03fdm\ufffdS\ufffd\ufffd\ufffd~\ufffd\ufffd,\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdg\ufffd\ufffdO~\ufffd\ufffd\u001dw\ufffdw\u03c3wC\ufffdU\ufffd\ufffd%.\ufffd\u0014\ufffd\u0006\ufffd\ufffd\ufffd\ufffd\ufffd*\ufffd\ufffd\ufffd\ufffd*EHQK\u05ce\ufffdB\u0011b0\ufffd\ufffd\u0006\ufffd\ufffd|\ufffd>\ufffdH7\ufffd\ufffd!\ufffd\ufffdG\ufffd\ufffd\u0015\ufffd\u000b\u0363m\ufffd<^gl\ufffd\ufffd3\ufffd6\ufffdm\ufffd\ufffd\ufffd0K[\\\u001a\ufffdwq\u562a\ufffd\u02d1toCC\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0014\u0018k\ufffd\ufffd\ufffdB\ufffd4|_\ufffd\tQ\ufffd\ufffdt\u0000X9\ufffd\ufffdyv\ufffd\ufffd\ufffdC\ufffd9n\u05c3\ufffd'\"6\ufffd6G\ufffd\ufffd\u0333\ufffdk\f\ufffd\ufffd~9\ufffd\ufffd@q\ufffdD1\ufffda\u0010Y\ufffdB\ufffd\ufffd\u0002\t\ufffd%\ufffd\f\ufffd\ufffd\ufffd\ufffd(\"\ufffd\u001e,\ufffd\ufffd\u0018^\u02e6\ufffdY\ufffdw\ufffdX\ufffd\ufffd\ufffd\ufffd\ufffd}\ufffd\ufffd`suA\ufffd\ufffd\ufffd\u0631\ufffdo?\ufffdab\ufffd\ufffd\ufffdY\ufffd>\ufffd\ufffd\ufffd\ufffd[\ufffd<tCx\ufffd\u0017\ufffd\ufffd\ufffdx\ufffd\ufffd\u058e\ufffd\u001dsf\ufffd\ufffdx\ufffd\ufffd\u07f1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd^dR;\u0007b\ufffd\ufffd\ufffdX1\ufffd\ufffd\u001av\u001f\ufffd\ufffd\ufffd\u001es\ufffd\r\ufffd\ufffd\ufffd\ufffdy\ufffd\ufffd\u0796\ufffd\ufffd\ufffd\ufffd\ufffd{\ufffd\ufffd*Y\ufffd\u001d\ufffd6n\u0676k\ufffd\ufffd:\ufffd\ufffd\ufffd\u05be\ufffd\ufffdU,\ufffd\ufffd:\u00005\ufffdI\ufffd\ufffd\u0013\u024fr\ufffd_OS4=\ufffd\ufffd\ufffd\u00145Ia=\ufffd\f\ufffd;HH\ufffd\u001f%\fE14exT\ufffd\u05cd\ufffd\ufffd\ufffd\u0002\ufffdC2\u0016s`#e\u001cQ(\\\u039c\u001b:\u025c\ufffd\ufffd \u0012\ufffd\ufffd\ufffdh\u0212\ufffd\u001b6\u6524\ufffd\ufffd\ufffd?\u56fe\ufffd\u001b\ufffdnO\r\ufffdD\ufffd\u0002no\u0018,\ufffd\u0004\ufffd7\ufffde\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd*\u000b\u0002\ufffd\u0634\ufffd\ufffd\ufffd\ufffd\ufffd\u038c]\ufffd\ufffd\ufffdO?{Y[\u07be\u0014\ufffdrZ\ufffd\ufffd$\ufffd).\ufffd\ufffd5z\n\ufffdF98_\ufffd\u001a\ufffd\u0003\ufffd$\u001dE\u00114\ufffd\ufffd\u018c\ufffd\u04b1X\u0019\ufffd\ufffd(\u0018\u0004\ufffdx\ufffd\u000f\ufffd\u0016\u0006\ufffdVU\ufffdC\ufffd:\u0016\ufffd\ufffdK\u0015v\ufffd!\/,t\ufffd\ufffd\n\ufffdyz\ufffdJ\ufffd\u00144\ufffd\ufffdo\ufffdp\ufffd`^\ufffd>\tg\ufffd\\\ufffd\u0002nG\ufffdV`\u0015$\ufffd\u0013\ufffdf\ufffd\ufffd\u0004\ufffd\ufffd\u0018\ufffd\u0010\ufffd8\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd\ufffd\ufffdD\ufffd~?\ufffd\u8228\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0000\ufffd\ufffd\ufffdM\ufffd\ufffd\ufffd\u0010\ufffdX\ufffd\ufffd\ufffd\u0005\ufffd\ufffd\ufffdQ\ufffd\ufffd\ufffd*\ufffdpW![\ufffd\ufffdx\ufffd\u0019\ufffd\ufffd\u0624\ufffd\ufffd*\ufffd\ufffd\u001c[o\ufffdp\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffd\u0013r%uKf\ufffdB\ufffd!\ufffd\ufffd\ufffdW8\ufffds\ufffd\ufffd3\ufffd\ufffd\ufffd=\ufffd\ufffdF\ufffd\u0002+Ok\ufffd\ufffd\ufffd\ufffd\u0015Q\ufffd\ufffdO\ufffdz\ufffdC\ufffdV\r\ufffd\ufffd\"\ufffd,\ufffd\ufffd*\ufffd\ru\ufffdxl\ufffd\ufffd\ufffdb\u0016d\ufffd\u0012\ufffdL>\u0016\ufffd\ufffd\u0011\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd(eY\ufffd\ufffd\ufffd4\u001f\ufffd\ufffd\u0004\ufffd\u06d5+\ufffd\/^\ufffd\u0014\ufffd\u0005\ufffdb\u064e=W\ufffd+\ufffd\u0000\ufffd\b\ufffd\u0011\ufffd\ufffd\ufffd\ufffdHnv\u0001\u001bUO\u0017\u0016\u0014\ufffd\ufffdp\ufffd\ufffd\ufffd\ufffd\ufffd[2\u0016\ufffd\ufffdK\r\ufffd\n\b\u030e\ufffd\u0015LxD&\ufffd\ufffd.\ufffd\ufffdF\ufffdd\ufffd\r\u0010\ufffd\ufffdc\ufffdh\ufffdPX\ufffd\ufffdA\u000b\ufffd\u00f0\ufffd6\ufffdz\ufffd\ufffd\u01ecq\u0002\t\ufffdRc\ufffd\u0463&+\ufffd\u00120\ufffd\ufffd\/\ufffd\ufffd\/T@n#\ufffd\u0007\u000e\ufffdb\u0014!9\ufffdqT\ufffdheZ\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxC\u0019W\ufffdW+5\ufffd\ufffd\ufffdq\ufffd^\u04f4de}\ufffd\u0016\u0017\ufffd\ufffd\ufffd\u001cQu\ufffdc)V\ufffd\ufffdo\ufffd\u0017hB\u000bB\ufffd\ufffdK\ufffd\u0004\ufffd\u0468\ufffd2\u000f\u0301\u001bQULq\u0017]\ufffd\ufffd\r-\ufffd}]\ufffdp\ufffd\ufffd\ufffde\ufffd\u0013K\u0002^W\u0012\u0006\ufffd\ufffd!\ufffd\ufffd>\ufffd9;\u0012\ufffd\bdU:h\ufffd(\ufffdd4{\ufffdv\ufffd\ufffd#\ufffd9\ufffd,\ufffd\ufffd\ufffd%V\ufffd\ufffd\ufffd>o\ufffd\t+a{\ufffdb\ufffd$\ufffdVbvE\ufffd\n\ufffd \ufffd\u00172\u00195\ufffd\ufffdWo\ufffd3\ufffd\u001b?:w\ufffd\u06d9\u001f-M\ufffd\ufffd\u000e\u0018\ufffd.\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffds\ufffd\ufffdi#\ufffd\ufffd\ufffd\u0019+\ufffdL\ufffd\ufffd\ufffd\ufffd~\ufffd\ufffdo\ufffd\ufffd\u000f\ufffd\ufffd\u037a\u0380\ufffdH\ufffd((%\ufffd\ufffd\ufffd\u06a8.V\ufffd\u0006\ufffd\u0004\ufffd\ufffds\ufffd\ufffd0\ufffdGKJ\ufffd\ufffdX\ufffd\ufffdZ`\/\u0018\ufffd\ufffd\u0015\ufffd\\^\ufffdx\ufffd%\ufffd<\ufffds\ufffd\ufffdh\ufffd\u001cFv\u001efO\u0002\ufffd\\(\ufffdsa\ufffd_o\ufffd\u02cd\ufffd\u057a\ufffdX\ufffd\u0004Q6C6\ufffd\ufffd\u0013M^\u001b\ufffd\ufffd\r\ufffd\u000bm\ufffd\ufffd\ufffd\u001a[\ufffd4\ufffdVZk*L2]yu\ufffd\ufffd8\ufffd=\ufffdus\ufffd\ufffd?749\ufffd\ufffd\ufffdO\ufffd<\ufffdtn@y\ufffd\ufffd\u0013\ufffd\ufffd@\ufffd\ufffd\b\ufffd\u0016B\/g\ufffdv\u001cq\ufffd\ufffd\ufffd\ufffdiWq\ufffd\ufffd\ufffd\ufffd\ufffd#?-\ufffd\ufffdm&\ufffd\u0004\u0011\ufffd\t\ufffd\ufffd\b1V(\ufffd\u0007i\ufffd\u001e\rZ\ufffd6\ufffd\ufffdh\ufffd^_\ufffd\ufffd+\ufffdMC|%\ufffdO<8\ufffd\ufffd\u000e\u00068@\ufffd\ufffde\ufffdk$x'I#\ufffd\u0000\u0001\u0003A 1_\u001e\ufffd\ufffd\u0563\ufffd-RN\ufffd\ufffd\ufffd\u06c4I\f\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffdX>4\u0005[Z,\ufffd}[\ufffd\ufffd\f\u0080\ufffd_\u06c7\ufffd\ufffd\ufffd\ufffdz\ufffd\ufffd\u000e\ufffd\ufffd\u000f={{\u01e1u#\ufffd\ufffdhet\ufffd\ufffd}\u549b\ufffd\"k\ufffd\ufffd\ufffd\u07f1\ufffd\ufffd?6\ufffd\ufffd\ufffd&`o\ufffdXT\ufffdh\ufffdMc~\ufffdosDf\ufffdf\ufffd\u0003\ufffd\ufffd\ufffd\ufffd\ufffdl\ufffd\ufffd\r}\b\ufffd\ufffd\u0002g)\ufffdo\ufffd\ufffd\ufffd9y\f\ufffd\ufffdc1\ufffdI\ufffd\ufffd\u001aZo\ufffd\ufffd3z'\ufffda\u069dN;\r_\u0012\ufffd\u001a\ufffd\ufffdK\ufffdY\ufffd0g\ufffd\ufffdS`\u0799\ufffd\ufffd\ufffd|\ufffdz*\u0014\u0000y!\ufffd\ufffd,\ufffdx\ufffd\ufffd\ufffd1\ufffdxpEqY\ufffd|@j G\ufffd\u06b0\ufffdc\ufffd\u0010)\u0013\ufffd\fh*~W\ufffd\ufffd\ufffd\ufffd7B\ufffd-\ufffd\u0010\ufffd2\ufffd\ufffdT{\ufffd\ufffdi\ufffd[;\u001b\u001f\ufffd\u001e\u0015jU\ufffd\ufffd\ufffd\ufffd\ufffdl{\ufffdq\u00da\ufffd\ufffd\ufffdN\ufffd\u0007\ufffd\ufffd\ufffd\ufffd\u0010U\ufffd\ufffd\ufffd\ufffd\ufffd\r\u0015F\ufffd*\ufffdbHO+B\ufffdG\u000b\ufffd.7-\ufffd\ufffd\ufffd\ufffd\b\ufc7a\ufffd\ufffd\u0011\ufffd:D\ufffdx\ufffd&\u0004\ufffd\u0002\ufffd2\u0010\ufffdj\u000f\ufffd\u0001,o\ufffdF\ufffd\ufffd\u0013\ufffdW\ufffd\ufffd]\ufffdU\u001a&L\ufffd(7\ufffdP\ufffd\ufffd\ufffd]\u447c\ufffd\"\ufffdj\ufffd\ufffd6(\ufffd\ufffdy\ufffdWS<\ufffd\ufffd\ufffd\ufffd\ufffd\u0019J\ufffd\ufffd>\ufffd\ufffd4\ufffd9\ufffdU\ufffdY|x\ufffd\ufffdu\u0010u\ufffd<N\ufffd\ufffd\ufffdW\ufffdk\ufffd]\ufffd\u000bBxw\ufffd\ufffdR\ufffd&z16\ufffd\ufffd\u0721jQ\ufffdE_\u0017\ufffd\ufffdV\ufffd\ufffd.\ufffdq@\f\u0002\u001c1M\ufffd\ufffd\ufffd\u0002G\ufffdhe\ufffd#n\ufffd3\ufffd.}\ufffdDm\ufffd\ufffd\u076e\ufffd\ufffd[\/\ufffd\ufffdmr\ufffdKm`%\ufffd\ua119S\ufffdD%\ufffdZ$L\ufffdo\u000bCx@\u0018`\ufffdZS\ufffd$\ufffdRA\bE\ufffd\ufffd6\ufffdI\ufffd\ufffd$!\ufffd\ufffd\ufffdc\u000e\ufffd\u001bLJ\u0016\n\u0016\ufffd\ufffd\ufffd\ufffd\\\u0015\ufffd{]\\Q\u0417y\ufffd\ufffd\ufffdyGq\ufffd\ufffd>\u0013U\ufffd\ufffdTue:\ufffd\u03aa\u000e\ufffd\ufffdV\u001emQ\u0016\ufffd\/\ufffd\ufffdE\ufffdm\ufffd\ufffd\"\u0019\ufffd\ufffdpL\ufffd\ufffd-\ufffd\ufffdx\u045e\ufffd4\ufffd\ufffdE\ufffd\ufffd\ufffd\ufffdR]\u0001'W*\u0015c1\ufffd\u001e\u0019-4\ufffdE\ufffd\u001eLSF\f9EA\ufffd_G\u000e\ufffd\ufffd\ufffdldq\ufffd\u0007\ufffdl\ufffd\ufffd\u001e\ufffd!\ufffd\ufffd!,\ufffd2\u0684\ufffd\ufffd9Z\ufffd\ufffd\u0015\ufffdl\ufffd5\ufffd\ufffdX6\ufffd\u07bf\ufffd\ufffd\ufffd?\ufffd\ufffd},~\/\u0014bT\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdn\ufffd\ufffd\ufffde>VQ{\/n\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\ufffd(\ufffd\u00164\u0016g\u0006\ufffd\ufffd\/\ufffd\ufffdU3\ufffd8\ufffdl\ufffd\ufffdw'.v\ufffd\ufffd\ufffd\ufffd\ufffd;\ufffd\u001f^:d\ufffd\ufffd\u001f\ufffd\u0004\ufffd\ufffd\u001e\u05c4\ufffd:\ufffd\ufffds\ufffd\ufffd]<N\ufffd\ufffd~\ufffd\ufffd\ufffd\ufffdF\ufffdj\ufffd-k\ufffd\u0002\ufffd,\u001a\\Y\ufffd*]0\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffds\u0017m\ufffd\b}\u0014\u0014\ufffd\u0011\ufffd%\ufffd5A\ufffdJ\ufffd\ufffd\u0004\u001a\ufffd\f\ufffd\ufffdt\ufffdvZ\ufffd\ufffd\u000b2LI\u001f\ufffd\ufffd\ufffd\n\u00fd\ufffd\u0007\u036f\u0005>\ufffd\ufffdsW\ufffd&\ufffdH\ufffdc\ufffd\ufffd||\u000f\ufffdH\ufffdW\ufffd\ufffd\ufffd\u0001\ufffd\ufffd'`\ufffd+\ufffd\ufffd\ufffd0C\u001a\u97a4\u0005\n?N\ufffd\u001b\ufffd|\ufffd\ufffd\u042c\ufffd\u0402\ufffd\ufffd\u0000\ufffd:W\ufffd\u001c~\ufffd\ufffd|\ufffd\ufffd\u0015p~~\ufffdW\u0211\ufffd6>\u0123\u0002u\ufffdn\ufffdt\ufffdkz\ufffd+\ufffd\ufffd\ufffdp\ufffd\ufffd\u0003'\ufffd\ufffd\ufffd\ufffd\ufffd]\b\ufffd\ufffd`Z\ufffd:\u001dn\ufffd\u022d\u0000\ufffd\ufffd\ufffd\ufffd\u001b7\ufffdu\ufffd\ufffdG\ufffd\ufffd\ufffdu\ufffd\ufffd6_}\u0005\ufffdsT\ufffd*j:\ufffd&\ufffd\u0000\ufffd\ufffd\ufffd\u000f\ufffd\ufffd\ufffdxf,s4s\ufffd\ufffd\ufffd\u001b\ufffd\u03f7y\ufffd\ufffd\ufffd\ufffd\ufffd?\ufffdd\ufffd\ufffd\ud6ef\ufffdz\ufffdB|W\u000f\ufffd(DKr\u0012i3\u06ac\ufffd\u0162\ufffd\ufffd\u025d\ufffd?\ufffd\u0014V\ufffd\ufffd\u970e\\\ufffdy*\ufffd\ufffdE\ufffdn\u0014o\u0019\ufffd+\ufffdLy\ufffd)\"\ufffdE\/\ufffd_\u0015\ufffd\ufffd~\u001c\ufffdY\ufffdb\ufffd\ufffdiI\ufffd\ufffd\u000f\ufffd[Zm+r\u0014\ufffd\u000f5R\ufffda\u0019\ufffd5\ufffd\ufffdZ\ufffdT\ufffd\ufffdP\ufffd\ufffdF\ufffd\\VR9{5\ufffdO>\ns\ufffd\u000ep\ufffdVz\/\ufffd\ufffd\u071c\ufffdZ\ufffdK]\ufffd\ufffd\ufffd\u0012\ufffd\ufffd\u0581\u0018\ufffd\ufffd\u0276\ufffd7\u001f5\ufffd\ufffdu\ufffd\u0007y\ufffd\u0013;\ufffd%\ufffd\ufffd,d\ufffd\ufffd\ufffd\ufffda\ufffdY\ufffd\ufffd\ufffd\ufffdc\ufffd\ufffdXI\ufffd\u0012\ufffdDJK\u001f*)\ufffdP\ufffd!\ufffd^\ufffd,\ufffd\ufffdM+\u0014p\ufffdf\u000f\ufffd2\ufffd\ufffd\ufffd9\ufffd\u0014t\ufffd\u000f\ufffd\u0002\ufffd.\ufffd\\\ufffd\u0017\u0013\ufffd\f\ufffd\ufffd\ufffdW\ufffd|q\ufffd\ufffdS\ufffd\ufffdR\u0012\ufffd\u0010\ufffds\ufffd\tV\ufffd\t\ufffd%\ufffd\ufffd\ufffd\u0018\ufffd\ufffd\\\ufffdW\ufffd\ufffd\ufffd\ufffd\t\ufffd}7\ufffd\u001d\ufffd\u001b<\ufffde6\ufffd1\ufffdN<wZ\ufffd}\ufffd\u0242\ufffd\ufffd\ufffd4\ufffdo\ufffd\r\ufffdE\ufffd|o\ufffdU\ufffd\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdu\ufffd\ufffd\ufffdo\ufffdo\ufffd>\ufffd\ufffd\ufffd\ufffd\ufffd8x\u0628\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdg3\ufffdF\ufffd\r\ufffd\u07dc\ufffd\ufffd\ufffd\ufffd\b>\u0018~\ufffd\ufffd\ufffd\u0002(\ufffd\ufffd\ufffd\ufffdus\ufffd\ufffd\ufffd\u0017\u0004Z\u0006nZ\ufffdq\ufffd@Et\u075a\u0014\u0010\ufffd?\ufffd\ufffd\ufffd\ufffd\nendstream\nendobj\n50 0 obj\n8185\nendobj\n13 0 obj\n<< \/Type \/Font \/Subtype \/TrueType \/BaseFont \/SSCMAZ+Cambria-Italic \/FontDescriptor\n51 0 R \/ToUnicode 52 0 R \/FirstChar 33 \/LastChar 56 \/Widths [ 526 345 407\n271 521 535 507 535 220 382 527 457 433 524 267 371 497 460 522 528 528 292\n799 460 ] >>\nendobj\n52 0 obj\n<< \/Length 53 0 R \/Filter \/FlateDecode >>\nstream\nx\u0001]\ufffd\ufffdj\ufffd0\u0010E\ufffd\ufffd\n-\ufffdE\ufffdb7I\u0003\ufffdPZ\nY\ufffdA\ufffd~\ufffd-\ufffdSC#\u001b\ufffdY\ufffd\ufffd{F\t)tq\u0005Gwf<\ufffdQ\ufffd\ufffdy\u0684~2\ufffd{\u001c\ufffdV&\ufffd\ufffd\ufffdG9\f\ufffd\ufffd\u0134\ufffd\ufffdC6\/\ufffd\ufffd\ufffdt\ufffdt\ufffd\ufffd\u0358\ufffd$oO\ufffdI\ufffd\ufffd\ufffd\r\ufffd\ufffd2c\ufffd\u000fR\u000eS<\ufffd\u0643\u001fZ\ufffd\u047b\ufffd\ufffd%\ufffdagf_\ufffd\ufffdt\ufffd=\ufffd\ufffd\ufffd%L\ufffdfum\ufffdt\ufffd{i\ufffd\ufffdf\/&O\ufffd\ufffd\u001b\ufffd\ufffdO\ufffd[\ufffd\ufffd\">O\ufffd\u0018:\"c~n\ufffd\r^\u000ec\ufffd$6a'Yem]=?\u05d9\u0004\ufffd\u03fa$\ufffd\ufffd\ufffdnbV\u0015\ufffd`\ufffd6\u001c\ufffd\ufffd\ufffd\u001c\ufffdM\ufffd\ufffd\ufffd\ufffdr)^\ufffd\ufffdJe\ufffdr^S\ufffd\u0000\ufffd\ufffd\ufffd;\ufffd\u0012D`\ufffdx\u0007\"\ufffd\u05ca\u000b\u0010\ufffd\ufffd]\ufffd\ufffd\ufffd\ufffd\ufffd+\u0010\ufffdv\ufffd\ufffd \u0002E\ufffd\u0001\u0011\ufffd\ufffdb\u000b\"\ufffd~\ufffd\u0081\ufffd\ufffdT\u0283\ufffd0\u0005w \ufffdu\u0004\ufffd\ufffd\u001f\ufffd\ufffd\u000b\ufffdP\ufffd4*\ufffdV\ufffdiTT\u059eK\ufffdQ\ufffd\u0014\ufffd\ufffdL#\ufffd\u0002\u04be\nw\ufffdH\ufffd*\ufffd+\u04be\ufffdR\ufffd\ufffd\ufffd\ufffd\ufffdQ7\ufffd\/\ufffdqw\ufffd\ufffde\ufffdg\ufffd\u0781\ufffd\u000fr}\ufffd\ufffd0j\ufffd\ufffd_\ufffd4\ufffd(\nendstream\nendobj\n53 0 obj\n377\nendobj\n51 0 obj\n<< \/Type \/FontDescriptor \/FontName \/SSCMAZ+Cambria-Italic \/Flags 68 \/FontBBox\n[-1105 -279 1222 1047] \/ItalicAngle -6 \/Ascent 950 \/Descent -222 \/CapHeight\n667 \/StemV 0 \/XHeight 467 \/AvgWidth 542 \/MaxWidth 1224 \/FontFile2 54 0 R >>\nendobj\n54 0 obj\n<< \/Length 55 0 R \/Length1 12256 \/Filter \/FlateDecode >>\nstream\nx\u0001\ufffdz\t|[\u0559\ufffd9\ufffdh_\ufffd\ufffd\ufffd\ufffd\ufffdM\ufffd%[\ufffd\u0014\ufffd\ufffd\ufffd-9v\u001c'\ufffd\ufffd\u0010)v@\ufffd\ufffd\ufffd\u000e\t\u0004\u0012\ufffd\ufffd%\u0518\ufffd\u000e\ufffdB\ufffdB\u1d41NH_X\ufffd\u001a\ufffdL\ufffd2%l\ufffd\ufffd\u0010\ufffd\ufffd\ufffd\ufffd\ufffdk\u0007\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffd0\u0412\ufffd\ufffd;W\ufffd\ufffdP\ufffd\ufffdW\ufffd\ufffds\ufffd9\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffd\ufffd\ufffd&\ufffd\u0016\ufffdA\u0004E\u01f7\ufffd#\ufffdc\ufffd\n\ufffd\ufffd\ufffd\ufffdwr\ufffd\ufffd\u0709\u0010sd\ufffd\ufffd\ufffd\ufffd\ne\ufffd\t\ufffdt\u0003\ufffd\ufffd\ufffd\ufffdT([\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffdi\n\b\ufffd2n\ufffdw\ufffd\u0536\ufffd7\u0016\ufffdV\u0015\ufffd'\ufffd^=^\ufffd\ufffd\ufffd\r\ufffd\u001b\ufffd\ufffdn,\u038f~\u0006e\ufffd\u0736\ufffdB\ufffd\b\u0307*\ufffd_;Y\ufffd\ufffdi\ufffd\ufffd\ufffd]Z\u05ad+\ufffd]|\u001a\u0010\u0090w\ufffd\u0007\ufffd\n\ufffdw\ufffdD\fbQ\u0004\ufffd\ufffd\ufffd\ufffd\ufffd\u0001$\ufffdZZ\/\ufffd\ufffd\ufffd&\ufffd\u0006\ufffd\u0015\ufffd\ufffd\u0007HK\ufffd\ufffd\ufffd\ufffd;\ufffdF\u07ef\ufffd\ufffd\ufffd]\u001fV\ufffdY\ufffd\ufffd*\u0007\ufffd\u0550\n\u001f\ufffd\ufffdj>\ufffd\ufffd\ufffd\ufffd\u001fV\ufffd;\ufffd~\u0005\ufffdD\ufffd\ufffdC\ufffdZ\ufffdr\tCo\ufffdewx\ufffdcx\ufffd|\ufffd\ufffds\ufffd-\ufffd\ufffd\ufffd?!\ufffd\r\ufffd\u0636\u001d\u001e[\ufffd\ufffd\u01d5W\ufffd=W^\ufffd\ufffdZ\ufffd\ufffd\ufffd6\ufffd\ufffd-\ufffd\ufffd4\r\ufffd\ufffd)\ufffdgrj\ufffd\u001a\ufffdk\ufffd\ufffd\ufffdn\ufffd\u0017\ufffd\u0013\u000bg\ufffd~\ufffd\ufffd\ufffd[\ufffd?\ufffd\ufffdq\ufffd':C\ufffd\ufffd\ufffdbN\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\ufffd:\ufffd\ufffd\ufffd\u0016\ufffd\ufffd$p\ufffdS\u0012\ufffd\ufffd^&\ufffd\ufffdh\u07fd\ufffd\ufffd;|\ufffd\ufffd\ufffd\ufffd'\ufffd\ufffd\ufffdq\ufffd\ufffd+\ufffd\u001b\ufffd\u001bi\ufffd\ufffd\ufffd\ufffd\u0006\ufffd\ufffdU\ufffd\u0003\ufffdx\ufffd\ufffd\ufffd\ufffd\u0003L\ufffdy\ufffd\ufffd:\ufffd8\ufffd\ufffd\u0003\u001dB\ufffd\ufffd\u0007\ufffd_2!\ufffdVG\\\ufffd\ufffd\ufffdJ'\u0011\ufffdy\ufffd\u52f3\ufffd\u041e\ufffdL\ufffd\ufffd\ufffd8t\ufffdny\ufffd\ufffd\f\u0013\ufffds\ufffd\ufffd\ufffd\u060dw\ufffd\u0006K;\ufffdx\u0000\ufffdD\ufffd\ufffd\u0014\ufffdpRz7\ufffd&\ufffd\u074d\ufffd\ufffdw\u001bNH\ufffd\u000e\ufffd.\ufffd\u001bpLh\u0161}\ufffd8\ufffd\u0017\ufffd\u001d0\ufffd\f$\u056c\ufffd\u0019u\u000buj6\ufffdi\ufffd9\ufffdl\ufffdF\ufffd\ufffd\ufffdf\ufffd\ufffdt\ufffd6u\ufffdM\u0011\ufffd\ufffd\ufffd\r\ufffd\ufffd:CX\ufffdU\u0208\ufffdX\ufffd\f\ufffd`\u0019\ufffd1f\ufffd\u0001u`\f\ufffd@\ufffd#\u0001\u07b4F\u000e,\ufffdD,$\u000e\ufffd\u001c\ufffd\ufffdP\u0013\ufffd|\u0014\ufffd\u0002\ufffd7\ufffd\ufffd\u0006\ub16d\ufffd\ufffd\ufffd\ufffd\nCe\ufffd\ufffdX\u001d\ufffdd\ufffdC\ufffdp\ufffd\u0018\ufffd\re\ufffd\ufffdWj\ufffdJ\ufffdH\ufffd\ufffd\u0019#k\u04a95Z\ufffdB\ufffd\ufffd\u0011\ufffd\\\ufffd0\ufffdS\ufffd\ufffdR\u001f\ufffd,\ufffd\u001a\ufffd\ufffd\ufffd\u0016\ufffd\ufffd$\ufffdI\u001eC\ufffd\u02e8\ufffd\"-\ufffd\u001a[Q\ufffd:CF\ufffd\u05d3\u0007\u0443\ufffd\u0007\ufffd?E\ufffd\ufffd\u0600\ufffd\ufffd\ufffd\ufffd\ufffd%z\ufffd\u04ad\ufffd\ufffd\u000e\ufffdYf\u0563N56\ufffd\b\ufffd\u000eH\ufffd@\ufffd\u0001^\ufffdp\ufffd:Q\ufffd(O\ufffd%\u0002\t.\ufffdKx\u0012\u0384-aN\u0018\u0013\ufffd\"A\u0012(1\u0018\u001b\ufffd\ufffd\ufffd\u001f\ufffd\ufffdt\ufffd\u0016\f\ufffd5]b,\ufffd\ufffdp\ufffdb}\ufffd_T\u000f\ufffd\ufffd\ufffd1\ufffdR\u0006\ufffd\"\ufffd\ufffd\u0004F#\ufffdl\ufffd\t\u0006^\ufffd\ufffd\ufffd\ufffd\ufffd\u0013\ufffdE\ufffdg='\u0011\u0000\"\ufffdgg\ufffd\u0384B%\ufffdD\ufffd\ufffd\ufffd\ufffd\ufffd$#\ufffd\ufffd\u0317K2\ufffd_\ufffd\u001f\u0012=|W\ufffd\ufffd>;$\u028e\ufffd\ufffd\u0015k\n\ufffd\ufffd\u000e\ufffd:%\ufffdS9\ufffd2\ufffd\u0015\ufffd\ufffd$\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdE\ufffdhg\bJ\ufffd\ufffd\ufffd\u06290\ufffd\ufffd\u0014;`\ufffd\ufffdt\ufffd\u00bc\ufffdnvp\ufffdKd\ufffd\ufffd\ufffd\u0149\ufffd~\ufffd78\ufffd\u0015\ufffd|W\ufffd\ufffd}(5\r\ufffd\ufffd:\ufffd\u000b\u0004X~7\u04a0\ufffd|-\u8310|\fd\u001f\ufffd\u001c4_\ufffdq\ufffdl!\ufffdpv\ufffd!\ufffdp\ufffd\ufffd\ufffd\ufffd\ufffd4\/?\ufffd\ufffd\ufffd\ufffd\ufffd\u0016!\u016d\ufffd%m\u000bg\ufffd\ufffd\u0010\ufffdpd\ufffd?\ufffdI\ufffdI\ufffdg\ufffd\ufffd\ufffdV\ufffdw\ufffd\ufffd\ufffd2\ufffdE4\ufffd(\ufffd\u000b=\ufffd\ufffdE\ufffd\ufffd\u0006\ufffd\u001d\ufffd\ufffd\ufffdZHaH\ufffd\ufffd\ufffd\u001f\ufffd\ufffd\u0003\ufffd\ufffdN\"Q\ufffd\ufffdG\ufffd\ufffd\ufffd\ufffdkR\ufffd\t\ufffd\u0002\ufffdzz\ufffd)fV\ufffd\u0011t#Z\ufffd\ufffd\ufffd\ufffd6\ufffd,P\ufffdA}\ufffd\ufffd\ufffd\ufffdAu\ufffd\ufffd i\ufffd\ufffd\ufffdE\ufffd\u0000\ufffd\ufffd\ufffd\/\ufffd,\ufffd.d\ufffdBv\u001ef\ufffd:Z\ufffd&Q\ufffd\ufffd}\ufffd\ufffd\ufffd~X\ufffd\ufffdQ?\ufffd\u0001\u001c.|^\ufffd\ufffdo09\ufffdY\ufffd\ufffdv\ufffdJ\ufffdmF\u0003\ufffd\ufffd\u0015Q\ufffd\ufffdU\ufffd\ufffd\ufffd0\ufffd^t\u001d:\b\ufffd\ufffdZ@\ufffd\ufffd\ufffd\u0014\u068a\ufffd\ufffd\u001e\ufffd\ufffd?\ufffd\u001eA\ufffd\ufffd\ufffd\u0403\ufffdg\ufffdS\ufffd\ufffd|\u001e\ufffdep\ufffd*8\ufffd\ufffdQW\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\ufffd\ufffdO\u0014\ufffdQ9\u0012\ufffd\f3h\fp\ufffd6\ufffd!\ufffd\b\ufffd\ufffd\ufffd\r\ufffd\ufffdd6d\ufffd\\\u0007<\ufffdQ\u0702L\ufffd\ufffd\ufffd\ufffd\ufffd\u000f-\ufffd\ufffd\ufffd\u0017\ufffd.\u04b5\ufffdd\ufffd\u000b\ufffd\u00132\ufffdW\\\ufffdalt}&\ufffdvdx`e\ufffd\ufffd\ufffd\ufffd\ufffd=\ufffd\ufffdN\ufffd\ufffd\ufffd-\u047a,\ufffd\ufffd\ufffd\ufffd\ufffd\u0010\ufffd\ufffd\ufffdFjk\u00a1\ufffd\u028a\ufffd`\u0019\u001f\ufffds\ufffd\ufffd\u0012\ufffd\ufffd\ufffdr:\ufffd6\ufffd\ufffdlb\ufffd\u0006\ufffdN\ufffdQ\ufffd\ufffd\n\ufffd\ufffd0\u0018\ufffd\ufffdStv\ufffdS[DWw\u0016\ufffd!\u0273\ufffd\ufffd[uv \"\"\ufffd\ufffd\u03db\ufffdX$SSl%\ufffdC\"\ufffd\ufffd\ufffd\ufffd\ufffd<\u0012Z2\ufffd\"\ufffd\ufffd&\ufffdD\u0012d\ufffd\ufffdC\ufffd\u0001\u000f\ufffd\u0012eA\ufffd\ufffd+r\u0013b\ufffdp\ufffd\u03f3?\ufffd,\ufffdg`X\ufffd\u075d\ufffd\ufffd=\"\u0013\ufffdo\u001fT\ufffdwE\ufffd\ufffd\u0010\ufffdA\ufffdC\ufffdD\ufffd\u0013\ufffd`\ufffd\ufffd\u0013\u000bo\ufffd\u0000\u0011\ufffd\ufffd3\ufffd\u001cN\ufffd\ufffd\ufffdb\ufffd\ufffdV\ufffd\ufffdE\ufffd<\t@\ufffd\ufffd\ufffd2W\ufffd9v^\ufffd\ufffdN\ufffd\ufffd:\ufffdto\ufffd\ufffdF\ufffd\ufffdm\u0001fI\ufffd\ufffd\ufffd\u0011\ufffd,\ufffd\ufffdPD\ufffd\ufffd\ufffdEl\u0011\ufffdm\u0000\ufffdt\ufffd\u0014\ufffd\ufffd[-\ufffd\ufffdAjb\u000b\ufffd\ufffd\ufffd\u0006D'\ufffd\u00170=[@\ufffd\ufffd\ufffdqs\ufffdiS\ufffd\ufffd\ufffdK\ufffd\u0006e4\ufffd\ufffd\ufffdj\ufffd\ufffd\ufffdI\r\ufffd\u0002\ufffd*\u0010\u043cF\u000b\u0014-%\ufffd\ufffdl\ufffd\u01fav,e\u0018]j\ufffd<\ufffdTz\ufffd\ufffdL\ufffd\ufffd\ufffdi\ufffd(\ufffd\ufffdB\ufffdO\u0002nPc\ufffdP\u0003&\ufffd\ufffd\ufffd\ufffd\u0010t+4B\ufffdL\ufffdaiNQ\ufffd-*\u000b\ufffd\ufffdE!'\ufffd\ufffd\ufffd|\ufffd\ufffd\ufffd]'X\ufffd1\u001b\ufffdM\ufffd\u0013\ufffd\ufffd\ufffdHr\ufffd\ufffdyD\ufffd\ufffd\ufffd\u0011\ufffd\ufffd?\ufffd\u001eH\ufffd\bH\ufffd)\ufffd\u001ewRz\ufffd\ufffd\ufffdRS\ufffd\u001c\ufffdi\ufffd,<\ufffd$t\ufffd\ufffd>15\ufffd\ufffdl\ufffd\ufffd|\u0012\ufffd\ufffd\ufffd\ufffd\ufffdS\u001e\ufffdD\ufffd)\ufffd\u0014\u0012\ufffd\ufffd]\ufffd;\u001e2\ufffdrNs\ufffd87\ufffd\ufffd\u0013\ufffd\f\ufffd\/\ufffd\ufffd\ufffd6\ufffd\u0004\u039a07\ufffd\ufffda6\u0018,\ufffd\ufffd\ufffd\ufffdXd\ufffd\ufffd$n\uc6d0\u000eG\u061f\ufffd\ufffd=\u001b\ufffd\u0000f\ufffd\ufffd\u0775\ufffd\ufffd\ufffd9V\ufffd\ufffd\ufffd\u001fN\u0007\ufffd\u0007zR\ufffd\u0000\ufffd4\ufffd\ufffdB\ufffd\ufffd\u0005z\ufffd\ufffd\ufffd\ufffd\ud7d4\ufffdz\ufffd\ufffd5\ufffdW.\ufffd%I\u0013\ufffd\b\u070f\ufffdB\ufffd\ufffd\ufffd\ufffd\u0014\ufffd\u0002<\ufffd\u0013\u0002 \u041f\u0004?\ufffd\ufffd\ufffd\u0017]!\ufffdqn.E\ufffd\ufffd\ufffd\ufffd\ufffdSd\ufffd\ufffd\nI\ufffd(\u0014@&<!\f\ufffd\ufffd\u0016\ufffd\u0011\ufffdF\ufffd3\ufffd\u0019\ufffd\\2S$\u0015\u001b@\ufffd\f\ufffdA\u0014\ufffd\ufffdL\ufffdn\ufffdp\u0000\ufffd2\ufffdW^\ufffdsstxeP\ufffd\ufffdX\ufffdKPw\ufffd&\ufffd?\ufffdN%)wBK\ufffd;\ufffdv\ufffd\ufffd9\u0003\ufffd\ufffd\ufffd%2vB\ufffd\ufffd\ufffd\u0019\n\u0012\ufffdY\ufffd\ufffd\u000f\u0015\ufffd`\ufffd\ufffdC\u001f\u0651\ufffd\u0000\u0003j\u0153\ufffd\ufffd\ufffd\ufffd\u04a8\ufffd\ufffd\ufffd\u04c5\u0019\ufffd\ufffd=|Ovn\ufffd\ufffd\ufffdz\ufffds\ufffd\u0013\u000b{6\ufffd\u001c\ufffd\ufffd\ufffd\ufffdts\ufffdSYN\u0012\f\ufffdo\ufffd\ufffd\ufffd=weD6;\ufffd\ufffdI'D\ufffd\ufffd\u0351`\u000f\u0018t\ufffd\ufffd(=\ufffd\u001en*\u0007\u0014\ufffdv\ufffd\ufffd\u0016\ufffd\u07f4\ufffd\u0006\ufffd\u0227W\u0017e\u000e\ufffd\u001fd\ufffd\ufffd\ufffd\u001c\ufffd+\u063d\u000e\ufffd\ufffd\ufffd\ub86a\u0006\ufffd\ufffd\u0016\ufffd\u0236P\ufffd\ufffd\u0005\ufffdM\ufffdL\ufffd\ufffd\u0014\ufffd\t\ufffd\u0001\ufffd\u0002>\u0011\ufffdRC2\ufffd\ufffd\ufffd\ufffd\"X\u001e?L)1\u000f\u0541CE*\f\ufffd\ufffdSy\ufffdB@\u001b\ufffd \ufffd\u0019J\u0017\ufffd\u001c\ufffd\ufffdy\n\t\ufffd\u0010\ufffdc\ufffd\u059cZ\ufffd\ufffd\ufffd\ufffd5{\u0016k\ufffd\ufffdgy87'\ufffd\ufffd$\ufffd\ufffdC\ufffd\r\ufffd}\ufffd\ufffd\ufffdL\ufffd\ufffd\ufffdS\ufffd\u000e\ufffd\ufffdo\u07c4xj\u0004\ufffd\ufffdQ\ufffd\ufffd\u0002\u0124\ufffd\ufffdt\ufffd\ufffd\ufffd\ufffdM \ufffdx\b\ufffdiB`\u001e\u0012\ufffd#$u\ufffd\ufffd\ufffd\u019ccy\ufffdu^dC\ufffd\ufffd;}\u0293\ufffdp\ufffd\t\ufffd%\ufffd6\ufffd\u0410r*\ufffd:\ufffd\u0003L\ufffd(\ufffd\ufffd\"N\ufffd\ufffdN\ufffd\b\ufffd*\ufffd\u0007z\ufffd\ufffd\u0002\ufffdK\ufffd\u0125\ufffdE\u0006\ufffdx[\u0414\ufffd\ufffd\ufffdZ\u0012\ufffd\ufffd\ufffdAv\ufffd\ufffd`\ufffd,\u000f\ufffd\ufffd)\ufffd`2\ufffdt\ufffd\ufffdR\ufffd_4\f\ufffd\u001e*Wp$\u0012P+2\ufffd\ufffd\ufffd;\ufffd\ufffd+\ufffd\u0001\ufffd\ufffdt\ufffd9\ufffdD \ufffdCR\ufffdKqS\ufffd\ufffdE.\ufffd\ufffdTB\ufffdC\ufffd\u0017\ufffd'\u0016\ufffd\ufffd&\ufffd\nL\u0003\u000fB\u0013O\ufffd\u0141\ufffd\u000b\ufffd^\u028a5\ufffd?\ufffd\ufffd\ufffd\u0000\ufffd\ufffd~Wfj\u0019\ufffdI\ufffd\ufffd\u001dp\ufffd0-\u0005\ufffd{$]\u00147\ufffd$!\ufffd\ufffd\ufffd\ufffdV.\ufffd_Bq\ufffd\r(6\u0010g\ufffd\u0018u\ufffd\ufffd\t\ufffd\ufffdvJR]\ufffd\u0765\ufffdp\b#\ufffd\ufffd\ufffd\u0003\ufffdx2\ufffdn\ufffd=\ufffdJ\ufffd\u001e\ufffd\ufffd\u0005\u001d \ufffdL\\.\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdOT\ufffd-V\ufffd\ufffd\ufffd\ufffds\u0013\ufffd\u0003C\ufffd5\ufffd\ufffd}C\ufffd\u0002\u07b7f}\ufffd$\u000bW\u0001\ufffdF\ufffdO1\ufffd\ufffd\ufffdve\ufffd\u02e0.}\ufffdCH\ufffd\ufffd\f\ufffdR\"m\ufffd\ufffd\u0002\ufffd\ufffd0\ufffdS\ufffdJj\ufffd9) \ufffdG\ufffd\ufffdI\u0004\ufffd<\u000e1\ufffdD+4\u0002\u001aF\ufffd\u0010\ufffdH4v\ufffd\u001d\u00034Y\ufffd&H4\ufffd'\ufffd\u0114s\n\ufffd[\ufffd\ufffdC\ufffd\u0010\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\u0005\u0006\u0004\ufffd\ufffd\u06d1\ufffd\ufffd\ufffd\ufffdQ\ufffdD\r?\ufffd%j\ufffd.J\ufffd\ufffd\u0002]A\ufffdJ\ufffd\u000b\ufffd\u001f\ufffd\ufffd;\u0001\ufffd>\ufffd\ufffdA\ufffdA\u0001\ufffd\ufffd\u0007g(\u000bS.g\ufffd\u0709\ufffd\u0005\u0420\ufffdA\ufffd\ufffdEEp\f\u0012(Xu(\u00c9\ufffd\ufffd\nh\ufffd\ufffd\ufffd,\ufffd\ufffd\ufffd{\ufffdst\u001d\ufffdM\ufffd\ufffd2\ufffd7\ufffd\u0011UK\u0003B\ufffd>Q\r#\ufffd\ufffd#@\ufffd\u001e\ufffd\u000f\ufffdg\ufffdi\u001c\ufffd5\ufffdKY \ufffdp\ufffd\u0248\ufffd\u0010\ufffd4=MW\ufffdq\ufffd\u000f\ufffd\ufffd\ufffdDEya\ufffd\ufffdr:Q$3g\ufffd\ufffd%s\ufffd\b\ufffd\ufffd\ufffd^\ufffd\u0001s\ufffd\ufffd\u0014\ufffdD\ufffd@\u0011&\ufffd\ufffd\b\ufffdJ\u001d\ufffd|\ufffd\ufffdV\ufffdY\u000eN@\ufffd\ufffd\ufffd\u00003\ufffd\ufffd\ufffdWC\ufffd\r(\ufffd`\ufffde\ufffd`T!i@\ufffd\ufffdJD\ufffdE\ufffdZ\ufffdFT\ufffd\u0080\ufffdym-\f\b_e\u0006@\ufffd\ufffd\ufffdJ{\ufffd\r`nV\ufffd\u008a\ufffd\/\ufffd\ufffd\ufffd\u0001\u0401\ufffd>\ufffd\u0016\ufffd\ufffd\ufffd\u04e6\ufffd\ufffda\ufffdN\ufffda\ufffdF\u0011K\ufffdJS)\ufffdZ\ufffd\u0007\ufffdr\ufffd,\u0014\ufffdk\ufffd\u0083\ufffdW\ufffd\fc\ufffd\ufffd\ufffdD\ufffdx\ufffd@U\u049d\ufffd$\ufffdv\ufffd\ufffd\ufffd1~\u0017\u0015\ufffd\ufffdOM\ufffd\u0017\ufffdH\ufffd2&\ufffd\u0010\u001b\ufffd\ufffd\ufffd\ufffd'\t\ufffd((N\ufffd'\ufffdz\ufffd<7\ufffd\ufffdz\ufffd\u0002^*\ufffd\u049b\ufffd\ufffd8\ufffd&\u0000\ufffd\ufffd\ufffd\/\ufffd\ufffd\ufffd\ufffdP\u0003\ufffd\u0293\ufffd\ufffdE\ufffd6\u001b\u0448,\ufffd\u0006\ufffd\rh\ufffd\ufffd\u000e\ufffd\ufffdo\ufffdaf]\ufffd7\ufffd\u0685{\ufffd\u0010ZG~\ufffd\u0006\ufffd\u0000\u001aPL@}\/$\u0003Z#k^\ufffd\ufffdtA\ufffdaa\ufffdy\u0011\ufffd\u0006\ufffdY\ufffd$\ufffd%O.\u0218\u000f\u0017\ufffd\ufffd-C\ufffd\u0016>\ufffdi\nwnpy\ufffd\u0014h\u0019\ufffd\ufffd\ufffd\t\ufffdjf\ufffd\ufffd\ufffdp\u0003i\ufffd{\u001a=\ufffd1!#\ufffd\u02d0\u001cn&\ufffd\u00105\ufffd \ufffdr@K%\ufffd\ufffdB\/\u0004\u0011\ufffd\ufffd\ufffd\u0004\ufffd\u010c\u0012#\ufffd\ufffdl\ufffd<$D1\ufffd\ufffd\ufffd2\ufffd\ufffd\ufffdjX\ufffd\ufffd_\ufffd\ufffdiNi\u06f5\u000f\ufffd\ufffd\ufffdt?\ufffdO\ufffdh\u07c5\ufffd\ufffd)\u001fA\ufffd\u00107GQ\u0003\ufffd\t\u0016\ufffd\ufffd\u0010P(\f(\u001c\nE\rNg\ufffdA\ufffd\ufffd\u000e\u0010<Q\u0014ccL\ufffdD[\ufffdPu\ufffdb\ufffd\ufffd\ufffd\ufffd$VS\ufffd\u0014\ufffdEN\ufffd\ufffd\u0011\ufffd#~:\u0002q\ufffd@\ufffd\r\ufffd\ufffd?wS\ufffdiS<\ufffd\ufffd\ufffdLqS\f\nuQ\ufffd\ufffd\ufffd\ufffd4\ufffd\ufffd\u0186r>``\ufffd|cSS\ufffd\ufffd\ufffd\u062cP0\u0010\ufffd\ufffda\ufffd\u001b\ufffd\ufffdo\ufffd\ufffdiV\u062b\ufffd\u001c\ufffd\u001ecg;\u0017-s\ufffd\ufffd\ufffd\/v\ufffd\ufffd\ufffd{\ufffde\ufffd0WnS\ufffd\ufffd\ufffd\u03ddW\ufffd\u0739\u0016\ufffd\ufffdv{\ufffd\ufffd\ufffd\ufffd\u0015\ufffd\ufffd\ufffd\ufffdakY\ufffd\ufffd\u000b\ufffd\u0692XOUy{[O\ufffd?\\Q\ufffdU\\\ufffd\ufffd\ufffd\ufffdwd_\ufffdx\ufffd\ufffd\ufffd\ufffd=\u000e\ufffd\u0006\ufffdG\u0016\ufffd#\ufffdLN#\u000f\ufffd\ufffd\ufffd@\u0001u\ufffdM\u000b\ufffdR\ufffd\u000ei\ufffd\f\ufffd\u0012\ufffd\ufffd\ufffdjF\ufffd0\ufffdE\u0001W\ufffd\u0004\u000e\b.V\ufffd\u000b\ufffda\u0012>$\ufffdv\ufffd\ufffdXRcC\u038e\u0010$\ufffd\ufffd\ufffd\t\ufffdb\ufffd\u0019gG,\ufffd#\ufffd3\ufffdmGl\ufffd)\ufffd\ufffdy\u0004\u07df;R\u00067;\ufffdBa\ufffd\ufffd\u001dJs\ufffdB\ufffd\u0007\ufffd\u0001J\u0012\ufffd\ufffd\ufffd&\ufffdj)\ufffd2\ufffd\ufffd\ufffd755\u00d7t\ufffd\t\u000f\u00184\ufffd\ufffd\ufffd\ufffd\ufffd\u001d\ufffd\ufffd\ufffd\u066bv\ufffd3\ufffd|#\u06fe\u076bVt\rT\ufffd\\\ufffd|\u0019\u0017\ufffd.\ufffd\u001en\ufffd4\ufffd\ufffd\ufffd.\ufffd|&\ufffdi\ufffd\n\ufffd\ufffd>\ufffd\ufffd\ufffd\ufffdG\u000ff\ufffd\ufffdU%\ufffd\ufffd\ufffd\u0004\ufffdj\ufffd\ufffdc\ufffd}\ufffdVOm\ufffd\ufffd\ufffdu\ufffdd(n\u0003\u0010w\ufffd\u0001\u0011\ufffd\u0007\ufffd0\ufffdS\u012d\ufffd:#TU\ufffd\u0018\ufffdA\u000f\\\ufffd\ufffd\ufffd0:,A\ufffd\f\ufffd\ufffdI\ufffd\ufffd\ufffd\"\ufffd\u0007\u0004\ufffdZ\u07cb\u0002n\tQ\ufffd\u001d\ufffd\u0019\nbG\u0011\ufffd\ufffd\"\ufffd\ufffd%\u0005\u0016`t\ufffdX\n\ufffd\u024c\ufffd\u0000)\u0000i\ufffd|F\ufffd4++\ufffd\ufffd_Ess\ufffd8(3\ufffd\u001d\ufffd\ufffd\ufffd\ufffd\u0002\u06b1\ufffdv\ufffd\"\ufffd\ufffd\ufffd1\ufffd%U\ufffdb]\ufffd\ufffd\ufffdD}\ufffd\ufffd\ufffdm\ufffdZ\ufffdo\ufffdg\ufffd\ufffdQ#O\r6\\6\ufffd\u0011u\ufffdvF7\\\ufffd\ufffd\ufffdde7\ufffd.\/\ufffd\u000e0\r\ufffd\ufffdI\ufffd\u0017v>zh\ufffd?\ufffd\u05f4\ufffd5\u001d\ufffd\ufffd=\ufffd\u0003W\ufffd}\ufffdsj\ufffd\ufffd\ufffd\ufffdw\ufffdt\ufffd[\ufffd\u000f\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffd\"\ufffd\ufffd&S\ufffd\n\u001d\ufffd\ufffdR\ufffd\u001d\u0002r`\u001dqp\ufffd=^\u0019\ufffd\u001d\u0010\ufffd\ufffdI\b\u0004{M\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u028c\ufffdX`\ufffd\ufffd\ufffdV\ufffd\ufffd\ufffd\u000f\tV{\ufffd#\ufffd\ufffd\ufffd\u0011\u070a\ufffd\ufffd\ufffd\ufffd\u0002\ufffd\ufffd\ufffddO\u0003\ufffd@t\ufffd\ufffdEb\ufffd3&*\ufffd\u001e\ufffd\ufffds\u001c>\ufffdk\u0019>\ufffd\u0000\ufffd\ufffd1\ufffd\ufffd\u034e\"\ufffd\ufffd%|\u001dJ\ufffdM\ufffd\u0016\tM>\ufffd\ufffd\u0018l\ufffd\ufffd\u03aeh\ufffd\ufffd\ufffd\ufffd\ufffd=8\ufffd\ufffd\u05ee\u001b\ufffd\ufffd\ufffd\ufffdyue2\ufffdp\ufffd\ufffd\ufffd\ufffdW4\ufffd\ufffdV\ufffdMe\u001f\ufffd\ufffd+1z!k\u05bd]\ufffdYY\/\ufffd^\u0019\\\u001d?S\ufffdkYk\ufffd\f\ufffdn\u0010\ufffdh\ufffd\ufffd\ufffdV7#\ufffd\ufffd\ufffd#\u001e\rV)\ufffd%U\ufffd\ufffd\ufffd_M\ufffd\u000f\b~\ufffdfmp6\ufffd\ufffdC\ufffd\ufffdn6\u001dK\ufffd\ufffd\ufffd\ufffd\u0016YO\u0002\ufffd\u0010S)\ufffd?\uba19\u0002\u03d5S\ufffd\u00df.\ufffd\u000e\ufffdiR\ufffdI\ufffd\ufffdW5\ufffd>n\u035f\ufffd\u0014\ufffdn\ufffd\ufffd\ufffdk\ufffd=\ufffd\ufffd\ufffd\u001f\ufffd\ufffd\ufffd<iP\ufffd\ufffd\ufffd\ufffd\ufffd2\ufffd*\u037f\ufffd+|\ufffd\ufffd\u04fb\ufffd\/\ufffdn\ufffd\ufffdj\ufffd\u000fE\ufffd\u06fd\b\ufffdM\ufffdeea\ufffd\u001d\ufffd\ufffdZBJ\u000e\nFk\ufffd\ufffd)!`9d\ufffd\nRq@0\ufffdH\ufffd\ufffd\ufffd\ufffd\ufffd\u07b3^FK\ufffd2\ufffd\ufffd\ufffd\u000e\t\ufffdK\ufffdr\ufffd'Mf\u0014w\u001682\u0014\ufffd\ufffd\bIi\ufffd\u0001\ufffd\u0011\u0003\ufffd\ufffd\ufffd\u0012\ufffdd\ufffd\u0006`\ufffdZ\ufffdZ#I\ufffde~\ufffd[)\ufffd\u0006\ufffd\ufffd\ufffd+\u0014\ufffdv\u017e}\u00eb\ufffd\ufffd\/\u001bx\ufffdn\u07b5+\ufffd|\ufffd{\ufffd\ufffd\rc\u0007\ufffd\ufffd\ufffdc\ufffd'\ufffd*\ufffd\ud919\udfbd\ufffd_\u0019\ufffd\ufffd2\ufffd\ufffd\ufffd\ufffd\ufffd\u000f^\ufffdr\ufffd\ufffd\ufffd\u325e\ufffd+\u0006\u05dc\ufffd\u0016ms\ufffd\ufffd-5\ufffd\u0018\ufffd\ufffd\ufffd\ufffd;\ufffd7\ufffd\u000f\ufffd\ufffd}\ufffd\ufffd\ufffd\ufffd\ufffd<\ufffd\ufffdx\f`l+\ufffd\ufffd\ufffdF\ufffd\u001d\ufffd\u02c8\ufffd\bLi\ufffd\ufffdu\ufffd\ufffd?]\ufffd\ufffd\u04f7\ufffdqy{\ufffd\ufffdZ\ufffd\ufffd\ufffd\u0004\u0017G80DX\ufffd&\ufffd\u00c2\u033b(\ufffdT}R\ufffd~\u0015\ufffd\ufffd;\u03bf$AIM\u000fU\ufffd&\u001c\ufffd\ufffdb\ufffd\ufffd!\u0001\ufffd\ufffd\ufffdq\ufffd\ufffd\ufffdBY\ufffd\f\ufffd\ufffde\ufffd\ufffd`\ufffd\ufffd\u0000\ufffd\ufffd\u001dJ\ufffd\u001c\ufffd\ufffdB\ufffdT\u0194|>p\ufffd\ufffd]a\ufffd\ufffdm\ufffd\ufffd\u001c\ufffdKWW\ufffdZ\u001a\ufffd\ufffd\ufffd\ufffd\u0015iCM8>\u0018w\ufffd\u07b5\ufffd\ufffd\ufffd\u0233\u00da\ufffd\ufffd\u06f1k\ufffd\ufffd\ufffd\u4992\ufffd\u03bf\ufffd\u0016{<^\ufffd~\ufffd4\ufffd\ufffd\ufffd,\ufffd\u0003H\ufffd\r\\\u0019\ufffd\ufffd\ufffdw\ufffdX.\/)\ufffdy\ufffd\u03b6\ufffdW\ufffd\bF;i\ufffd\u0346\ufffd\u0002X\ufffdrN\ufffd\ufffd\ufffd\ufffd\ufffd\u0011\u0017\ufffd\ufffd\u057e\u0012\ufffd\u001bw\ufffdI\ufffd`\u01e3l\ufffdD\ufffd\u001d\ufffdV\u0012\ufffd\u0001\ufffd\ufffd\u0012$?a\u02e9\ufffd\u0004\ufffd\ufffdW\ufffdE\ufffd\ufffd\ufffd`\ufffd\u0001b\ufffdB\ufffd\"\ufffdQ\ufffd%\ufffd\u0004x\/1\ufffd\u000e\ufffd\u0012(\ufffd\n\ufffd\ufffd#\ufffd\u001a\u001b\ufffdy\ufffd\u0017]+\ufffd\fl\ufffd\ufffd\ufffd[\ufffd\ufffd\ufffd1\ufffd*3\ufffd\u001e\ufffdn\u06f5lj\ufffd\ufffd\u001d\ufffd\ufffdc\u0094V\ufffdx\u0003\ufffd\ufffd\ufffd\u001f\ufffd\ufffd\u07d9\ufffd\u01dbc\ufffd;\ufffd\ufffdE\u5478\ufffdQS]\u049f\ufffd\ufffd\ufffdO\ufffd\u065b\ufffd\ufffd\ufffd\ufffdo<\ufffd\ufffd\ufffdW\ufffd\ufffd\ufffdC\ufffd\u001d3\ufffd\ufffdlNu\ufffd\ufffd\ufffdY\ufffdXl\ufffd\ufffd\ufffd\ufffdk\ufffdM,\ufffd\b\ufffd\u001b\ufffd\ufffd\ufffdL\u0014\ufffdg\u0002\ufffd\ufffd\ufffd\ufffd\u0013\ufffd:\ufffdG\ufffd\ufffd\ufffd\u0013DdD\u03cc\u000b\ufffd\t6\ufffd7\tc$W\u0010FM\ufffd\ufffd\ufffdn;\ufffd\ufffd\u001bu\ufffdcI\u0762V\u0006%\u033eKU\ufffd5`\ufffd$G\u0000\ufffd\ufffd24\ufffd\u001d\ufffd3G\ufffd`%\ufffd\\0\ufffd\u051b\ufffdH\ufffd_\ufffd\ufffdL\ufffdv\ufffd\ufffdG\ufffd\ufffdVG\ufffd\ufffd\u001f\u001e\ufffdkL\ufffdu\ufffd\ufffdl\ufffd'_x\ufffd\ufffdgb\u0011\ufffd\u00170\ufffd\ufffdG\ufffd\ufffd\u001c%\u001c\ufffd4\ufffd\ufffd\ufffd\u000e\ufffd\ufffd\ufffd\ufffd\ufffd\u001a\ufffd\ufffd?\u0016\ufffd\ufffdt\ufffd\ufffdN''gMD\ufffd\ufffd\ufffd|\ufffd4TZ\ufffd\u000f\u0011\ufffd\ufffd\ufffd\u0004!\u001f\ufffd-\u0017\ufffd\u0781\ufffd\ufffdG\ufffd\u0006\ufffd\ufffdXR\ufffd7\ufffdpU\ufffdd\u0015r\u060f%-\u000e\u001b'\ufffdC1j\ufffdh\ufffd\u001c\ufffd|\t\ufffd\ufffd\u001b\ufffd\ufffdt\ufffdk\ufffd,:E\ufffdO\ufffd\ufffdu\ufffdD\ufffde\ufffd\ufffd%\ufffd%\ufffd\ufffd\u001d\u0014eE\ufffd\ufffd\u0001\ufffdf\ufffd1\ufffd\u0019\u0001\ufffd\ufffd\u0013\u001e\u04ca\ufffd\u0015\ufffd\u0395\ufffd\u000e\ufffd\u001a\ufffd\ufffdI-NZ\ufffdl8\ufffdZ\ufffd\u001c\ufffd\ufffd?\ufffd\ufffd`u\ufffd\ufffd\ufffdz\u0002c\ufffdZ&\ufffdNL\ufffd3\ufffd\\\ufffd\u001a\ufffd\ufffd)\ufffd\ufffd\ufffd{_\ufffd\ufffd\u019a\u0764\u000e?X\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\ufffdk\u028d\ufffd\ufffdT@\ufffdi\u0000tmhE\u0011]\u000b\ufffd\ufffdL\ufffd\u0018\u06ec\u01d26t\ufffd\u0007N\ufffd\ufffdx\u0004`0\ufffd\ufffd\u0016\ufffd\ufffd\ufffd\u0465\ufffd_\ufffd\u0002\ufffd\u0001\ufffd\ufffd5N:zU\ufffd\ufffd\ufffd\u0468d\ufffd\ufffd\ufffd\u000f~<\u0011\ufffd3I\u0007\/\ufffd%\u001c\ufffd\ufffd?n\ufffd\u0006\ufffdA\ufffd\ufffd&\ufffdl]\ufffd\ufffd\ufffd\ufffd:8\ufffd\ufffd\ufffd_N\u0002\ufffd\ufffdZ\ufffd\u0004\ufffd\ufffd\ufffd&\"\ufffd\ufffdHC+\ufffd\ufffdD\u001b\ufffd(\ufffd\u0004\ufffd\ufffdT\u001d\u0012\u0004v\ufffd\ufffdx\ufffd\ufffdX2n\ufffd\u0006,\u00163\ufffd\ufffd\ufffd\ufffd\u0005\ufffd\u0003\u001ba\u07d5\ufffda\ufffd\ufffdqG\ufffd\ufffdi_8\ufffdGL\ufffd\ufffd3\r\ufffd\u0001\u001c\ufffdE\ufffdWI\ufffd\r\ufffd \u0012R\ufffdF\ufffd\ufffd|\\R\ufffd\ufffd\ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\u01ee\u0018\ufffd\ufffd\ufffd$\ufffd\ufffd\ufffdm\u0006[}SEnK\ufffdu\ufffd\u001d\ufffd\u001f\tM\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd'\u000e\ufffdM\ufffd\ufffd:\ufffd;-]\ufffd\ufffdg6d'\ufffd\ufffd\fJ\ufffd\ufffd\ufffd_9-\ufffd\ufffd?\ufffd[-A\ufffd\ufffd5_S\ufffd\ufffd&\ufffdq\ufffd\ufffd|?>\ufffd!\ufffd\ufffd\ufffdu\ufffdY\ufffd_\ufffd<\ufffdX\ufffd\ufffd\u001aI\ufffd:^\ufffd\ufffdY\ufffd\ufffd\u001b\ufffd\f\u020bp\u0006ato\ufffd\fj+\ufffd\u0001\ufffdq\ufffd\u0463\ufffd\u001b\ufffd\u0006\ufffd\ufffdM\ufffd8\f\u0016\u0015\ufffd\ufffd\u01ddN\u01f1\ufffd\u04e8\ufffdJUDuH(e\u000b\ufffd\ufffdb\ufffdcE\ufffdy!\ufffdpP\ufffd\ufffd\ufffd\ufffd\u000e\u0002\ufffd\"\ufffd?\ufffd\ufffdY\u0015\ufffd\ufffd\ufffd\ufffd\u03bf\ufffd[\ufffdk\ufffd\ufffdm\ufffd\u0003\u060aP\ufffdk\ufffd[\ufffd\ufffd\ufffd\u0704^%\ufffd\ufffd\ufffd\ufffd]\u001fY\ufffd\ufffdy\ufffd\ufffd\u0015\ufffd\u0002rN67{\ufffdt\ufffdZ\ufffd\"\ufffd\ufffd\ufffd\ufffd@L\ufffdm\ufffd\u018a\u0002(SD\ufffde\ufffd\ufffdz\ufffdl3\u0002\ufffdf\ufffd<  \ufffd\ufffd\ufffd\ufffd\u001e\u0010\ufffdE \np\\p\ufffd`\ufffdP\ufffdGZf\ufffd4\fmnj\ufffd\ufffd(\ufffd\ufffd\ufffd\u0012a\u024f2\u0017\ufffd(\u0006?\ufffd\ufffdcF\u000b_s\ufffd\ufffdN\ufffd\ufffdJ\ufffd\ufffdl\ufffd\ufffd\ufffd\ufffd\ufffdc\u001b\u000f\ufffdG2S\u000ffLO~#14=4\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]\ufffd\u02ef\ufffd\u0016q\u06cd[\ufffd=\ufffd\u0016\f\ufffd\ufffdG\ufffda\ufffd\u000e\ufffd#\ufffdZ\ufffd\ufffd\ufffd\u0016\ufffd\ufffd\u0010\ufffd.S[\ufffd\ufffd\u0002pE\ufffd4\u0016\u0002?\u0582\ufffd\ufffd\tpU\u001c\b\ufffd\u0001\ufffd\ufffd7[c\ufffd\u0018\ufffd\u001d\u0012\u001c\ufffd\ufffd\ufffd\ufffd\u001eK\ufffd\ufffd\ufffd\ufffd\u000b\ufffd\ufffd\u0014\ufffdS\ufffd\ufffd\ufffd\ufffds\ufffd(\ufffd\f~\ufffdq3\u0010\ufffd,\t\u0016\ufffdR\ufffd\u001e\ufffdR\ufffdYa\ufffd\u001a\\\u001ck\ufffdD#\u0007iR\ufffd\ufffd\ufffd\ufffd\ufffd\n\r\u5113\ufffd\u0018o\ufffdWh\ufffd\ufffd\u00f1\ufffd\u0006\ufffd\ufffd\\\ufffdBl\ufffd\ufffd.\ufffd|\ufffd\ufffd\ufffd\ufffd\ufffd#\ufffd\ufffd\ufffd\ufffd\ufffdac1\ufffd\\\ufffd\ufffd\u001b[<\ufffd\ufffdW\ufffd\ufffdz\u03e1\ufffd\ufffd\u0369\ufffd\ufffdg\ufffd\ufffds\u001b`\ufffdEO-r\ufffd\u6a20V\ufffdTV3c\ufffd\ufffd\ufffd Vt\ufffd\ufffd\u0012\ufffd\ufffd\ufffd\ufffd\/\u0004\ufffd\ufffd\u044b\u052c\ufffd\ufffd\u0012\ufffdb\ufffd\u0002\"MA\ufffdz=\u01d2^\ufffdU\ufffdXT\u0003\ufffdOK^\ufffdi0\ufffd!S,\u01be+\ufffd\ufffdE'4&\ufffd\ufffd\ufffd|\ufffdAA\ufffd+\ufffdx\ufffd\ufffdh\ufffd\ufffd\u0011\ufffdU\u0005|\ufffd\u0012=\ufffd+\ufffd\ufffd\ufffd\ufffd\ufffdnV\u0005\ufffd*6mi4\ufffdX\ufffd\u0315Q-y\ufffd\ufffdd3\ufffdi\ufffdjh\u001a\ufffd\ufffd\ufffd^*H\ufffd\ufffdI\ufffd\ufffdFYX\ufffd\ufffd\ufffd,i\ufffd\u001f\u0016\u0011\ufffdt\u001c\u0005\ufffd\ufffd\u0016DG\ufffdp'f\ufffd\ufffd\ufffd\ufffdVyg\u042f\u0542-\u000fg\ufffd\ufffd\ufffd{\ufffd2\u001d\tW\ufffd^'\ufffdP\ufffd\u001a\ufffd\ufffdv\ufffdL\ufffdf\ufffd\ufffd\ufffd\u000f\b\ufffd\u000bA\ufffdK\u0000\u0262\ufffdN\ufffd\u0001g\ufffdD\/\ufffd\ufffd\u001d\u0459z)\u0016\ufffd\"r\u0010\ufffd\ufffd\ufffd8A\u0006\u0017\u001cq\ufffd\u0007a\/V)\u001a\ufffdh\ufffd\ufffdi\ufffd#\u0001F#\ufffd\ufffd\ufffd\ufffd\u072f\u001dZ\u001bY\u0019\u0006\u001f%\ufffdj\ufffdC\u001b\ufffd\u000f\ufffdFV)G\ufffde&|Bk\u01ea\ufffd\ufffd\u0263\ufffd\ufffd2\ufffd\ufffd~\ufffd\ufffd\t\ufffdu\ufffd:o\u001a\ufffd|Fp[\ufffd\u0018\u001b\ufffd\ufffd\ud561\ufffd\ufffd\ufffdkn\u0012B\ufffd\ufffd(\u0018\ufffd\u0006x\u001adO#\u07d2\ufffdl\ufffd{l\u001e\ufffd\u0003\u000f\ufffd@\ufffdbQ\ufffd\ufffdv\ufffd\ufffdU\ufffd\ufffd&;Q\u0019M\u0010\ufffd\ufffd\u0302\u001a\\@\ufffd\ufffd\ufffd\ufffd\u000f_\ufffd^t \ufffdG\ufffd\ufffdx\u000e\t\ufffd\u0002\ufffd?*\ufffd\ufffd\u0010\ufffdHw\u001a\ufffd'\ufffd'\ufffd\u0010\ufffd\u0000\ufffdh\ufffd5uQ\ufffd\ufffd?\ufffd\ufffdL\ufffdx\ufffdQ\ufffdobJ?\ufffd@\ufffd\u0011#\ufffd\ufffd#\ufffdL\ufffdo9\ufffdmME*}s\u0378\u035e![\ufffd\u0018\ufffd\ufffdL\ufffd\u0018\ufffd\u073a\ufffdc\u0015\u0003QP\ufffdm\ufffd\ufffd\u001fN\ufffdoyd\ufffd\ufffdcy\/\ufffd3\u000b\ufffd\u0007\ufffd\ufffdR\ufffd\ufffd+r[\ufffdK\ufffd4\u0018\ufffd\u0016\ufffdt\ufffd\ufffd\ufffd\ufffdp\ufffd?\ufffd\ufffd\u01d2\ufffd\ufffdv\ufffdT%v\ufffd\u001e:\u0016}c\ufffd\ufffdb\ufffd\ufffd\ufffd1\ufffd$\f\ufffdK\ufffdO=c\ufffd\ufffd+c\ufffdM\u0014vAC\ufffd\ufffd\ufffd_065\u0017\ufffdX\ufffd\u0003\ufffdu\ufffd\ufffdV\ufffd\u0010\ufffd\ufffd.\ufffdr\u0005\u001b\u0011\ufffd\ufffd\ufffd\u0005}\ufffd[c\ufffd\t\ufffdfD\ufffd\ufffd\ufffd\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdw\u07f6\u000e?u~\ufffd'\ufffd\ufffd\ufffdep\ufffdH\u0353o(\ufffd\ufffd\ufffd\r\ufffd2\ufffdO\ufffd\ufffd\u0017\ufffd\ufffd<\ufffd\u0749&\ufffd{\/\u0005\ufffd\u026dQ\ufffd&V\r\ufffd\ufffd\ufffda0\ufffdo\ufffd\ufffdZ\ufffd\ufffdh4\ufffdU\ufffd\ufffda\u00ce\u0018\ufffdf\ufffd\ufffd#\ufffd\u0016\ufffd\ufffd\ufffd\ufffdg\ufffd\ufffd W\ufffd\u0e02#ki\ufffd\u6a62\ufffd<\ufffd\tVt\ufffd\u0672w\ufffd\ufffd\rj[e\b\ufffd\u0295\ufffd?Z\u0019\u0550g\ufffd3\ufffd\ufffd\ufffd\ufffdG^\ufffd\ufffd\ufffdM_G\t\ufffd;\ufffd\ufffd\u0019\ufffd\ufffd\ufffd\u0004\b\ufffd\ufffd\u0016^\ufffd\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffd\u0175\ufffd\ufffdT\ufffd\ufffd=p\ufffdZ]U\ufffd;*\ufffd\ufffdx\u0015Jo\ufffd\f\ufffd\ufffd&{\/\ufffd7\ufffd\u0019\ufffd\u0322\ufffd\ufffd\ufffd\ufffdr\u0671\ufffd\u0788\ufffd2\ufffd\ufffdXRZ\u0012)\ufffd\ufffd\ufffdJ\ufffd\ufffdD\ufffd#%.\ufffd\ufffd'F?.'~\ufffd%E\ufffd\ufffd\u0016]\ufffd\ufffd\ufffd\ufffd)\fT\ufffdJ\ufffd\u000eZ\ufffd-]\ufffd\u0001\ufffd\u0010\u0000\ufffd\ufffd%\ufffd\ufffdX\n\u0000\"\t?\ufffd\b\u0018\ufffd\u0010~\u0006\u0000NI\ufffd@\ufffdRc\ufffd\ufffd\ufffdX\ufffda\ufffd\u00123\ufffd\u01a3\ufffdq\ufffd\ufffd\ufffd\ufffd\ufffd\u001b\u001a<Igh\u0015\ufffd\ufffdp\ufffd\ufffd\ufffd\ufffd8\ufffd\ufffd\ufffd\ufffdR\n.~\ufffd\ufffd\u0014\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdW\ufffd\ufffd.\ufffd\ufffd;\ufffdJ\ufffd\ufffdk\u001b\u0004Xx\ufffd\ufffd\u0005#\ufffdia\u0006bJ\ufffd\ufffd\u0010Ca\u0014\ufffd\ufffd\ufffd\ufffd:e\ufffd\ufffdv\/\ufffd\ufffd{;wR\ufffd\ufffdp\ufffd|\ufffd|\u0012\ufffd\ufffd\ufffd\ufffd\ufffd\ufffds\ufffd\ufffdf\ufffd\u0017\ufffd\ufffd\ufffdh\ufffd\ufffd\ufffd.\ufffd\u02a3T\ufffdUpu\ufffduA\ufffd,8<\ufffdO\ufffd\u000e\u0010\u001f\ufffd\u000f\ufffdq\ufffdCL\ufffd\u0007wO\ufffd9,R\ufffd\ufffdh\u0006\/Z\ufffd\ufffdvYQf\ufffd\ufffd\u0003.\ufffdc\u0000\u000f\ufffd3W\ufffd6\u0019\u03f7\u001bG\ufffd7\u0007\u073a#j\ufffd\ufffd\ufffd\ufffd2]\ufffd?N\ufffd\ufffdf\ufffd\u001f\ufffd++L\ufffd\ufffdOfp\u0006ZZ\ufffd\u001fW\u05f3>W\ufffd}\u0010\ufffd\ufffd\u0013\ufffd\ufffd\ufffd\ufffdw\"\ufffd>\ufffd+\ufffd\u001e.\ufffd+\ufffd\u02bb\ufffd\u0016\ufffd\ufffdR\u0019\ufffd\u0013,\ufffd\ufffd\ufffd\ufffdJ\ufffdGv\ufffdo\ufffd\ufffdN\ufffd_\u0015|J\ufffdj\ufffd\u0006~%\"\u804b7J\ufffd\ufffdl\u0422\u0001\ufffd\u0463\ufffd\f\u0018!z\ufffdA\ufffd\ufffdK\ufffd\ufffd\ufffd2\ufffd\n\u0002\ufffd\ufffd\ufffdp\t$\ufffd\ufffd\ufffd(\u0014\t^\ufffd\u0014\ufffd\ufffd\ufffdtc\u0001\ufffd\ufffd\ufffdUn\ufffd\u00fca\u0179\ufffd\ufffde\ufffd9rgl4[yEzx\ufffd\ufffd\ufffd\ufffd5\ufffdg7\ufffd\ufffd\ufffd\u0005\ufffd\u05edz\ufffdw\ufffd#*\ufffd\ufffd\ufffd\"\ufffd\ufffd\ufffd\ufffd;\ufffdw7\ufffd\u0779312\ufffdq\ufffd\ufffd\ufffdP\ufffdT\u754dBf\ufffd\ufffd\ufffdf\ufffdo`\u0018~7\u0003\ufffd\u0002\u001f\u0005D\ufffdh\u035a\ufffd\ufffd\ufffd\ufffd\ufffd\u0736\ufffd\ufffdN\ufffdj\ufffdv\ufffdN\ufffd\ufffd\ufffd\u000b{\ufffd\u0019\u001d\nendstream\nendobj\n55 0 obj\n7573\nendobj\n56 0 obj\n(README)\nendobj\n57 0 obj\n(Mac OS X 10.8.2 Quartz PDFContext)\nendobj\n58 0 obj\n(Ivan Brugere)\nendobj\n59 0 obj\n()\nendobj\n60 0 obj\n(Word)\nendobj\n61 0 obj\n(D:20130106074747Z00'00')\nendobj\n62 0 obj\n()\nendobj\n63 0 obj\n[ () ]\nendobj\n1 0 obj\n<< \/Title 56 0 R \/Author 58 0 R \/Subject 59 0 R \/Producer 57 0 R \/Creator\n60 0 R \/CreationDate 61 0 R \/ModDate 61 0 R \/Keywords 62 0 R \/AAPL:Keywords\n63 0 R >>\nendobj\nxref\n0 64\n0000000000 65535 f \n0000122228 00000 n \n0000004913 00000 n \n0000069264 00000 n \n0000000022 00000 n \n0000004893 00000 n \n0000005017 00000 n \n0000007908 00000 n \n0000000000 00000 n \n0000104009 00000 n \n0000000000 00000 n \n0000085003 00000 n \n0000000000 00000 n \n0000113328 00000 n \n0000000000 00000 n \n0000074626 00000 n \n0000069411 00000 n \n0000005172 00000 n \n0000007887 00000 n \n0000012136 00000 n \n0000007944 00000 n \n0000012115 00000 n \n0000012243 00000 n \n0000012450 00000 n \n0000060470 00000 n \n0000063940 00000 n \n0000060492 00000 n \n0000063919 00000 n \n0000069028 00000 n \n0000063977 00000 n \n0000069007 00000 n \n0000069135 00000 n \n0000069361 00000 n \n0000069595 00000 n \n0000069867 00000 n \n0000074605 00000 n \n0000075474 00000 n \n0000074932 00000 n \n0000075454 00000 n \n0000075724 00000 n \n0000084982 00000 n \n0000086260 00000 n \n0000085463 00000 n \n0000086240 00000 n \n0000086498 00000 n \n0000103987 00000 n \n0000104789 00000 n \n0000104280 00000 n \n0000104769 00000 n \n0000105031 00000 n \n0000113307 00000 n \n0000114063 00000 n \n0000113590 00000 n \n0000114043 00000 n \n0000114309 00000 n \n0000121973 00000 n \n0000121994 00000 n \n0000122019 00000 n \n0000122071 00000 n \n0000122102 00000 n \n0000122121 00000 n \n0000122144 00000 n \n0000122186 00000 n \n0000122205 00000 n \ntrailer\n<< \/Size 64 \/Root 32 0 R \/Info 1 0 R \/ID [ <3d11dda6f4eacbeeef24cddc41ddc83b>\n<3d11dda6f4eacbeeef24cddc41ddc83b> ] >>\nstartxref\n122403\n%%EOF\n","133":"<!-- Version: 0.07 EN -->\n\n| <a href=\"\/\" >English<\/a> | <a href=\"\/es\/\">Espa\u00f1ol<\/a> | <a href=\"\/ar\/\">\u0627\u0644\u0639\u0631\u0628\u064a\u0629<\/a> | <a href=\"\/it\/\">Italiano<\/a>\n| <a href=\"\/nl\/\">Nederlands<\/a> | <a href=\"\/fi\/\">Suomi<\/a> | <a href=\"\/pt\/\">Portugu\u00eas<\/a> | <a href=\"\/de\/\">German<\/a> | <a href=\"\/pl\/\">Polski<\/a> |\n\n###### Guiding Principles\n- Starting simply and improving is better than not starting at all\n- It's more engaging to use tools before reading a detailed explanation\n- Always keep full control of your bitcoin (use non-custodial tools)\n- Stay focused and avoid scams (use bitcoin-only tools & services)\n\n-----\n\n## Step 0. See the big picture\n*Aim: Understand why bitcoin is for you in <10 mins*\n\n1. Watch <a href=\"https:\/\/bitcointv.com\/videos\/watch\/7ce7e850-3fc9-49e7-aa1b-16165f28f4e5\" target=\"_blank\">Bitcoin is for everyone<\/a> by Hello Bitcoin.\n\n-----\n\n## Step 1. Get a Wallet\n*Aim: Make and backup a bitcoin wallet*\n\n1. \tDownload <a href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.samourai.wallet\" target=\"_blank\">Samourai Wallet<\/a> for Android or <a href=\"https:\/\/itunes.apple.com\/app\/bluewallet-bitcoin-wallet\/id1376878040\/\" target=\"_blank\">Blue Wallet<\/a> for iOS.\n2.\tMake a new wallet and write down the words presented to you using pen and paper. These words act as a key to access your bitcoin.\n3.  Make another copy of these words (again, using pen and paper) and put them both somewhere hidden\/safe in your house.\n4.\tIn the wallet, click receive and copy the address shown on screen, this can be done by clicking on the QR code.\n\n-----\n\n## Step 2. Buy some bitcoin\n*Aim: Get a small amount of bitcoin*\n\n- Only buy a small amount of bitcoin to start (in a later step we will improve your backup redundancy).\n- These recommendations let you buy bitcoin quickly at the cost of reduced privacy, buying privately is detailed in a <a href=\"#step-12-buying-privately\" target=\"_blank\">later step.<\/a>\n- Once you have bought, find the 'Withdraw Bitcoin' button and paste your first bitcoin address from Step 1. \n- After requesting a withdrawal you must wait for the funds to appear in your wallet (Samourai or Blue Wallet) which should take < 24 hrs.\n\n| Currency  | Exchange Service |  \n| ---       | ---       |\n| GLOBAL    | <a href=\"https:\/\/azte.co\/\" target=\"_blank\">Azteco <\/a> |\n| GLOBAL    | <a href=\"https:\/\/hodlhodl.com\/\" target=\"_blank\">Hodl Hodl <\/a> |\n| AUD       | <a href=\"https:\/\/amber.app\/\" target=\"_blank\">Amber <\/a> |\n| AUD       | <a href=\"https:\/\/trade.bitaroo.com.au\/express\" target=\"_blank\">Bitaroo <\/a> |\n| AUD       | <a href=\"https:\/\/www.hardblock.com.au\/\" target=\"_blank\">HardBlock <\/a> |\n| CAD       | <a href=\"https:\/\/bullbitcoin.com\/fund-your-account\" target=\"_blank\">Bull Bitcoin<\/a> |\n| CHF       | <a href=\"https:\/\/www.sbb.ch\/en\/station-services\/at-the-station\/services-from-the-ticket-machine\/bitcoin.html\" target=\"_blank\">SBB<\/a> | \n| CHF       | <a href=\"https:\/\/relai.ch\/\" target=\"_blank\">Relai<\/a> | \n| EUR       | <a href=\"https:\/\/bitonic.nl\/\" target=\"_blank\">Bitonic<\/a> | \n| EUR       | <a href=\"https:\/\/relai.ch\/\" target=\"_blank\">Relai<\/a> | \n| EUR       | <a href=\"https:\/\/www.stackinsat.com\/\" target=\"_blank\">Stackinsat<\/a> | \n| GBP       | <a href=\"https:\/\/coinfloor.co.uk\/\" target=\"_blank\">Coinfloor<\/a> | \n| GBP       | <a href=\"https:\/\/xsats.com\/\" target=\"_blank\">Xsats<\/a> | \n| USD       | <a href=\"https:\/\/cash.app\/\" target=\"_blank\">Cashapp<\/a> |\n| USD       | <a href=\"https:\/\/beta.strike.me\/\" target=\"_blank\">Strike<\/a> |\n| USD       | <a href=\"https:\/\/www.swanbitcoin.com\/\" target=\"_blank\">Swan<\/a> |\n| VND       | <a href=\"https:\/\/vbtc.exchange\/\" target=\"_blank\">Vbtc<\/a> |\n\nCongrats you now officially hold some BTC. As long as you keep your wallet backup safe nobody can steal the funds from the wallet you have created. Without these words (known as your seed words or your private key) nobody can access your bitcoin wallet.\n\n-----\n\n## Step 3. Why use bitcoin?\n*Aim: Learn why bitcoin is useful*\n\n1. Watch <a href=\"https:\/\/www.hardmoneyfilm.com\/\" target=\"_blank\">Hard Money Film<\/a> (30m)\n1. Read '<a href=\"https:\/\/medium.com\/@wiz\/why-bitcoin-359ada12629e\" target=\"_blank\">Why Bitcoin<\/a>' by [Wiz](https:\/\/twitter.com\/wiz)\n2. Read '<a href=\"https:\/\/medium.com\/@vijayboyapati\/the-bullish-case-for-bitcoin-6ecc8bdecc1\" target=\"_blank\">The Bullish Case for Bitcoin<\/a>' by [Vijay Boyapati](https:\/\/twitter.com\/real_vijay)\n3. Watch '<a href=\"https:\/\/www.youtube-nocookie.com\/embed\/q0XxsabgJEI\" target=\"_blank\">Why Bitcoin Matters<\/a>' by [Aleks Svetski](https:\/\/twitter.com\/AleksSvetski) (1h)\n\n-----\n\n## Step 4. What is bitcoin?\n*Aim: Learn what bitcoin is*\n\n1. Read '<a href=\"https:\/\/bitcoin-only.com\/#bitcoin\" target=\"_blank\">What Is Bitcoin<\/a>' by [Greg Walker](https:\/\/twitter.com\/in3rsha)\n2. Watch '<a href=\"https:\/\/www.rt.com\/shows\/to-the-moon\/457141-bitcoin-digital-currencies-revolution\/video\/5cbc2abbdda4c844198b4657\/\" target=\"_blank\">Bitcoin - The Genesis<\/a>' by [RT](https:\/\/twitter.com\/RT_com) (30 mins)\n3. Watch '<a href=\"https:\/\/www.youtube-nocookie.com\/embed\/DRPeExoH5rY\" target=\"_blank\">Understanding Bitcoin<\/a>' by [BJ Dweck](https:\/\/twitter.com\/bjdweck) (1h 30m)\n\n-----\n\n## Step 5. Further Learning\n*Aim: Further develop your understanding of bitcoin*\n\n###### Listen\n1. <a href=\"https:\/\/youtu.be\/Zbm772vF-5M?t=308\" target=\"_blank\">The Bitcoin Standard<\/a> (1h 40m)\n2. <a href=\"https:\/\/www.youtube-nocookie.com\/embed\/OrMHQhDKhrU\" target=\"_blank\">Intro to Bitcoin Austrian thought<\/a> (1h)\n\n###### Read\n1. <a href=\"https:\/\/www.amazon.com\/dp\/1641990503\" target=\"_blank\">The Little Bitcoin Book<\/a>\n2. What Has Government Done to Our Money? (<a href=\"https:\/\/cdn.mises.org\/What%20Has%20Government%20Done%20to%20Our%20Money_3.pdf\" target=\"_blank\">PDF<\/a> \/ <a href=\"https:\/\/mises.org\/library\/what-has-government-done-our-money-0\" target=\"_blank\">Audiobook<\/a>)\n3. <a href=\"https:\/\/www.amazon.com\/Bitcoin-Sovereignty-mathematics-Knut-Svanholm\/dp\/1090109911\" target=\"_blank\">Sovereignty through mathematics<\/a>\n4. <a href=\"https:\/\/www.amazon.com\/Bitcoin-Standard-Decentralized-Alternative-Central\/dp\/1119473861\" target=\"_blank\">The Bitcoin Standard<\/a> (<a href=\"https:\/\/www.podbean.com\/eu\/pb-48576-a563c0\" target=\"_blank\">Listen<\/a> to the prologue)\n- See more at <a href=\"https:\/\/bitcoin-only.com\/#learning\" target=\"_blank\">bitcoin-only.com<\/a> & <a href=\"https:\/\/bitcoin-resources.com\/\" target=\"_blank\">bitcoin-resources.com<\/a>\n\n-----\n\n## Step 6. Better Backup\n*Aim: Improve your backup so you are ready in-case bitcoin goes up in price or you decide to buy more.*\n\n1. Check the derivation path used by your wallet on [walletsrecovery.org](https:\/\/walletsrecovery.org\/) and add this to your backups\n2. Make an extra backup by <a href=\"https:\/\/www.econoalchemist.com\/post\/backup\" target=\"_blank\">stamping it into metal <\/a> \n3. Read the full bitcoin-intro <a href=\"https:\/\/bitcoin-intro.com\/en\/backup\" target=\"_blank\">backup guide <\/a>\n\n-----\n\n## Step 7. Running a Node\n*Aim: Understand how and why bitcoiners run their own full nodes.*\n\nNote: Running a node only benefits you if you use your node to send and receive transactions.\n\n1. Watch <a href=\"https:\/\/www.youtube-nocookie.com\/embed\/D11R0W2uxeM\" target=\"_blank\">Benefits of a Full Node<\/a> (5m)\n2. If you only need a desktop wallet, simply install bitcoin core on a regular computer.\n3. If you use a mobile phone wallet (Samourai \/ Blue Wallet) you should make or buy an always-on node box.\n- See more at <a href=\"http:\/\/node.guide\/\" target=\"_blank\">node.guide<\/a>.\n\n##### Bitcoin-Core on a regular computer (Desktop Wallet Only)\n- Download <a href=\"https:\/\/bitcoincore.org\/en\/download\/\" target=\"_blank\">Bitcoin Core<\/a>.\n- Verify the download (see the section labelled 'Verify your download' at the above link) and install.\n- [Optional] Download, verify and install <a href=\"https:\/\/github.com\/cryptoadvance\/specter-desktop\/releases\" target=\"_blank\">Specter Desktop<\/a> for a better user interface with easy hardware wallet integration.\n\n##### Build a node box \n- Samourai Users: Ronin Dojo - <a href=\"https:\/\/wiki.ronindojo.io\/en\/hardware\" target=\"_blank\">hardware<\/a> & <a href=\"https:\/\/wiki.ronindojo.io\/gui-setup\/start\" target=\"_blank\">setup<\/a> \n- Blue Wallet Users: <a href=\"https:\/\/getumbrel.com\/\" target=\"_blank\">Umbrel<\/a> \n- See more options on <a href=\"https:\/\/bitcoin-only.com\/#hardware\" target=\"_blank\">bitcoin-only.com<\/a>\n\n##### Buy a node box \n- Samourai Wallet Users: <a href=\"https:\/\/shop.nodl.it\/en\/home\/38-nodl-samourai-edition.html\" target=\"_blank\">Nodl (Samourai Edition)<\/a>\n- Blue Wallet Users: <a href=\"http:\/\/mynodebtc.com\/products\/one\" target=\"_blank\">MyNode<\/a>\n- See more options on <a href=\"https:\/\/bitcoin-only.com\/#hardware\" target=\"_blank\">bitcoin-only.com<\/a>\n\n\n-----\n\n## Step 8. Joining In\n*Aim: Discover how to get involved in discussions about bitcoin.*\n\n1. Attend a <a href=\"https:\/\/bitcoin-only.com\/#meetups\" target=\"_blank\">local meetup<\/a>\n2. <a href=\"https:\/\/bitcoinops.org\/en\/newsletters\/\" target=\"_blank\">Subscribe<\/a> to bitcoin op-tech\n3. Join Twitter and follow bitcoiners you come across.\n\n-----\n\n## Step 9. Bitcoin privacy\n*Aim: Understand how and why to use bitcoin in a private way*\n\n1. Read how to <a href=\"https:\/\/bitcoinprivacy.guide\/\" target=\"_blank\">use Bitcoin Privately<\/a>\n2. Read <a href=\"https:\/\/en.bitcoin.it\/Privacy\" target=\"_blank\">the bitcoin wiki page<\/a>\n\n-----\n\n## Step 10. Bitcoin MicroPayments\n*Aim: Understand what the lightning network is and how you can use it.*\n\n1. Download a non-custodial bitcoin lightning wallet\n2. Transfer some bitcoin to it (a small amount)\n3. Send bitcoin over lightning\n4. Watch <a href=\"https:\/\/www.youtube-nocookie.com\/embed\/3PcR4HWJnkY\" target=\"_blank\">The Importance of Layer Two<\/a> (15m)\n5. Read <a href=\"https:\/\/github.com\/bitcoin-intro\/bitcoin-intro\/raw\/main\/QA%20bitcoin-159-165.pdf\" target=\"_blank\">LNP\/BP<\/a> as compared to TCP\/IP (extract from <a href=\"https:\/\/twitter.com\/QAaboutBitcoin\" target=\"_blank\">Q\/A About Bitcoin<\/a>).\n\n-----\n\n## Step 11. Technical Details\n*Aim: Better understand how bitcoin works & the terminology*\n\n1. Watch <a href=\"https:\/\/www.youtube-nocookie.com\/embed\/bBC-nXj3Ng4\" target=\"_blank\">But How does bitcoin actually work<\/a> (30m)\n2. Watch <a href=\"https:\/\/www.youtube-nocookie.com\/embed\/Lx9zgZCMqXE\" target=\"_blank\">How Bitcoin Works Under the Hood<\/a> (22m)\n\n-----\n\n## Step 12. Buying Privately\n\nThe services in Step 2 are not private (except for Azteco, which is). It is worth considering more private options for further buying.\n\n##### BISQ\n0. <a href=\"https:\/\/bisq.network\/downloads\/\" target=\"_blank\">Download<\/a> & Install BISQ\n1. Set local currency\n2. Look for local sellers (Select BUY BTC button on top ribbon )\n3. Buy from local seller (Select Create new offer to buy BTC with ... )\n4. Withdraw bitcoin to bitcoin address from Step 1.\n\n*Note: As stated when installing BISQ, the user is responsible for using the software in compliance with local laws.*\n","134":"# \u4ebf\u4e66\n\n**\u300aNode.js\u533a\u5757\u94fe\u5f00\u53d1\u300b\uff08\u7f51\u540d[\u300aNodejs\u5f00\u53d1\u52a0\u5bc6\u8d27\u5e01\u300b][]\uff09\u65b0\u7248\u548c\u4ebf\u4e66\u4ee3\u7801\u5df2\u7ecf\u5168\u65b0\u6539\u7248\u5347\u7ea7\uff0c\u656c\u8bf7\u671f\u5f85\uff01**\n\n## \u7279\u522b\u8bf4\u660e\n\n![edu](.\/docs\/edu.jpg)\n\n\u4ebf\u4e66\uff0c\u8ba9\u6709\u77e5\u8bc6\u7684\u4eba\u5bcc\u8d77\u6765\u3002\u6211\u4eec\u5df2\u7ecf\u4e0e\u56fd\u5185\u6700\u5927\u7684\u5728\u7ebf\u6559\u80b2\u673a\u6784\u2014\u2014\u6f6d\u5dde\u6559\u80b2\uff0c\u5408\u4f5c\u6210\u7acb\u533a\u5757\u94fe\u5b66\u9662\uff0c\u5c06\u6df1\u5165\u89e3\u6790\u672c\u4ee3\u7801\uff0c\u6b22\u8fce\u5c0f\u4f19\u4f34\u4eec\u53c2\u4e0e\uff0c\u4f18\u60e0\u548c\u5956\u52b1\u591a\u591a\u3002\n\n\u7eb8\u8d28\u4e66\u7c4d\uff1ahttps:\/\/item.jd.com\/12206128.html\n\n\u5b66\u4e60\u62a5\u540d\uff1a<https:\/\/www.shiguangkey.com\/course\/1929>\n\n\u7b80\u5386\u6295\u9012\uff1a hr@ebookchain.org\n\n## \u8d44\u6e90\u94fe\u63a5\n\n* \u6e90\u7801\u89e3\u6790\u4e0e\u5f00\u53d1\u6307\u5357\uff1a[\u300aNodejs\u5f00\u53d1\u52a0\u5bc6\u8d27\u5e01\u300b][]\n* \u5b98\u65b9\u7f51\u7ad9: http:\/\/ebookchain.org\/\n* \u5b98\u65b9\u5f00\u53d1\u4ea4\u6d41\u7fa4\uff1a185046161\n\n## \u5b89\u88c5\n\n* [Install](..\/..\/wiki\/install)\n* [\u5b89\u88c5](..\/..\/wiki\/\u5b89\u88c5)\n\n## \u6d4b\u8bd5\n\n\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u8d26\u53f7\uff0c\u53ef\u4ee5\u7528\u6765\u5411\u5176\u4ed6\u8d26\u53f7\u8f6c\u8d26\uff1a\n\n```\nGenesis Account:\n{\n  \"keypair\": {\n    \"publicKey\": \"6ab40f67fcdff0bf4f25f58158ce3889378e2b81584a1a5b080757016ed830ed\",\n    \"privateKey\": \"c3dd89317d0ecf7418258af6b9eee8d02319379d7d77ac7caa039a5abfe404806ab40f67fcdff0bf4f25f58158ce3889378e2b81584a1a5b080757016ed830ed\"\n  },\n  \"address\": \"4660508451220041812L\",\n  \"secret\": \"AiU5S06&YaxbFL$h%aHgJaNv2fX6ho8H\"\n}\n```\n\n## \u534f\u8bae\n\nThe MIT License (MIT)  \n\nCopyright (c) 2016 Ebookcoin  \nCopyright (c) 2014-2015 Crypti  \n\n\n[\u300aNodejs\u5f00\u53d1\u52a0\u5bc6\u8d27\u5e01\u300b]: https:\/\/github.com\/imfly\/bitcoin-on-nodejs\n","135":"# Usage\n```\n$ .\/unspendable.py foobar\nmainnet: 1foobarXXXXXXXXXXXXXXXXXXXXXX9tU31\ntestnet: mvfoobarXXXXXXXXXXXXXXXXXXXXa1wXq5\n$\n```\n","136":"\nGoUrl.io Python's Django v1 & v2 Bitcoin Payment Gateway - \n------------------------------------------------------\n\n\n**This example explains how you can use GoUrl Bitcoin Payment Gateway on Python's Django. It's easily adapted to other frameworks (such as Flask).**\n\nThe views.py file has two functions:\n\n* cryptobox_rendering: The view for rendering the template, which contains the cryptobox\n* callback: This is the view which receives and processes the POST data sent within the IPN callback\n\nTo render the cryptobox in your template, you will need to send all the requeried parameters to it. (the  value of the hash parameter is returned by the hash function of the provided md5hash.py file). Then, pass all these parameters to the cryptobox_show function of the [cryptobox.js](https:\/\/github.com\/cryptoapi\/Payment-Gateway\/blob\/master\/js\/_source\/cryptobox.js) file. \n\n\nSteps for the Gourl API-integration IPN feature:\n------------------------------------------------------\n\n* Add the callback URL into the urlpatterns list of your urls.py file.\n* Add the callback view to views.py\n\n\nMore Info: [https:\/\/gourl.io\/python\\_django\\_flask\\_bitcoin\\_payment\\_gateway.html](https:\/\/gourl.io\/python\\_django\\_flask\\_bitcoin\\_payment\\_gateway.html)\n\n","137":"# Bitcoin Trade Data\n## The goal for this project is 1)to get bitcoin related data to predict bitcoin price. 2)Predict Bitcoin future price 3)Auto-trading based on the prediction(Long Only)\n\n#### The related data including:\n<br> quarterly and weekly bitcoin price from OKEX\n<br> asks\/bids info and last price from Bitfinex (Will add funding data later)\n<br> USDT OTC price from Huobi.pro\n<br> Emotion from news and forum (Wallstreet.cn and 8btc , will add reddit and CCN later)(DELETED due to effeciency reason)\n\n#### Outcomes:\n3 predicted outcomes: Next_5,Next_10,Next_15 refer to the bitcoin future price will raise or drop in next 5\/10\/15 minutes based on our prediction \n\n#### Machine Learning Model:\n<br> Neural Network (Prepare to use deeplearning model to fit the data in the future)\n\n### Steps\n#### 1) run input_data.py to collect data to SQL Database.\n#### 2) https:\/\/github.com\/benjaminshi02003220\/Bitcoin_price_prediction Download this project and run NNC.py to build up the model based on  the data in SQL Database\n#### 3) Copy the 4 model file from Bitcoin_price_prediction folder to bitcion_trade_data folder. Run prediction.py to 1.predict price 2.Auto-Trading based on the result(To be completed)\n\n\nYou need to install below packages before run input_data.py\n<br>`pip install requests` -- Access to webpage\n<br>`pip install BeautifulSoup` -- Formalize webpage\n<br>`pip install snownlp` -- Analyze emotion of sentenses in Chinese\n<br>`pip install pyodbc` -- connect to SQL Server DB\n<br>`pip install sklearn` -- Machine Learning Model\n<br>`pip install tensorflow` -- install tensorflow\n\n Will update the code from time to time.\n\n<br> ------------------------------------------------------------------------------\n\n# Updates by Date\n\n###### Updates 3\/6\/2018 \n<br> 1. get the news from wallstreet cn(https:\/\/wallstreetcn.com\/) blockchain channel. Analyze the emotion thru SnowNLP. Input as a feature.\n<br> 2. get the posts from Chinese biggest BTC forum--8btc cn(https:\/\/8btc.com\/) blockchain channel. Analyze the emotion by using SnowNLP. Input as a feature.\n(Will Update and input the emotion from Reddit and CCN in the future)\n\n###### Updates 3\/7\/2018 \n<br>  Adding solutions for disconnect conditions\n\n###### Updates 3\/8\/2018\n<br> 1.fixed a bug in bfx.py\n<br> 2.*Changed the data storage from csv to SQL server database.Better for further machine learning process.\n\n###### Updates 3\/10\/2018\n<br> Start another project named Bitcoin_price_prediction to predict bitcoin trend.\n\n###### Updates 3\/14\/2018\n<br> DELETED Emotion from forum due to effeciency reason\n\n###### Updates 3\/14\/2018\n<br>adding prediction.py (To be Updated)\n\n###### Updates 3\/18\/2018\n<br>Fixed some bugs and complete the real-time prediction. (prediction.py). Next step is to accomplish the auto-trading based on the prediction result~ \n\n###### Updates 3\/28\/2018\n<br>3 predicted outcomes: Next_5,Next_10,Next_15 refer to the bitcoin future price will raise or drop based on our prediction , 1 means raise ,0 means drop. If two of the three outcomes are 1, we can long bitcoin future and will sell it after 15 minutes\/or a certain percentage of profit(to be tested)\n\n###### Updates 4\/4\/2018\n<br>Adding future trading process(Long and sell after 15 minutes)\n","138":"klondike\n========\n\nBitcoin ASIC mining board project\n\nWARNING:\n\n  This project is incomplete and in progress. There may be errors, mistakes, incomplete portions at this time. Do NOT use these project files to order circuit boards until they have been finished and confirmed to work.\n  \nSUMMARY:\n\n  This is an open source effort to design and build a Bitcoin mining board based on the Avalon ASIC. The final goal is to have a small 10cm x 10cm board that holds 16 ASIC chips. This board can be controlled via USB or I2C communication. An example host would be a PC, Raspberry Pi or TP-Link WR703N router. The host will run cgminer with a custom driver based on the Avalon one and control the board via USB. The I2C interface allows chaining together more than one board consolidating control by the host system using only one USB connection.\n    \n  \n  Each board has a 6 pin PCI Express power connector allowing efficient powering of many boards from an ATX PSU. A 16 chip board should be capable of 4512 MH\/s and consume about 32W power. A low cost Corsair CX-600 PSU should easily power 16 boards using readily available power splitters. This provides for 72 GH\/s off one low cost ATX PSU.\n  \nSTATUS:\n\n  The PCB routing is currently done and I'm making small changes to tidy up, improve and double check the design while waiting on the Avalon communication protocol docs. After they come out I'll finalize any changes and order first prototype boards. During the waiting period for boards to arrive I'll be coding \/ debugging the firmware and hope to have something workable to program into a test board when it arrives.\n  \nCOMING SOME DAY:\n\n  Kicad Schematic and Board files\n  \n  MPLAB-X Project and source files\n  \n  \n","139":"pybitcoin\n=====\n\n## This code is deprecated and should not be used\n\nPython library with tools for Bitcoin and other cryptocurrencies.\n\n## Usage\n\n### Private Keys\n\n```python\n>>> from pybitcoin import BitcoinPrivateKey\n>>> private_key = BitcoinPrivateKey()\n>>> private_key.to_hex()\n'91149ee24f1ee9a6f42c3dd64c2287781c8c57a6e8e929c80976e586d5322a3d'\n>>> private_key.to_wif()\n'5JvBUBPzU42Y7BHD7thTnySXQXMk8XEJGGQGcyBw7CCkw8RAH7m'\n>>> private_key_2 = BitcoinPrivateKey('91149ee24f1ee9a6f42c3dd64c2287781c8c57a6e8e929c80976e586d5322a3d')\n>>> print private_key.to_wif() == private_key_2.to_wif()\nTrue\n```\n\n### Public Keys\n\n```python\n>>> public_key = private_key.public_key()\n>>> public_key.to_hex()\n'042c6b7e6da7633c8f226891cc7fa8e5ec84f8eacc792a46786efc869a408d29539a5e6f8de3f71c0014e8ea71691c7b41f45c083a074fef7ab5c321753ba2b3fe'\n>>> public_key_2 = BitcoinPublicKey(public_key.to_hex())\n>>> print public_key.to_hex() == public_key_2.to_hex()\nTrue\n```\n\n### Addresses\n\n```python\n>>> public_key.address()\n'13mtgVARiB1HiRyCHnKTi6rEwyje5TYKBW'\n>>> public_key.hash160()\n'1e6db1e09b5e307847e5734864a79ea0113d0083'\n```\n\n### Brainwallet-based Private Keys\n\n```python\n>>> private_key = BitcoinPrivateKey.from_passphrase()\n>>> private_key.passphrase()\n'shepherd mais pack rate enamel horace diva filesize maximum really roar mall'\n>>> private_key.to_hex()\n'91149ee24f1ee9a6f42c3dd64c2287781c8c57a6e8e929c80976e586d5322a3d'\n>>> priv2 = BitcoinPrivateKey.from_passphrase(priv2.passphrase())\n>>> print private_key.to_hex() == priv2.to_hex()\nTrue\n```\n\n### Sending Transactions to Addresses\n\n```python\n>>> from pybitcoin import BlockcypherClient\n>>> recipient_address = '1EEwLZVZMc2EhMf3LXDARbp4mA3qAwhBxu'\n>>> blockchain_client = BlockcypherClient(BLOCKCYPHER_API_KEY)\n>>> send_to_address(recipient_address, 10000, private_key.to_hex(), blockchain_client)\n```\n\n### Sending OP_RETURN Transactions\n\n```python\n>>> from pybitcoin import make_op_return_tx\n>>> data = '00' * 80\n>>> tx = make_op_return_tx(data, private_key.to_hex(), blockchain_client, fee=10000, format='bin')\n>>> broadcast_transaction(tx, blockchain_client)\n{\"success\": True}\n```\n\n### Altcoins\n\n```python\n>>> class NamecoinPrivateKey(BitcoinPrivateKey):\n>>>     _pubkeyhash_version_byte = 52\n>>> namecoin_private_key = NamecoinPrivateKey(private_key.to_hex())\n>>> namecoin_private_key.to_wif()\n'73zteEjenBCK7qVtG2yRPeco2TP5w93qBW5sJkxYoGYvbWwAbXv'\n>>> namecoin_public_key = namecoin_private_key.public_key()\n>>> namecoin_public_key.address()\n'MyMFt8fQdZ6rEyDhZbe2vd19gD8gzagr7Z'\n```\n\n## Supported currencies\n\nLitecoin, Namecoin, Peercoin, Primecoin, Testnet, Worldcoin, Megacoin, Feathercoin, Terracoin, Novacoin, Dogecoin, Anoncoin, Protoshares, Ixcoin, Memorycoin, Infinitecoin, Cryptogenic Bullion, Quarkcoin, Netcoin, Earthcoin, Reddcoin, (insert your favorite cryptocurrency here)\n\n## Developers\n\n**Q:** Can I contribute to pybitcoin?\n\n**A:** Of course! Any and all are encouraged to contribute. Just fork a copy of the repo and get started on something that you think would improve the current offering.\n\n**Q:** What should I work on?\n\n**A:** That's up to you! For a quick project, consider adding support for a new cryptocurrency (should only require two lines of code, not including the unit tests).\n\nMeanwhile, for something a bit more ambitious, check the issues section for outstanding feature requests.\n\n## Notice\n\npybitcoin is still in beta. Developers using pybitcoin are encouraged to inspect the code for themselves and perform their own tests. We are committed to ensuring that this library behaves exactly as it is supposed to under all conditions, and have plans to ramp up our testing efforts going forward.\n","140":"# Badger\n\n## Installation\n\n- Firefox and Chrome: Download the most recent release from https:\/\/badger.bitcoin.com\n- Brave: Install from chrome store\n\n## API Documentation\n\nhttps:\/\/developer.bitcoin.com\/badger\/docs\/getting-started\n\n## Docker build distribution\n\nNotes:\n- Recent docker version needed to build.\n- OSX or Linux build environment preferred.\n- Execute commands from the source directory.\n\nSteps:\n1. Build and run the image, run command:\ndocker build -f Dockerfile -t badger:0.7.16 .  && docker run --name badger0716 badger:0.7.16\n\n2. After the build is complete, copy the distribution files to your local folder:\ndocker cp badger0716:\/app\/builds\/. .\/\n\n3. A distribution file for each supported browser will be copied, such as badgerwallet-firefox-0.7.16.zip for Firefox browsers.\n\n## Intro\n\nBadger is a secure identity vault for Bitcoin Cash. It allows you to hold BCH & tokens, and serves as your bridge to decentralized applications (dapps).\n\nBitcoin Cash and tokens enable an entirely new dimension to the web with micro-payments, smart-assets, decentralized exchanges, distributed autonomous organizations and much more.\n\nBadger is your identity on this new web. You can pay for premium content, run smart contracts and experience dapps seemlessly and trust free.\n\nPowered by BITBOX, Badger is 100% non-custodial. Your private keys never leave your computer.\n\n## Badger Button\n\nBadger Button is a library of open source UI components which content creators and entrepreneurs can drop in to their site to enable micro payments, premium content, tipping, e-commerce and much more.\n\n- Usage: https:\/\/old.reddit.com\/r\/btc\/comments\/9l9j1t\/how_to_create_your_own_custom_badger_button\/\n- Example buttons visible on articles at https:\/\/coinspice.io\/\n\n## CashID\n\n- Allows dapps to authenticate an account and provide previously purchased content\n- CashID react component and example usage by paOol: https:\/\/github.com\/paOol\/react-cashid\n\n## Credits\n\n- [SpendBCH](https:\/\/twitter.com\/SpendBCH_io)\n- [Gabriel Cardona](https:\/\/twitter.com\/cgcardona)\n- [SLP](https:\/\/twitter.com\/simpleledger)\n- [bitcoin.com](https:\/\/developer.bitcoin.com)\n- Badger is originally forked from the excellent MetaMask project\n","141":"# hd-wallet-addrs\n\nA command-line  tool for finding bitcoin hd-wallet addresses that have received funds.\n\nThis tool does two primary things:\n\n1. derive hd-wallet addresses (both change and receive) according to bip32 rules.\n2. examines the blockchain to find the addresses that have actually been used.  (received funds at least once)\n\nA web frontend for this tool is available at:\nhttps:\/\/mybitprices.info\/hd-wallet-addrs.html\n\nBoth regular HD wallets (single address) and multi-sig wallets (eg Copay) are\nsupported.\n\nSegwit addresses are generated if a ypub or zpub key is provided.\n(ypub: segwit-p2sh, zpub: bech32)\n\nReports are available in json, plaintext, and html.  Columns can be\nchanged or re-ordered via command-line.\n\nhd-wallet-addrs is general purpose for anyone needing to discover which addresses\nare actually used in their wallet, including change addresses.\n\nThe motivation for building this tool was to simplify extracting used wallet\naddresses for accounting purposes.  In particular for use with:\n* <a href=\"http:\/\/github.com\/dan-da\/bitprices\">bitprices<\/a> - a command line utility for wallet pricing history and cost-based accounting.\n* <a href=\"http:\/\/mybitprices.info\">mybitprices.info<\/a> - an easy-to-use web frontend to bitprices.\n\nSee also: [hd-wallet-derive](https:\/\/github.com\/dan-da\/hd-wallet-derive) -- a tool that derives bip32 addresses and private keys.\n\n# Let's see some examples.\n\n```\n$ .\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --logfile=\/tmp\/log.txt\n\n --- Wallet Discovery Report --- \n\nFound 3 Receive addresses and 2 Change addresses.\n  Receive --  Used: 3   Unused: 0\n  Change  --  Used: 2   Unused: 0\n\n+------------------------------------+---------+----------------+------------+------------+---------+\n| addr                               | type    | total_received | total_sent | balance    | relpath |\n+------------------------------------+---------+----------------+------------+------------+---------+\n| 1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK | Receive |     0.00120000 | 0.00100000 | 0.00020000 | 0\/0     |\n| 1NVsB73WmDGXSxv77sh9PZENH2x3RRnkDY | Receive |     0.00130000 | 0.00100000 | 0.00030000 | 0\/1     |\n| 1BkgqiHcvfnQ2wrPN5D2ycrvZas3nibMjC | Receive |     0.00040000 | 0.00000000 | 0.00040000 | 0\/2     |\n| 12SisoiXLUEbkytL5Pzia1jBY8gJP5XN8D | Change  |     0.00184874 | 0.00000000 | 0.00184874 | 1\/0     |\n| 1CkvACVpFwkPnMG13w9kXXE9YcsiyL4pcY | Change  |     0.00194876 | 0.00000000 | 0.00194876 | 1\/1     |\n+------------------------------------+---------+----------------+------------+------------+---------+\n```\n\nWe can change up the fields and specify to use bip44 derivation to generate an absolute path.\n\nTip: The abspath column is empty when --derivation=relative, which is the default.\n\n```\n$ .\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --cols=type,abspath,relpath,addr --derivation=bip44 --logfile=\/tmp\/log.txt\n\n --- Wallet Discovery Report --- \n\nFound 3 Receive addresses and 2 Change addresses.\n  Receive --  Used: 3   Unused: 0\n  Change  --  Used: 2   Unused: 0\n\n+---------+--------------+---------+------------------------------------+\n| type    | abspath      | relpath | addr                               |\n+---------+--------------+---------+------------------------------------+\n| Receive | m\/44\/0\/0\/0\/0 | 0\/0     | 1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK |\n| Receive | m\/44\/0\/0\/0\/1 | 0\/1     | 1NVsB73WmDGXSxv77sh9PZENH2x3RRnkDY |\n| Receive | m\/44\/0\/0\/0\/2 | 0\/2     | 1BkgqiHcvfnQ2wrPN5D2ycrvZas3nibMjC |\n| Change  | m\/44\/0\/0\/1\/0 | 1\/0     | 12SisoiXLUEbkytL5Pzia1jBY8gJP5XN8D |\n| Change  | m\/44\/0\/0\/1\/1 | 1\/1     | 1CkvACVpFwkPnMG13w9kXXE9YcsiyL4pcY |\n+---------+--------------+---------+------------------------------------+\n```\n\nOr get a list for easy copy\/paste.\n\n```\n$ .\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --format=addrlist --logfile=\/tmp\/log.txt\n\n --- Wallet Discovery Report --- \n\nFound 3 Receive addresses and 2 Change addresses.\n  Receive --  Used: 3   Unused: 0\n  Change  --  Used: 2   Unused: 0\n\n1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\n1NVsB73WmDGXSxv77sh9PZENH2x3RRnkDY\n1BkgqiHcvfnQ2wrPN5D2ycrvZas3nibMjC\n12SisoiXLUEbkytL5Pzia1jBY8gJP5XN8D\n1CkvACVpFwkPnMG13w9kXXE9YcsiyL4pcY\n```\n\nOr JSON\n\n```\n.\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --cols=type,abspath,relpath,addr --format=jsonpretty  --derivation=bip44 --logfile=\/tmp\/log.txt\n[\n    {\n        \"type\": \"Receive\",\n        \"abspath\": \"m\\\/44\\\/0\\\/0\\\/0\\\/0\",\n        \"relpath\": \"0\\\/0\",\n        \"addr\": \"1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\"\n    },\n    ...\n]\n```\n\nOr CSV\n\n```\n.\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --cols=type,abspath,relpath,addr --format=csv  --derivation=bip44 --logfile=\/tmp\/log.txt\ntype,abspath,relpath,addr\nReceive,m\/44\/0\/0\/0\/0,0\/0,1Ge6rDuyCdYVGhXZjcK4251q67GXMKx6xK\nReceive,m\/44\/0\/0\/0\/1,0\/1,1NVsB73WmDGXSxv77sh9PZENH2x3RRnkDY\nReceive,m\/44\/0\/0\/0\/2,0\/2,1BkgqiHcvfnQ2wrPN5D2ycrvZas3nibMjC\nChange,m\/44\/0\/0\/1\/0,1\/0,12SisoiXLUEbkytL5Pzia1jBY8gJP5XN8D\nChange,m\/44\/0\/0\/1\/1,1\/1,1CkvACVpFwkPnMG13w9kXXE9YcsiyL4pcY\n```\n\n# multi-sig examples.\n\nSo far multi-sig has been tested with copay (bip44 and bip45) only.\nOlder versions of Copay using bip45 require the --derivation=copaylegacy flag.\n\nmultisig requires multiple xpub keys and use of the --numsig flag to indicate\nthe required number of signers.  (m of n)\n\n## discovering an empty Copay 1.6.3+ (bip44) 2 of 3 wallet.\n\nThis test wallet has no funds, so we use --include-unused to obtain the initial addresses up to the\ngap limit.  The gap limit default is 20, but we use 2 here for brevity.\n```\n$ .\/hd-wallet-addrs.php -g --numsig=2 --gap-limit=2  --xpub=xpub6CZte6DfeMoVwxv3ShiMwQjET47nRENqrkZaSXTcP7Yaja6sxyRbiyqPD7kfy4W2dTTuTdV4jHMmSe1k1qteTMN7qDLndt1RfQ8RLM3pjzb,xpub6DUGj5hRwp7t3DoH554Ce7p3KLepccYfG5BVbvyPSArTepacc3aPRDTMz3GSdoX1HgVYKBSaR6fFDm1daEtSQFBSNTq4X93pd8dBFyPW2gz,xpub6DRFPDtHueJ5sfqzcLSyoKL6TQZMofvjpLzsVXsWqjgYuAtUtdU8YjWFvpa2xegWLFeLQ38KLJzWdKQ3CsAQQLoMYnBsQy3FCeTDuxgcsfK --include-unused --logfile=\/tmp\/out.txt\n\n --- Wallet Discovery Report --- \n\nFound 2 Receive addresses and 2 Change addresses.\n  Receive --  Used: 0   Unused: 2\n  Change  --  Used: 0   Unused: 2\n\n+------------------------------------+---------+----------------+------------+------------+---------+\n| addr                               | type    | total_received | total_sent | balance    | relpath |\n+------------------------------------+---------+----------------+------------+------------+---------+\n| 339H3pYP9AKiEo74D1BWiSK8jhWXsrJ3yk | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 0\/0     |\n| 3NcBBWtDscKchgkUCY3eEQZgYh8STtcona | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 0\/1     |\n| 3QtjkbY8Km4v5KCgTZxD7VW2vPCsBqkV3V | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 1\/0     |\n| 3B7xNx7dCT6ydcVF1xQpEtG8UFeeh2PyAk | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 1\/1     |\n+------------------------------------+---------+----------------+------------+------------+---------+\n```\n\n## discovering an empty Copay 1.1.x (bip45) 1 of 1 wallet.\n\nLegacy versions of Copay used bip45 in a special way that the tool cannot detect without help.\n\nNote the use of --derivation=copaylegacy\n\n(Copay 1.6.3+ 1 of 1 wallets use bip44 derivation and do not require any special arguments.)\n\n\n```\n$ .\/hd-wallet-addrs.php -g --derivation=copaylegacy --gap-limit=2  --xpub=xpub697odnriKgTgWE4my6au8nd8haUfAMzLGFpDemAkRbCMgGVxANuj9DffNLgDjPA1dnxzi8oFmM79ZPgKVfCV7Saj8sQUL7tJfeZDuyQNGDm --include-unused --logfile=\/tmp\/out.txt\n\n --- Wallet Discovery Report --- \n\nFound 2 Receive addresses and 2 Change addresses.\n  Receive --  Used: 0   Unused: 2\n  Change  --  Used: 0   Unused: 2\n\n+------------------------------------+---------+----------------+------------+------------+----------------+\n| addr                               | type    | total_received | total_sent | balance    | relpath        |\n+------------------------------------+---------+----------------+------------+------------+----------------+\n| 3LHgjejeCnQEhLGpmc1q4RmPXypKhjbgpY | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/0\/0 |\n| 3Jdd25xHSCDFrMeCoW62963vf22UoKBmtP | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/0\/1 |\n| 3JZ3YR6sgyqq6xcGtpcAvYBCX7gM9cPU3c | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/1\/0 |\n| 32KNwkcQzBHYejvnJpWDwUWMbHGZd4Q6fH | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/1\/1 |\n+------------------------------------+---------+----------------+------------+------------+----------------+\n```\n\n### Warning for users of Copay 1.6.2 and below\n\nOlder Copay versions made it possible to generate gaps larger than 20. This is\nbecause it would generate a new address each time the receive screen was viewed\nand did not respect the standard gap-limit of 20.\n\nChecking only 20 addresses could possibly leave you without discovering funds.\nIf you suspect this may be happening, a workaround is to specify a larger gap\nlimit such as 100 via the gap-limit argument.\n\n\n\n## discovering an empty Copay 1.1.x (bip45) 2 of 2 wallet.\n\nAgain we must use --derivation=copaylegacy\n\n```\n$ .\/hd-wallet-addrs.php --derivation=copaylegacy -g --gap-limit=2  --xpub=xpub68bjYyPhqAwK4T8WtXuGvruSQoJu1vdLD7DYc591MkFCR7wD9gyzteFYmzRyytWJ2SzTqZNTgggvPEyqEy9oArjLF7xhte5js1Lp1EPipwJ,xpub68ufoGjY41tQqP4LpeyYornuNxm8DNy2Rn7KAPUTAwFouj821eqcVpWw1jonrm2Xg5jnnSrd1QPQzGve3f66ZLf6Ni9VY6aN3AjYa4e7XTE --numsig=2 --include-unused --logfile=\/tmp\/out.txt\n\n --- Wallet Discovery Report --- \n\nFound 2 Receive addresses and 2 Change addresses.\n  Receive --  Used: 0   Unused: 2\n  Change  --  Used: 0   Unused: 2\n\n+------------------------------------+---------+----------------+------------+------------+----------------+\n| addr                               | type    | total_received | total_sent | balance    | relpath        |\n+------------------------------------+---------+----------------+------------+------------+----------------+\n| 35uhrWpDTj3Y7EwR9AWjACGfT47txtpH1v | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/0\/0 |\n| 3BnXxkW9CVCLn1EboGDJ8434eKFWZGHsjn | Receive |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/0\/1 |\n| 38dzdCQXatNdT9nWG7thpGC9KjBVLphZRP | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/1\/0 |\n| 3CfbgQ5BxWRFBYXJxEVAmVCZsatdJfc2rS | Change  |     0.00000000 | 0.00000000 | 0.00000000 | 2147483647\/1\/1 |\n+------------------------------------+---------+----------------+------------+------------+----------------+\n```\n\n# How discovery works\n\nIn plain english, discovery works by mathematically deriving the addresses\nfor your wallet in order and checking if each one has been used or not.\n\nA slightly more technical description of the process:\n* starting from the extended public key (xpub)\n* for receive addresses, then change addresses\n  * derive batches of xpub child addresses (bip32: 0\/*)\n  * for each batch\n    * check if each address has received funds  (API call to oracle\/server)\n    * until 20 (default) unused addresses in a row are found.\n\n# Privacy implications\n\nAn important thing to recognize is that unless you are running a toshi or\ninsight server locally, the discovery process will send your public addresses\nto a third party.  ie: BlockChain.info, BitPay (insight), or CoinBase (toshi)\n\nThe third party will have no way to spend your funds.\n\nThe third party could track your requests and guess\/assume that your addresses\nare associated with your IP, or are associated with eachother.\n\nIf that is something you care about, then you should investigate how to run\ntoshi or insight locally and use the --toshi or --insight flags to specify\nthe local server URL.\n\nThere is now a feature that helps to improve privacy when using third-party\nAPI servers.  The **--api=roundrobin** flag will cycle through the available\nblockchain providers and send individual addresses to each.  In this way, no\nsingle provider will have access to all the queried wallet addresses.\n\nQuerying for individual addresses is slow.  The --batch-size flag may be used\nto increase the number of addresses sent to each provider.  \n\n\n# Use at your own risk.\n\nThe author makes no claims or guarantees of correctness.\n\n\n# Output formats\n\nThe report may be printed in the following formats:\n* plain  - an ascii formatted table, as above.  intended for humans.\n* csv - CSV format.  For spreadsheet programs.\n* json - raw json format.  for programs to read easily.\n* jsonpretty - pretty json format.  for programs or humans.\n* addrlist - single column address list. for easy cut\/paste.\n\nAdditionally, the report may contain incoming transactions only, outgoing\ntransactions only, or both types.\n\n# Usage\n\n```\n$ .\/hd-wallet-addrs.php\n\n   hd-wallet-addrs.php\n   \n   This script discovers bitcoin HD wallet addresses that have been used.\n\n   Options:\n\n    -g                   go!  ( required )\n    \n    --xpub=<csv>         comma separated list of xpub keys\n    --xpubfile=<path>    file containing xpub keys, one per line.\n                           note: multiple keys implies multisig m of n.\n\n    --derivation=<type>  bip32|bip44|bip45|copaylegacy|relative.\n                           default=relative\n    --numsig=<int>       number of required signers for m-of-n multisig wallet.\n                           (required for multisig)\n    \n    --gap-limit=<int>    bip32 unused addr gap limit. default=20\n    --include=<type>     include which addresses.  one of [used, unused, both]\n                         note that unused addresses are subject to --gap-limit\n    --include-unused     equivalent to --include=both\n    \n    --gen-only=<n>      will generate n receive addresses and n change addresses\n                          but will not query the blockchain to determine if they\n                          have been used.\n                          \n    --type=<type>       receive|change|both.  default=both\n    \n    --api=<api>          toshi|insight|blockchaindotinfo|btcd|roundrobin\n                           default = blockchaindotinfo  (fastest)\n                           roundrobin will use a different API for each batch\n                            to improve privacy.  It also sets --batch-size to\n                            1 if set to auto.\n                            \n    --batch-size=<n>    integer|auto   default=auto.\n                          The number of addresses to lookup in each batch.\n    \n    --cols=<cols>        a csv list of columns, or \"all\"\n                         all:\n                          (addr,type,total_received,total_sent,balance,relpath,abspath,xpub)\n                         default:\n                          (addr,type,total_received,total_sent,balance,relpath)\n\n    --outfile=<path>     specify output file path.\n    --format=<format>    txt|csv|json|jsonpretty|html|addrlist|all   default=txt\n    \n                         if all is specified then a file will be created\n                         for each format with appropriate extension.\n                         only works when outfile is specified.\n                         \n    --toshi=<url>       toshi server. defaults to https:\/\/bitcoin.toshi.io\n    --insight=<url>     insight server. defaults to https:\/\/insight.bitpay.com\/api\n    \n    --blockchaindotinfo=<url>\n                        blockchain.info server.  defaults to https:\/\/blockchain.info\n    \n    --btcd=<url>        btcd rpc server.  specify as http:\/\/user:pass@host:port.  https ok also\n                          btcd does not return balance or total sent\/received.\n    \n    --oracle-raw=<p>    path to save raw server response, optional.\n    --oracle-json=<p>   path to save formatted server response, optional.\n    \n    --logfile=<file>    path to logfile. if not present logs to stdout.\n    --loglevel=<level>  debug,info,specialinfo,warning,exception,fatalerror\n                          default = info\n```\n\n\n# Installation and Running.\n\nPHP's gmp and mcrypt extensions are required.  Here's how to install on ubuntu.\n```\n sudo apt-get install php5-gmp php5-mcrypt\n```\n\nBasics\n```\n git clone https:\/\/github.com\/dan-da\/hd-wallet-addrs\n cd hd-wallet-addrs\n php -r \"readfile('https:\/\/getcomposer.org\/installer');\" | php\n php composer.phar install\n```\n\nTry an example\n```\n.\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR\n```\n\nOr to hide log messages\n```\n.\/hd-wallet-addrs.php -g --xpub=xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR --logfile=\/tmp\/log.txt\n```\n\nRun Test cases\n```\n cd tests\n .\/test_runner.php\n```\n\nIt is really slow to generate keys in PHP.  For a huge speedup, you can install the\nsecp256k1 extension from:\n\n<a href=\"https:\/\/github.com\/Bit-Wasp\/secp256k1-php\">https:\/\/github.com\/Bit-Wasp\/secp256k1-php<\/a>\n\nVersions of secp256k1-php after v0.0.7 require PHP7, so if you are using PHP5,\nthe install instructions on that page must be modified as follows:\n\n```\n$ cd secp256k1-php\/secp256k1\n$ git checkout v0.0.7\n$ phpize && .\/configure --with-secp256k1 && make && sudo make install\n```\n\nNote:  on some installations you may need to specify phpize5 instead of phpize.\n\n\n# Blockchain API provider notes.\n\ntip!  use the --api flag to switch between blockchain API providers.\n\nEach API has strengths and weaknesses. Some are faster than others,\nor easier\/harder to run locally. The blockchain.info service is recommended\nbecause it presently has the fastest API, and it is the default.\n\nFor best privacy, one should query an oracle that is running locally.\nEsplora, Insight, toshi, and btcd can be operated this way.\n\n\n## [btc.com](https:\/\/btc.com\/api-doc)\n\nas of 2019-08-06\n\n* API is returning 403 forbidden error except when requested via web browser.  ymmv.\n\nas of 2018-07-23:\n\n* supports multi address lookup in a single call.\n* max addrs per call: unknown.\n* returns an index with NULL value for any addresses without received funds.\n\n## [bitcoin-core](https:\/\/github.com\/bitcoin\/bitcoin)\n\nas of 2019-08-06:\n\n* still does not support address index or API.\n* There is a chance [this pull request](https:\/\/github.com\/bitcoin\/bitcoin\/pull\/14053) might get merged.\n\nas of 2015-12-30:\n\n* does not provide a suitable API for querying address total_received\n* does not have a public address index.  Implementing an API would be difficult.\n* some 3rd party party patches or external solutions exist for creating an address index.\n* not supported by hd-wallet-addrs (sadly).\n\n## [blockchain.info](https:\/\/www.blockchain.com\/api\/blockchain_api)\n\nas of 2015-12-30:\n\n* supports multi address lookup in a single call.\n* max addrs per call: unknown.\n* returns extra un-needed info such as last 50 tx.\n* returns addresses in different order than requested.\n\n## [blockcypher.com](https:\/\/www.blockcypher.com\/dev\/bitcoin\/)\n\nas of 2018-07-23:\n\n* does support multi address lookup in a single call via batching.\n* max addrs per batched call is 100.  however:\n* each address is counted as a request internally, and more than\n3 triggers the rate limiting, so the request fails.  Thus, 100\ncan only be achieved with an API key, and the limit for free\nusage is effectively 3.\n* See https:\/\/github.com\/blockcypher\/explorer\/issues\/245\n\n## [esplora](https:\/\/github.com\/Blockstream\/esplora) (by blockstream.info)\n\nas of 2019-08-06:\n\n* does NOT support multi address lookup in a single call.  [feature requested](https:\/\/github.com\/Blockstream\/esplora\/issues\/27).\n* open source, can be run locally.\n\n## [Insight](https:\/\/github.com\/bitpay\/insight)\n\nas of 2019-08-06\n\n* [project page](https:\/\/github.com\/bitpay\/insight) states insight has been replaced by [bitcore-node](https:\/\/github.com\/bitpay\/bitcore)\n* insight [public API](https:\/\/insight.bitpay.com\/api) is still working.\n\nas of 2015-12-30:\n\n* does NOT support multi address lookup in a single call.\n* each candidate address must be queried separately.\n\n\n## blockr.io\n\nas of 2017-09-04:\n\n* Dead.  Killed by Coinbase.com.\n* Read the [obituary](https:\/\/www.ccn.com\/blockr-io-shuttered-by-coinbase\/).\n* R.I.P. blockr\n\nas of 2016-02-16:\n\n* supports multi address lookup in a single call.\n* limits number of addresses per call to 20.\n* does not return un-needed tx data.\n\n\n## [btcd](https:\/\/github.com\/btcsuite\/btcd)\n\nas of 2017-05-21:\n\n* btcd can now be queried from hd-wallet-addrs to find used wallet addresses, but values for balance\/sent\/received are empty.\n* does not support multi address lookup, so is not that fast.\n* is probably the simplest way to run a local oracle.\n* See [this issue](https:\/\/github.com\/btcsuite\/btcd\/issues\/949).\n\nas of 2015-12-30:\n\n* does not provide a suitable API for querying address total_received or balance.\n* does have a public address index that should make such an API possible, if not performant.\n\n## [Toshi](https:\/\/github.com\/martindale\/toshi)\n\nas of 2019-08-06:\n\n* coinbase\/toshi [project page](https:\/\/github.com\/coinbase\/toshi\/) not found on github.  Maybe try [here](https:\/\/github.com\/martindale\/toshi).\n\nas of 2017-05-21:\n\n* toshi.io no longer exists since Dec 31, 2016.\n* toshi can still be run locally by installing from github.\n* See the Coinbase announcement [here](https:\/\/developers.coinbase.com\/blog\/2016\/10\/31\/sunsetting-toshi).\n\nas of 2015-12-30:\n\n* does NOT support multi address lookup in a single call.\n* each candidate address must be queried separately.\n\n\n# Embed in your own PHP project\n\nHere's a quick example how you one can access the API directly without invoking\nthe CLI program.\n\nin your project's composer.json:\n\n```\n{\n    \"require\": {\n         \"dan-da\/hd-wallet-addrs\": \"0.2.0\"\n    }\n}\n```\n\nyourproject.php\n```php\nrequire_once 'vendor\/autoload.php';\n\n\/\/ normally a single xpub is used.  multiple can be provided for multisig key generation.\n$xpub_list = ['xpub6BfKpqjTwvH21wJGWEfxLppb8sU7C6FJge2kWb9315oP4ZVqCXG29cdUtkyu7YQhHyfA5nt63nzcNZHYmqXYHDxYo8mm1Xq1dAC7YtodwUR'];\n\n$params = walletaddrs::default_params();\n\/\/ modify params here if you need to.  see default_params() for keys.\n\n$wa = new walletaddrs($params);\n$data = $wa->discover_wallet_addrs( $xpub_list );\n\necho json_encode($data, JSON_PRETTY_PRINT);\n\n\/\/ or for fancier printing, you could use:\n\/\/ walletaddrsreport::print_results($wa->get_params(), $data);\n```\n\n\n# Thanks\n\nA big thank-you to the author of bitwasp\/bitcoin-php.  This library does the\nheavy lifting of dealing with deterministic keys and multisig, amongst other\nthings.\n\n# Todos\n\n* add option to return only Receive or Change instead of both.\n* test with additional wallet software.\n* Add bip39 support to obtain xpub from secret words.  maybe?\n* Add suitable API to btcd.\n","142":"<h1><p align=\"center\">Misocoin<\/p><\/h1>\n\n<p align=\"center\">\n    <img width=\"326\" height=\"326\" alt=\"misocoin logo\" src=\"https:\/\/i.imgur.com\/LURNf2q.jpg\" \/>\n<\/p>\n\nMisocoin is a _barebones_ bitcoin-like protocol implemented in Python 3.x. It was written as a challenge for myself to see if I could implement a bitcoin clone from scratch.\n\nThis project doesn't follow the [full bitcoin-protocol](https:\/\/en.bitcoin.it\/wiki\/Protocol_documentation), but rather implements a barebones version that (with enough nodes) can still act as a trust-less third party for storing and ensuring the integrity of arbitrary data.\n\n**WARNING: Misocoin is not production ready and should only be used as an educational tool.**\n\n## Quick start\n\n1. Make sure you're in a Python 3.x environment. I recommend using [miniconda](https:\/\/conda.io\/miniconda.html)\n2. `git clone git@github.com:kendricktan\/misocoin.git`\n3. `cd misocoin && pip install -r requirements.txt`\n4. To start the misocoin daemon, run\n\n```bash\n# To start it on localhost:4000 with a random private key\n.\/misocoind.py\n\n** [Welcome] Your misocoin address is 610d2657b8c4df8da493bbe0671e7406d2bee7a6\n * Running on http:\/\/localhost:4000\/ (Press CTRL+C to quit)\n\n# To start it on localhost:4001 with a specific private key\n# .\/misocoind.py -host=localhost -port=4001 -priv_key=60c8cb60c21143fffdd682f399ef3baa4b67c56a1f83a274284cfe7c57e007ed\n```\n\n5. Once you have the daemon running, you can interact with the daemon it via the API\n\n```bash\n.\/misocoin-cli.py get_info\n.\/misocoin-cli.py get_block <block_number>\n.\/misocoin-cli.py get_balance\n.\/misocoin-cli.py send_misocoin <to_address> <amount>\n\n# To specify which host and port the daemon is located at\n# .\/misocoin-cli.py -host=<localhost> -port=<4000> [methods [args..]]\n```\n\n6. To connect misocoin with other nodes, try running `.\/misocoind.py -nodes=host1:port1,host2:port2`. E.g:\n\n- Terminal 1:\n```\n.\/misocoind.py -port=4001\n```\n\n- Terminal 2:\n```\n.\/misocoind.py -port=4002 -nodes=localhost:4001\n```\n\n## What's in misocoin\n\n- [x] EDCSA\n- [x] Dynamic difficulty (based on network hashing power)\n- [x] Proof-of-Work\n- [x] Consensus\n\n## Todo?\n\n- [ ] Automatically prunes chain in favor of a longer chain\n- [ ] Persistent storage for blockchain (currently all in memory)\n- [ ] Separate out tx and block logic to fit in a set amount of txs in a block\n- [ ] Nicer exception handling\n- [ ] Enforce functional paradigm\n\n## FAQ\n\n- Who's miso?\n\nMiso is my cat. You can find out about him more on [his instagram page](http:\/\/instagram.com\/mr.miso.oz\/).\n\n- Why did you make this?\n\nI made it to understand more about bitcoin. Jks. I made it for Miso's birthday (15 December). I love my cat.\n\n- Can I have a picture of your cat in a taco outfit?\n\nSure\n\n<p align=\"center\">\n    <img width=\"434\" height=\"326\" alt=\"misocoin logo\" src=\"https:\/\/i.imgur.com\/l7e4wvk.jpg\" \/>\n<\/p>\n\n","143":"# BitPoker.IO\n\n## Abstract\nInspired by OpenBazaar.com, the goal of the project is to design a peer to peer protocol of turn based games, such as online poker, in which no central actor can control the outcome and thus rig the game and is provably fair.  The game uses bitcoin (or other digital tokens) and lightning network to settle bets between actors, and a blockchain to persist the state of the game.\n\nMost blockchains are too slow for turned based games, but not all turns need to persisted back to the blockchain.  For example, in poker, turns can be stored in memory on clients as \"mini chains\".  Only when the outcome of the game is required such as awarding the pot, is the data required to be persisted back to the blockchain.  Furthermore, players could agree this could be a higher cadence, such as each orbit, to save on fees.\n\nIts hoped, that different clients developed in different programming languages will be built.\n\n### Notation & Conventions\n\nIds should be represented as GUIDs, and be in lower case\nAll values represented in base16 (hex) should be lower case\nBitcoin addresses are used the the player identifier\nTime stamps are EPOCH\nTime durations are in seconds\nAmounts should be in smallest crytocurrency unit, such as Satoshis for Bitcoin\n\n### Enumerations \nDeck is represented as an array of bytes.\n\n| Key  | Value | Decimal | Byte |\n| -----|------ | --------|----- |\n| A  | Ace  | 12 | {0x0C} |\n| K  | King  | 11 |{0x0B}|\n| Q  | Queen | 10 |{0x0A}|\n| J  | Jack  | 9 |{0x09}|\n| T  | Ten | 8 |{0x08}|\n| 9 | 9 | 7 |{0x07}|\n| 8 | 8 | 6 |{0x06}|\n| 7 | 7 | 5 |{0x05}|\n| 6 | 6 | 4 |{0x04}|\n| 5 | 5 | 3 |{0x03}|\n| 4 | 4 | 2 |{0x02}|\n| 3 | 3 | 1 |{0x01}|\n| 2 | 2 | 0 |{0x00}|\n\nSuites\n\n| Key  | Value | Offset | Byte |\n| ---- | ----- | ------ | ---- |\n| S  | Spade  | +0 | {0x00} |\n| C  | Club | +13 | {0x0D} |\n| H  | Heart | +26 | {0x1A} |\n| D  | Diamond  | +39  | {0x27} |\n\n\\*Eg\nAce of clubs = { 0x0D }\n\nCrypto Currencies\nBTC Bitcoin\nETH Ethereum\nETC Ethereum Classic\n\n### Poker terminology\n- SB = Small Blind\n- BB = Big Blind\n\n### Example Keys (Address, Public Key (Not compressed), WIF Private Key)\n*Alice* \n- msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv \n- 041FA97EFD760F26E93E91E29FDDF3DDDDD3F543841CF9435BDC156FB73854F4BF22557798BA535A3EE89A62238C5AFC7F8BF1FA0985DC4E1A06C25209BAB78BD1 \n- 93Loqe8T3Qn3fCc87AiJHYHJfFFMLy6YuMpXzffyFsiodmAMCZS\n\n*Bob* \n- mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo \n- 04F48396AC675B97EEB54E57554827CC2B937C2DAE285A9198F9582B15C920D91309BC567858DC63357BCD5D24FD8C041CA55DE8BAE62C7315B0BA66FE5F96C20D \n- 91yMBYURGqd38spSA1ydY6UjqWiyD1SBGJDuqPPfRWcpG53T672\n\n*Witness* \n- mq1Ctw6xTcomjGgQz5pi8oXdR1tjjZQHYs\n- 04C82B8E2D6EA7F17665C4A1070F340E84D4C02DA72AE5018574001841C10E8009A04E2C333D3EB90102E71B324BFE595430D4C654BBFF0F66EDBFE63798C7A271\n- 93C4fbYtv8VXWDnbJLzQiVfBGuQgfz1hBF1QwQeJxQepe9oE876\n\n\\*2 of 3 address\n2NCSTuV27SC1BF122Xe1wmkNkjo4MJw4W85\nhttps:\/\/testnet.blockexplorer.com\/address\/2NCSTuV27SC1BF122Xe1wmkNkjo4MJw4W85\n\n*Redeem Script* 524104c82b8e2d6ea7f17665c4a1070f340e84d4c02da72ae5018574001841c10e8009a04e2c333d3eb90102e71b324bfe595430d4c654bbff0f66edbfe63798c7a2714104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d4104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d53ae\n\n\\*2 of 2 address\n2MtFGSjUn1FLhwgyf7gAaX3n1wCg29B4wvh\n\n*Redeem Script*\n5241041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd14104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d52ae\n\nCreated from http:\/\/ms-brainwallet.org\n\nhttps:\/\/coinb.in\/?verify=524104c82b8e2d6ea7f17665c4a1070f340e84d4c02da72ae5018574001841c10e8009a04e2c333d3eb90102e71b324bfe595430d4c654bbff0f66edbfe63798c7a2714104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d4104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d53ae#verify\n\n\n## The protocol\nEach client connects to one another in the \"lobby\".  They can then look for players who are looking to start a game, or request to join a running game.  Messages are sent to all players, signed, and referencing the existing message.  Thus like a block chain of messages.\n\n- Table reaches consensus on who\u2019s turn to act based off the game contract\n- Table reaches consensus on the legal moves \/ actions a player can make\n- Table waits for a signed message from that player\n- All other players validate that message\n- Repeat\n\n### Valid methods (See below for sample messages)\nMethods are of two types.  Game play \/ action messages that determin a players turn intent.  Methods that do not, such as join a table.\n\nNon action methods\n- Join\n- BuyIn\n- Deal\n- Quit\n- SitOut\n- Shuffle\n- Leave\n\nAction methods\n- SmallBlind\n- BigBlind\n- Call\n- Bet\n- Raise\n- Fold\n- Muck\n\n### Overview\nIf the game is to be developed using Ethereum contracts:\n\n1.  The game is defined as an Ethereum contract\n2.  Players agree to the table contract\n3.  Each players actions are defined as inputs for the hand contract\n4.  After the hand has ended, each player verifies the integrity of the hand contract.  Its in everyones best interest to verify correctly [Game Theory Citation]\n5.  The hand message chain is then executed on the Ethereum network for the pot to be awarded\n\nLess use of Ethereum\n\n1.  Players connect to each other via a P2P network protocol.\n2.  A player either looks to join a table and reviews the contract.\n3.  A player can choose to start a table be defining a table contract.\n4.  Tables should also broad cast their game, status and number of current .players to other tables for better network propagation.\n5.  Leaving the table (closing the channel)\n6.  Lightning network will facilitate micro payments \"off chain\".  The table can agree to bring them \"on chain\" after n hands are dealt.\n\n### Aside:  Lightning Network\n\n*How it Works.* \n\nFunds are placed into a two-party, multi signature \"channel\" bitcoin address. This channel is represented as an entry on the bitcoin public ledger. In order to spend funds from the channel, both parties must agree on the new balance. The current balance is stored as the most recent transaction signed by both parties, spending from the channel address. To make a payment, both parties sign a new exit transaction spending from the channel address. All old exit transactions are invalidated by doing so.\n\nThe Lightning Network does not require cooperation from the counterparty to exit the channel. Both parties have the option to unilaterally close the channel, ending their relationship. Since all parties have multiple multi signature channels with many different users on this network, one can send a payment to any other party across this network.\n\nBy embedding the payment conditional upon knowledge of a secure cryptographic hash, payments can be made across a network of channels without the need for any party to have unilateral custodial ownership of funds. The Lightning Network enables what was previously not possible with trusted financial systems vulnerable to monopolies\u2014without the need for custodial trust and ownership, participation on the network can be dynamic and open for all.\n\n[https:\/\/lightning.network\/lightning-network-summary.pdf]\n\n## Game as a contract\nIn the below *table contract* the below game Texas Holdem is defined as an Enum.  The whole rules of the game could be defined as a contract, thus allowing anyone to develop variations of the game, such as the \"Seven Duce\" rule, other variations of poker such as Omaha or even other games.  \n\nThese are out side the scope of this paper.\n\nRopsten keys (in folder)\nMyEtherWallet password Test12345\nPrivate Key bbbe14b22e95f7d48a1b1268d27440078fdfd29183d00102319a61b3ba5b8511\nAccount 0x736060769FfE0fFB6e1799A06B2F5633ABAb53E0\n\n## Messages\nAll actions are sent as JSON RPC.  They must include a public key hash and be signed.  The payload must also reference their previous message hash.\n\n1.  Concatenate the payload the values\n2.  Hash the payload of step 1\n3.  Sign the output of step 2\n\nGeneral message object as a JSON RPC param\n\n| Property | Eg |\n| -------- | -- |\n| Version | Message Version |\n| Id | GUID |\n| Bitcoin Address (Public Key Hash) | msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv |\n| Method | Enum (TABLE, ACTION, BUYIN, SHUFFLE, DECK) |\n| Payload Hash | SHA256 |\n| Message Signature | TODO |\n| Pervious Hash | TODO |\n\nExample action message (payload)\n\n| Property  | Eg |\n| --------- | -- |\n| Id | 47b466e4-c852-49f3-9a6d-5e59c62a98b6 |\n| Bitcoin Address (Public Key Hash) | msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv |\n| Index | 2 |\n| Action | CALL 5000000 |\n| TX | TODO |\n| Previous Hash | TODO |\n| Time stamp | 2016-08-17 00:00:00 |\n\n\nEg in Json\n```\n{\"TableId\":\"bf368921-346a-42d8-9cb8-621f9cad5e16\",\"HandId\":\"398b5fe2-da27-4772-81ce-37fa615719b5\",\"Index\":2,\"Action\":\"CALL\",\"Amount\":5000000,\"Tx\":null,\"PreviousHash\":\"8ab9f91c002d8ccdbd8a49f7e028d27ca6ef01cf1fdaa4eca637868d8e4adf31\",\"HashAlgorithm\":\"SHA256\",\"Version\":1.0,\"BitcoinAddress\":\"msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\",\"TimeStamp\":\"2016-08-17T00:00:00\"}\n```\n\nSHA-256 hash of the JSON RPC method\n```\ncb19bc14bca61bee174e5d6591530ad72b3ab58e0c5a904baec5b5de85c65e88\n```\n\n## Sample messages\n### Buy In\n```\n```\n\n### Call\n```\n```\n\n## Adding a Table Contract\nA client will define the table contract and store that locally.  They become the table starter and thus define the conditions of that game.  The parameters for a table are defined in the following schema.  Developers are encouraged to create their own algorithms, such as voting or anti-collusion.\n\n1.  Encryption Algorithm (Enum AES-256)\n2.  Hash Algorithm (Enum SHA-256)\n3.  Id (GUID)\n3.  Currency (Enum)\n3.  Blinds\n4.  Rake\\*\n5.  Min players\n6.  Max players\n7.  Game type (Enum, No Limit Texas Holdem) \\*\n8.  Other (straddles, \"run it twice\") \\*\n9.  Channel Address \/ multisig\n10.  Consensus Algorithm\n11.  Anti Collusion Algorithm \/ Contract\n12.  Version\n13.  Voting Algorithm \/ Contract\n14.  Channel Address\n\n* Perhaps an entire contract\n\n*Example xml serialziation*\n```\n<Message Verion=\"1\" Type=\"Table\">\n  <PubKeyHash><\/PubKeyHash>\n  <Table Id=\"bf368921-346a-42d8-9cb8-621f9cad5e16\" AddressType\"2-2\">\n    <Encryption>AES-265<\/Encryption>\n    <Hash>SHA-256<\/Hash>\n    <Currency>BTC<\/Currency>\n    <Blinds>\n      <SmallBlind>100000<\/SmallBlind>\n      <BigBlind>200000<\/BigBlind>\n    <\/Blinds>\n    <BuyIn>\n      <Min>10000000<\/Min>\n      <Max>50000000<\/Max>\n    <\/BuyIn>\n    <Game>\n      <Type>Texas Holdem<\/Type>\n      <Limit>No Limit<\/Limit>\n    <\/Game>\n    <Clock>30<\/Clock>\n    <TimeOuts>120<\/TimeOut>\n    <Version>0.0.1<\/Version>\n  <\/Table>\n  <MessageSignature><\/MessageSignature>\n<\/Message>\n```\n\n```\n{\n  table : {\n    id : \"bf368921-346a-42d8-9cb8-621f9cad5e16\"\n    encryption : \"AES-256\",\n    hash : \"SHA-256\",\n    currency : \"BTC\",\n    blinds : {\n      small : 100000,\n      big : 200000\n    },\n    buyIn : {\n      min : 10000000\n      max : 50000000\n    }\n\n  }\n}\n```\n\n## Joining a Table\nUsers send their intent to join a table by the JoinTable method.  This is analogous choosing a seat and sitting down at the table.  Once the table reaches the maximum amount of players, or the players vote to start the table, a multi signature address is created.  The required signatures are part of the agreed table contract.\n\n```\n{\n  method : \"JoinTable\",\n  version : 1\n  params {\n      publicKey : \"04F48396AC675B97EEB54E57554827CC2B937C2DAE285A9198F9582B15C920D91309BC567858DC63357BCD5D24FD8C041CA55DE8BAE62C7315B0BA66FE5F96C20D\",\n      minStart : 2\n  }\n}\n```\n\nResponse\n```\n\n```\n\n## Buying in\nAll players buying in open a lightning payment channel with the multi signature address of the table.  Players must add BTC within the range for the table contract (MinBuyIn, MaxBuyIn)\n\n\"Through this network of interconnected payment channels, Lightning provides a scalable, decentralised micropayments solution on top of the Bitcoin blockchain.\" [https:\/\/lightning.network\/lightning-network-technical-summary.pdf]\n\n## Witness nodes\nGame witness can also be allowed or chosen to arbitrate a game.  The witness could also help network propagation.  A witness would be choose by the table starter and a small rake paid to the witness.\n\nThere might become a market for reputable witnesses based off a HTTPS DNS endpoint and earn small revenues for witnessing hands.\n\n### Process\n1.  Alice and Bob create a 2 of 2 address\n2.  Alice creates a deposit transaction\n3.  Bob creates a deposit transaction\n4.  Alice creates a refund transaction but does not broadcast\n5.  Bob creates a refund transaction but does not broadcast\n\n\\*2 of 2 Redeem Script and Address for Alice and Bob\n```\n2 041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba53\n5a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1 041fa97efd760f26e93e91e29fd\ndf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa098\n5dc4e1a06c25209bab78bd1 2 OP_CHECKMULTISIG\n\n2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\n```\n\n### Funding TXs\nBoth Alice and Bob now deposit their buy in to the address 2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi.  Note:  The table contract could include a minimum confirmation count.\n\nAlice tx  f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\nBob tx c60193a33174a1252df9deb522bac3e5532e0c756d053e4ac9999ca17a79c74e\n\n\\*Sample C# NBitcoin code\n```\nconst String alice_wif = \"93Loqe8T3Qn3fCc87AiJHYHJfFFMLy6YuMpXzffyFsiodmAMCZS\";\n\nNBitcoin.BitcoinSecret alice_secret = new NBitcoin.BitcoinSecret (alice_wif, NBitcoin.Network.TestNet);\nNBitcoin.BitcoinAddress alice = alice_secret.GetAddress ();\n\n\/\/Create 2 of 2\nNBitcoin.Script table = NBitcoin.PayToMultiSigTemplate\n                        .Instance\n                        .GenerateScriptPubKey(2, new[] { alice_secret.PubKey, alice_secret.PubKey });\n\nConsole.WriteLine(table);\nConsole.WriteLine(table.Hash.GetAddress(NBitcoin.Network.TestNet));\n\nNBitcoin.IDestination msigAddress = table.Hash.GetAddress(NBitcoin.Network.TestNet);\n\nvar blockr = new NBitcoin.BlockrTransactionRepository(NBitcoin.Network.TestNet);\nNBitcoin.Transaction transaction = blockr.GetAsync(new NBitcoin.uint256(\"f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\")).Result;\n\nNBitcoin.Coin[] aliceCoins = transaction\n                        .Outputs\n                        .Select((o, i) => new NBitcoin.Coin(new NBitcoin.OutPoint(transaction.GetHash(), i), o))\n                        .ToArray();\n\nvar txBuilder = new NBitcoin.TransactionBuilder();\n\nvar tx = txBuilder\n    .AddKeys(alice_secret.PrivateKey)\n        .AddCoins(aliceCoins)\n        .Send(msigAddress, new NBitcoin.Money(50000000))\n        .SetChange(alice)\n        .SendFees(NBitcoin.Money.Coins(0.001m))\n        .BuildTransaction(true);\n\nBoolean ok = txBuilder.Verify(tx);\n\nConsole.WriteLine(tx.ToHex());\n```\n\n\\*Raw TX Alice buy in of 0.5 BTC\n```\n0100000001a3022171e04852a4530ec4c3518cd7e219801a53b7de8724c59fcbf008e0c5f5000000\n008b483045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc\n02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b40141041fa97e\nfd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62\n238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1ffffffff02e069f902000000001976a914822f\n3782f8d0357cb6fc7b4c5cfc1424b3f0100988ac80f0fa020000000017a914348de5f6c91078c128\n4956a88a9322be8d2834148700000000\n```\n\n\\*In JSON\n```\n{\n  \"txid\": \"0e7ae471ffd578c64b142c232f36c3f7810e1fcb2e31b8c1b02f4c61c07859dc\",\n  \"size\": 256,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"3045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b4[ALL] 041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1\",\n        \"hex\": \"483045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b40141041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 0.499,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 822f3782f8d0357cb6fc7b4c5cfc1424b3f01009 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914822f3782f8d0357cb6fc7b4c5cfc1424b3f0100988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\"\n        ]\n      }\n    },\n    {\n      \"value\": 0.5,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_HASH160 348de5f6c91078c1284956a88a9322be8d283414 OP_EQUAL\",\n        \"hex\": \"a914348de5f6c91078c1284956a88a9322be8d28341487\",\n        \"reqSigs\": 1,\n        \"type\": \"scripthash\",\n        \"addresses\": [\n          \"2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\"\n        ]\n      }\n    }\n  ]\n}\n```\nWhich yields transaction id 0e7ae471ffd578c64b142c232f36c3f7810e1fcb2e31b8c1b02f4c61c07859dc\nBobs transaction id d74b4bfc99dd46adb7c30877cc3ce7ea13feb51a6fab3b9b15f75f4e213ac0da\n\nThe address 2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi now contains 1btc https:\/\/testnet.blockexplorer.com\/address\/2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\n\n*Sample opening lightning channel in c# \/ NBitcoin*\n```\nTODO\n```\n\n### Create the refund transaction\nAlice and Bob must also create a refund transaction to themselves, but *not* broadcast it.\n\n## Game play\nThe dealer's client is responsible for the orchestration of the game.  As the dealer position rotates, this isn't a centralisation risk.  The intent is to limit network traffic.\n1.  Define the hand contract\n2.  Shuffle the deck\n3.  Post blinds\n4.  Pre flop round\n5.  Deal the flop\n6.  Post flop round\n7.  Deal the turn\n8.  Post turn round\n9.  Deal the river\n10.  Post river round\n11.  Award the pot\n\n### Hand Contract\nAt the start of each hand, the dealer defines the hand contract which references the table contract.  \n\n1.  The players and seat positions\n2.  The stack of each player\n3.  A ID as a GUID\n\n\\*Example hand contract serialised in XML Download from test data folder\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ArrayOfActionMessage xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\">\n  <ActionMessage>\n    <Version>1<\/Version>\n    <Id>47b466e4-c852-49f3-9a6d-5e59c62a98b6<\/Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv<\/BitcoinAddress>\n    <Signature>HEVF2mU1K0MmgeaP\/zlxjCDkgbz43I638QaWwM\/ipcrfWbSZwfx96MDxcqDr3dTBzzKMr9EnNqBjJlIQLk6Tdmg=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:00<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>0<\/Index>\n    <Action>SMALL BLIND<\/Action>\n    <Amount>50000<\/Amount>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1<\/Version>\n    <Id>a29bc370-9492-4b60-ad4f-7c7513064383<\/Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo<\/BitcoinAddress>\n    <Signature>HATytRG1kIsPUVxELt7\/m40EwCn4ryaV2p6Xmr38rijmAsm3pra8vvRPipNdYzAF5fgNr8HuLKZH2wUkpvEJ8CM=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:10<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>1<\/Index>\n    <Action>BIG BLIND<\/Action>\n    <Amount>100000<\/Amount>\n    <PreviousHash>be0c3991bdc569a94e57bec2afbfc7a8283be8c85ab16bb6e009d6f73270f7a0<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>e299ebc5-b50f-425e-b839-cb69ef69a12e<\/Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv<\/BitcoinAddress>\n    <Signature>HFJTeey5K6yOyeapiuDelM4WANsHM+CK3etYO8d8qCGlKiMLo9rygkvTGDF\/vF3gyMYoK5jVx6\/yKgW3yJF5hnc=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:20<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>2<\/Index>\n    <Action>CALL<\/Action>\n    <Amount>50000<\/Amount>\n    <PreviousHash>5739b2f4d3a1fceb7dfaa644e9a392105bccbb1fe17ea00e4979a124f28d81e9<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>54c5c3c1-306a-4f1b-863c-aba29b22cb5c<\/Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo<\/BitcoinAddress>\n    <Signature>HJmu7k8u\/xDZ1q8U4Kn2a9NGciOfj7oES35VMKoSOC2KJlZuFJ19hxGjV5ARetHG5CjT2QvKEbgfeIM2S+1ye6g=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:30<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>3<\/Index>\n    <Action>CHECK<\/Action>\n    <Amount>0<\/Amount>\n    <PreviousHash>76cbd60a3ac4f3883cf4c5fdc60a8c791856796867dcc16849e102e4d462a793<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>0e9053eb-288c-44be-81e0-d6ad57e42ded<\/Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv<\/BitcoinAddress>\n    <Signature>GyDFY\/a2DGEHGpsIDuk+TNWotI4eoFFFGcw2Lc+9DageAdRr0E8QTuZIhz6pB5kLMkqcPOiKoF71HT5HPLeCxk8=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:40<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>4<\/Index>\n    <Action>BET<\/Action>\n    <Amount>100000<\/Amount>\n    <PreviousHash>6f71c283fd37a916f99386050b7a3e56f66c86f9def153bdd332bab85f226c0a<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>93cae6c4-4dbf-4d5d-8df1-bf7e0d6baa71<\/Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo<\/BitcoinAddress>\n    <Signature>HJ4MSISqKn5PogbvqpQ1Iz7gNBOaXCUbtKOR6scYk7j6aVSOVlzXQeS+ZzE49+PSSzR3aqIYArNgelhWRPSTdPI=<\/Signature>\n    <TimeStamp>2016-08-17T00:00:50<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>5<\/Index>\n    <Action>CALL<\/Action>\n    <Amount>50000<\/Amount>\n    <PreviousHash>ece153165e2e9e45f1789062470a4cd3c0df7b6fbdfe84b3e52d34b3994a302c<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>3ea0a3de-2595-476f-b1b4-20d37fc25197<\/Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv<\/BitcoinAddress>\n    <Signature>G6skQA8KhDJV0FHIh\/UzPs4TjiCRQNwYlqGcHO19f2bmGbijpo3t2\/L0ebzrHtHePsNjJyYuvsnomf2tvTt3CPQ=<\/Signature>\n    <TimeStamp>2016-08-17T00:01:00<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>6<\/Index>\n    <Action>BET<\/Action>\n    <Amount>50000<\/Amount>\n    <PreviousHash>ca980720b8c753d56a65ec045d45b2b1344fdc423c66b566e170c68894d2998d<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n  <ActionMessage>\n    <Version>1.0<\/Version>\n    <Id>52cf418b-3b8b-4d91-b2fb-35d7a9ee0d1f<\/Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo<\/BitcoinAddress>\n    <Signature>G81CNbTkcipasZ9BZg5RwQyR\/55uV7cq+kWehcJ0IxfHAMypuyQVSGR9EY\/5RqD\/E4ttBe7uDU2mfMYKI3LVW14=<\/Signature>\n    <TimeStamp>2016-08-17T00:01:10<\/TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16<\/TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>7<\/Index>\n    <Action>CALL<\/Action>\n    <Amount>50000<\/Amount>\n    <PreviousHash>4320831c682de22a1074751c1a7d8c833dc3f2d268cd775d1ee924eccd04c34d<\/PreviousHash>\n    <HashAlgorithm>SHA256<\/HashAlgorithm>\n  <\/ActionMessage>\n<\/ArrayOfActionMessage>\n```\n\n### The Shuffle\nIn this example, we will use a \"Heads up\" game of No Limit Texas Holdem.  In this case the hand contract defines Alice is the dealer, Bob the small blind, and Alice the big blind.\n\n- Alice = msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\n- Bob = mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo\n\nThe deck is represented by an array[52] of bytes.  See lookup table.\n\n- Card[0] = AH\n- Card[1] = KH\n- Card[2] = QH\n- Card[3] = JH\n...\n- Card[51] = 2C\n\n### Encrypting the deck\nThe deck needs to be encrypted using a commutative algorithm, such as RSA.  Alice shuffles the deck and does not disclose the un-encrypted result.\n\n- Card[0] = AC\n- Card[1] = 3S\n- Card[2] = AH\n- Card[3] = 2S\n\nCreate an array of 52 private keys, 16 bytes represented as base64.  These do not leave Alices computer.  \\*See test data for full set.\n- Key[0]=ro4So+aeT6VJt9\/OKTa\/Ag==\n- Key[1]=GcL2OvzsDg54RIZZ5ruMFA==\n- Key[2]=HEKFpbtQnjl715X5P+8Y8g==\n- Key[3]=2cXOWr\/IQcJ\/AyqhF\/W\/jg==\n\n\\~\\~Each card is double encrypted.  First round of encryption with the hand key.  In the example key = HBFwc\/qnlFqkxwiXTmNkXw== (1c 11 70 73 fa a7 94 5a a4 c7 08 97 4e 63 64 5f) in hex.\\~\\~\n\n- Card[0]=\n- Card[1]=\n- Card[2]=\n- Card[3]=\n\nThen each card is encrypted again with the matching key and represented as base64.  Eg, card[0] is encrypted with key[0]\n- Card[0]=\n\n#### Alice sends the deck to Bob\nAs the deck is encrypted, and assumed shuffled, Bob has no way to known the contents of the deck.  Bob the encrypts the deck again and shuffles, and sends the result back to Alice.\n\n*Example message in xml*\n```\n<Message Version=\"1\">\n  <Deck>\n    <Card Index=\"0\"><\/Card>\n    <Card Index=\"1\"><\/Card>\n    ...\n    <Card Index=\"51\"><\/Card>\n  <Deck>\n  <Signature><\/Signature>\n<\/Message>\n```\n\n\\*Note:  The deck could also be shuffled by a witness.\n\n### Post blinds\nIn our example, Bob is SB and Alice is BB.  Using the lightning proposal, Bob creates an unsigned TX of 0.001 to Alice.  \n\n```\n```\n\nEg SB message in XML\n```\n```\n\n### Pre flop\nWe know how the distribution of cards that will be dealt.  In Holdem, each card is dealt one at a time, starting left of the dealer (small blind) [Citation 1]\n\n- Card[0] =\\> Bob\n- Card[1] =\\> Alice\n- Card[2] =\\> Bob\n- Card[3] =\\> Alice\n\n- Alice -\\> Action request message to Bob.\n- Bob -\\> Returns signed action message to Alice\n- Alice -\\> Checks signature, and adds action response to the block\n- Alice -\\> Broadcasts the concatenated block to all players\n- All players -\\> Verify the block and signature\n- All players -\\> Return verification message\n\n*TODO: CREATE SEQUENCE DIAGRAM*\n\n### Flop, Turn and River\nThe client software co-ordinates the game, based off agreed game rules. \n\n1.  Enforces action rules of its own player, such as check, bet or fold\n2.  If the action involves money, creates the tx\n3.  Creates a signed message and broad casts to each player\n4.  Waits for next action message\n5.  Validates the message\n\n*Example action message from Bob serialzed in XML.  A call from the small blind.*\n```\n<Message Version=\"1\">\n  <Action Position=\"1\" Address=\"mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo\">\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5<\/HandId>\n    <Index>2<\/Index>\n    <Action>CALL 10000<<\/Action>\n    <Tx>0100000001a3022171e04852a4530ec4c3518cd7e219801a53b7de8724c59fcbf008e0c5f5000000\n008a47304402205530f19e6cad5f2f4e04a92c3d4438907ac29a4ab50e6861088d2ad9e59ee61002\n20134b57cce3157f0ccaf47d9928d85713611062521900941460d677ccc884da20014104f48396ac\n675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24\nfd8c041ca55de8bae62c7315b0ba66fe5f96c20dffffffff0380c6ef05000000001976a9141518ab\nb3523718f0231c7c6239a8e5887a4360c888aca08601000000000017a914348de5f6c91078c12849\n56a88a9322be8d28341487a08601000000000017a914348de5f6c91078c1284956a88a9322be8d28\n34148700000000<\/Tx>\n    <PreviousHash Algorithm=\"SHA256\">d4f235a5f120224ca290c8bd76ba182db67873c04bfddffe13355a0f752f7b37<\/PreviousHash>\n  <Action>\n  <Hash Algorithm=\"SHA256\">68b4f0c0955cc947aaf179d212aa80848d7dc41c5ac845447bb504ad595bb8e9<\/Hash>\n  <Signature>G3m66hVXe+gfbkDRS\/0MNd6Sxp+Tem7i2czVNdt+aTdQXP7sUrHVOYwDX\/70qywfKjEZKPr\/FJ4n1kJPZKSHlSI=<\/Signature>\n<\/Message>\n```\n\n### Award the pot. (Post hand consensus)\nOnce the hand has been played, the table then reaches consensus.  The signed game history could then be persisted into an Ethereum block chain referencing previous hands.  \n\nFee vs Payouts.  The table would also include a parameter when to commit the hand, or hand history, to a chain.  The more frequently it is done the more fees it will incur. \n\n## Cashing out\nClosing the channel\n\n## Sample hands\nTo be used via the mock API.\nTable ID = 04dd3def-a654-4995-97e4-a1d151ef18ad\nHand ID = ce364246-6c52-40e8-a35f-18a1ea519251\n\nPlayers (in seats)\n2. Daniel my8qxmUcTMGpwaLr5SsGsDwXpv78BGmVuL \n3. Chris n4oaGy1uBZ4J4Pge7ZaGgbRRcJ9795dfdE\n4. Tony mmbC1Gs1oGSwoT8F8VLQcwmLrNTV5DdajA\n5. Phil mgXqH7yA6Djx5Wqpaspsw25mNLTx2yaPeB\n6. Mike mre7fKPYqyKjACfb74rSjVNubE9ZX3t7Cb\n7. Tom mxeHrRd239QgwYZtEtNo8eGrnmGeDbCFPB\n9. Gus mkcuSxhM5F76vzbAXyhXayXUw4sTitJXhc \\* Button\n\nThe hand is decribed in Poker Stars Hand History format.\n```\nPokerStars Hand ce364246-6c52-40e8-a35f-18a1ea519251:  Hold'em No Limit (0.0005\/0.001 BTC) - 2015\/09\/10 7:13:56 ET\nTable 04dd3def-a654-4995-97e4-a1d151ef18ad 9-max Seat #9 is the button\nSeat 2: Daniel (0.01 in chips) \nSeat 3: Chris (0.01 in chips) \nSeat 4: Tony (0.01 in chips) \nSeat 5: Phil (0.01 in chips) \nSeat 6: Mike (0.01 in chips) \nSeat 7: Tom (0.01 in chips) \nSeat 9: Gus (0.008 in chips) \nDaniel: posts small blind 0.0005\nChris: posts big blind 0.001\n*** HOLE CARDS ***\nAvtovo joins the table at seat #8 \nTony: folds \nPhil: folds \nMike: folds \nTom: raises 0.00126 to 0.0026\nGus: folds \nDaniel: calls 0.00176\nChris: calls 0.00126\n*** FLOP *** [9h Td 6h]\nDaniel: checks \nChris: checks \nTom: bets 0.00485\nkoksskrt joins the table at seat #1 \nDaniel: calls 0.00485\nChris: calls 0.00485\n*** TURN *** [9h Td 6h] [Qh]\nDaniel: checks \nChris: checks \nTom: checks \n*** RIVER *** [9h Td 6h Qh] [Th]\nDaniel: checks \nChris: bets 0.006\nTom: folds \nDaniel: folds \nUncalled bet (0.006) returned to Chris\nChris collected 0.02037 from pot\nChris: doesn't show hand \n*** SUMMARY ***\nTotal pot $21.33 | Rake $0.96 \nBoard [9h Td 6h Qh Th]\nSeat 2: Daniel (small blind) folded on the River\nSeat 3: Chris (big blind) collected (0.02037)\nSeat 4: Tony folded before Flop (didn't bet)\nSeat 5: Phil folded before Flop (didn't bet)\nSeat 6: sylvian31 folded before Flop (didn't bet)\nSeat 7: Tom folded on the River\nSeat 9: Gus (button) folded before Flop (didn't bet)\n```\nPrivate Keys\n2. Daniel 92DurEQEwd5KR4BjeaLfK3xuuSiQEWNc8R3szPH1VM5XorMa3eq \n3. Chris 92ZY3DxX8h9wpueDwSzD8YWKXCi1YT9yrvYDVhfnbqXgCvKQmX6\n4. Tony 92WmrGTyfW6uvZdzy7TsoARwtg9QpzNvxz31UTeoD2WSgSLQHHg\n5. Phil 92Q53JuV5L3ehi2ML4CbwWAhGrAJUAd2jc39yke4bqqW1XUpgQx\n6. Mike 92rXYx7owd2AgUiJZzDUJrNy4EBD92y1x6JSQBiSHkKD6PdL9Zt\n7. Tom 91qV38Xgc2KS5zNJfXfi9rK36FUS14yoFPE9iaEpmHckFLCWsTX\n9. Gus 92GD9YDCT4koimj3nBQ2gcLZbxdHdkcLPboBjibjJAhP5Gks8An\n\nThe above hand as a message chain.\n```\n\n```\n\n## Network Topology\n\n### Dealing with disconnects\n\n## Test Data\n- Alice keys\n- Bob keys\n- Sample hand XML\n- Sample hand JSON\nFor full key set, see the test data folder\nCold deck from https:\/\/www.benjoffe.com\/holdem\n\n### Mock API\nAn REST API is located at https:\/\/www.bitpoker.io\/api for users to develop clients against.  The API returns mock data to develop against.\n\n| Verb  | Uri |\n| ------------- | ------------- |\n| GET | \/Peers |\n| GET | \/Players |\n| GET | \/Players\/bitcoinaddress |\n| GET | \/Tables |\n\n### Ethereum public \/ private keys for testing (Ropsten)\nKey 1\n{\"version\":3,\"id\":\"3a09b190-c942-4165-be3f-3006a47efdde\",\"address\":\"49f88ab85d38d2465b1450c0488acf193404a3af\",\"Crypto\":{\"ciphertext\":\"765c4b8f0c9f4ea1dd3b38d38e6279134d981e2e5d2f55118cdb0a1e68f23698\",\"cipherparams\":{\"iv\":\"9e87c9faa4b95ad0c457c69767aca715\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"fc76f22df1e42b2a5d9513eb7516523fd96734868b8c1344d33a385f27c93a22\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"4a9515fcc274e7041f8e6f25d2afb92c3e6a55b69b7b14a56df42cb06f3f6a07\"}}\n\n07f9f3506231416d4ea1ce35d2eeb8b73195d1b70553b093ca55923fedcfab51 Private Key\n0x49F88Ab85D38D2465b1450C0488aCf193404a3aF Address\n\nKey 2\n{\"version\":3,\"id\":\"7147b6ec-d44a-43bb-bdd7-491f280d0344\",\"address\":\"a633a412221768286a119c1f006b4fdf97d6d28a\",\"Crypto\":{\"ciphertext\":\"7267e69116649e3f31a6cdc6b77fa3aa201716ad2814e4b8ff6b84b3580bb4f0\",\"cipherparams\":{\"iv\":\"31f590b012ac8227474244f51880646d\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"fc75d6b6bfac5147d19a7b1e3db8bd45d14556a625791901b78b5804e4004ea3\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"68751ea2f21168e3dfc6ed30414410520722b94e04c1aa4f639852ad498d5243\"}}\n\n9e96ec45d19bbca257489059992be96b221aaba590c25c24caa857eabae8854a Private Key\n0xA633a412221768286A119C1F006b4fDf97D6D28A Address\n\nMultisig Wallet\n0x13340072363a2e6a8C46f268aF9d8dBee22cFb0c\n\nICO Test Account (Ropsten)\n0x13340072363a2e6a8C46f268aF9d8dBee22cFb0c \n\n### Ethereum public keys (Mainnet)\n0xB5dCFf27Ea5BC5BdBDe31e73E9466a7FdD3043Cf\n\n\n\n## References\n1. https:\/\/lightning.network\/lightning-network-paper.pdf\n2. http:\/\/www.pokerlistings.com\/poker-rules-texas-holdem\n3. http:\/\/ianpurton.com\/online-pgp\/\n4. http:\/\/www.codeproject.com\/Articles\/835098\/NBitcoin-Build-Them-All\n5. https:\/\/www.benjoffe.com\/holdem\n6. http:\/\/ms-brainwallet.org\n7. http:\/\/json-rpc.org\/wiki\/specification\n8. https:\/\/msdn.microsoft.com\/en-us\/library\/bb756931.aspx?tduid=(fc4ef1dccc45eb37dfbbbf748821ac83)(256380)(2459594)(TnL5HPStwNw-fIrr3XMwfP4kdvb3oN5V_A)()\n9. http:\/\/www.nongnu.org\/libtmcg\/MentalPoker.pdf\n10. https:\/\/people.csail.mit.edu\/rivest\/ShamirRivestAdleman-MentalPoker.pdf\n11. http:\/\/www.nongnu.org\/libtmcg\/WEWoRC2005_proc.pdf\n12. http:\/\/www.cs.technion.ac.il\/~ranjit\/papers\/poker.pdf\n13. A c# poker engine https:\/\/github.com\/NikolayIT\/TexasHoldemGameEngine\n14. True RNG http:\/\/ubld.it\/products\/truerng-hardware-random-number-generator\/\n","144":"#### Description\n\nThis is a Bitcoin point of sale application. It was mainly written to\ndemonstrate the use of the green address feature, but can also be used\nindependently of that. It is written in Python and works in combination with the\nstandard Bitcoin-Qt client. It is targeted at standard PC hardware, e.g. laptop\n(used by merchant) + external monitor (facing the customer). The main mode of\noperation is displaying a QR code with a Bitcoin URI to the customer and\nlistening - via Bitcoin-Qt - on the network for a matching Bitcoin transaction.\nBut the software also support the use of NFC hardware to transmit the Bitcoin\nURI as well as receiving incoming transactions via Bluetooth. See videos of the\nsystem in action at http:\/\/www.youtube.com\/watch?v=o84SfChQ-S8 (using QR codes)\nand https:\/\/www.youtube.com\/watch?v=mguRpvf3aMc (using NFC).\n\n#### Screenshots\n\n- System idle\n  - Merchant view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_after_startup_merchant.png\n  - Customer view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_after_startup_customer.png\n- Entering a new amount\n  - Merchant view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_entering_amount_merchant.png\n  - Customer view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_entering_amount_customer.png\n- Receiving a transaction from Instawallet's green address\n  - Merchant view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_received_from_green_address_merchant.png\n  - Customer view: https:\/\/github.com\/downloads\/javgh\/greenaddress-pos-tools\/screenshot_received_from_green_address_customer.png\n\n#### Getting started\n\nThe system requires at least Bitcoin-Qt 0.8.2, as it is making use of the\n'walletnotify' feature. To check for green addresses a complete transaction\nindex is also required, which can be enabled by adding 'txindex=1' to\nbitcoin.conf and starting the daemon with '-reindex' to build the index the\nfirst time. The configuration file ~\/.bitcoin\/bitcoin.conf should look something\nlike this:\n\n````\nserver=1\ntxindex=1\nrpcuser=rpcuser\nrpcpassword=rpcpassword\n````\n\nThen start bitcoind like listed below (-reindex is only needed on the first\nrun). Make sure that the queue-tx utility is executable, so that bitcoind can\ncall it when new transactions are received.\n\n````\n.\/bitcoind -reindex -walletnotify=\"\/path\/to\/greenaddress-pos-tools\/utils\/queue-tx %s\"\n````\n\nAfterwards you are ready to start the Python app:\n\n- install dependencies: python-bluez, python-qrencode, python-qt4, python-zmq\n- create the file $HOME\/.greenaddress-pos-tool with this contents (or let the\n  app create this default configuration file when first starting up):\n\n````\n{\n    \"exchange_rate_ticker\": {\n        \"currency\": \"USD\", \n        \"fields\": [\n            \"return\", \n            \"last\", \n            \"value\"\n        ], \n        \"interval\": 60, \n        \"source\": \"MtGox.com\", \n        \"url\": \"http:\/\/data.mtgox.com\/api\/1\/BTCUSD\/ticker\"\n    }, \n    \"green_addresses\": {\n        \"1LNWw6yCxkUmkhArb2Nf2MPw6vG7u5WG7q\": \"Verified by Mt.Gox.\", \n        \"1MAxx46Dp3tFw933PxPwEYYGCpxYda2pyH\": \"Verified by Bridgewalker.\"\n    }, \n    \"rpc_url\": \"http:\/\/rpcuser:rpcpassword@127.0.0.1:8332\", \n    \"single_screen_mode\": false\n}\n````\n\n- run: python pos-tool.py\n\nYou should see two windows popping up: The merchant back end and the customer\ndisplay. If you enter a BTC amount and click \"Update display\", a new Bitcoin\naddress and associated QR code will be generated and displayed to the customer.\nThe tool then listens for transactions to the Bitcoin address and as soon as it\nreceives something, it changes the display to read \"Payment received\". If the\npayment was done via Bridgewalker's green address, it will add the phrase\n\"Verified by Bridgewalker\". The merchant is expected to use their Bitcoin client\nto see if the correct amount was sent.\n\n#### NFC support\n\nThe software supports the use of NFC hardware. If an NFC device is detected, it\nwill be used to offer the currently displayed Bitcoin address and amount to any\nclient that comes within range.\n\nAny device supported by the library nfcpy ( https:\/\/launchpad.net\/nfcpy ) should\nbe fine (see http:\/\/nfcpy.readthedocs.org\/en\/latest\/overview.html ). This code\nwas tested with the NFC reader 'SCM SCL3711'.\n\nTo get this reader running on Linux, you need to ensure that the permissions are\nset properly. You might want to create udev rules like the following (e.g. as\n\/etc\/udev\/rules.d\/52-nfcdev.rules):\n\n````\nSUBSYSTEM==\"usb\", ACTION==\"add\", ATTRS{idVendor}==\"04e6\", ATTRS{idProduct}==\"5591\", GROUP=\"plugdev\" # SCM SCL-3711\nSUBSYSTEM==\"usb\", ACTION==\"add\", ATTRS{idVendor}==\"054c\", ATTRS{idProduct}==\"06c1\", GROUP=\"plugdev\" # Sony RC-S380\n````\n\nLoad the new udev rules via 'service udev reload'. Afterwards make sure, that\nyou are a member of the 'plugdev' group, to be able to access the device. You\nmight also need to prevent the kernel module 'pn533' from grabbing and blocking\nthe device:\n\n````\nrmmod pn533\necho \"blacklist pn533\" > \/etc\/modprobe.d\/blacklist-nfc.conf\n````\n\nThe following clients are known to be able to receive Bitcoin URIs via NFC:\nSchildbach Wallet, Bridgewalker.\n\n#### Bluetooth support\n\nThe software will use Bluetooth to listen for serialized Bitcoin transactions.\nTo this end, it will advertise a Bluetooth service using the UUID\n3357a7bb-762d-464a-8d9a-dca592d57d5b (compatible with Schildbach Wallet and\nBridgewalker). It will furthermore include its Bluetooth MAC as an additional\nparameter in all Bitcoin URIS (&bt=...). Clients that support this convention\ncan then transmit a serialized Bitcoin transaction via Bluetooth using a simple\nformat first specified by the Schildbach wallet.\n\nThe following clients are known to be able to transmit Bitcoin transactions via\nBluetooth in this manner: Schildbach Wallet, Bridgewalker.\n\n#### Green address technique\n\nYou can read more about the green address technique in this thread:\nhttp:\/\/bitcointalk.org\/index.php?topic=32818.0 or on the wiki:\nhttps:\/\/en.bitcoin.it\/wiki\/Green_address . Currently (as of June 2013)\nMt.Gox and Bridgewalker ( https:\/\/www.bridgewalkerapp.com\/ ) implement this\nconvention and allow to send transactions that will be recognized by the Python\napp as originating from a green address.\n\n#### Development\n\nI'm developing on Linux, so this is only tested on Linux. But I would\nhope this to be fairly portable. Patches to make it work (better) on\nWindows and\/or Mac OS are welcome.\n\nIf you appreciate this release, donations are gladly accepted at\n1CQoprPjRmsDQDzgmUK1njmXSv3SMpAjm7 .\n","145":"Sign Message\n===========\n\nA single purpose small Python script to sign and verify messages with bitcoin private keys.\n\n\n#### How to use:\n\nRequires ecdsa library. Do `pip install ecdsa` before using script.\n\n###### To sign a message:\n    $.\/signmessage.py -s\n    Verify message\n\n    Enter address:\n    1HUBHMij46Hae75JPdWjeZ5Q7KaL7EFRSD\n    Enter message:\n    test message\n    Enter private key:\n    5KMWWy2d3Mjc8LojNoj8Lcz9B1aWu8bRofUgGwQk959Dw5h2iyw\n\n    Signature:\n    \n    G0k+Nt1u5boTTUfLyj6x1T5flg1v9rUKGlhs\/jPApaTWLHf3GVdAIOIHip6sVwXEuzQGPWIlS0VT+yryXiDaavw=\n\n\n###### To sign a message:\n    $.\/signmessage.py -s\n    Verify message\n\n    Enter address:\n    14dD6ygPi5WXdwwBTt1FBZK3aD8uDem1FY\n    Enter message:\n    test message\n    Enter private key:\n    L41XHGJA5QX43QRG3FEwPbqD5BYvy6WxUxqAMM9oQdHJ5FcRHcGk\n\n    Signature:\n    \n    IPn9bbEdNUp6+bneZqE2YJbq9Hv5aNILq9E5eZoMSF3\/fBX4zjeIN6fpXfGSGPrZyKfHQ\/c\/kTSP+NIwmyTzMfk=\n\n\n###### To verify a message:\n    $.\/signmessage.py\n    Verify message\n\n    Enter address:\n    14dD6ygPi5WXdwwBTt1FBZK3aD8uDem1FY\n    Enter message:\n    test message\n    Enter signature:\n    IPn9bbEdNUp6+bneZqE2YJbq9Hv5aNILq9E5eZoMSF3\/fBX4zjeIN6fpXfGSGPrZyKfHQ\/c\/kTSP+NIwmyTzMfk=\n\n    Message verified: True\n","146":"# Let's Build a Blockchain\nA mini cryptocurrency in Ruby\n\n![](https:\/\/i.ytimg.com\/vi\/3aJI1ABdjQk\/hqdefault.jpg)\n### Video of the talk: https:\/\/youtu.be\/3aJI1ABdjQk?t=17m23s\n\n### Slides here: https:\/\/speakerdeck.com\/haseebq\/lets-build-a-blockchain-a-mini-cryptocurrency-in-ruby\n","147":"[![Build Status](https:\/\/travis-ci.org\/goncalopp\/mexbtcapi.svg?branch=master)](https:\/\/travis-ci.org\/goncalopp\/mexbtcapi)\n[![PyPI version](https:\/\/badge.fury.io\/py\/mexbtcapi.svg)](https:\/\/badge.fury.io\/py\/mexbtcapi)\n[![Coverage](https:\/\/coveralls.io\/repos\/github\/goncalopp\/mexbtcapi\/badge.svg?branch=master)](https:\/\/coveralls.io\/github\/goncalopp\/mexbtcapi)\n\n\nMExBtcAPI\n=========\n\nThe Multi-Exchange Bitcoin API\n\n(actually, the multi-exchange multi-currency API)\n\nFeatures\n========\n\n* Multi-currency support\n* Multi-exchange support\n* Seamless non-blocking streaming API support (websockets, WAMP)\n\n\nSupported Exchanges\n===================\n\n* HTTP\n    * ~~MtGox~~ (deprecated)\n    * ~~Bitcoin-24~~ (deprecated)\n    * Bitstamp\n    * Poloniex\n* Streaming\n    * Poloniex\n\nProject Goals\n=============\n\n* provide a set of well developed classes related to:\n    * currencies (Amount, Currency, CurrencyPair, ExchangeRate)\n    * currency exchanges (Order, Market, Exchange, Participant, Ticker)\n* promote their use\n* provide consistent APIs of various cryptocurrency exchanges\n\nDonations\n=========\n\nDonations of bitcoin are kindly accepted at **1NBmTawDXqj8mNzGZSTzS1qmeyBhNideTM**\n\n![Donation QR](donation_qrcode.png)\n\nUsage \/ docs\n============\n\nCheck the [demo](demo) directory for usage examples.\n\nDevelopment Status\n==================\n\nThe ticker and orderbook APIs are stable.\nThe Order API is missing\n\nObtaining the latest source\n===========================\nhttps:\/\/github.com\/goncalopp\/mexbtcapi\n\n\nAdding suport for a new exchange\n================================\nPlease consult the doc\/add_market file\n","148":"# Hive OS Client for ASICs\nSimple yet powerful monitoring agent.\n\n**Are you looking for a simple (and pretty fast) way to connect your miners to Hiveon? Please visit [ASIC Hub](https:\/\/hiveos.farm\/asichub\/) page first**\n\n&nbsp;\n\n## Table of contents\n1. [Introduction](#introduction)\n1. [Hive OS Client and Hiveon ASIC Firmware comparison](#hive-os-client-and-hiveon-asic-firmware-comparison)\n1. [Supported models](#hive-os-client-supported-models)\n1. [Prepare](#prepare)\n1. [Install](#install)\n1. [Other models](#other-models)\n1. [Recovery boot images](#recovery-boot-images)\n1. [Useful commands](#useful-commands)\n1. [License](#license)\n\n&nbsp;\n\n## Introduction\n*Hive OS Client* and *Hiveon ASIC Firmware* are two different products:\n\n#### Hive OS Client (you are here)\n- Allows you to see the miner in Hive, to control Wallets, Pools, restart and reboot the miner.\n- Supports a broad range of ASIC models: Antminer, Innosilicon, Zig and even some FPGA miners.\n\nIt's a lightweight application running on the stock (or custom fw of your choice) ASIC firmware.\n\n#### Hiveon ASIC Firmware ([follow the link](https:\/\/hiveos.farm\/asic\/))\nAll the features above plus:\n- Overclocking, undervolting the miner, thus offering increased performance and\/or lower consumption and heat.\n- More control of overclocking and adjustment to voltage.\n- Auto-tune to optimize overclocking almost automagically.\n\nIt's a *custom firmware* that does replace the stock one. Supports only selected models: **Antminer L3+, L3++, S10 (S9 Dual), S17, S17+, S17E, S17 Pro, T17, T17+, T17E, S9, S9i, S9j and T9+**. Hiveon Firmware for other ASIC models like S9k\/S9SE are coming soon, so stay tuned!\n\nFind out more: [Download](https:\/\/hiveos.farm\/asic), [FAQ](https:\/\/hiveos.farm\/hiveon-asic-firmware-general-asic_faq), [Step-by-step installation manual for S17\/S17 Pro](https:\/\/medium.com\/hiveon\/hiveon-asic-firmware-installation-guide-s17-s17-pro-1d45a5d59a06)\n\n&nbsp;\n\n## *Hive OS Client* and *Hiveon ASIC Firmware* comparison\n\n|Model \/ Feature|See miner in Hive OS|Control wallets & pools|Restart miner|Reboot miner|Anti-virus (Hiveon FW only)|Over clocking (Hiveon FW only)|Under volting (Hiveon FW only)|Voltage adjustment (Hiveon FW only)|Auto-tuning (Hiveon FW only)|\n|-|-|-|-|-|-|-|-|-|-|\n**Antminer**\n|A3|\u2022|\u2022|\u2022|\u2022|\n|B3|\u2022|\u2022|\u2022|\u2022|\n|D3, D3 (Blissz)|\u2022|\u2022|\u2022|\u2022|\n|DR3|\u2022|\u2022|\u2022|\u2022|\n|E3|\u2022|\u2022|\u2022|\u2022|\n|L3+, L3++|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|S7|\u2022|\u2022|\u2022|\u2022|\n|S9, S9i, S9j|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|S9k, S9SE, S9-Hydro|\u2022|\u2022|\u2022|\u2022|soon|soon|soon|soon|soon|\n|[S10 (S9 Dual mskminer)](#antminer-s9-mskminer-s10-mskminer)|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|S11|\u2022|\u2022|\u2022|\u2022|\n|S15|\u2022|\u2022|\u2022|\u2022|\n|S17, S17+, S17E, S17 Pro|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|T9|\u2022|\u2022|\u2022|\u2022|\n|T9+|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|T15|\u2022|\u2022|\u2022|\u2022|\n|T17, T17+, T17E|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\u2022|\n|X3|\u2022|\u2022|\u2022|\u2022|\n|Z9, Z9-Mini|\u2022|\u2022|\u2022|\u2022|\n|Z11|\u2022|\u2022|\u2022|\u2022|\n**DragonMint**\n|DragonMint T1|\u2022|\u2022|\u2022|\u2022|\n**HashAltCoin**\n|Blackminer F1, F1+, F1-MINI|\u2022|\u2022|\u2022|\u2022|\n|Blackminer F1-Ultra, F1-MINI+|\u2022|\u2022|\u2022|\u2022|\n**Innosilicon**\n|A5\/A8 (need test)|\u2022|\u2022|\u2022|\u2022|\n|A9 ZMaster|\u2022|\u2022|\u2022|\u2022|\n|A9+ Zmaster|\u2022|\u2022|\u2022|\u2022|\n|D9 DecredMaster|\u2022|\u2022|\u2022|\u2022|\n|S11 SiaMaster|\u2022|\u2022|\u2022|\u2022|\n|T3 BTCMiner|\u2022|\u2022|\u2022|\u2022|\n|T3H+, T3+, T2Th+, T2Thf+, T2Thl+, T2Th, T2Tz-30T, T2Thm, T2Thf, T2T+ (32T), T2Ts-26T, T2Ti-25T, T2T-24T|\u2022|\u2022|\u2022|\u2022|\n**Todek**\n|Toddminer C1, C1 PRO|\u2022|\u2022|\u2022|\u2022|\n**Zig**\n|Z1, Z1+|\u2022|\u2022|\u2022|\u2022|\n\n&nbsp;\n\n## Hive OS Client supported models\n- Antminer\n  - A3\n  - B3\n  - D3, D3 (Blissz)\n  - DR3\n  - E3\n  - L3+, L3++ *(please use [Hiveon firmware](https:\/\/hiveos.farm\/asic\/))*\n  - S7\n  - S9, S9i, S9j, S9k, S9SE, S9-Hydro, [S9 (mskminer)](#antminer-s9-mskminer-s10-mskminer), S11\n  - [S10 (mskminer)](#antminer-s9-mskminer-s10-mskminer)\n  - S15, T15\n  - S17, S17+, S17E, S17 Pro *(please use [Hiveon firmware](https:\/\/hiveos.farm\/asic\/))*\n  - T17, T17+, T17E *(please use [Hiveon firmware](https:\/\/hiveos.farm\/asic\/))*\n  - T9, T9+\n  - X3\n  - Z9, Z9-Mini\n  - Z11\n- DragonMint\n  - DragonMint T1\n- HashAltCoin\n   - Blackminer F1, Blackminer F1+, Blackminer F1-MINI\n   - Blackminer F1-Ultra, Blackminer F1-MINI+\n- Innosilicon\n  - A5\/A8 (need test)\n  - A9 ZMaster\n  - A9+ Zmaster\n  - D9 DecredMaster\n  - S11 SiaMaster\n  - T3 BTCMiner\n  - T3H+, T3+, T2Th+, T2Thf+, T2Thl+, T2Th, T2Tz-30T, T2Thm, T2Thf, T2T+ (32T), T2Ts-26T, T2Ti-25T, T2T-24T\n- Todek\n  - Toddminer C1, C1 PRO\n- Zig\n  - Z1, Z1+\n\n&nbsp;\n\n## Prepare\n\n#### Beware of recent Bitmain firmware\n```diff\n- Antminer Series 9 (S9\/S9i\/S9j\/T9\/T9+): never upgrade to firmware newer than 10-Jun-2019\n- Antminer Series 17: never upgrade to firmware newer than 01-Dec-2019\n```\nAll newer versions of official firmware have defensive countermeasures against remote tampering, so you won't be able to install Hive OS Client or Hiveon ASIC Firmware.\n\n#### Get FARM_HASH\nTo link ASIC to your Hive Farm you could use these options, sorted by ease:\n1. *Hive OS* tab in the ASIC web interface (simpliest!)\n1. ```firstrun``` command via ```ssh```\n1. Download a special *.tar.gz* file via BTC Tools (mass deployment)\n\nIn all cases, you'll need the *FARM_HASH* string. You will find it in Hive OS dashboard, right in the farm's *Settings* tab.\n\n#### Create and Apply the Flight Sheet\nTo start mining, be sure to create a *Flight Sheet* first. Apply it to start hashing.\n\n&nbsp;\n\n## Install\nYou can install Hive OS Client via firmware file download or via SSH.\n\n&nbsp;\n\n### Three basic install options\n---\n\n#### 1. ASIC web interface\n\n##### Antminer Series 15\/17 and S9k \/ S9SE\nThese models are special. They're loading OS right to the RAM in read-only mode. Hive OS Client installation is possible only by upgrading ASIC with a special firmware file. That file contains stock Bitmain firmware with built-in Hive OS client:\n\n- [Antminer S9k](https:\/\/download.hiveos.farm\/asic\/S9k\/stock%2Bclient\/S9k-stock%2Bclient-20190929.tar.gz)\n- [Antminer S9SE](https:\/\/download.hiveos.farm\/asic\/S9se\/stock%2Bclient\/S9se-stok%2Bclient.tar.gz)\n\n- [Antminer S11](https:\/\/download.hiveos.farm\/asic\/S11\/stock%2Bclient\/S11-hive.tar.gz)\n\n- [Antminer S15](https:\/\/download.hiveos.farm\/asic\/S15\/stock%2Bclient\/S15-%28stock%2Bclient%29-v19.08.12-ln.tar.gz)\n- [Antminer T15](http:\/\/download.hiveos.farm\/asic\/T15\/stock%2Bclient\/T15-%28stock%2Bclient%29-v19.08.12-ln.tar.gz)\n\n- [Antminer S17, S17 pro](http:\/\/download.hiveos.farm\/asic\/s17\/stock%2Bclient\/)\n- [Antminer S17+](http:\/\/download.hiveos.farm\/asic\/S17%2B\/stock%2Bclient\/)\n- [Antminer S17E](http:\/\/download.hiveos.farm\/asic\/S17E\/stock%2Bclient\/)\n\n- [Antminer T17](http:\/\/download.hiveos.farm\/asic\/T17\/stock%2Bclient\/)\n- [Antminer T17+](http:\/\/download.hiveos.farm\/asic\/T17%2B\/stock%2Bclient\/)\n- [Antminer T17E](http:\/\/download.hiveos.farm\/asic\/T17E\/stock%2Bclient\/)\n\n>After successful flashing, you have to open up ASIC web interface, click *Hive OS* tab, enter your *FARM_HASH* and then click *Apply&Save* button. The page will refresh itself. Wait a minute and worker will appear in the Hive dashboard.\n\n##### All other Antminer Series 3\/7\/9\nHive OS Client for Antminer Series 3\/7\/9, firmware date before 10.06.2019. Just upgrade ASIC firmware with [hive_install_unsig_antminers.tar.gz](http:\/\/download.hiveos.farm\/asic\/repo\/unsig\/hive_install_unsig_antminers.tar.gz).\n\n#### 2. BTC Tools\n\nAll things you do with an ASIC web interface you could do better with [BTC Tools](https:\/\/url.btc.com\/btc-tools-download) utility. It's the best choice in case you have ASICs in numbers. Scan your network, select ASICs to update and then click \"Firmware Upgrade\".\n\n#### 3. SSH\n\nLogin with SSH to your miner and run the following command:\n\n```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade\n```\n\n>For Antminer D3 **Blissz**, before installation run:\n>\n>```sh\n>ln -s \/usr\/lib\/libcurl-gnutls.so.4 \/usr\/lib\/libcurl.so.5\n>```\n\nForce setup *FARM_HASH* or *RIG_ID* and password, change API Server URL:\n\n   ```firstrun``` or ```firstrun YOUR_FARM_HASH``` - set when there is no config  \n   ```firstrun -f``` or ```firstrun YOUR_FARM_HASH -f``` - force set to replace the config  \n\n>##### Default SSH login and password:\n>- Antminer: user **root**, password **admin**\n>- DragonMint T1: user **root**, password **dr4g0nhash**\n>- Innosilicon (ssh **OR** telnet on port 8100): user **root**, password **blacksheepwall** (or **innot1t2**, or **t1t2t3a5**)\n\n&nbsp;\n\n### Options for automation \n---\n#### Promptless installation\n\nYou could add ASIC without entering *RIG_ID*, password and *API Server URL*.\n\n##### To add ASIC without entering *RIG_ID* and password, you should fill *FARM_HASH* variable.\nGet your *FARM_HASH* from Hive OS dashboard. Replace `YOUR_FARM_HASH` string you see below with your *FARM_HASH*.  Transform the text below and then run as a single command:\n ```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade --farm-hash=YOUR_FARM_HASH\n```\n\n##### To use another *API Server*, you should fill *HIVE_HOST_URL* variable.\nReplace `http:\/\/your_api_server` string you see below with your *API Server URL*. Transform the text below and then run as a single command:\n```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade --hive-host-url=http:\/\/your_api_server\n```\n\n##### Of course you could set *FARM_HASH* and *API Server* simultaneously.\nReplace `YOUR_FARM_HASH` string you see below with your *FARM_HASH*. Replace `http:\/\/your_api_server` string you see below with your *API Server URL*. Transform the text below and then run as a single command:\n```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade --farm-hash=YOUR_FARM_HASH --hive-host-url=http:\/\/your_api_server\n```\n\n#### Bulk installation\n\nYou can install Hive OS Client on all the ASICs you have on your local network. For this you need to have a running Linux box (like Hive OS GPU rig) or Antminer ASIC with Hive OS Client. You could do it with just three commands.\n\n1. **Skip this step if you're on the ASIC with Hive OS Client.** Install *sshpass* and *curl*:\\\n```apt-get install -y sshpass curl```\n1. Download script:\\\n```cd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/hive-asic-net-installer\/download.sh && sh download.sh```\n1. Execute it:\\\n```cd \/tmp\/hive-bulk-install```\n\nEdit `config.txt` to set your *FARM_HASH* or firmware URL, edit `ips.txt` to set IPs list of your new ASICs.\nOr you can scan the local network to search for Antminer. Example: ```ipscan.sh 192.168.0.1\/24 > ips.txt```  \n\nTo install Hive OS Client just run ```install.sh```.\\\nTo install firmware on Antminer S9\/i\/j just run ```firmware.sh```.\n\n>- Optionally, you can add *WORKER_NAME* to `ips.txt` (e.g. `192.168.1.100 asic_01`)\n>- When IP was being processed then it will become *#commented*\n\n&nbsp;\n\n### Downgrade and Version change\n---\nIf you want to install specific version or downgrade to specific version, please append version as an argument to ```selfupgrade```. E.g. 0.1-02:\n```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade 0.1-02\n```\n\nTo see all selfupgrade options, run ```selfupgrade --help```\n\nTo install specific version you should provide a release number: ```selfupgrade 0.1-13```\n\nIf you want to reinstall current version, add ```--force```: ```selfupgrade --force```\n\nTo install stable development version, run ```selfupgrade master```\n\nTo install night build development version directly from Github, run ```selfupgrade master --github```\n\n&nbsp;\n\n### Uninstall\n---\n```sh\nhive-uninstall\n```\nA `cron` jobs might have to be removed manually with ```crontab -e``` even if they are left there the would do nothing.\n\n&nbsp;\n\n## Other models\n### Antminer S9 signed  *(please use [Hiveon firmware](https:\/\/hiveos.farm\/asic\/))*\n[Hiveon ASIC installation - Antminer S9 Cannot Find Signature Fix](https:\/\/forum.hiveos.farm\/t\/hiveon-asic-installation-antminer-s9-cannot-find-signature-fix\/12466)\\\n[Hiveon ASIC Firmware 1.02 for S9 Installation Manual](https:\/\/forum.hiveos.farm\/t\/hiveon-asic-s9-firmware-v1-02\/13944)\n\n### Antminer S9 (mskminer), S10 (mskminer)\nYou don't need to unlock SSH or do anything complicated. For any ASIC with mskminer custom firmware, you have to download [Hive OS Client Installer for mskminer firmware](http:\/\/download.hiveos.farm\/asic\/repo\/s9\/hive-msk-installer.tar.gz) and then flash the ASIC with it. That's all.\n\n### Antminer S17, S17 Pro, T17\n[Hiveon ASIC Firmware installation manual](https:\/\/hiveos.farm\/hiveon-asic-firmware-S17-S17-Pro-s17installation)\n\n### Innosilicon new models\n[Hive OS Client Installation Manual for Innosilicon](https:\/\/forum.hiveos.farm\/t\/innosilicon-t2t-t3-series\/13610)\n\n### Innosilicon old models\nNote: some Innosilicon factory firmware have a memory leak, and ASIC freezes every few days. To solve this problem, you can enable the miner or ASIC reboot for every 24 hours. Run the following commands:\n\n```sh\ninno-reboot miner enable\/disable\ninno-reboot asic enable\/disable\ninno-reboot status\n```\n\n\n### Todek Toddminer C1\n\n```sh\nsudo su -\ncd \/tmp && wget https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && bash selfupgrade\n```\nor, if you need to use FARM_HASH\n```sh\nsudo su -\ncd \/tmp && wget https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && bash selfupgrade --farm-hash=YOUR_FARM_HASH\n```\n\n&nbsp;\n\n### Zig Z1 and Z1+\n[Hive OS Client Installation Manual for Zig Z1+](hive\/share\/zig\/README.md)\n\n```sh\nsudo su -\ncd \/tmp && wget https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && bash selfupgrade\n```\nor, if you need to use FARM_HASH\n```sh\nsudo su -\ncd \/tmp && wget https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && selfupgrade --farm-hash=YOUR_FARM_HASH\n```\n\n&nbsp;\n\n### Blackminer F1 series by Hash Altcoin Technologies\nFPGA miners based on Xilinx K7 325t (Gen1) and 420t (Gen2) which works like multialgo ASICs\n\nInstallation using FARM_HASH\n```sh\ncd \/tmp && curl -kLsO https:\/\/raw.githubusercontent.com\/minershive\/hiveos-asic\/master\/hive\/bin\/selfupgrade && sh selfupgrade master --github --farm-hash=YOUR_FARM_HASH\n```\n\n&nbsp;\n\n## Recovery boot images\n\n### Antminer\n\nYou can find recovery boot images at [our repository](https:\/\/download.hiveos.farm\/asic\/) (highly recommended) or [Bitmain's official site](https:\/\/service.bitmain.com\/support\/download?product=Flashing%20SD%20card%20with%20image).\n\n>Please note the two different file formats of recovery images:\n>- `.img` file. It's a raw disk image. Should be written to SD with a special imaging software.\n>- `.zip` file. A ZIP archive containing files like `u-boot.img` and `uImage.bin` inside. Unzip that file to SD card formatted with **FAT32**.\n\n- [S9 Recovery image](https:\/\/download.hiveos.farm\/asic\/s9\/recovery-stock\/Recovery_S9.img)\n- [S17 Hiveon recovery image (beta)](https:\/\/download.hiveos.farm\/asic\/s17\/SD-S17-S17pro_Hiveon_1.01-200331_sig.zip)\n- S17, S17 Pro, T17\n  - Download [recovery boot image](https:\/\/download.hiveos.farm\/asic\/s17\/recovery-stock\/SD_S17-T17_650M.05.06.2019.zip)\n  - Use SD card size less than **16 Gb**\n  - Format SD card with **FAT32**\n  - Unzip it to SD card\n  - Boot ASIC with SD card\n  - ASIC booted in recovery mode\n  - Flash any suitable [old stock Bitmain firmware](https:\/\/download.hiveos.farm\/asic\/) (`.tar.gz` format) via web interface.\n\nIn case of issues, please read Bitmain's [control board program recovery manual](https:\/\/support.bitmain.com\/hc\/en-us\/articles\/360033757513-S17-S17Pro-S9-SE-S9k-Z11-control-board-program-recovery-SD-card-flashing-with-customized-PW-).\n\n&nbsp;\n\n## Useful commands\n\n### ```agent-screen```\n```\nagent-screen start|stop|restart|log\n```\n\n### ```asic-find``` [Antminer]\nTo search for an Antminer ASIC among a large number of ASICs, you can make it flash a red LED on its front panel. To do this, execute the command from the Hive OS dashboard or via SSH: ```asic-find 5```. The red LED will be blinking for 5 minutes.\n\n### ```asic-oc``` [Antminer]\nOverclock profiles management\n```\nasic-oc status|factory|retune|clear-cache\n```\n\n### ```diag-17``` [Antminer]\nSeries 15\/17 diagnostic\n\n### ```hive-passwd``` [Antminer]\nChange or show password for ssh and\/or web UI\n```\nhive-passwd [new_password] [--show] [--default]\n```\n\n### ```message```\nSend a message to Hive OS dashboard\\\n```message success|danger|warning|info \"message\"``` - send a message to the dashboard\\\n```message file \/path\/filename``` - send a file to the dashboard\\\n```message file.io|transfer.sh \/path\/filename``` - send a file to the file sharing service\\\n```message tag \"tag_text\"``` - tag a worker with any text. Inside the tag text you can use templates: ```%BUILD%```, ```%FW%```, ```%HOSTNAME%```, ```%IP%```, ```%IP_SAFE%```, ```%MAC%```, ```%MAC_SAFE%```, ```%PROFILE%```, ```%URL%``` and ```%WORKER_NAME_RAW%```\n\n### ```miner```\n```\nminer start|stop|restart\nminer log [all|kernel|watchdog]\n```\n\n### ```selfupgrade```\n```\nselfupgrade [master]\n```\n\n### ```ssh-access```\n```\nssh-access status\n```\n\n### ```virus-check```\n```\nvirus-check\n```\n\n### Rename the workers\n\nTo rename the workers in the Hive web interface as the hostname, run the command from the Hive OS dashboard:\n```sh\nhello hostname\n```\n\n&nbsp;\n\nNote: almost all commands have a ```--help``` argument.\n\n&nbsp;\n\n## License\n\nHive OS Client for ASICs is released under Business Source License 1.1. See [LICENSE.txt](LICENSE.txt)\n","149":"# Coin News and Charts\n\n* Last three month candlesticks charts of top 10 cryptocurrencies, including MACD, SMA. \n\n* Last three month google trend analysis (regional, search trend, search queries and topics).\n\n* Collection of cryto currency news and discussions from CoinDesk, Bitcoin Magzine, CrytoCoin News, Coin Telegraph, News Bitcoin, Bitcoin Subreddit, Crypto-Currency Sub Reddit.\n\n* Bitcoin timeline.\n\n# See it in Action\n\n[Bitcooin News and Charts](https:\/\/bitcoin-news-charts.herokuapp.com\/#\/ \"Bitcoin News and Chart\")\n\n# Client Side\n\n* Vue.js\n* Financial charts is built using [highstock] (http:\/\/highcharts.com) (changed from earlier version which uses [D3.js] (https:\/\/d3js.org\/) , [Techan.js] (http:\/\/techanjs.org\/)\n* Google trend map is using Google chart\n* Bitcoin timeline uses [timeline.js] (http:\/\/timeline.knightlab.com) \n\n# Server Side Data Handling\nServer Side Data is handled using seperate [Node.js application] (https:\/\/github.com\/xunxdd\/bitcoin-news-chart-data\/tree\/master) . Trading data is from [CoinMarketCap](https:\/\/https:\/\/coinmarketcap.com\/), Google trend data is from [Google Trend Api] (https:\/\/www.npmjs.com\/package\/google-trends-api). Timeline data from various sites, mostly [wikipedia] (https:\/\/en.wikipedia.org\/wiki\/History_of_bitcoin).\n\n# Coming Next\n* Twitter trend analysis and price overlay. Twitter storm that maps out influencers' circle\n* Unit tests\n* In depth analysis of financial Data and convergence of news, search and trading\n\n## Build Setup\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n\n# build for production and view the bundle analyzer report\nnpm run build --report\n\n# run unit tests\nnpm run unit\n\n# run e2e tests\nnpm run e2e\n\n# run all tests\nnpm test\n```\n\n","150":"# TumbleBit\n\n\n[\"TumbleBit: An Untrusted Bitcoin-Compatible Anonymous Payment Hub\"](http:\/\/cs-people.bu.edu\/heilman\/tumblebit\/).\n\nThis repo contains the [Proof of Concept](POC_code\/README.md) implementation used in the paper, as well as a [reference implementation](reference_implementation\/README.md) for the protocols in python3.\nThese implementations are intended only to describe and prototype TumbleBit the protocols. They should not be deployed in production.\n\n[nTumbleBit](https:\/\/github.com\/nTumbleBit\/nTumbleBit) is being developed for production use and is the official opensource implementation of TumbleBit.\n\n\n**Description:** TumbleBit is a new anonymous payments protocol that is fully compatible with today\u2019s Bitcoin protocol. TumbleBit allows parties to make payments through an untrusted Tumbler. No-one, not even the Tumbler, can tell which payer paid which payee during a TumbleBit epoch. TumbleBit consists of two interleaved fair-exchange protocols that prevent theft of bitcoins by cheating users or a malicious Tumbler. TumbleBit combines fast cryptographic computations (performed off the blockchain) with standard bitcoin scripting functionalities (on the blockchain) that realize smart contracts. TumbleBit was used to mix [800 input addresses](https:\/\/blockchain.info\/tx\/fd51bd844202ef050f1fbe0563e3babd2df3c3694b61af39ac811ad14f52b233) to [800 output addresses](https:\/\/blockchain.info\/tx\/8520da7116a1e634baf415280fdac45f96e680270ea06810512531a783f0c9f6) on Bitcoin's blockchain.\n","151":"# Multinode \/ Multiwallet Bitcoin regtest network\n\nThis repository allows you run a full bitcoin network in an isolated environment. It uses bitcoin's regtest capability to setup an isolated bitcoin network, and then uses docker to setup a network with 3 nodes.\n\nThis is useful because normally in regtest mode you would generate all coins in the same wallet as where you'd send the coins. With this setup, you can use one node to generate the coins and then send it to one of the other nodes, which can then again send it to another node to simulate more real-life bitcoin usage.\n\n## Usage\n\nSimple run\n\n`docker-compose up`\n\nto start all the containers. This will start the bitcoin nodes, and expose RPC on all of them. The nodes will run on the following ports:\n\n| Node | P2P port * | RPC port * | RPC Username | RPC Password |\n| --- | --- | --- | --- | ---|\n| miner1 | 18500 | 18400 | bitcoin | bitcoin |\n| node1 | 18501 | 18401 | bitcoin | bitcoin |\n| node2 | 18502 | 18402 | bitcoin | bitcoin |\n\n\\* Port as exposed on the host running docker.\n\n## Samples\n\nNote these samples use `curl` to exercise the API, but this would usually be `bitcoin-cli`. We're using `curl` so we don't have a dependency on bitcoin in the host.\n\n### Initial block count\n\nChecks that the initial block count is 0.\n\n```\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# docker-compose up -d\nCreating bitcoindocker_miner_1 ... done\nCreating bitcoindocker_node1_1 ... done\nCreating bitcoindocker_node2_1 ... done\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getblockcount\"}' -u bitcoin:bitcoin localhost:18400\n{\"result\":0,\"error\":null,\"id\":\"1\"}\n```\n\n### Check connected nodes\n\nCheck the \"miner\" node is connected to other nodes.\n\n```\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getpeerinfo\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18400 | jq '.result[] | {addr, inbound} '\n{\n  \"addr\": \"node1:18444\",\n  \"inbound\": false\n}\n{\n  \"addr\": \"172.18.0.3:34908\",\n  \"inbound\": true\n}\n{\n  \"addr\": \"node2:18444\",\n  \"inbound\": false\n}\n```\n\n### Mine some blocks and see other nodes are updating their block count\n\n```\n# mine the blocks\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"generate\",\"params\":[101]}' -u bitcoin:bitcoin -s localhost:18400\n{\"result\":[\"229e6fc0599e198f6f9bdc04cb9a0d7f494f2c8b36f3cec354c85c2507ae21d2\", ... \n<snip> \n...,\"39b792af704cad1f26d2d2e34d91d784b88217b663a6d4eff5512fb6f588d4d5\"],\"error\":null,\"id\":\"1\"}\n\n# check on node1\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getblockcount\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18401\n{\"result\":101,\"error\":null,\"id\":\"1\"}\n\n# check on node2\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getblockcount\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18402\n{\"result\":101,\"error\":null,\"id\":\"1\"}\n```\n\n### Send bitcoin from miner to another node\n\nNow we're going to generate an address in another node. Note that we use port **18401** (node1) instead of 18400:\n```\n# Mine blocks first\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"generate\",\"params\":[101]}' -u bitcoin:bitcoin -s localhost:18400\n{\"result\":[\"2929287f219fda71445219269081364373b4bdec73187da92126150feac39cd6\",\n... <snip> ..., \n\"2b1ffc0528fac9e759097a9213198b1c8540545b67ea1dc4c0ca68b76f02f8f1\"],\"error\":null,\"id\":\"1\"}\n\n# Check balance\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getbalance\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18400\n{\"result\":50.00000000,\"error\":null,\"id\":\"1\"}\n\n# Generate address on node1\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getnewaddress\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18401\n{\"result\":\"2N444M93zqwyhhFSDJxgzPL5h9XMdwLUibz\",\"error\":null,\"id\":\"1\"}\n\n# Send from miner to node1\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"sendtoaddress\",\"params\":[\"2N444M93zqwyhhFSDJxgzPL5h9XMdwLUibz\", \"3.14\"]}' -u bitcoin:bitcoin -s localhost:18400\n{\"result\":\"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\",\"error\":null,\"id\":\"1\"}\n\n# Now, since the block was not yet mined, we usually don't see the balance yet, unless  we specify 0 confirmations.\n# First with the default (1) confirmation:\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getbalance\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18401\n{\"result\":0.00000000,\"error\":null,\"id\":\"1\"}\n\n# No coins, so let's try 0 confirmations (the first parameter \"\" means default account)\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getbalance\",\"params\":[\"\", 0]}' -u bitcoin:bitcoin -s localhost:18401\n{\"result\":3.14000000,\"error\":null,\"id\":\"1\"}\n\n# This also means that node1 has it in the mempool, which shows there is exactly one transaction in it\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getmempoolinfo\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18401 | jq .\n{\n  \"result\": {\n    \"size\": 1,\n    \"bytes\": 187,\n    \"usage\": 1024,\n    \"maxmempool\": 300000000,\n    \"mempoolminfee\": 1e-05,\n    \"minrelaytxfee\": 1e-05\n  },\n  \"error\": null,\n  \"id\": \"1\"\n}\n\n# Finally, let's mine the block and see that getbalance will show the balance by default.\n# node1:\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getbalance\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18401\n{\"result\":3.14000000,\"error\":null,\"id\":\"1\"}\n\n# miner\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getbalance\",\"params\":[]}' -u bitcoin:bitcoin -s localhost:18400\n{\"result\":96.85996240,\"error\":null,\"id\":\"1\"}\n\n# Some extras\n\n# List wallet affecting transactions:\n# miner\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"listtransactions\",\"params\":[\"\", 150]}' -u bitcoin:bitcoin -s localhost:18400 | jq '.result [] | {amount, confirmations, txid, category}'\n{\n  \"amount\": 50,\n  \"confirmations\": 102,\n  \"txid\": \"7bd5b1c805dc1ec6eab533242f56c0685c713c709e7f3e7cec858773163c7d48\",\n  \"category\": \"generate\"\n}\n{\n  \"amount\": 50,\n  \"confirmations\": 101,\n  \"txid\": \"d32be1fce3dd33cb46701cfcaf9de1ddfde9e18dcbe35984799b6341e38a9c53\",\n  \"category\": \"generate\"\n}\n<snip>\n{\n  \"amount\": 50,\n  \"confirmations\": 3,\n  \"txid\": \"2e3922018911136f8474f741956e45f24fd1d100908bee059aacaaf5d815d4b6\",\n  \"category\": \"immature\"\n}\n{\n  \"amount\": 50,\n  \"confirmations\": 2,\n  \"txid\": \"e328e32106d04121ab32300c5e35b3880a21ab3ebecd6c7af34417278bf2da49\",\n  \"category\": \"immature\"\n}\n{\n  \"amount\": -3.14,\n  \"confirmations\": 1,\n  \"txid\": \"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\",\n  \"category\": \"send\"\n}\n{\n  \"amount\": 50.0000376,\n  \"confirmations\": 1,\n  \"txid\": \"dafe13b91d80fd899e627fb481c22bdd10f9d2da13c55ec0b7af7f30175ce96c\",\n  \"category\": \"immature\"\n}\n\n# node1\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"listtransactions\",\"params\":[\"\", 150]}' -u bitcoin:bitcoin -s localhost:18401 | jq '.result [] | {amount, confirmations, txid, category}'\n{\n  \"amount\": 3.14,\n  \"confirmations\": 1,\n  \"txid\": \"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\",\n  \"category\": \"receive\"\n}\n\n# node2\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"listtransactions\",\"params\":[\"\", 150]}' -u bitcoin:bitcoin -s localhost:18402\n{\"result\":[],\"error\":null,\"id\":\"1\"}\n\n# Try getting the transaction\n# node1:\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"gettransaction\",\"params\":[\"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\"]}' -u bitcoin:bitcoin -s localhost:18401 | jq .\n{\n  \"result\": {\n    \"amount\": 3.14,\n    \"confirmations\": 1,\n    \"blockhash\": \"00f3b3923a14a69a78a419660e20d63a4f91370d6099c3bbbdc5daad953e2985\",\n    \"blockindex\": 1,\n    \"blocktime\": 1523421980,\n    \"txid\": \"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\",\n    \"walletconflicts\": [],\n    \"time\": 1523421666,\n    \"timereceived\": 1523421666,\n    \"bip125-replaceable\": \"no\",\n    \"details\": [\n      {\n        \"account\": \"\",\n        \"address\": \"2N444M93zqwyhhFSDJxgzPL5h9XMdwLUibz\",\n        \"category\": \"receive\",\n        \"amount\": 3.14,\n        \"label\": \"\",\n        \"vout\": 0\n      }\n    ],\n    \"hex\": \"0200000001487d3c16738785ec7c3e7f9e703c715c68c0562f2433b5eac61edc05c8b1d57b0000000048473044022065b2d5c649bb6882f73654398ebaa9bf29281088493ad56f1ee0400bfcbeb8b30220402fea8148de73c14ba332693f7d5c9e2f2bf4332299a2df87115fdabaf1607b01feffffff028042b7120000000017a914768cc2b85515737b398e2613fd7fe9c3d44f73f187d0a04e170100000017a9146a82eef49043551afd83cb286d801c0725ba24318765000000\"\n  },\n  \"error\": null,\n  \"id\": \"1\"\n}\n\n# node2, here it fails because that transaction is not in the wallet.\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"gettransaction\",\"params\":[\"008f138f10e80aaae2a5211bf2891ad522a1dd7b85d3f26cbbdabfa63c60ced0\"]}' -u bitcoin:bitcoin -s localhost:18402 | jq .\n{\n  \"result\": null,\n  \"error\": {\n    \"code\": -5,\n    \"message\": \"Invalid or non-wallet transaction id\"\n  },\n  \"id\": \"1\"\n}\n\n# however, using `getrawtransaction` on node2 does actually return it\nroot@ubuntu-xenial:\/home\/vagrant\/bitcoin-docker# curl -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"getrawtransaction\",\"params\":[\"0c0bd722bc5534ec715e31c70e913e887dcdf6cf15438ed890c1a5b56a631d65\", true]}' -u bitcoin:bitcoin -s localhost:18402\n{\"result\":{\"txid\":\"0c0bd722bc5534ec715e31c70e913e887dcdf6cf15438ed890c1a5b56a631d65\",\"hash\":\"0c0bd722bc5534ec715e31c70e913e887dcdf6cf15438ed890c1a5b56a631d65\",\"version\":2,\"size\":188,\"vsize\":188,\"locktime\":101,\"vin\":[{\"txid\":\"75aa43e3c1f2e4094190339b1d7aa605e06cd5a6fe68db1fcc23ff2f1b54d57d\",\"vout\":0,\"scriptSig\":{\"asm\":\"304502210093f7c7b47eff76fc0e4926bb10942bfb90c8d9f5dc430dd0cb0a191908191cb10220522bcc869bd8fa44e5f8d865c8988da53ae875a05ae3fa3cabe2cf5fe1aa0310[ALL]\",\"hex\":\"48304502210093f7c7b47eff76fc0e4926bb10942bfb90c8d9f5dc430dd0cb0a191908191cb10220522bcc869bd8fa44e5f8d865c8988da53ae875a05ae3fa3cabe2cf5fe1aa031001\"},\"sequence\":4294967294}],\"vout\":[{\"value\":3.14000000,\"n\":0,\"scriptPubKey\":{\"asm\":\"OP_HASH160 d5044b6ca6c83a0d0f182dc1f939285d7650bae4 OP_EQUAL\",\"hex\":\"a914d5044b6ca6c83a0d0f182dc1f939285d7650bae487\",\"reqSigs\":1,\"type\":\"scripthash\",\"addresses\":[\"2NCfZ4YFssjjGp5xQjnDMKLFRy8XP4W4TYo\"]}},{\"value\":46.85996240,\"n\":1,\"scriptPubKey\":{\"asm\":\"OP_HASH160 b11e110167018be58797913289c0747e1b916879 OP_EQUAL\",\"hex\":\"a914b11e110167018be58797913289c0747e1b91687987\",\"reqSigs\":1,\"type\":\"scripthash\",\"addresses\":[\"2N9PjcHmezjNzi4KAuj1ajKVACYmM7CWw3m\"]}}],\"hex\":\"02000000017dd5541b2fff23cc1fdb68fea6d56ce005a67a1d9b33904109e4f2c1e343aa75000000004948304502210093f7c7b47eff76fc0e4926bb10942bfb90c8d9f5dc430dd0cb0a191908191cb10220522bcc869bd8fa44e5f8d865c8988da53ae875a05ae3fa3cabe2cf5fe1aa031001feffffff028042b7120000000017a914d5044b6ca6c83a0d0f182dc1f939285d7650bae487d0a04e170100000017a914b11e110167018be58797913289c0747e1b9168798765000000\",\"blockhash\":\"1d5df158d1aecf18b893a0f5cd91fe782a0f8b53b028fff3b5892ff9beaf7134\",\"confirmations\":101,\"time\":1523422840,\"blocktime\":1523422840},\"error\":null,\"id\":\"1\"}\n```\n\n\n## Requirements\n\nTo run this you need both `docker` and `docker-compose`. It was tested on a clean Ubuntu 16.04 with the docker-ce package from Docker. \n","152":"# Bitcoin Resources\n\nA curated collection of articles, books, podcasts, podcast episodes, and other resources which offer a more complete understanding of Bitcoin. Available for everyone at [bitcoin-resources.com](https:\/\/bitcoin-resources.com).\n\n### Contribute\n\nIf you find any typos, grammatical errors, broken links, or any other mistakes or issues, please point them out to [me](https:\/\/dergigi.com\/contact\/) or create a pull request to correct them.\n\nFor more details on how to contribute please refer to the [contribution guidelines](https:\/\/github.com\/bitcoin-resources\/bitcoin-resources.github.io\/blob\/master\/CONTRIBUTING.md).\n\n### Build the site locally\n\nPrerequisites:\n\n1. Install [Jekyll](https:\/\/jekyllrb.com\/docs\/installation\/)\n2. Clone the repository and `cd` into the site's directory\n3. Run `npm install` to install dependencies from `package.json`\n4. Run `bundle install` to install dependencies from `Gemfile`\n\nBuilding the site:\n\n1. Run `npm run gulp` to build assets\n2. Run `bundle exec jekyll serve` to build the site\n3. Visit `localhost:4000` to view the site\n\nYou might have to install `gulp` globally, which you can do with `npm install --global gulp-cli`.\n\n### Support\n\nYou can follow [the project](https:\/\/twitter.com\/BtcResources) on Twitter, share the project, [contribute](https:\/\/github.com\/bitcoin-resources\/bitcoin-resources.github.io\/blob\/master\/CONTRIBUTING.md), [donate](https:\/\/bitcoin-resources.com\/donate\/), or [support me](https:\/\/dergigi.com\/support\/) directly.\n\n\n---\n\nCreated with \ud83e\udde1 by [Gigi](https:\/\/dergigi.com\/).\n\n[![tippin.me](https:\/\/badgen.net\/badge\/%E2%9A%A1%EF%B8%8Ftippin.me\/@dergigi\/F0918E)](https:\/\/tippin.me\/@dergigi)\n","153":"EasyWinBuilder v0.7 for Bitcoin Core\n===========================\n(c) 2014-2015 phelix \/ blockchained.com - MIT license\n\nSource: https:\/\/github.com\/phelix\/easywinbuilder\nForum: https:\/\/bitcointalk.org\/index.php?topic=252931\n\nDownload environment software, all dependencies and build Bitcoin automatically. To run simply double click __all_easywinbuilder.bat or manually start the batch files in order.\n\nIf you have ever built Bitcoin on Windows you probably know it can be a pain. Hopefully these scripts will make things a little easier. Note that the official Windows binaries are cross compiled on Linux.\n\nEasyWinBuilder can run on a mint windows system (e.g. a virtual machine) or a normal system. It might overwrite your MinGW or Qt installation, though. Please note the process takes about 1.5 hours (i3 with SSD) and will need about 3GB of hard drive space. All automatic downloads are now verified against included hashes.\n\nEdit set_vars.bat to change the Bitcoin version or build similarly structured altcoins and to change directories and dependency versions. Also run downloadhashes_create.sh from within MSYS.\n\nToDo\n-----\n* clean up a little\n* make OpenSSL work with small config\n* use Bitcoin standard Boost version (make it compile)\n* speed up build: only build qttools relevant folders\n* enable TLS in wget downloads\n* enable error checking on some untars\n* Automatic environment install (how to bootstrap?)\n* Deterministic build?\n\nCredits\n-------\nBased on build instructions by nitrogenetics (https:\/\/bitcointalk.org\/index.php?topic=149479.0), Matt Corallo and others\n","154":"# Geminipy\nA library for the Gemini bitcoin exchange API\n\nEasily communicate with the Gemini Bitcoin exchange API without\nhaving to deal with HTTP requests.\n\n\nRequirements\n============\nPlease get an API key from [https:\/\/exchange.gemini.com\/settings\/api](https:\/\/exchange.gemini.com\/settings\/api)\n\n\nInstallation\n============\n\n```shell\npip install geminipy\n```\n\nExample\n=======\n\n```python\nfrom geminipy import Geminipy\n\n# The connection defaults to the Gemini sandbox.\n# Add 'live=True' to use the live exchange\ncon = Geminipy(api_key='your API key', secret_key='your secret key', live=True)\n    \n# public request\nsymbols = con.symbols()\n    \n# a Requests response is returned.\n# So we can access the HTTP reponse code,\n# the raw response content, or a json object\nprint symbols.status_code\nprint symbols.content\nprint symbols.json()\n    \n# authenticated request\norder = con.new_order(amount='1', price='200',side='buy')\n    \nprint order.json()\n    \n#send a heartbeat\ncon.heartbeat()\n```\n\nThe required nonce is the current millisecond timestamp.\n","155":"![](screenshot\/bot-logo-256.png)\n# \u2605MyDiceBot\u2605 - Ultimate Bitcoin Dice Bot\n\n[![Github All Releases](https:\/\/img.shields.io\/github\/downloads\/mydicebot\/mydicebot.github.io\/total.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/releases)\n[![GitHub release](https:\/\/img.shields.io\/github\/release\/mydicebot\/mydicebot.github.io\/all.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/releases)\n[![GitHub Release Date](https:\/\/img.shields.io\/github\/release-date-pre\/mydicebot\/mydicebot.github.io.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/releases)\n[![GitHub license](https:\/\/img.shields.io\/github\/license\/mydicebot\/mydicebot.github.io.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/blob\/master\/LICENSE)\n[![GitHub stars](https:\/\/img.shields.io\/github\/stars\/mydicebot\/mydicebot.github.io.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/stargazers)\n[![GitHub forks](https:\/\/img.shields.io\/github\/forks\/mydicebot\/mydicebot.github.io.svg)](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/network)\n\n* [https:\/\/mydicebot.com](https:\/\/mydicebot.com)\n* [MyDiceBot](https:\/\/mydicebot.com) is World #1 Cross-Platform Dicing Bot.\n* Multiple platforms are supported, including __Windows, Mac, Linux, Web, Terminal\/Console, Android__ and __Raspberry Pi__.\n* Multiple blockchains are supported.\n* Multiple programming languages are supported such as  __Lua, Javascript__ and __Python__.\n* [Open Source](https:\/\/github.com\/mydicebot\/mydicebot.github.io) and __Free Forever__.\n\n### Desktop\n![](screenshot\/mydicebot-1000-win.png)\n\n### Terminal\/Console\n![](screenshot\/mydicebot-console.png)\n\n### Mobile\n![](screenshot\/mydicebot-mobile.png)\n\n### Raspberry Pi\n![](screenshot\/mydicebot-raspberry-pi.png)\n\n# Table Of Content\n   * [Download](#download)\n   * [Supporting Dice Sites (alphabet sequence)](#supporting-dice-sites-alphabet-sequence)\n   * [Faucet](#faucet)\n   * [Mining](#mining)\n   * [Exchange](#exchange)\n   * [Quick Start](#quick-start)\n   * [How to Run](#how-to-run)\n   * [Startup Options](#startup-options)\n   * [Features](#features)\n   * [Manual Bet](#manual-bet)\n   * [Auto Bet](#auto-bet)\n   * [Script Bet](#script-bet)\n       * [Internal Variables](#internal-variables)\n       * [Internal Functions](#internal-functions)\n       * [Sample Code](#sample-code)\n       * [Script Gist](#script-gist)\n   * [Report Issue](#report-issue)\n   * [License](#license)\n   * [Thanks](#thanks)\n   * [Quote](#quote)\n   * [Disclaimer](#disclaimer)\n   * [Legal](#legal)\n   * [Contact](#contact)\n   * [Donation](#donation)\n\n# Download\n![](screenshot\/download-qr-code.png)\n* Binaries: [https:\/\/mydicebot.com\/contents\/download\/](https:\/\/mydicebot.com\/contents\/download\/)\n* Source Code: [https:\/\/github.com\/mydicebot\/mydicebot.github.io](https:\/\/github.com\/mydicebot\/mydicebot.github.io)\n\n# Supporting Dice Sites (alphabet sequence)\n## Traditional\n* [999Dice](https:\/\/www.999dice.com\/?224280708)\n* [999Doge](https:\/\/www.999doge.com\/?224280708)\n* [Bitsler](https:\/\/www.bitsler.com\/?ref=mydicebot)\n* [Crypto.Games](https:\/\/www.crypto.games?i=CpQP3V8Up2)\n* [DuckDice](https:\/\/duckdice.com\/ab61534783)\n* [Freebitco.in](https:\/\/freebitco.in\/?r=16392656)\n* [PrimeDice](https:\/\/primedice.com\/?c=mydicebot)\n* [ParaDice](https:\/\/paradice.in\/?c=mydicebot)\n* [Stake](https:\/\/stake.com\/?code=mydicebot)\n* [WinDice](https:\/\/windice.io\/?r=e63q8xq4y)\n* [WolfBet](https:\/\/wolf.bet\/?c=mydicebot)\n* [YoloDice](https:\/\/yolodice.com\/r?6fAf-wVz)\n\n## Blockchain - STEEM\n* [EpicDice](https:\/\/epicdice.io\/?ref=mydicebot)\n* [KryptoGames](https:\/\/kryptogamers.com\/?ref=mydicebot)\n\n## TODO\n* [BetKing (coming soon)](https:\/\/betking.io\/?ref=u:mydicebot)\n* [BitDice (coming soon)](https:\/\/www.bitdice.me\/?r=90479)\n* [BitVest (coming soon)](https:\/\/bitvest.io?r=108792)\n* [Dice-Bet (coming soon)](https:\/\/dice-bet.com\/?ref=u:mydicebot)\n* [KingDice (coming soon)](https:\/\/kingdice.com\/#\/welcome?aff=180722)\n* [MegaDice (coming soon)](https:\/\/www.megadice.com\/?a=326492144)\n* [NitroDice (coming soon)](https:\/\/www.nitrodice.com?ref=0N2pG8rkL7UR6oMzZWEj)\n* [NitrogenSports (coming soon)](https:\/\/nitrogensports.eu\/r\/4998127)\n* [SafeDice (coming soon)](https:\/\/safedice.com\/?r=100309)\n* (More will be coming soon)\n \n# Telegram Bot\n* [Bitcoin Click](https:\/\/t.me\/BitcoinClick_bot?start=RjbD)\n* [Dogecoin Click](https:\/\/t.me\/Dogecoin_click_bot?start=5vxX)\n* [Litecoin Click](https:\/\/t.me\/Litecoin_click_bot?start=clT4)\n* [BitconCash Click](https:\/\/t.me\/BCH_clickbot?start=Fh4n)\n* [Zcash Click](https:\/\/t.me\/Zcash_click_bot?start=3mgl)\n\n# Faucet\n* [FaucetPay Wallet](https:\/\/faucetpay.io\/?r=201981)\n* [Faucet Collector](https:\/\/faucetcollector.com\/?ref=4789455)\n* [AutoFaucet](https:\/\/autofaucet.org\/r\/mydicebot)\n\n# Mining\n* [CryptoTab](https:\/\/cryptotabbrowser.com\/4760331)\n* [MinerGate](https:\/\/minergate.com\/a\/840aa085f0deb4fef17fd6be)\n\n# Exchange\n* [Binance](https:\/\/www.binance.com\/en\/register?ref=40077522)\n\n# Quick Start\n* Download MyDiceBot Binaries here: [MyDiceBot Releases](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/releases).\n* Different execution methods on different platforms.\n    * Linux (Open Terminal)\n  \n        ```\n        chmod +x mydicebot-linux\n        ```\n\n        ```\n        .\/mydicebot-linux\n        ```\n\n    * Mac (Open Terminal)\n        \n        ```\n        chmod +x mydicebot-macos\n        ```\n\n        ```\n        .\/mydicebot-macos\n        ```  \n\n    * Windows (Open Command Prompt)\n        \n        ```\n        mydicebot-win.exe\n        ```\n\n* Choose Dice Site, Input username\/password\/2FA\/APIKey, then Login.\n* Bet and WIN.\n\n# How to run from source code directly\nEnsure you install the latest version of [docker](https:\/\/docs.docker.com\/engine\/installation\/) and [docker-compose](https:\/\/docs.docker.com\/compose\/install\/)\n\n```bash\ngit clone https:\/\/github.com\/mydicebot\/mydicebot.github.io.git mydicebot\ncd mydicebot\nbash start.sh\n```\n* Visit http:\/\/localhost:57432\/login\n\n# Features\n* Supported platforms: __Windows, Mac, Linux, Web, Terminal\/Console, Android__ and __Raspberry Pi__\n* Supported programming languages: __Lua, Javascript__ and __Python__\n* Supported multiple dice-sites\n* Supported multiple strategies\n* New account registration\n* Existing account login\n* Betting statistics\n* Manual bet\n* Auto bet\n* Script bet (__compatible with Seuntjies DiceBot scripts__)\n* Script gist\n* Chat room [MyDiceBot](https:\/\/discord.gg\/S6W5ec9) on [Discord](https:\/\/discord.gg\/S6W5ec9)\n\n# Manual Bet\n* You can control every bet by yourself.\n\n![](screenshot\/mydicebot-manual-bet.png)\n\n# Auto Bet\n* Essential configurations are provided for betting automatically.\n \n![](screenshot\/mydicebot-auto-bet.png)\n\n# Script Bet\n* Lua programming language\n* JavaScript programming language\n* Python programming language\n* __Compatible with the variables and functions of Seuntjie DiceBot's Lua script__\n* Import script from gist (Github) easily\n\n![](screenshot\/mydicebot-script-bet.png)\n\n## Internal Variables\n* __Single Bet Info__\n\n|Variable|Type|Permission|Purpose|\n|---|---|---|---|\n|__basebet__|double|Read Write|Shows the amount of the first bet. Only set for first bet.|\n|__previousbet__|double|Read Only|Shows the amount of the previous bet. Only set after first bet.|\n|__nextbet__|double|Read Write|The amount to bet in the next bet. You need to assign a value to this variable to change the amount bet. Defaults to previousbet after first bet. Needs to be set before betting can start.|\n|__chance__|double|Read Write|The chance to win when betting. Defaults to value set in advanced settings if not set. Need to set this value to change the chance to win\/payout when betting.|\n|__bethigh__|bool|Read Write|Whether to bet high\/over (true) or low\/under(false). Defaults to true (bet high\/bet over)|\n|__win__|bool|Read Only|Indicates whether the last bet you made was a winning bet (true) or a losing bet (false).|\n|__currentprofit__|double|Read Only|Shows the profit for the last bet made. This is not the amount returned. betting 1 unit at x2 payout, when winning, currentprofit will show 0.00000001 (returned =0.00000002), when losing, profit will show -0.00000001|\n|__currentstreak__|double|Read Only|Shows the current winning or losing streak. When positive (>0), it's a winning streak. When negative (<0) it's a losing streak. Can never be 0. Only set after first bet.|\n|__currentroll__|double|Read Only|Show current roll information|\n|__lastbet__|object|Read Only|This is an object containing more details about the previous bet, including the lucky number that was rolled, chance, amount, profit etc.|\n\n\n* __Current Session Info__\n\n|Variable|Type|Permission|Purpose|\n|---|---|---|---|\n|__balance__|double|Read Only|Lists your balance at the site you're logged in to.|\n|__bets__|int|Read Only|Shows the number of bets for the current session.|\n|__wins__|int|Read Only|Shows the number of wins for the current session.|\n|__losses__|int|Read Only|Shows the number of losses for the current session.|\n|__profit__|double|Read Only|Shows your session profit. Session is defined as the time since opening the current instance of bot or the last time you reset your stats in the bot.|\n|__currencies__|string array|Read Only|List the currencies that can be used at the current site, usually in the currency short code (btc, ltc, etc.).|\n|__currency__|string|Read Write|Can be used to change the currency to bet in using any value from the currencies list. Only values from the currencies list can be used.|\n\n\n## Internal Functions\n\n|Function|Purpose|\n|---|---|\n|__dobet()__|The loop of bets|\n|__stop()__|Stop the bet|\n|__start()__|Start the bet (from very beginning) after stop()|\n|__resume()__|Resume the bet (from current stopping) after stop()|\n|__resetsession()__|Reset the session|\n|__resetstats()__|Reset the session|\n|__resetseed()__|Reset the client seed|\n|__sound(path_of_the_sound)__|Sound notificaiton|\n|__message(text, type=\\'debug\\', expire=time_interval_value_in_ms)__|Message notification on the screen. Four types: \"info\", \"success\", \"debug\", or \"error\". Expire interval is 4000 ms by default, -1 for not hiding the message.| \n|__betinterval(ms)__|Bet Interval in milliseconds|\n\n## Sample Code\n* Strategy: Basic Martingale\n* Using Lua\n```lua\n    chance = 49.5\n    multiplier = 2\n    basebet = 0.00000010\n    bethigh = false\n\n    function dobet()\n        if profit >= 0.1 then\n            stop()\n        end\n        \n        if win then\n            nextbet = basebet\n        else\n            nextbet = previousbet * multiplier\n        end\n    end\n```\n* Using Javascript\n```javascript\n    chance = 49.5;\n    multiplier = 2;\n    baseBet = 0.00000001;\n    betHigh = false;\n\n    function dobet() {\n        if (win) {\n            nextBet = basebet;\n        } else {\n            nextBet = previousbet * multiplier;\n        }\n    }\n```\n* Using Python\n```python\n    chance = 49.5\n    multiplier = 2\n    basebet = 0.00000001\n    bethigh = False\n    nextbet = basebet\n\n    def dobet(event):\n        if win:\n            nextbet = basebet\n        else:\n            nextbet = previousbet * multiplier\n```\n\n## Script Gist\n* https:\/\/gist.github.com\/mydicebot\n* Import script from gist (github) in MyDiceBot app directly\n* Vote\/Comment\/Fork scripts on gist (github)\n\n# Report Issue\n* [https:\/\/github.com\/mydicebot\/mydicebot.github.io\/issues](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/issues)\n\n# License\n* GPL-3.0\n\n# Thanks\n* Special thanks to the open source project of [Seuntjies DiceBot](https:\/\/github.com\/Seuntjie900\/DiceBot). \n* If you need simulation functions or advanced-autobet functions, we recommand Seuntjies DiceBot.\n\n# Quote\n* \"Gambling is gambling no matter what you do or how good your strategy is. The house always wins if you keep playing. Winners know when to stop.\"\n* \"Like any human, we make mistakes, and like any program, the bot is bound to have a few bugs. Use the bot at your own risk. \"\n\n# Disclaimer\n* This is still gambling. The bot is not guaranteed to win. \n* Please do not gamble more than you can afford to lose. \n* The bot has a lot of settings, and we cannot test each and every combination. \n* The bot might behave unpredictable and unreliably with certain combinations of settings.\n* Certain actions from the server might also result in unexpected behavior. \n* We cannot be held responsible for any losses incurred while using the bot.\n\n# Legal\n* It is your obligation to ensure compliance with any legislation relevant to your country of domicile regarding online gambling.\n\n# Contact\n* github: [https:\/\/github.com\/mydicebot\/mydicebot.github.io\/issues](https:\/\/github.com\/mydicebot\/mydicebot.github.io\/issues)\n* steemit: [https:\/\/steemit.com\/@mydicebot](https:\/\/steemit.com\/@mydicebot)\n* bitcointalk: [\u2605MyDiceBot\u2605 - Ultimate Bitcoin Dice Bot. Bet More, Earn More!](https:\/\/bitcointalk.org\/index.php?topic=5057661)\n* discord: [https:\/\/discord.gg\/S6W5ec9](https:\/\/discord.gg\/S6W5ec9)\n\n# Donation\n* BTC: 19Yw3Hs8zAidGEUNeEUM2r4tXLnrJDy7kN\n* ETH: 0x3d652737ad9906344C0fb9C693bD3917FDaa37dC\n* BCH: qpwukqk0a557yytlg9x9tl77qjh8lje03gyd73qgm6\n* DOGE: D9wMjdtGqsDZvjxWMjt66JLjE9E9nMAKb7\n* steemit: [@mydicebot](https:\/\/steemit.com\/@mydicebot)\n","156":"","157":"# MultiVendorBitcoinMart - secure anonymous multi vendor Bitcoin Market\nSecure bitcoin market built on PHP 5.\n\nVisit these sites to get an idea how good this really is !!!!\n\n\nhttps:\/\/p7eh5edklvpsqiya.onion\nhttp:\/\/multivendorbitcoinmarket.1234max.com\n\n![MultiVendorBitcoinMart listings](https:\/\/1234max.co.uk\/wp-content\/uploads\/2016\/05\/som.png)\n\nThe entry version provides only a basic set of marketplace features, but offers a significant higher level of [security](https:\/\/github.com\/1234max\/MultiVendorBitcoinMart\/wiki\/Security-&-Design-decisions)\nwhich would protect against a very strong adversary.\n\nPlus, its bitcoin implementation avoids the use of live wallets by using multisig transactions and BIP32 hierarchical keys. \nNeither valuable bitcoins nor user private keys are stored on the marketplace. \n\nWhy PHP? We use a custom, tiny MVC framework on top of a stripped-down php-core to keep the attack surface minimal.\nSee [Security & design decisions - PHP](https:\/\/github.com\/1234Max\/MultiVendorBitcoinMart\/wiki\/Security-&-Design-decisions#php) for more.\n\n## Features\n\n* Basic 'shop' features (create products, shipping options, order lifecycle)\n* Bitcoin multisig transactions & BIP32 keys\n* PGP encryption of shipping info\n* Simple admin interface (disputes etc.)\n\nSee [Features](https:\/\/github.com\/1234max\/MultiVendorBitcoinMart\/wiki\/Features) for more.\n\n## Requirements\n\n* Tested only on Linux for now, MAC OS X & other unices should work, too\n* PHP 5.4+ (see Quickstart below) & Database Service (Like MySQL 5+,POstgreSQL,Etc)\n* PHP dependencies as mentioned below (gnupg etc.) must compile on your platform\n* ImageMagick (`identify`, `convert`, `mogrify` executables must be in `PATH`)\n* Local or Remote Bitcoin RPC Service\n","158":"This program is free software: you can redistribute it and\/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n\nDB\n--\n\nThe PDNS DB should be the default one according to the PDNS docs\nhttp:\/\/doc.powerdns.com\/generic-mypgsql-backends.html\nAdditionally, a low query-cache should be set so that new nodes are always\nbeing returned, and gmysql-any-query should be set to\nselect content,ttl,prio,type,domain_id,name from records where name='%s' order by rand() limit 10\n\nThe bitcoin db should be as follows:\n\nSET SQL_MODE=\"NO_AUTO_VALUE_ON_ZERO\";\n\n-- Database: `bitcoin`\n\nCREATE TABLE IF NOT EXISTS `nodes` (\n  `ipv4` int(11) NOT NULL,\n  `port` smallint(5) unsigned NOT NULL DEFAULT '8333',\n  `last_check` timestamp NULL DEFAULT NULL,\n  `accepts_incoming` bit(1) NOT NULL DEFAULT b'0',\n  `version` int(11) DEFAULT NULL,\n  `last_seen` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `first_up` timestamp NULL DEFAULT NULL,\n  PRIMARY KEY (`ipv4`,`port`),\n  KEY `last_check` (`last_check`),\n  KEY `last_seen` (`last_seen`)\n);\n\nRunning\n-------\n\nTo bootstrap call php bitcoin-scan.php (the ip of a known-good node)\nie\nphp bitcoin-scan.php `dig +short bluematt.me`\nwarning: this node will end up in the database, so call a node by its public ip\nfollowed by repeated calls to php bitcoin-scan-net.php which will fill the dbs\nquite quickly.\nbitcoin-scan-net.php should also be put on an appropriate cron job, checking\nto make sure it isnt already running (which would just duplicate effort)\n\nBugs\/Todo\/etc\n-------------\nTODO: I didnt bother with setting up PDNS to simply pull from the bitcoin db, which\nis probably more ideal than its own separate db simply becaues I already have a pdns\ndb and server configured.\nThis could be achieved using the appropriate gmysql-*-query settings in pdns.conf\n\n","159":"# Bitcoin Cash JSON-RPC library\n\n## Javascript Library to communicate with your Bitcoin Unlimited \/ Bitcoin ABC \/ Bitcoin Classic Node.\n\n![header](https:\/\/user-images.githubusercontent.com\/5941389\/30766133-0cb8e34e-9fa8-11e7-8c8b-3b7867ad42ba.jpg)\n\nThis is a promise-based library and `async\/await` compatible. Includes a couple\nadditional helpers, such as a QRcode generator as well as Bitpay's Address\ntranslator. Supports both address formats.\n\n## Installation\n\ngrab from NPM\n\n```\n  npm i bitcoin-cash-rpc\n```\n\n## Usage\n\n```\nlet bchRPC = require(\"bitcoin-cash-rpc\");\nlet bch = new bchRPC(host, username, password, port, timeout, debugging);\n\n\/\/ timeout is 3000 by default\n\/\/ debugging is true by default, false makes the library silent and requires try\/catch on the app level.\n\n\n```\n\n```\n let info = await bch.getInfo();\n\n console.log(info)\n\n \/\/ results in\n \/\/{\n \/\/  \"version\": 1010101,\n \/\/  \"protocolversion\": 80003,\n \/\/  \"walletversion\": 60000,\n \/\/  \"balance\": 0.00000000,\n \/\/  \"blocks\": 478559,\n \/\/  \"timeoffset\": 0,\n \/\/  \"connections\": 12,\n \/\/  \"proxy\": \"\",\n \/\/  \"difficulty\": 29829733124.04042,\n \/\/  \"testnet\": false,\n \/\/  \"keypoololdest\": 1506057198,\n \/\/  \"keypoolsize\": 100,\n \/\/  \"paytxfee\": 0.00000000,\n \/\/  \"relayfee\": 0.00001000,\n \/\/  \"errors\": \"\",\n \/\/  \"fork\": \"Bitcoin Cash\"\n \/\/}\n\n```\n\nor\n\n```\n p = Promise.resolve(bch.getInfo());\n p.then(info=>{\n    console.log(info);\n })\n```\n\n## Available Methods\n\nthere is incomplete coverage at the moment. Please submit a PR if you'd like to\nhave a method added.\n\n`getInfo` `getBlockCount` `getWalletInfo` `getUnconfirmedBalance` `getBalance`\n`getWalletInfo` `getBlockHash` `getNewAddress` `setTxFee` `validateAddress`\n`sendToAddress` `sendFrom` `getAccountAddress` `getBlock` `getTxOut`\n`listTransactions` `listUnspent` `estimateSmartFee` `getTransaction`\n`getRawTransaction` `getRawMempool` `getRawChangeAddress` `signRawTransaction`\n`sendRawTransaction` `decodeRawTransaction` `getTxoutProof`\n\n## Compatible Node Implementations\n\nYou must be running a Node (Pruned mode is fine)\n\n[Bitcoin ABC](https:\/\/www.bitcoinabc.org\/)\n\n[Bitcoin XT ](https:\/\/bitcoinxt.software\/)\n\n[Bitcoin Unlimited (Cash)](https:\/\/www.bitcoinunlimited.info\/)\n\n### Tested on Node v7.10, and npm v5.4.1\n","160":"# Android Donations Lib\n\nAndroid Donations Lib supports donations by Google Play Store, Flattr, PayPal, and Bitcoin.\n\nIt is used in projects, such as OpenKeychain, AdAway, FasterGPS, and NTPSync.\n\n**NOTE: Google mailed me to remove PayPal donation capability when publishing on Google Play! Thus, you should build \"product flavors\" defined by the example: One version with Google Play donation capability and one with Paypal, Flattr, and Bitcoin!**\n\n## How to use\n\n1. Add dependency to your build.gradle:\n    ```\n    repositories {\n        jcenter()\n    }\n\n    dependencies {\n        compile 'org.sufficientlysecure:donations:2.6'\n    }\n    ```\n2. Instantiate the fragment where you want to use it. Check out the example app for this: [DonationsActivity.java](https:\/\/github.com\/sufficientlysecure\/donations\/blob\/master\/example\/src\/main\/java\/org\/sufficientlysecure\/donations\/example\/DonationsActivity.java)\n3. Don't forget to pass through results in ``onActivityResult()`` back to the fragment as shown in [DonationsActivity.java](https:\/\/github.com\/sufficientlysecure\/donations\/blob\/master\/example\/src\/main\/java\/org\/sufficientlysecure\/donations\/example\/DonationsActivity.java).\n4. When publishing the app you must create managed in-app products for your app in the Google Play Store that matches the ones you defined in ``private static final String[] GOOGLE_CATALOG``\n\n## Build flavors\n1. Keep in mind that Google forbits other payment methods besides Google Play. Thus, in the example, two build flavors are used. Check out [ExampleApp\/build.gradle](https:\/\/github.com\/sufficientlysecure\/donations\/blob\/master\/example\/build.gradle). The build script adds ``DONATIONS_GOOGLE`` to the auto generated BuildConfig.java.\n2. Add ``<uses-permission android:name=\"android.permission.INTERNET\" \/>`` to product flavors that use Flattr\n3. Add ``<uses-permission android:name=\"com.android.vending.BILLING\" \/>`` to product flavors that use Google Play In-app billing\n\n\n## Screenshots\n\n| Product Flavor: Google | Product Flavor: Fdroid |\n|------------------------|------------------------|\n| ![Screenshot](https:\/\/github.com\/sufficientlysecure\/donations\/raw\/master\/screenshot-google.png) | ![Screenshot](https:\/\/github.com\/sufficientlysecure\/donations\/raw\/master\/screenshot-fdroid.png) |\n\n## Translations\n\nHelp translating on [Transifex](https:\/\/www.transifex.com\/sufficientlysecure\/donations\/).\n\n## Build Example App with Gradle\n\n1. Have Android SDK \"tools\", \"platform-tools\", and \"build-tools\" directories in your PATH (http:\/\/developer.android.com\/sdk\/index.html)\n2. Export ANDROID_HOME pointing to your Android SDK\n3. Download Android Support Repository, and Google Repository using Android SDK Manager\n4. Execute ``.\/gradlew build``\n\n## Add the lib to your project\n\n## Changelog\n### 2.6\n* Force Intent chooser for PayPal\n* Min SDK 14\n\n### 2.5\n* Sync translations\n\n### 2.4\n* Fix NPE without billing service\n\n### 2.3\n* Publish to JCenter\n\n### 2.2\n* Updated build files\n* Added bitcoin support (thanks to Oleg Vaskevich)\n\n### 2.1\n* Permissions are now defined per product flavor, they were removed from library's AndroidManifest\n\n### 2.0\n* Now uses Gradle Build System (http:\/\/tools.android.com\/tech-docs\/new-build-system)\n* No xml configuration needed anymore!\n* Fragment can be instantiated and used in any Activity.\n* You can build \"product flavors\" defined by the ExampleApp: One version with Google Play Donation capability and one with Paypal and Flattr! (Google mailed me to remove PayPal donation capability when publishing on Google Play!)\n\n## Contribute\n\nFork Android Donations Lib and do a pull request. I will merge your changes back into the main project.\n\n","161":"# Datapay\n\nDatapay is the simplest library for building and broadcasting data transactions to the **Bitcoin SV blockchain**.\n\n![logo](logo.png)\n\n---\n\n# Preview\n\nPost to the blockchain with just 4 lines of code. \n\n![code](code.png)\n\n---\n\n# Demo\n\n## 1. Datapay Transaction Composer\n\n- [Datapay transaction composer](https:\/\/unwriter.github.io\/datapay\/example\/composer)\n\n- [View source](example\/composer.html)\n\n## 2. Microblogging Playground\n\nPost to both Memo.cash and Blockpress with a single interface.\n\n- [DEMO](https:\/\/unwriter.github.io\/datapay\/example\/playground)\n\n- [View source](example\/playground.html)\n\n---\n\n\n# Install\n\n## 1. In node.js\n\nInstall both `datapay` and `bsv` (Datapay has a peer dependency on bsv)\n\n```\nnpm install --save datapay\nnpm install --save bsv\n```\n\nand then require it\n\n```\nconst datapay = require('datapay')\n```\n\n## 2. In browser\n\n```\n<script src='https:\/\/unpkg.com\/datapay@0.0.15\/dist\/datapay.min.js'><\/script>\n```\n\n---\n\n# Quickstart\n\nSend `\"Hello from datapay\"` to [memo.cash](https:\/\/memo.cash) in 5 lines of code.\n\n\n```\nconst privateKey = [YOUR PRIVATE KEY HERE];\ndatapay.send({\n  safe: true,\n  data: [\"0x6d02\", \"Hello from datapay\"],\n  pay: { key: privateKey }\n});\n```\n\nAbove code builds an `OP_RETURN` transaction with `0x6d02 hello` as push data, and broadcasts it to Bitcoin SV network.\n\n---\n\n# Declarative Programming\n\nDatapay lets you build a transaction in a declarative manner. Here's an example:\n\n```\nvar config = {\n  safe: true,\n  data: [\"0x6d02\", \"hello from datapay\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    rpc: \"https:\/\/api.mattercloud.net\",\n    fee: 400,\n    to: [{\n      address: \"1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81\",\n      value: 1000\n    }]\n  }\n}\n```\n\nAbove config describes a transaction that:\n\n- Posts `\"hello from datapay\"` to [memo.cash](https:\/\/memo.cash) network (See the protocol at [https:\/\/memo.cash\/protocol](https:\/\/memo.cash\/protocol)),\n- paying the fee of `400` satoshis,\n- signed with a private key: `5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw`,\n- through a public JSON-RPC endpoint at [https:\/\/api.mattercloud.net](https:\/\/api.mattercloud.net)\n- while tipping the user `1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81` a value of `1000` satoshis.\n\nAll you need to do to invoke it is call:\n\n```\ndatapay.send(config)\n```\n\nWant to instead build a transaction but save it for later or export it? Just call:\n\n```\ndatapay.build(config, function(error, tx) {\n  console.log(\"Here's the transaction! : \", tx)\n})\n```\n\nAnd that's it! No complex APIs, but you can construct pretty much all kinds of OP_RETURN transactions.\n\n---\n\n# How it works\n\n`datapay` is powered by [bsv](https:\/\/github.com\/moneybutton\/bsv), which in turn is a fork of [bitcore-lib](https:\/\/github.com\/bitpay\/bitcore-lib), which means all the low level transactions are completely robust and secure, since they're being used in production at companies like:\n\n- [Moneybutton](https:\/\/moneybutton.com)\n- [Bitpay](https:\/\/bitpay.com)\n- and more\n\n`datapay` was created in order to make it dead simple to construct `OP_RETURN` related transactions, but you can even use it to build regular transactions.\n\nAlso `datapay` exposes `datapay.bsv` endpoint which you can use to access the underlying `bsv` library. If you need more sophisticated features (in most cases you won't), feel free to use this feature. Best of both worlds!\n\n---\n\n# API\n\nDatapay is designed with a different philosophy than conventional Bitcoin transaction libraries.\n\nWhile **traditional Bitcoin libraries focus on sending money**, datapay is focused on **sending data**.\n\nThe API is optimized to make this as simple as possible. Datapay library has only two methods:\n\n1. `build`: For building a transaction (but not sending)\n2. `send`: For sending a transaction\n\n## 1. build\n\n\"build\" builds a transaction but doesn't broadcast it to the network.\n\nThe `build()` method takes two arguments:\n\n1. A JSON object describing the type of transaction\n2. **A callback function that will be called after building the transaction:** The callback function has two arguments. The first is an error object if something fails. The second is the constructed transaction.\n\nThe first argument--a declarative JSON object--can contain the following attributes:\n\n- `safe`: Please set to `true`. This will create a \"safe\" `OP_FALSE OP_RETURN` transaction instead of raw `OP_RETURN`. ([Learn more](https:\/\/bitcoinsv.io\/2019\/07\/27\/the-return-of-op_return-roadmap-to-genesis-part-4\/))\n- `data`: For constructing `OP_RETURN` data\n- `pay`: For describing everything related to actually sending money\n- `tx`: For importing previously \"built\" transactions\n\n\n### A. data\n\nThe `data` attribute is used to construct human readable\/processable data to post to the blockchain.\n\n\n#### 1. Buid from push data array\n\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"]\n}\ndatapay.build(tx, function(err, tx) {  \n  \/**\n  * res contains the generated transaction object, powered by bsv\n  * You can check it out at https:\/\/github.com\/moneybutton\/bsv\/blob\/master\/lib\/transaction\/transaction.js\n  * Some available methods you can call on the tx object are:\n  * 1. tx.toString() => Export as string\n  * 2. tx.toObject() => Inspect the transaction as JSON object\n  **\/\n});\n```\n\n**NOTE:** Each item in the `data` array can either be:\n\n1. a regular string\n2. a hex string\n3. Binary data ([Buffer](https:\/\/nodejs.org\/api\/buffer.html) in node.js, and [ArrayBuffer](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/ArrayBuffer) in browser)\n\n**To use hex string, simply prefix the string with \"0x\"**. \n\n**To use Buffer types, just pass the Buffer (or ArrayBuffer) object as push data.**\n\n**To use an opcode, pass an object `{op: [OPCODE]}`** (You can see the OPCODE list [here](https:\/\/github.com\/moneybutton\/bsv\/blob\/master\/lib\/opcode.js#L78))\n\nIn above example, we can see that the first item is `\"0x6d02\"`. Datapay will automatically recognize this as a hex string and interpret as a hex string (while discarding the 0x prefix before the interpretation)\n\n\n#### 2. Build from Binary Data + String\n\nIn Node.js (Buffer)\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", Buffer.from(\"Abc\"), \"hello world\"]\n}\ndatapay.build(tx, function(err, tx) {  \n  \/**\n  * res contains the generated transaction object, powered by bsv\n  * You can check it out at https:\/\/github.com\/moneybutton\/bsv\/blob\/master\/lib\/transaction\/transaction.js\n  * Some available methods you can call on the tx object are:\n  * 1. tx.toString() => Export as string\n  * 2. tx.toObject() => Inspect the transaction as JSON object\n  **\/\n});\n```\n\nIn Browser, building OP_RETURN from `input[type=file]` (ArrayBuffer)\n\n```\ndocument.querySelector(\"input[type=file]\").onchange = function(e) {\n  \/\/ get file type\n  var filetype = e.target.files[0].type\n  var reader = new FileReader();\n  \/\/ Listen to file load event (Will call the actual load below)\n  reader.addEventListener('load', function(event) {\n    \/\/ ArrayBuffer\n    var ab = event.target.result\n    datapay.build({\n      data: [ \"19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut\", ab, filetype ]\n    }, function(err, res) {\n      console.log(\"built transaction = \", res)\n    })\n  })\n  \/\/ Read file content as \"ArrayBuffer\"\n  reader.readAsArrayBuffer(e.target.files[0]);\n}\n```\n\n#### 3. Build from hex string representing the script\n\nThis is useful if you want to export a transaction and later recover it.\n\n```\nconst tx = {\n  data: \"6a04366430320b68656c6c6f20776f726c64\"\n}\ndatapay.build(tx, function(err, tx) {\n  \/**\n  * res contains the generated transaction object, powered by bsv\n  * You can check it out at https:\/\/github.com\/moneybutton\/bsv\/blob\/master\/lib\/transaction\/transaction.js\n  * Some available methods you can call on the tx object are:\n  * 1. tx.toString() => Export as string\n  * 2. tx.toObject() => Inspect the transaction as JSON object\n  **\/\n});\n```\n\n---\n\n### B. pay\n\nThe `pay` attribute deals with everything related to actually sending money.\n\n- `key`: Signing with private key\n- `rpc`: Specifying a JSON-RPC endpoint to broadcast through\n- `fee`: Specifying transaction fee\n- `feeb`: Specifying transaction fee per byte\n- `to`: Attaching tips on top of OP_RETURN messages (Normally OP_RETURN transactions don't have a receiver)\n\nWhen a `pay` attribute is present, the `build()` call generates a `transaction` instead of a `script`.\n\n#### 1. `key`\n\nThe `key` attribute is mandatory. You must specify a private key in order to sign a transaction.\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: { key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\" }\n}\ndatapay.build(tx, function(err, tx) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included)\n  **\/\n})\n```\n\n\n#### 2. `rpc`\n\nThe `rpc` attribute is used to manually set the JSON-RPC endpoint you wish to broadcast through. \n\n- default: `https:\/\/api.mattercloud.net`\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    rpc: \"https:\/\/api.mattercloud.net\"\n  }\n};\ndatapay.build(tx, function(err, res) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included)\n  **\/\n})\n```\n\n#### 3a. `fee`\n\nThe `fee` attribute is used to specify the transaction fee in **satoshis**.\n\n- default: `400`\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    rpc: \"https:\/\/api.mattercloud.net\",\n    fee: 400\n  }\n}\ndatapay.build(tx, function(err, res) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included)\n  **\/\n})\n```\n\n#### 3b. `feeb`\n\nThe `feeb` attribute is used to specify the transaction fee per byte in **satoshis**.\n\n- default: `1.4`\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    rpc: \"https:\/\/api.mattercloud.net\",\n    feeb: 1.04\n  }\n}\ndatapay.build(tx, function(err, res) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included)\n  **\/\n})\n```\n\n#### 4. `to`\n\nThe `to` attribute is an array of receivers to send the OP_RETURN to. Normally this is left empty because most `OP_RETURN` transactions are meant to have no receivers. But you can also send it to multiple users. For example you can use this feature to send tips to one or more people.\n\n- default: `null`\n- Each item in the `to` array can have 2 attributes:\n  - address: Bitcoin SV address string\n  - value: number (in satoshi)\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    to: [{\n      address: \"1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81\",\n      value: 500\n    }, {\n      address: \"1A2JN4JAUoKCQ5kA4pHhu4qCqma8jZSU81\",\n      value: 500\n    }]\n  }\n};\ndatapay.build(tx, function(err, res) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included.\n  * Also, the transaction includes actual coin transfer outputs,\n  * since the \"to\" attribute is included)\n  **\/\n})\n```\n\n#### 5. `filter`\n\nBy default, datapay uses ALL existing UTXOs associated with an address.\n\nBut sometimes you want more fine-grained control over which UTXOs to use for a transaction. For example, it is critical for UTXO-based token protocols like SLP (Simple Ledger Protocol) to make sure that a UTXO containing an SLP token transaction is ONLY used for SLP transactions. (Otherwise your token is lost)\n\nFor this feature, datapay uses [Bitquery](https:\/\/docs.bitdb.network\/docs\/query_v3) as a filter to describe the UTXOs to filter out.\n\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\",\n    filter: {\n      v: 3,\n      q: {\n        find: {\n          \"out.b0\": { \"op\": 106 },\n          \"out.s1\": \"SLP\"\n        }\n      }\n    }\n  }\n}\ndatapay.build(tx, function(err, tx) {\n  \/**\n  * res contains the generated transaction object\n  * (a signed transaction, since 'key' is included)\n  **\/\n})\n```\n\n---\n\n### C. tx\n\nYou may want to import a previously exported transaction. This is when you use the `tx` attribute.\n\n#### 1. Importing a transaction from exported hex string\n\n```\ndatapay.build({\n  tx: \"01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000\"\n}, function(err, tx) {\n  \/\/ 'tx' is a transaction object\n})\n```\n\n#### 2. Importing an unsigned transaction and building a signed transaction\n\nYou can export an unsigned transaction, and later import and sign it to create a signed transaction, simply by supporting a `pay.key` attribute.\n\n```\n\/\/ import an unsigned transaction and sign it\ndatapay.build({\n  tx: \"01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000\",\n  pay: {\n    key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\"\n  }\n}, function(err, tx) {\n  \/\/ 'tx' is a signed transaction object\n})\n```\n\nNotice how in addition to the `tx` attribute we've added the `pay.key` attribute. This will import the unsigned transaction and sign it.\n\n\n#### 3. Importing and sending a signed transaction from exported hex string\n\nIf you already have a signed transaction object, you can simply send it away without any additional steps.\n\n```\ndatapay.send({\n  tx: \"01000000014182e9844c2979d973d3e82c55d57e1a971ed2e5473557ce0414864612911aa5010000006b48304502210098f8f32cd532bc73eef1e01c3d359caf0a7aa8f3dc1eebb8011d80810c9dbe66022054c6b23d5bd9573a1e6135c39dcc31a65cab91f3b3db781995e824614e24bad9412102d024c1861ccc655ce3395bc4d8a0bdcfb929ffcd9d1a8c81d8c6fa1dfb9bd70cffffffff020000000000000000106a026d020b68656c6c6f20776f726c64c2ff0000000000001976a9142a3a6886d98776d0197611e5328ba8806c3739db88ac00000000\"\n}, function(err, hash) {\n  \/\/ 'hash' is the transaction hash\n})\n```\n\n---\n\n## 2. send\n\nInstead of just building, you can build AND send. Same syntax as `build()`.\n\nThe only difference is the callback function.\n\n- build() returns a constructed transaction object through the callback\n- send() returns a transaction hash (since it's already been sent)\n\n### A. Sending from data and pay\n\n```\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"])\n  pay: { key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\" }\n}\ndatapay.send(tx, function(err, res) {\n  console.log(res)\n})\n```\n\n### B. Building an UNSIGNED transaction and exporting, and then later importing and sending the transaction in separate steps\n\n```\n\/\/ Build and export an unsigned transaction for later usage\nvar exportedTxHex = \"\";\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"]\n}\ndatapay.build(tx, function(err, res) {\n  exportedTxHex = res;\n})\n\n\/\/ Later import exportedTxHex and sign it with privatkey, and broadcast, all in one method:\ndatapay.send({\n  tx: exportedTx,\n  pay: { key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\" }\n}, function(err, hash) {\n  \/\/ hash contains the transaction hash after the broadcast\n})\n```\n\n### C. Building a SIGNED transaction and exporting, and then later importing and sending\n\nThis time since the exported transaction is already signed, no need for additional `pay.key` attriute when sending later\n\n\n```\n\/\/ Build and export an unsigned transaction for later usage\nvar exportedSignedTxHex = \"\";\nconst tx = {\n  safe: true,\n  data: [\"0x6d02\", \"hello world\"],\n  pay: { key: \"5JZ4RXH4MoXpaUQMcJHo8DxhZtkf5U5VnYd9zZH8BRKZuAbxZEw\" }\n}\ndatapay.build(tx, function(err, res) {\n  exportedSignedTxHex = res;\n})\n\n\/\/ Later import exportedTxHex and broadcast, all in one method:\ndatapay.send({\n  tx: exportedSignedTx,\n}, function(err, hash) {\n  \/\/ hash contains the transaction hash after the broadcast\n})\n```\n\n---\n\n# Advanced\n\nDatapay depends on two powerful libraries for low level stuff.\n\n1. bsv: https:\/\/github.com\/moneybutton\/bsv\n2. bitcore-explorers: https:\/\/github.com\/bitpay\/bitcore-explorers\n\nWhile Datapay is designed to be the simplest possible way to write data to the blockchain, you may want to sometimes access the low level libraries that power datapay.\n\nDatapay exposes additional endpoints so you can simply access these libraries without having to install or include any additional libraries.\n\n## 1. datapay.bsv\n\nThis endpoint exposes the [bsv](https:\/\/github.com\/moneybutton\/bsv) library object. Basically by referncing `bsv` you have access to the entire bsv library.\n\n```\nconst privateKey = new datapay.bsv.PrivateKey();\nconst address = privateKey.toAddress();\nconsole.log(address.toString()) \/\/ 15WZwpw3BofscM2u43ji85BXucai5YGToL\n```\n\n## 2. datapay.connect\n\nThis endpoint is used to access the [bitcore-explorers](https:\/\/github.com\/bitpay\/bitcore-explorers) library.\n\nUsing this endpoint you can connect to a public JSON-RPC endpoint to let you make various direct JSON-RPC function calls such as `getUnspentUtxos`, etc. (Basically it instantiates and returns the `insight` object from https:\/\/github.com\/bitpay\/bitcore-explorers)\n\n### Syntax\n\n```\ndatapay.connect([RPC ENDPOINT]).[METHOD]\n```\n\nIf you leave the `RPC ENDPOINT` part out, it will automatically use the default https:\/\/api.mattercloud.net node\n\n### Example 1: Connecting to default node and calling `getUnspentUtxos()` method:\n\n```\ndatapay.connect().getUnspentUtxos(\"14xMz8rKm4L83RuZdmsHXD2jvENZbv72vR\", function(err, utxos) {\n  if (err) {\n    console.log(\"Error: \", err)\n  } else {\n    console.log(utxos) \n  }\n})\n```\n\n### Example 2. Specifying a JSON-RPC endpoint\n\n```\ndatapay.connect('https:\/\/api.mattercloud.net').getUnspentUtxos(\"14xMz8rKm4L83RuZdmsHXD2jvENZbv72vR\", function(err, utxos) {\n  if (err) {\n    console.log(\"Error: \", err)\n  } else {\n    console.log(utxos) \n  }\n});\n```\n","162":"# bitcoin-explorer - Bitcoin Blockchain Local Maltego Transform Pack\n\nAuthor : David Bressler (@bostonlink)\n\n## About\n\nMaltego local transform pack that parses the Bitcoin Blockchain (blockexplorer.com) and creates Maltego graphs based on bitcoin wallet addresses and transactions.  Will allow analysts to look up specific addresses and identify relationships between transactions and holding patterns visually.  Further, it will allow analysts to quickly follow specific Bitcoin transactions in the case of following stolen bitcoins easily and percisely with the data returned from blockexplorer.com.  In addition if an owner of a specifc bitcoin address discloses the address publicly in a way that reveals their online persona or identify then it is possible to relate a bitcoin wallet address to a specific persona or identity in this way.  \n\nDirectory Structure:\n\n* `src\/bitcoin-explorer` directory is where all the magic stuff goes and happens.\n* `src\/bitcoin-explorer\/transforms` directory is where all the transform modules are located.\n* `src\/bitcoin-explorer\/transforms\/common` directory is where common code for all transforms are stored.\n* `src\/bitcoin-explorer\/transforms\/common\/entities.py` is where custom entities are defined.\n* `maltego\/` is where the Maltego entity exports are stored.\n* `src\/bitcoin-explorer\/resources\/maltego` directory is where the `entities.mtz` and `*.machine` files are stored for auto install and uninstall.\n\n## 2.0 - Installation\n\n### 2.1 - Supported Platforms\nbitcoin-explorer has currently been tested on Mac OS X and Linux.\nFurther testing will be done on Windows in the near future.\n\n### 2.2 - Requirements\nbitcoin-explorer is supported and tested on Python 2.7.x\n\nThe canari framework must be installed to use this package\nSee: https:\/\/github.com\/allfro\/canari\n\nA Google Custom Search Engine (The whole internet)\nSee: https:\/\/support.google.com\/customsearch\/answer\/2631040?hl=en\n\nGoogle Developers API\nSee: https:\/\/console.developers.google.com\n\nThis package depends on the python requests package, the package will be installed when you run setup.py automatically if you do not already have the 'requests' package installed.\n\n### 2.3 - How to install\nOnce you have the Canari framework installed and working, follow the directions below to install bitcoin-explorer\n\nInstall the package:\n\n```bash\n$ cd bitcoin-explorer\n$ python setup.py install\n```\nThen install the canari package by issuing the following:\n\n```bash\n$ canari create-profile bitcoin-explorer\n```\n\n INSTRUCTIONS:\n -------------\n 1. Open Maltego.\n 2. Click on the home button (Maltego icon, top-left corner).\n 3. Click on 'Import'.\n 4. Click on 'Import Configuration'.\n 5. Follow prompts.\n 6. Enjoy!\n\nOnce installed you must edit the bitcoin-explorer.conf file with Google custom search engine and Google (browser) API.  See the requirements section above for resources to the Google CSE and API.\n\n```bash\n$ vim ~\/.canari\/bitcoin-explorer.conf\n```\nAll Done!!  Have fun!\n\n## Special Thanks!\n\nThe entire Bitcoin and crypto currency community<br\/>\nPaterva (@Paterva)<br\/>\nNadeem Douba (@ndouba)<br\/>\nMassHackers (@MassHackers)<br\/>\nGuidePoint Security LLC. (@GuidePointSec)<br\/>\n","163":"\ntrezor.js\n=========\n\n[![Build Status](https:\/\/travis-ci.org\/trezor\/trezor.js.svg?branch=master)](https:\/\/travis-ci.org\/trezor\/trezor.js)\n\nJavascript API for Trezor.\n\nWe are currently migrating from this library to Trezor Connect. When Trezor Connect is done and tested, this library will be deprecated.\n\nRight now, you can use this library for integrating into node js apps. \n\nInstall with npm\n-----\n\n`npm install --save trezor.js`\n\n#### Flow\ntrezor.js is annotated with [Flow](https:\/\/github.com\/facebook\/flow) types; if you want to use Flow and use the previous setup, it will use the right types. Note that you might have to set up `.flowconfig` to include all the modules and interface files in [our flowconfig](https:\/\/github.com\/trezor\/trezor.js\/blob\/master\/lib\/.flowconfig)\n\nto run flow use `make flow` \n\n#### Build \nto build production bundle run `make build`\n\n#### eslint\n`make eslint`\n\nUsing trezor.js in a web app\n----\nWe are winding down trezor.js for web apps. Please use TREZOR Connect.\n\nUsing trezor.js in a node app\n----\nTrezor.js should be possible to use from node.js if the user has Trezor Bridge installed, because origin URLs are spoofed.\n\nTrezor used to work with node HID API directly, but the binary API and the various node versions got too hard to manage, so we removed them.\n\ntrezor.js API\n-----\n\nAPI is explained in [API.md](https:\/\/github.com\/trezor\/trezor.js\/blob\/master\/API.md)\n","164":"# Bitcoin addresses bruteforce tool via GPU OpenCL\n\n\u041d\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u0432\u0442\u043e\u0440\u0430 \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u0438\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \"Large Bitcoin Collider\" https:\/\/lbc.cryptoguru.org \n\u0446\u0435\u043b\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0438\u0441\u043a \u043a\u043e\u043b\u043b\u0438\u0437\u0438\u0439 \u0445\u0435\u0448\u0430 ripemd160 (hash 160), \u044f\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u0430 bitcoin \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.\n\u0422.\u0435. \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 2^96 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 ripemd160 \u0445\u0435\u0448 \u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043e\u0434\u0438\u043d bitcoin \u0430\u0434\u0440\u0435\u0441.\n\n## \u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\n\n\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u043a\u0430\u043a \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u044d\u043b\u043b\u0438\u043f\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u0440\u0438\u0432\u044b\u0445 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u043a\u043b\u044e\u0447\u0435\u0439, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u0438 \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u0445\u0435\u0448 ripemd160, \u0438\u0449\u0435\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u0435\u0448\u0435\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 bitcoin \u0430\u0434\u0440\u0435\u0441\u043e\u0432.\n\u0415\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0445\u0435\u0448\u0435\u0439, \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0447\u0442\u043e \u043d\u0430\u0439\u0434\u0435\u043d \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 bitcoin \u0430\u0434\u0440\u0435\u0441\u043e\u0432.\n\n1. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0445\u0435\u0448\u0435\u0439 ripemd160 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u043c\u044b\u0445 bitcoin \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435. \n\u0422.\u0435. \u044d\u0442\u043e \u0444\u0430\u0439\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0440\u044f\u0434 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0445\u0435\u0448\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u043c\u044b\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 (20 \u0431\u0430\u0439\u0442 \u043d\u0430 \u0445\u0435\u0448).\n\u041a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0444\u0430\u0439\u043b \u0441 \u0445\u0435\u0448\u0430\u043c\u0438 bitcoin \u0430\u0434\u0440\u0435\u0441\u043e\u0432 (\u0444\u0430\u0439\u043b bitcoin.bin).\n\n2. \u0414\u0430\u043b\u0435\u0435, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0445\u0435\u0448\u0435\u0439 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 (\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u0434\u0435\u043b).\n\n3. \u0415\u0441\u043b\u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e \u043e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0418\u0437 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447, \u0430 \u0438\u0437 \u043d\u0435\u0433\u043e \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u0435\u0448 ripemd160 (\u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0438 bitcoin \u0430\u0434\u0440\u0435\u0441\u0430 \u0438\u0437 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0442\u0443\u0442: https:\/\/en.bitcoin.it\/wiki\/Technical_background_of_version_1_Bitcoin_addresses), \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 \u0438\u0449\u0435\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u043c\u044b\u0445 \u0445\u0435\u0448\u0435\u0439 (\u0435\u0441\u043b\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e, \u0437\u043d\u0430\u0447\u0438\u0442 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u0430\u0439\u0434\u0435\u043d, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0445\u043e\u0434\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u0444\u0430\u0439\u043b found.txt \u0432 \u043f\u0432\u043f\u043a\u0443 \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439), \u0434\u0430\u043b\u0435\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f.\n\n\n## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0443\u0441\u043a\u0430\n\n\t-b\t\t\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0445\u0435\u0448\u0435\u0439 ripemd160 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -b .\/bitcoin.bin \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0445\u0435\u0448\u0435\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 bitcoin.bin\n\n\t-k\t\t\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 (32-\u0445 \u0431\u0430\u0439\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 HEX \u0444\u043e\u0440\u043c\u0430\u0442\u0435), \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0447\u043d\u0443\u0442\u0441\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0445\u0435\u0448\u0435\u0439.\n\t\t\t\u0415\u0441\u043b\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -b .\/bitcoin.bin -k 1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\n\n\t-u\t\t\u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u0442\u043e \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u043b\u044e\u0447 \u0431\u0443\u0434\u0435\u0442 \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438, \n\t\t\t\u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u043e\u0441\u043b\u0435 \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 4 \u0431\u0430\u0439\u0442 (4,294,967,296) \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0438 \u0437\u0430\u0434\u0430\u043d\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c.\n\n\t-p\t\tID \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b. \u041f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u043d\u043e \u043a\u0430\u043a 0. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f.\n\t\t\t\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 OpenCL \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0445\u043e\u0441\u0442\u0430 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0441 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 OpenCL.\n\n\t-d\t\tID \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u0430\u0442\u0444\u043e\u0440\u043c\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u041f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u043d\u043e \u043a\u0430\u043a 0. \n\t\t\t\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0445\u043e\u0441\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 OpenCL, \u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0430 \u043a\u0430\u043a\u043e\u043c \u0438\u043c\u0435\u043d\u043d\u043e \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -b .\/bitcoin.bin -d 0\n\n\t-g\t\t\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b (cols)x(rows) (\u0447\u0438\u0441\u043b\u0430 \u0432 DEC \u0444\u043e\u0440\u043c\u0430\u0442\u0435). \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 GPU.\n\t\t\t\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -b .\/bitcoin.bin -g 1024x512\n\n\t-i\t\t\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043c\u043e\u0434\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u0438\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u0447\u0438\u0441\u0435\u043b (\u0447\u0438\u0441\u043b\u043e \u0432 DEC \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0441\u0442\u0435\u043f\u0435\u0440\u044c\u044e \u0447\u0438\u0441\u043b\u0430 2). \n\t\t\t\u0414\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 GPU.\n\t\t\t\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -b .\/bitcoin.bin -g 1024x512 -i 256\n\n\t-f\t\t\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430 OpenCL \u0441\u043a\u0440\u0438\u043f\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0430\u0439\u043b \"gpu.cl\"\n\t\t\t\u0423\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0412\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c\u0438 OpenCL \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438.\n\t\t\t\u041f\u0440\u0438\u043c\u0435\u0440: .\/oclexplorer -f .\/test.cl \n\n\n## \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438\n\n\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0435\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e \u043f\u043e\u043a\u0430\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n\n\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432:\n\n\u0410\u0434\u0440\u0435\u0441: 1testBq2oGSeE3WVfi1MUbJZbUSWwEktC\n\nPrivate key: 6AA3789CFE067047480EED275D4A017B812D19AE6A4B82105E0B7DCEAF64A1B5\n\nPublic key: 0446C360263B1794E429E7D672A878B5083C37D6BA177BFB68405EED3DB01804A210BDFD925C8E2CD16C054C3919C6F0889376E96EDC6B2BAF5D06D8F139601268\n\nRIPEMD-160: 09C4D5193EE73DE349FB8237CC83D14ED47DE115\n\n\u0410\u0434\u0440\u0435\u0441: 13htk4yTWRp6NF86X2usfbv45nXijN99fw\n\nPrivate key: 4C9FC687F5604F80F224BAC08999006E6967D5071331C121F503D8352556D61C\n\nPublic key: 045C6D700D71FD80E75AA4965DFB3B3398062B03DA419379F95F5C9DBF5E9AD8C2BD9FE30F4C46B24ADAB8CBEB2F4AC51002971EB45E7086822E14BC362BAAAACC\n\nRIPEMD-160: 1DAC152238E7A162FB6B8C8D34CEEE2DAE1328B9\n\n\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0445\u0435\u0448\u0438 RIPEMD-160 \u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0432 \u0444\u0430\u0439\u043b\u0435 \"test1.bin\"\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:\n.\/oclexplorer -b .\/test1.bin -k 6AA3789CFE067047480EED275D4A017B812D19AE6A4B82105E0B7DCEAF000000 -u\n\n\u0427\u0435\u0440\u0435\u0437 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0445\u0435\u0448\u0430 \u0441 \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0445\u0435\u0448\u0435\u0439, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 \"test1.bin\"\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432 \u0444\u0430\u0439\u043b \"found.txt\"\n\n++++++++++++++++++++++++++++++++++++++++++++++++++\n\nTIME: 2018-01-25 16:03:42\n\nPRIV: 6aa3789cfe067047480eed275d4a017b812d19ae6a4b82105e0b7dceaf64a1b5\n\nPUBL: 0446c360263b1794e429e7d672a878b5083c37d6ba177bfb68405eed3db01804a210bdfd925c8e2cd16c054c3919c6f0889376e96edc6b2baf5d06d8f139601268\n\nHASH: 09c4d5193ee73de349fb8237cc83d14ed47de115\n\nADDR: 1testBq2oGSeE3WVfi1MUbJZbUSWwEktC\n\nSALT: 6aa3789cfe067047480eed275d4a017b812d19ae6a4b82105e0b7dceaf400000\n\nOFST: 2400692\n\nGPUH: 09c4d5193ee73de349fb8237cc83d14ed47de115\n\n++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n\u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430:\n\n++++++++++++++++++++++++++++++++++++++++++++++++++\n\nTIME: \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f\n\nPRIV: \u041d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\n\nPUBL: \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\n\nHASH: \u0425\u0435\u0448 bitcoin \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 RIPEMD-160\n\nADDR: Bitcoin \u0430\u0434\u0440\u0435\u0441\n\nSALT: \u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0438\u0441\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\n\nOFST: \u0414\u0435\u043b\u044c\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c\u0438 \u043a\u043b\u044e\u0447\u0430\u043c\u0438\n\nGPUH: \u0425\u0435\u0448 bitcoin \u0430\u0434\u0440\u0435\u0441\u0430 RIPEMD-160, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 GPU, \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u0435\u043d HASH\n\n++++++++++++++++++++++++++++++++++++++++++++++++++\n\n\n\n## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\n\n\u0420\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0430\u0441\u044c \u043d\u0430 \u041e\u0421 Gentoo, Linux Mint, Debian.\n\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u043e\u0441\u044c \u043d\u0430 \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0430\u0445: Nvidia GTX 230, Nvidia GT 730, Nvidia GTX 1060, Nvidia GTX 1080 ti, Radeon RX 570.\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 OpenCL \u0438 OpenSSL \u0441 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u044d\u043b\u043b\u0438\u043f\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043a\u0440\u0438\u0432\u044b\u0445.\n\n\n\n## \u041e\u0442\u043a\u0430\u0437 \u043e\u0442 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438\n\n\u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f, \u0432\u044b\u0437\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0412\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f.\n\u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 bitcoin \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 \u043d\u0435\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0430\u0448\u0435\u0439 \u044e\u0440\u0438\u0441\u0434\u0438\u043a\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043a\u0440\u0430\u0436\u0435\u0439 \u0438 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u0437\u0430\u043a\u043e\u043d\u043d\u044b\u043c.\n\n\n\n## \u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c\n\n\u0415\u0441\u043b\u0438 \u0412\u0430\u0441 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043e\u0444\u0442, \u043d\u043e \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439,\n\u0430\u0432\u0442\u043e\u0440 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0442\u043a\u0440\u044b\u0442 \u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0443, \u043f\u043e\u0447\u0442\u0430 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438: svtrostov@yandex.ru\n\n\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u043e \u0412\u0430\u043c, \u0431\u0443\u0434\u0443 \u0440\u0430\u0434 \u0432\u0430\u0448\u0435\u0439 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0441\u0442\u0438:\n\n\tBitcoin \u043a\u043e\u0448\u0435\u043b\u0435\u043a: 1svtY22Rc9GngcUPBH9UEoowb2hhbsuPo\n\n\tYandex.\u0434\u0435\u043d\u044c\u0433\u0438: 410014854164402\n\n\n","165":"# BitcoinMaker (call it .\/maker.sh)\nA bash script to make it easy to compile and package bitcoin, altcoins. Designed for Kryptofranc.\n\nWhen you are compiling your altcoin 100x time a day, and redeploy it again and again, \nyou need a command line tool that will setup everything for you. \n\nHere it is, for me it is a HUGE time saver. Adapt it to your need. It is freeware.\n\nHow to use it?\n\nCopy the bash file in your coin directory... the directory structure MUST be\n\n```\n***Yourcoin\/yourcoincore\/src\/qt ***\nmaker.sh will be located inside \n***Yourcoin\/maker.sh ***\nDo not copy it in your bitcoin clone directory as it is not part of the \ncoin and it needs to be located outside.\nDo not forget to make the script executable\n(do sudo chmod -R 777 Yourcoin for example) \n```\n\nChange the name of your coin in the source code of .\/maker.sh or it will compile for Kryptofranc!\n\n```\nChange \nCOINPATH with the path name of 'yourcoincore', it can be bitcoincore, or whatever, you name it.\nCOINNAME is the file name of your coin, for Kryptofranc it is kyf. \nThis will result in kyf-qt, kyf-tx, kyfd and kyf-cli and the same .exe for windows. \n```\n\n\n\nUsage:\n\n.\/maker.sh [platform] [option]\n\n*** First Time ***\n```\nFor Unix\n.\/maker.sh unix install\n.\/maker.sh unix all\n\nFor Windows 64 bits\n.\/maker.sh win64 install\n.\/maker.sh unix all\n\nFor MAC\n.\/maker.sh osx install\n.\/maker.sh osx all\n```\n\n*** After the install only do ***\n```\nUnix: \n.\/maker.sh unix\nWindows 64\n.\/maker.sh win64\nMAC\n.\/maker.sh osx\n\n```\n\nThe results should be in Yourcoin\/binaries\/unix\/ or Yourcoin\/binaries\/win64\/ or Yourcoin\/binaries\/osx\/\n\n*** more options ***\n```\ndoc : will generate the doxyfile documentation\ndeploy : will generate the setup.exe and the .dmg for MAC\n\nexemple: .\/maker.sh osx doc deploy \nwill generate for mac with the documentation and the pack all in the dmg install file.\n\n\n\n\n\n","166":"This class will allow you to interact with the Bitcoin Exchange Thailand.\n\nView API documation available here: https:\/\/bx.in.th\/info\/api\/\n\nChangelog:\n\n2016-04-28\nAdded bill payment functionality\n\n2014-11-06\nAdded \"Options\" functionality.\nNOTE: These functions are not yet available on the live server but will be added within the next few months.","167":"Archie Norman - Classification of Bitcoin transactions based on supervised machine learning and transaction network metrics.\n\nAbstract: The Bitcoin currency is a publicly available, transparent, large scale network in which every single transaction can be analysed. Multiple tools are used to extract binary information, pre-process data and train machine learning models from the decentralised blockchain. As Bitcoin popularity increases both with consumers and businesses alike, this paper looks at the threat to privacy faced by users through commercial adoption by deriving user attributes, transaction properties and inherent idioms of the network. We define the Bitcoin network protocol, describe heuristics for clustering, mine the web for publicly available user information and finally train supervised learning models. We show that two machine learning algorithms perform  successfully in clustering the Bitcoin transactions based on only graphical metrics measured from the transaction network. The Logistic Regression algorithm achieves an F1 score of 0.731 and the Support Vector Machines achieves an F1 score of 0.727. This work demonstrates the value of machine learning and network analysis for business intelligence; on the other hand it also reveals the potential threats to user privacy. \n\n## Prerequesites\n\nPlease note that installing the bitcoin blockchain and running all scripts may take ~ 10 days as the blockchain download is around 160GB and needs to be indexed. The instructions given here are from the bitcoingraph tool.\n\n### Bitcoin Core setup and configuration\n\nFirst, install the current version of Bitcoin Core (v.11.1), either from [source](https:\/\/github.com\/bitcoin\/bitcoin) or from a [pre-compiled executable](https:\/\/bitcoin.org\/en\/download).\n\nOnce installed, you'll have access to three programs: `bitcoind` (= full peer), `bitcoin-qt` (= peer with GUI), and `bitcoin-cli` (RPC command line interface). The following instructions have been tested with `bitcoind` and assume you can start and run a Bitcoin Core peer as follows:\n\n    bitcoind -printtoconsole\n\nSecond, you must make sure that your bitcoin client accepts JSON-RPC connections by modifying the [Bitcoin Core configuration file][bc_conf] as follows:\n\n    # server=1 tells Bitcoin-QT to accept JSON-RPC commands.\n    server=1\n\n    # You must set rpcuser and rpcpassword to secure the JSON-RPC api\n    rpcuser=your_rpcuser\n    rpcpassword=your_rpcpass\n\n    # How many seconds bitcoin will wait for a complete RPC HTTP request.\n    # after the HTTP connection is established.\n    rpctimeout=30\n\n    # Listen for RPC connections on this TCP port:\n    rpcport=8332\n\nTest whether the JSON-RPC interface is working by starting your Bitcoin Core peer (...waiting until it finished startup...) and using the following cURL request (with adapted username and password):\n\n    curl --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text\/plain;' http:\/\/your_rpcuser:your_rpcpass@localhost:8332\/\n\n\nThird, since Bitcoingraph needs to access non-wallet blockchain transactions by their ids, you need to enable the transaction index in the Bitcoin Core database. This can be achieved by adding the following property to your `bitcoin.conf`\n\n    txindex=1\n\n... and restarting your Bitcoin core peer as follows (rebuilding the index can take a while):\n\n    bitcoind -reindex\n\n\nTest non-wallet transaction data access by taking an arbitrary transaction id and issuing the following request using cURL:\n\n    curl --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"110ed92f558a1e3a94976ddea5c32f030670b5c58c3cc4d857ac14d7a1547a90\", 1] }' -H 'content-type: text\/plain;' http:\/\/your_rpcuser:your_rpcpass@localhost:8332\/\n\n\nFinally, bitcoingraph also makes use of Bitcoin Core's HTTP REST interface, which is enabled using the following parameter:\n\n    bitcoind -rest\n\nTest it using some sample block hash\n\n    http:\/\/localhost:8332\/rest\/block\/000000000000000e7ad69c72afc00dc4e05fc15ae3061c47d3591d07c09f2928.json\n\n\nWhen you reached this point, your Bitcoin Core setup is working. Terminate all running bitcoind instances and launch a new background daemon with enabled REST interface\n\n    bitcoind -daemon -rest\n\n\n### Bitcoingraph library setup\n\nBitcoingraph is being developed in Python 3.4. Make sure it is running on your machine:\n\n    python --version\n\n\nNow clone Bitcoingraph...\n\n    git clone https:\/\/github.com\/behas\/bitcoingraph.git\n\n\n...test and install the Bitcoingraph library:\n\n    cd bitcoingraph\n    pip install -r requirements.txt\n    py.test\n    python setup.py install\n\n\n### Mac OSX specifics\n\nRunning bitcoingraph on a Mac requires coreutils to be installed\n\n    homebrew install coreutils\n\n### Step 1: Create transaction dump from blockchain\n\nBitcoingraph provides the `bcgraph-export` tool for exporting transactions in a given block range from the blockchain. The following command exports all transactions contained in block range 0 to 1000 using Neo4Js header format and separate CSV header files:\n\n    bcgraph-export 417500 424572 -u your_rpcuser -p your_rpcpass\n\nThe following CSV files are created (with separate header files):\n\n* addresses.csv: sorted list of Bitcoin addressed\n* blocks.csv: list of blocks (hash, height, timestamp)\n* transactions.csv: list of transactions (hash, coinbase\/non-coinbase)\n* outputs.csv: list of transaction outputs (output key, id, value, script type)\n* rel_block_tx.csv: relationship between blocks and transactions (block_hash, tx_hash)\n* rel_input.csv: relationship between transactions and transaction outputs (tx_hash, output key)\n* rel_output_address.csv: relationship between outputs and addresses (output key, address)\n* rel_tx_output.csv: relationship between transactions and transaction outputs (tx_hash, output key)\n\n\n### Step 2: Compute entities over transaction dump\n\nThe following command computes entities for a given blockchain data dump:\n\n    bcgraph-compute-entities -i blocks_417500_424572\n\nTwo additional files are created:\n\n* entities.csv: list of entity identifiers (entity_id)\n* rel_address_entity.csv: assignment of addresses to entities (address, entity_id)\n\n\n## Contributors for the above installation and code\n\n* [Bernhard Haslhofer](mailto:bernhard.haslhofer@ait.ac.at)\n* [Roman Karl](mailto:roman.karl@ait.ac.at)\n\nEnsure Python 2.7.x\n\n## Create a new conda environment with Python 2.7.x\n\n    conda create -n gl-env python=2.7 anaconda\n\n## Activate the conda environment\n\n    source activate gl-env\n\nEnsure pip version \\>= 7\n\n### Ensure pip is updated to the latest version, miniconda users may need to install pip first, using 'conda install pip'\n\n    conda update pip\n\n### Install GraphLab Create\n\n## Install your licensed copy of GraphLab Create\n\n    pip install --upgrade --no-cache-dir https:\/\/get.graphlab.com\/ \\\n    GraphLab-Create\/2.1\/your registered email address here\/your product \\\n    key here\/GraphLab-Create-License.tar.gz\n\n## Ensure installation of IPython and IPython Notebook\n\n## Install or update IPython and IPython Notebook\n\n    conda install ipython-notebook\n\n### Run the prep-processing code\n\n    cd notebooks\n\n    jupyter notebook\n\n# Run\n\n    Calculate users, add graph metrics, add categorical tags.ipynb\n\n    Build supervised learning models.ipynb\n\n\n\n\n\n","168":"Bitcoin. For Magento.\n==================================\nThis is a Bitcoin payment module for Magento.\n\nI wrote this module to help promote Bitcoin and to enable vendors to trade goods for bitcoin. While I believe this module\nis the most fully featured Magento Bitcoin module available at the moment, please consider this an alpha release.\n\nI'm looking forward to feedback from vendors who are accepting Bitcoin.\n\n-Ticean\n\n\n\nDONATIONS\n---------------------------\nIf you find this module useful please consider donating an appropriate amount. It helps me justify the time spent coding\nto my wife and two daughters! :)\n\n12rJSmj7Ny5LzDGkgfauC2T8TZuwNZ3xaC\n\n\n\nCurrent Features\n---------------------------\n\n- New bitcoin currency and symbol. Full currency support in Magento.\n- Currency conversion and conversion rates management. Manually, or daily weighted value from Bitcoincharts service.\n- Scheduled conversion rates update is supported.\n- Accept bitcoin payment.Orders are accepted in Pending status and set to Processing when the minimum confirmation count is reached.\n- Required confirmations is configurable.\n- Fully configurable bitcoind parameters.\n- Http\/Https access to bitcoin (if bitcoind configured for https).\n- Generates a new bitcoin address for every order.\n- Provides bitcoin payment address to the customer on checkout.\n- Configurable setting to display a converted grand total on checkout. (Ex: Display grand total in USD.)\n\n\nPlanned Features\n---------------------------\n\n\n- Improve documentation.\n- Assign payment addresses to customer bitcoin accounts.\n- Improve checkout flow (with suggestions from store owners).\n- More Payment information in Admin order view. (Confirmation counts, etc...)\n- Identify orders that have not been paid within a configurable time threshold.\n- Improved localization.\n- Reports and merchant tools.\n- Add \"We Accept Bitcoin\" and \"Pay With Bitcoin\" widgets.\n- Hell of a lot more...\n\n\n\nInstallation\n-----------------------------------------------------\nI plan to add better documentation to the Wiki. Please be sure to backup files and data before modifying your Magento instance.\n\n- Copy the files from this project into your Magento root.\n- Enable BTC currency for your store.\n- Go to Manage Currencies and import exchange rates.\n- Start Bitcoind.\n- Watch the hash money roll in.\n\n## Notes:\n\n- Magento doesn't provide a good way to override locales, so the core Zend locale files are overwritten.\n- You must use the EN locale. Call me a lazy American bastard if you'd like. As of now, only the EN locale is modified. I'm happy to pull new locales.\n- The module customizes the order confirmation page. You may need to integrate the changes if you've already customized that page.\n\n\n\nFeedback & Contributing\n---------------------------\nAll feedback is welcome. I'm especially looking forward to feedback from Magento store owners. If you have a feature you'd\nlike to see implemented please let me know.\n\nDevelopers, please feel free to comment and contribute. I'll gladly pull reasonable changes and you will be credited.\n\n\n\nLicensing\n---------------------------\n\nCopyright 2011, Ticean Bennett\n\nThis work is licensed under the Open Software License (OSL 3.0)\n\nhttp:\/\/opensource.org\/licenses\/osl-3.0.php\n","169":"Sample code from \"Basic blockchain programming\", a developer-oriented series about Bitcoin.\n\nhttp:\/\/davidederosa.com\/basic-blockchain-programming\/\n","170":"# bitwork\n\n> Bitcoin networking made simple.\n\nbitwork is the easiest, yet powerful way to process data from the bitcoin network.\n\nIt makes interacting with bitcoin as easy as making an HTTP GET request, or listening to WebSockets!\n\n![bitwork](bitwork.png)\n\nIt abstracts the complex and esoteric low level networking APIs (P2P protocol + JSON-RPC) into a unified, easy-to-use interface that resembles a simple HTTP request.\n\n![stack](stack.png)\n\nUnderneath, bitwork takes care of all the complexities in fetching and listening to data from the P2P network, as well as make use of the JSON-RPC API for some features which when combined, enables an extremely user-friendly yet powerful API.\n\nFinally, it has [a built-in data processing engine](#_3-use) which parses the incoming transaction byte stream into structured programmable objects which makes programmers' jobs significantly easier.\n\n---\n\n# Who is this for?\n\nThis library is for **reading DIRECTLY from a bitcoin node,** which means this is for those **who run a bitcoin node of their own**. If you already have access to a Bitcoin node via JSON-RPC and P2P, this library is for you.\n\n> NOTE: Most developers shouldn't need to run their own bitcoin node as it will become exponentially harder to maintain as the blockchain grows. (For example, it is already possible for blockchains like Bitcoin SV to grow at a speed of 2GB per block, which is approximately 10 minutes)\n>\n> Instead, look into solutions for synchronizing only the required data subset **without having to run a node**. See [Bitbus](https:\/\/bitbus.network).\n\n\n---\n\n# What problems does it solve?\n\nWhat problems does Bitwork solve? \n\nShort answer: Everything related to Bitcoin data processing. \n\nLong answer:\n\n## 1. P2P\n\nWorking with the P2P protocol directly is very tedious and has a lot of unintuitive limitations. Let's just take one example: the `\"getheaders\"` API. Here's a description of how it works:\n\n> \"Return a headers packet containing the headers of blocks starting right after the last known hash in the block locator object, up to hash_stop or 2000 blocks\"\n\nThere are several problems here:\n\n1. First, you can only get headers for 2000 blocks at a time.\n2. Second, \"blocks starting **right after** the last known hash\", which means if you say \"Get headers from hash X to Y\", it **will NOT include the block X itself**! Such a simple query is tedious if you're directly trying to use the P2P protocol.\n3. Third, you can only use block hash to query headers, no height. Again, tedious.\n\nAnother example, the header returned by the P2P protocol doesn't include a `\"nextblockhash\"` field. This is understandable if we remember that the main purpose of the P2P protocol is for block propagation (and not for querying). However it's still true that it's inconvenient (You can get this information through JSON-RPC)\n\nAlso due to its P2P nature, developers must programm in a [message passing pattern](https:\/\/en.wikipedia.org\/wiki\/Message_passing) when trying to process data from the blockchain. This means you call a `sendMessage` to make a request, and then also implement a separate event listener which listens to data from the network and distinguish random data from the actual response you're expecting. This creates a messy [spaghetti code](https:\/\/en.wikipedia.org\/wiki\/Spaghetti_code) and is not desirable. Ideally you should be able to **interact with the P2P network with just a few lines of code, just like you would with HTTP.**\n\nBitwork solves these problems by functioning as an abstraction layer which frees developers from having to worry about all these quirks.\n\n**Bitwork lets you treat Bitcoin like HTTP.**\n\n## 2. JSON-RPC\n\nJSON-RPC is meant to be a more user friendly way to query the blockchain, but the performance is worse than P2P. Currently it doesn't support streaming, so it takes up a lot of memory and often crashes the node itself when the block is too large. (This is a new type of problem only possible in a scaling blockchain like Bitcoin SV)\n\nThere are also several other performance and synchronization issues with JSON-RPC. It's better to use the P2P protocol directly when possible.\n\n**Bitwork mostly uses the P2P protocol directly, and uses JSON-RPC methods when it's necessary.**\n\n## 3. ZeroMQ\n\nWorking with Zeromq to listen to blockchain events is sketchy. It has synchronization issues with the JSON-RPC API. For example sometimes there will be a ZeroMQ event trigger, but the JSON-RPC won't return a response when you query the same event immediately, and you will have to try another query several seconds later. This is more severe during peak transaction periods, which is when the realtime feature matters the most.\n\nOne solution to mitigate this issue is to never trust Zeromq 100% and use a hybrid approach of ZeroMQ plus constant polling.\n\nBut this is a mediocre solution at best, and there is no reason to do this if we directly listen to the P2P network.\n\n**Bitwork directly listens to the P2P network instead of relying on ZeroMQ.**\n\n## 4. Usability\n\nThere simply does not exist a single high level API that makes interacting with a Bitcoin node as simple as making a HTTP request.\n\nBitwork makes everything simple, and will get rid of all your headaches dealing with Bitcoin data.\n\n**It just works.**\n\n---\n\n# Install\n\nFirst install the package to your app folder\n\n```\nnpm install --save bitwork\n```\n\n---\n\n# Usage\n\nFirst you must initialize it:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  \/\/ YOUR LOGIC\n})\n```\n\nThe constructor can take the following attributes:\n\n- `rpc`: RPC settings\n  - `protocol`: JSON-RPC access protocol (**optional.** default: \"http\")\n  - `host`: JSON-RPC endpoint IP (**optional.** default: \"127.0.0.1\")\n  - `port`: JSON-RPC port (**optional.** default: 8332)\n  - `user`: JSON-RPC username (**required**)\n  - `pass`: JSON-RPC password (**required**)\n- `peer`: P2P settings\n  - `host`: Peer IP to connect to (**optional.** default: 127.0.0.1)\n- `chain`: Chain definition (optional. strongly recommended)\n  - `prune`: automatically prune the oldest `.tx` file inside the `chain` folder when the number of files exceeds `prune`.\n  - `path`: the path to store the chain files in\n\n---\n\n# Quickstart\n\nLet's try.\n\nFirst, install bitwork\n\n```\nnpm install --save bitwork\n```\n\nSecond, create a file `listener.js`.\n\n```\nconst bitwork = require('bitwork')\n\/\/ Remember to replace the \"user\" and \"pass\" with your OWN JSON-RPC username and password!\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\nrun\n\n```\nnode listener\n```\n\nThat's it! You'll start seeing new transactions flow in, in realtime.\n\nNext, let's try reading a block. Create another file `read.js`:\n\n```\nconst bitwork = require('bitwork')\n\/\/ Remember to replace the \"user\" and \"pass\" with your OWN JSON-RPC username and password!\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let { header, tx } = await bit.get(\"block\", 598924)\n  console.log(\"block header = \", header)\n  console.log(\"block transactions = \", tx)\n})\n```\n\nand run:\n\n```\nnode read\n```\n\nYou'll get the full block content for block height 598924!\n\n---\n\n# API\n\nThere are three API methods:\n\n1. **get:** fetch data from the blockchain.\n2. **on:** listen to data from the blockchain.\n3. **use:** attach middleware.\n\n## 1. get\n\n### a. mempool\n\n#### Syntax\n\n```\nbit.get(\"mempool\").then((mepool) => {\n  \/\/  mempool := {\n  \/\/    tx: <array of mempool transactions>\n  \/\/  }\n})\n```\n\n#### Example\n\nGet mempool transactions\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  bit.get(\"mempool\").then((mempool) => {\n    console.log(\"mempool transactions = \", mempool.tx)\n  })\n})\n```\n\nor using async\/await:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\");\n  console.log(\"mempool transactions = \", mempool.tx)\n})\n```\n\n### b. block\n\n#### Syntax\n\n```\nbit.get(\"block\", <hash|height>).then((block) => {\n  \/\/  block := {\n  \/\/    header: <block header object>,\n  \/\/    tx: <array of mempool transactions>\n  \/\/  }\n})\n```\n\n\n#### Example\n\n\nGet by block height\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", 598924)\n  console.log(\"block header = \", block.header)\n  console.log(\"block transactions = \", block.tx)\n})\n```\n\nGet by block hash\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\")\n  console.log(\"block header = \", block.header)\n  console.log(\"block transactions = \", block.tx)\n})\n```\n\n### c. header\n\n#### Syntax\n\n```\nbit.get(\"header\", <Query>).then((headers) => {\n  \/\/  headers := <array of headers>\n})\n```\n\nWhere the `<Query>` is an object which may have the following attributes:\n\n- `at`: Specify the exact position of the block (hash or height).\n- `from`: Specify the position to fetch from (hash or height)\n- `to`: Specify the position to end fetching (hash or height)\n\n#### Example\n\nGet a block header at a specific height:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let header = await bit.get( \"header\", { at: 598848 })\n  console.log(\"header = \", header)\n})\n```\n\nGet a block header at a specific hash:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let header = await bit.get( \"header\", { at: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\" })\n  console.log(\"header = \", header)\n})\n```\n\nGet block headers starting from a height, until the end (blockchain tip)\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get(\n    \"header\", \n    { from: 598848 }\n  )\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers starting from a block hash, until the end (blockchain tip)\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get( \"header\", { from: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\" })\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers between two heights:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get( \"header\", { from: 598848, to: 598850 })\n  console.log(\"headers = \", headers)\n})\n```\n\nGet block headers between a height and a hash:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let headers = await bit.get(\"header\", { from: \"000000000000000000a3ec7e52e0f3fea4a4e6a2e3a3b1a9c473aeb36daa0076\", to: 598850 })\n  console.log(\"headers = \", headers)\n})\n```\n\n### d. JSON-RPC\n\n#### Syntax\n\n```\nbit.get(\"rpc\", <JSON-RPC method>, ...<JSON-RPC arguments>).then((response) => {\n  \/\/ response := <JSON-RPC response> \n}).catch((e) => {\n  \/\/ e := <error message>\n})\n```\n\nWhere `<JSON-RPC method>` may be ANY of the methods shown at https:\/\/github.com\/bitpay\/bitcoind-rpc\/blob\/master\/lib\/index.js#L160\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  let info = await bit.get(\"rpc\", \"getInfo\")\n  console.log(\"info = \", info)\n})\n```\n\nwill print something like:\n\n```\ninfo =  {\n  version: 100020100,\n  protocolversion: 70015,\n  blocks: 598980,\n  timeoffset: 0,\n  connections: 41,\n  proxy: '',\n  difficulty: 129757875307.3484,\n  testnet: false,\n  stn: false,\n  paytxfee: 0,\n  relayfee: 0.00001,\n  errors: \"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\",\n  maxblocksize: 2000000000,\n  maxminedblocksize: 128000000\n}\n```\n\nYou can also pass additional arguments;\n\n```\nconst bitwork = require('..\/index')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.on(\"ready\", async () => {\n  let tx = await bit.get(\"rpc\", \"getRawTransaction\", \"da80aa6f5a21b41485b73d268af1d3f89d360cd5c6147b4214af8d5add612b12\")\n  console.log('tx = ', tx)\n})\n```\n\n---\n\n## 2. on\n\nThe `on` method lets you create an event listener:\n\n### a. mempool\n\nListen to realtime incoming mempool transactions via P2P\n\n#### Syntax\n\n```\nbit.on(\"mempool\", (e) => {\n  \/\/  e := <new transaction object>\n})\n```\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(\"New transaction = \", e)\n  })\n})\n```\n\n### b. block\n\nListen to realtime incoming blocks via P2P\n\n#### Syntax\n\n```\nbit.on(\"block\", (e) => {\n  \/\/  e := {\n  \/\/    header: <new block header>,\n  \/\/    tx: <array of transaction objects in the block>\n  \/\/  }\n})\n```\n\n#### Example\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", async () => {\n  bit.on(\"block\", (e) => {\n    console.log(\"header = \", e.header)\n    console.log(\"transactions = \", e.tx)\n  })\n})\n```\n\n### c. ready\n\nMust use before calling any other methods:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.on(\"ready\", () => {\n  \/\/ YOUR APP LOGIC GOES HERE\n})\n```\n\n---\n\n## 3. use\n\nThe `use` method is used for attaching middleware.\n\n![flow](flow.png)\n\nThere are three middleware types:\n\n1. **Parse:** The parser which deserializes an incoming raw transaction into any format that's easy to use in programs.\n2. **Filter:** Filter the transactions based on a tester function.\n3. **Map:** Transform the transactions through a map function.\n\n> Note that these three steps are executed in this specific order. The transaction goes through a parser, and then gets filtered, and finally mapped.\n\n\nThe processors are attached to bitwork through the following syntax:\n\n```\nbit.use(<processor>, <name or lambda function>)\n```\n\n\n### a. parse\n\n`parse` is the first step. parse is used for deserializing an incoming raw transaction byte stream into a JavaScript object.\n\n![serialize](serialize.png)\n\nHere are the parsers currently supported natively:\n\n1. bob: https:\/\/medium.com\/@_unwriter\/hello-bob-94701d278afb\n2. txo: https:\/\/github.com\/interplanaria\/txo\n3. hex: raw hex string format\n\nTo use BOB, simply add `bit.use(\"parse\", \"bob\")`\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.on(\"ready\", async () => {\n  let blk = await bit.get(\"block\", 598966)\n  console.log(JSON.stringify(blk, null, 2))\n})\n```\n\nThis will give you:\n\n1. `\"header\"`: the block header for 598966\n2. `\"tx\"`: all transactions in block 598966, DESERIALIZED with BOB.\n\nWhich looks like this:\n\n<pre class='scroll'><code>\n{\n  \"header\": {\n    \"hash\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n    \"version\": 549453824,\n    \"prevHash\": \"0000000000000000006d8e25371046c57f9cbbe251d84b1d0c636721de23c5e7\",\n    \"merkleRoot\": \"8c9bbd17117f0d3848d6089ea1e7ef2dfd310e0e5a61bf9d4ac2cf4b9d994ca7\",\n    \"time\": 1567860575,\n    \"bits\": 403221253,\n    \"nonce\": 1908806409,\n    \"height\": 598966\n  },\n  \"tx\": [\n    {\n      \"tx\": {\n        \"h\": \"03f4052af378df64d5f416c7174d088178f2a679b67a451956f1d3c1c65b4f01\"\n      },\n      \"in\": [],\n      \"out\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 118,\n                  \"ops\": \"OP_DUP\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"op\": 169,\n                  \"ops\": \"OP_HASH160\",\n                  \"ii\": 1,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"TBICBeU94joq\/WU8fS3P9NMyAbg=\",\n                  \"s\": \"L\\u0012\\u0002\\u0005\ufffd=\ufffd:*\ufffde<}-\ufffd\ufffd\ufffd2\\u0001\ufffd\",\n                  \"ii\": 2,\n                  \"i\": 2\n                },\n                {\n                  \"op\": 136,\n                  \"ops\": \"OP_EQUALVERIFY\",\n                  \"ii\": 3,\n                  \"i\": 3\n                },\n                {\n                  \"op\": 172,\n                  \"ops\": \"OP_CHECKSIG\",\n                  \"ii\": 4,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"v\": 1250008636,\n            \"i\": 0,\n            \"a\": \"17wDvnpvv7XSWjMRfnhjcdvY6jzonNKL5A\"\n          }\n        }\n      ],\n      \"blk\": {\n        \"i\": 598966,\n        \"h\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n        \"t\": 1567860575\n      }\n    },\n    ....\n    {\n      \"tx\": {\n        \"h\": \"b4e1bdb6177ece9b75d8450c47e6c1240504409e8f61bad5a8f3bcb48fff67ad\"\n      },\n      \"in\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"b\": \"MEUCIQCvPs7z6JFpu31mhEQvzxZB1i7xJIb3p1ULsbvHsf1u1AIgTMBvTY5079UbyNyKUmPnUjPD5osBteLzzErHrRUGsWpB\",\n                  \"s\": \"0E\\u0002!\\u0000\ufffd>\ufffd\ufffd\ufffdi\ufffd}f\ufffdD\/\ufffd\\u0016A\ufffd.\ufffd$\ufffd\ufffd\ufffdU\\u000b\ufffd\ufffd\u01f1\ufffdn\ufffd\\u0002 L\ufffdoM\ufffdt\ufffd\ufffd\\u001b\ufffd\u070aRc\ufffdR3\ufffd\ufffd\\u0001\ufffd\ufffd\ufffd\ufffdJ\u01ed\\u0015\\u0006\ufffdjA\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"b\": \"Ah4neps6BPFZyW1etCz15L9Mh4rwOwXoIm6omBnbvLsx\",\n                  \"s\": \"\\u0002\\u001e'z\ufffd:\\u0004\ufffdY\ufffdm^\ufffd,\ufffd\ufffdL\ufffd\ufffd\ufffd;\\u0005\ufffd\\\"n\ufffd\ufffd\\u0019\u06fc\ufffd1\",\n                  \"ii\": 1,\n                  \"i\": 1\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"h\": \"ea8c2317c44c2830d8abc9223fc7ddfef7c5df9acce3e979069e6d30c8ee3fcb\",\n            \"i\": 1,\n            \"a\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\"\n          }\n        }\n      ],\n      \"out\": [\n        {\n          \"i\": 0,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 106,\n                  \"ops\": \"OP_RETURN\",\n                  \"ii\": 0,\n                  \"i\": 0\n                }\n              ],\n              \"i\": 0\n            },\n            {\n              \"cell\": [\n                {\n                  \"b\": \"MUx0eU1FNmI1QW5Nb3BRckJQTGs0RkdOOFVCdWh4S3Fybg==\",\n                  \"s\": \"1LtyME6b5AnMopQrBPLk4FGN8UBuhxKqrn\",\n                  \"ii\": 1,\n                  \"i\": 0\n                },\n                {\n                  \"b\": \"AQ==\",\n                  \"s\": \"\\u0001\",\n                  \"ii\": 2,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"eyJ0IjoxNy4xLCJoIjo2NywicCI6MTAyNiwiYyI6NDAsIndzIjo1LjcsIndkIjozNjB9\",\n                  \"s\": \"{\\\"t\\\":17.1,\\\"h\\\":67,\\\"p\\\":1026,\\\"c\\\":40,\\\"ws\\\":5.7,\\\"wd\\\":360}\",\n                  \"ii\": 3,\n                  \"i\": 2\n                },\n                {\n                  \"b\": \"MTlqYnhyeDN2TnlzeVRtY2hKQ2RRUHhURnYyQ1U4U2pYbw==\",\n                  \"s\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\",\n                  \"ii\": 4,\n                  \"i\": 3\n                },\n                {\n                  \"b\": \"MTU2Nzg2MDMzMw==\",\n                  \"s\": \"1567860333\",\n                  \"ii\": 5,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 1\n            }\n          ],\n          \"e\": {\n            \"v\": 0,\n            \"i\": 0,\n            \"a\": \"false\"\n          }\n        },\n        {\n          \"i\": 1,\n          \"tape\": [\n            {\n              \"cell\": [\n                {\n                  \"op\": 118,\n                  \"ops\": \"OP_DUP\",\n                  \"ii\": 0,\n                  \"i\": 0\n                },\n                {\n                  \"op\": 169,\n                  \"ops\": \"OP_HASH160\",\n                  \"ii\": 1,\n                  \"i\": 1\n                },\n                {\n                  \"b\": \"X8+pk8zgWrwxtTOQ1YUGqA1UbkQ=\",\n                  \"s\": \"_\u03e9\ufffd\ufffd\ufffdZ\ufffd1\ufffd3\ufffd\u0545\\u0006\ufffd\\rTnD\",\n                  \"ii\": 2,\n                  \"i\": 2\n                },\n                {\n                  \"op\": 136,\n                  \"ops\": \"OP_EQUALVERIFY\",\n                  \"ii\": 3,\n                  \"i\": 3\n                },\n                {\n                  \"op\": 172,\n                  \"ops\": \"OP_CHECKSIG\",\n                  \"ii\": 4,\n                  \"i\": 4\n                }\n              ],\n              \"i\": 0\n            }\n          ],\n          \"e\": {\n            \"v\": 159922,\n            \"i\": 1,\n            \"a\": \"19jbxrx3vNysyTmchJCdQPxTFv2CU8SjXo\"\n          }\n        }\n      ],\n      \"blk\": {\n        \"i\": 598966,\n        \"h\": \"000000000000000002b888b9b9d806b27103df8ebf29dfc359f9d4e6ef4cc427\",\n        \"t\": 1567860575\n      }\n    }\n  ]\n}\n<\/code><\/pre>\n\nTo use TXO, simply add `bit.use(\"parse\", \"txo\")`\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"txo\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\nTo use raw hex format, add `bit.use(\"parse\", \"hex\")`\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"hex\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(e)\n  })\n})\n```\n\n\n### b. filter\n\nThe second stage is \"filter\". This is where you filter the parsed transaction set based on a filter function. \n\n![filter](filter.png)\n\nDepending on whether an input passes the filter function test, it gets included in or excluded from the result set.\n\nIt works the same way [Array.prototype.filter](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter) does. Here's an example where we're trying to filter non-OP_RETURN transactions:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\")\n  console.log(\"mempool =\", mempool)\n})\n```\n\nThis also applies to listeners. When you run the following code, it will only trigger the `\"mempool\"` event when the incoming transaction passes the filter test:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (e) => {\n    console.log(\"ONLY NON-OPRETURN TXS\", e)\n  })\n})\n```\n\n\n### c. map\n\nThe last stage is \"map\". Map lets you transform the incoming data into a desired format.\n\n![map](map.png)\n\nIt works the same way [Array.prototype.map](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/map) does, **BUT WITH A TWIST**. \n\nFor every transformed object, it auto-attaches a couple of transaction related metadata such as `tx.h` (transaction id) and `blk` (block metadata)\n\n\n#### Syntax\n\nUse the following to declare a `map` function for a bitwork instance:\n\n```\nbit.use(\"map\", <transformer function>)\n```\n\n#### How it works\n\nOnce a \"map\" middleware is set, all requests (both `get` and `on`) will go through the `map` step before returning a response.\n\nHowever, **unlike the previous steps (`parse` and `filter`) using `map` adds an additional structure.**\n\nFor a mempool transaction:\n\n1. it wraps each transformed object in a `$` attribute.\n2. it also auto-attaches an additional `tx.h` attribute which indicates the transaction id.\n\nExample:\n\n```\n{\n  \"$\": <transformed object>,\n  \"tx\": {\n    \"h\": <transaction id>\n  }\n}\n```\n\nFor a transaction in a block, it attaches one more attribute `blk`:\n\n```\n{\n  \"$\": <transformed object>,\n  \"tx\": {\n    \"h\": <transaction id>\n  },\n  \"blk\": {\n    \"i\": <block height (index)>,\n    \"h\": <block hash>,\n    \"t\": <block time>\n  }\n}\n```\n\n\nHere's an example:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0])\nbit.on(\"ready\", async () => {\n  let mempool = await bit.get(\"mempool\")\n  \/\/\n  \/\/ Since we have a \"map\" middleware, the transformed\n  \/\/ transactions are wrapped inside a \"$\" attribute.\n  \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n  \/\/\n  \/\/  mempool := {\n  \/\/    \"tx\": [{\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }, {\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }, {\n  \/\/      ...\n  \/\/    }, {\n  \/\/      \"$\": <e.out[0]>,\n  \/\/      \"tx\": {\n  \/\/        \"h\": <transaction id>\n  \/\/      }\n  \/\/    }]\n  \/\/  }\n  \/\/\n})\n```\n\nThis also applies to listeners:\n\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0].tape[0].cell.slice(1))\nbit.on(\"ready\", async () => {\n  bit.on(\"mempool\", (mempool) => {\n    \/\/\n    \/\/ Since we have a \"map\" middleware, the transformed\n    \/\/ transactions are wrapped inside a \"$\" attribute.\n    \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n    \/\/\n    \/\/  mempool := {\n    \/\/    \"$\": <e.out[0].tape[0].cell.slice(1)>,\n    \/\/    \"tx\": {\n    \/\/      \"h\": <transaction id>\n    \/\/    }\n    \/\/  }\n    \/\/\n    })\n    console.log(\"ONLY the OPRETURN cells\", e)\n})\n```\n\nIn case of block related requests, we also have an additional `blk` attribute attached automatically:\n\n```\nconst bitwork = require('bitwork')\nconst bit = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nbit.use(\"parse\", \"bob\")\nbit.use(\"filter\", (e) => e.out[0].tape[0].cell[0].ops !== \"OP_RETURN\")\nbit.use(\"map\", (e) => e.out[0].tape[0].cell.slice(1))\nbit.on(\"ready\", async () => {\n  let block = await bit.get(\"block\", 588000)\n  \/\/\n  \/\/ Since we have a \"map\" middleware, the transformed\n  \/\/ transactions are wrapped inside a \"$\" attribute.\n  \/\/ Also, an additional \"tx.h\" attribute is auto-attached.\n  \/\/\n  \/\/  block := {\n  \/\/    header: <block header>,\n  \/\/    tx: [\n  \/\/      {\n  \/\/        \"$\": <.out[0].tape[0].cell.slice(1)>,  \n  \/\/        \"tx\": {\n  \/\/          \"h\": <transaction id>\n  \/\/        },\n  \/\/        \"blk\": {\n  \/\/          \"i\": <block height>,\n  \/\/          \"h\": <block hash>,\n  \/\/          \"t\": <block time>\n  \/\/        }\n  \/\/      },\n  \/\/      ...\n  \/\/      {\n  \/\/        \"$\": <.out[0].tape[0].cell.slice(1)>,  \n  \/\/        \"tx\": {\n  \/\/          \"h\": <transaction id>\n  \/\/        },\n  \/\/        \"blk\": {\n  \/\/          \"i\": <block height>,\n  \/\/          \"h\": <block hash>,\n  \/\/          \"t\": <block time>\n  \/\/        }\n  \/\/      }\n  \/\/    ]\n  \/\/  }\n  \/\/\n})\n```\n\n> **NOTE**\n>\n> The \"map\" step is separate from the \"parse\" step because the \"parse\" takes care of deserialization, which won't vary much across applications, whereas \"map\" functions are application specific and will be different for every app.\n\n---\n\n# Troubleshoot\n\n## 1. How many bitworks to create?\n\nThere are two modes of bitwork usage:\n\n1. **Fetch mode:** for actively fetching data from the bitcoin network.\n2. **Listen mode:** for setting up an event handler to listen to events from the bitcoin network.\n\nIf your application involves both **fetching** and **listening**, you should create two separate bitwork instances: one for fetching, and the other for listening.\n\nHere's an example:\n\n```\nconst bitwork = require('bitwork')\nconst fetcher = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nfetcher.on(\"ready\", async () => {\n  let mempool = await fetcher.get(\"mempool\")\n  console.log(\"current mempool = \", mempool)\n})\nconst listener = new bitwork({ rpc: { user: \"root\", pass: \"bitcoin\" } })\nlistener.on(\"ready\", async () => {\n  listener.on(\"mempool\", (e) => {\n    console.log(\"new mempool transaction\", e)\n  })\n  listener.on(\"block\", (e) => {\n    console.log(\"new mempool transaction\", e)\n  })\n})\n```\n\nThings to note:\n\n1. We have created two bitwork instances: `fetcher` and `listener`.\n2. The `listener` can listen to both `mempool` and `block` events simultaneously.\n\n","171":"[![License: AGPL v3](https:\/\/img.shields.io\/badge\/License-AGPL%20v3-blue.svg)](https:\/\/www.gnu.org\/licenses\/agpl-3.0)\n[![js-standard-style](https:\/\/img.shields.io\/badge\/code%20style-standard-brightgreen.svg)](http:\/\/standardjs.com)\n[![code style: prettier](https:\/\/img.shields.io\/badge\/code_style-prettier-ff69b4.svg?style=flat-square)](https:\/\/github.com\/prettier\/prettier)\n[![Codechecks](https:\/\/raw.githubusercontent.com\/codechecks\/docs\/master\/images\/badges\/badge-default.svg?sanitize=true)](https:\/\/codechecks.io)\n\n# Blockchain.com Wallet\nBe Your Own Bank at [login.blockchain.com](https:\/\/login.blockchain.com).\nPlease [contact support](https:\/\/support.blockchain.com) if you have any issues using the wallet.\n\n## About\nThis repo contains the three codebases\/packages listed below.\n\n### Packages\n * [blockchain-info-components](.\/packages\/blockchain-info-components) The shared UI components library.\n * [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4) The functional library for handling wallets.\n * [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend) The frontend application built with React\/Redux.\n\n\n## Local Development\n1. Ensure Node version >= 14.16 is installed. Using [NVM](https:\/\/github.com\/nvm-sh\/nvm) is recommended.\n2. From the project root, run the following command to install dependencies: `.\/setup.sh`.\n4. Start the application in development mode: `yarn start`\n5. The frontend application will now be accessible via browser at `localhost:8080`\n\nIf you require the application to run locally over HTTPS, follow the instructions [here](.\/config\/ssl\/ssl.md).\nYou can disable SSL by setting the `DISABLE_SSL` env param to `true` with any start command. (e.g. `DISABLE_SSL=true yarn start:staging`)\n\n### Windows Support\nTo ensure proper support for Windows, please take the following actions before running the above setup instructions.\n1. Open a Powershell window with rights elevated to an Administrator.\n2. Run `npm install -g windows-build-tools`. This will install Python 2.7 and Visual C++ Build Tools which are required to compile some native Node modules.\n3. Ensure Python has been added to your environment variables by opening a cmd prompt and typing `python`. If you get a `CommandNotFoundException` message, add the folder `%USERPROFILE%\\.windows-build-tools\\python27` to your environment variables.\n\n### Tips & Useful Commands\n1. To completely remove all dependencies and artifacts run `yarn clean`\n2. To add\/remove an NPM package run `yarn add` or `yarn remove` in the package folder. After installing or uninstalling a NPM package, run `yarn` in the root folder to re-init the project\n3. All development specific dependencies should be installed as a `dev-dependency` in the top level `package.json` via `yarn i --save-dev [package-name]`\n4. All application specific dependencies should be installed in the specific packages `package.json` via `yarn i --save [package-name]`\n\n### Running Environments Locally\nThe frontend application can be ran locally with different build configurations found in `config\/env`.  The following commands are available:\n * `yarn start` Runs the application with the `development.js` configuration file\n * `yarn start:dev` Runs the application with the `development.js` configuration file\n * `yarn start:staging` Runs the application with the `staging.js` configuration file\n * `yarn start:prod` Runs the application with the `production.js` configuration file\n * `yarn run:prod` Runs the application mimicking the production environment entirely (i.e. code is bundled and minified, HMR is disabled,\n  Express server is used (`.\/server.js`) and the `production.js` configuration file is loaded)\n\nNotes:\n * Developers will need to manually create the `development.js` and `staging.js` files\n * Custom application runtimes are possible by modifying the corresponding environment files found in the `config\/env` folder\n \n### Useful Chrome Extensions\n * [React Developer Tools](https:\/\/chrome.google.com\/webstore\/detail\/react-developer-tools\/fmkadmapgofadopljbjfkapdkoienihi?hl=en) Inspect the React component tree\n * [Redux DevTools](https:\/\/chrome.google.com\/webstore\/detail\/redux-devtools\/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) View\/debug Redux state changes\n\n## Release Process\n#### Prerequisites\nTo be able to create a release follow these steps starting with \"Obtain a personal access token...\": \nhttps:\/\/github.com\/release-it\/release-it#github-releases\n\n`GITHUB_TOKEN` should be saved as `RELEASE_IT_TOKEN` instead in your bash_profile or wherever you keep env variables\n\nYou'll need git changelog to generate the history since the last release:\n`npm install -g changelog`\n\n#### Release Steps\n1) From the tip of the `development` branch, run `yarn release`\n2) Answer the questions prompted via CLI, accepting the defaults for each\n3) Once completed, this will create a new tag which will trigger a builds\n4) Once builds have finished, deploy the images to desired environments\n5) Test and verify the latest changes in desired environments\n6) Create PR to merge the HEAD of `development` into `master`\n7) Merge PR to `master` so that `master` always reflects what is currently in production\n\n## Code Quality\n * `yarn vet` Runs Prettier, lint JS, lint CSS and finally all unit tests\n\n### Linting\nWe follow the rules outlined by the [Javascript Standard Style](https:\/\/standardjs.com\/rules.html) as well as a few React specific rules.\n\nCode linting is handled by [ESLint](https:\/\/eslint.org\/). The following commands are available:\n * `yarn lint` Lints all packages\n * `yarn lint:components` Lints only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn lint:core` Lints only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn lint:frontend` Lints only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n * `yarn lint:fix` Automatically resolves fixable issues via ESLint\n\nThese IDE plugins\/packages assist with complying with these lint rules while developing:\n * [Atom](https:\/\/atom.io\/packages\/linter-js-standard)\n * [VS Code](https:\/\/marketplace.visualstudio.com\/items?itemName=chenxsan.vscode-standardjs)\n * [WebStorm](https:\/\/blog.jetbrains.com\/webstorm\/2017\/04\/using-javascript-standard-style\/)\n \n### Prettier\nWe follow all standard rules that are provided by Prettier. The following commands are available:\n\n * `yarn prettier` Runs Prettier against all packages\n * `yarn prettier:components` Runs Prettier against only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn prettier:core` Runs Prettier against only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn prettier:frontend` Runs Prettier against only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n \nIt is recommended to setup a Prettier plugin for your IDE plugins\/packages that will automatically prettify your files on save.\n * [Atom](https:\/\/atom.io\/packages\/prettier-atom)\n * [VS Code](https:\/\/marketplace.visualstudio.com\/items?itemName=esbenp.prettier-vscode)\n * [WebStorm](https:\/\/prettier.io\/docs\/en\/webstorm.html)\n \n *When installing the plugin for VS Code make sure you are on [v3.7.0 or lower](https:\/\/github.com\/prettier\/prettier-vscode\/issues\/1085#issuecomment-557027886)*\n \n### Unit Tests\nTesting is done via [Jest](https:\/\/facebook.github.io\/jest\/) and [Enzyme](http:\/\/airbnb.io\/enzyme\/).\n\n#### Running Tests\n * `yarn test` Runs unit tests for all packages\n * `yarn test:components` Runs unit tests for only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn test:core` Runs unit tests for only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn test:frontend` Runs unit tests for only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n \n _Note: if you see errors that Jest cannot resolve package imports, you may need to run `yarn test` before testing specific packages (eg, `yarn test:frontend`)_\n\n#### Running Tests via Watch\n * `yarn test:watch` Watches and then runs desired tests\n * `yarn test:components:watch` Watches and then runs desired tests for only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn test:core:watch` Watches and then runs desired tests for only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn test:frontend:watch` Watches and then runs desired tests for only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n\n#### Debugging Tests\nTo enable debugging for unit tests via the Chrome browser, run the following commands:\n * `yarn test:components:debug` Debugs unit tests for only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn test:core:debug` Debugs unit tests for only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn test:frontend:debug` Debugs unit tests for only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n\nAfter running one of the above commands, Node will wait for a debugger to attach before starting the tests.\nTo attach, simply open your browser and go to `chrome:\/\/inspect` and click on \"Open Dedicated DevTools for Node\",\nwhich will give you a list of available node instances you can connect to. Click on the address displayed in the terminal\n(usually localhost:9229) and you will be able to debug tests using Chrome's DevTools.\n\n#### Updating Snapshot Tests\nWe are snapshot testing UI some components. Here are the commands to update them when necessary:\n * `yarn test:components:update` Updates component snapshots for only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn test:frontend:update` Updates component snapshots for only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n\n### Code Coverage\nTo generate code coverage reports via [Istanbul](https:\/\/istanbul.js.org\/), the following commands are available:\n * `yarn coverage` Generates a coverage report for all packages\n * `yarn coverage:components` Generates coverage report for only [blockchain-info-components](.\/packages\/blockchain-info-components)\n * `yarn coverage:core` Generates coverage report for only [blockchain-wallet-v4](.\/packages\/blockchain-wallet-v4)\n * `yarn coverage:frontend` Generates coverage report for only [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend)\n\nDepending upon which coverage report was ran, the results can be found in the following directories:\n * `coverage\/index.html`\n * `coverage\/blockchain-info-components\/index.html`\n * `coverage\/blockchain-wallet-v4\/index.html`\n * `coverage\/blockchain-wallet-v4-frontend\/index.html`\nSimply open the `index.html` file in your browser to view.\n\n## TypeScript\nTypeScript is supported and should be used when adding new code. It's also recommended to replace legacy JS with TS when time allows.\n\n### TS Coverage\nWe are using [Codechecks](https:\/\/www.codechecks.io\/) and [Typecov](https:\/\/github.com\/codechecks\/typecov) for coverage reporting. Coverage is automatically analyzed for PRs and the following command is available.\n* `yarn codechecks`\n\n## Code Bundle Analysis\/Reports\nTo visualize and interact with the tree of the production code bundles files:\n * `yarn analyze`\nOnce completed, a browser will automatically open with the results.\n\n## Storybook\n[Storybook](https:\/\/github.com\/storybooks\/storybook) is used by the [blockchain-info-components](.\/packages\/blockchain-info-components) and [blockchain-wallet-v4-frontend](.\/packages\/blockchain-wallet-v4-frontend) packages to interactively view, develop and test components.\nThe following commands are available:\n * `storybook:build-wallet`: Builds the static storybook assets for wallet specific components (if base components is running locally, storybook will put wallet and base components into the same storybook UI)\n * `storybook:build-base`: Builds the static storybook assets for base shared components\n * `storybook:serve-wallet` Builds storybook assets and then serves them locally at `localhost:6006`\n * `storybook:serve-base` Builds storybook assets and then serves them locally at `localhost:6007`\n * `storybook:deploy-wallet` Builds storybook assets and then serves them to [github pages](https:\/\/blockchain.github.io\/blockchain-wallet-v4-frontend). **You will probably need to run `cd .\/packages\/blockchain-info-components && git remote add origin git@github.com:blockchain\/blockchain-wallet-v4-frontend.git` first.**\n * `storybook:deploy-base` Builds storybook assets and then serves them to [github pages](https:\/\/blockchain.github.io\/blockchain-wallet-v4-frontend). **You will probably need to run `cd .\/packages\/blockchain-info-components && git remote add origin git@github.com:blockchain\/blockchain-wallet-v4-frontend.git` first.**\n\nIf the deploy begins to fail, deleting the static build file before redeploy will likely help.\n\n## Contribute\nPlease review to the [Wiki](https:\/\/github.com\/blockchain\/blockchain-wallet-v4-frontend\/wiki) \n\n## Security\nSecurity issues can be reported to us in the following venues:\n\n* Email: security@blockchain.info\n* Bug Bounty: https:\/\/hackerone.com\/blockchain\n","172":"<img style=\"width:500px\" src=\"https:\/\/user-images.githubusercontent.com\/33088785\/145907555-c2d870a7-46aa-419e-a12b-8502c80c0849.png\">\n\n# LNURLVend\n## Offline bitcoin vending machine\n\n> <i>Join our <a href=\"https:\/\/t.me\/makerbits\">telegram support\/chat<\/a>.<\/i>\n\nLNURLVend is the next logic step after <a href=\"https:\/\/github.com\/arcbtc\/LNURLPoS\">LNURLPoS<\/a> <-- go to that repo to learn more about the concepts behind LNURLVend.\n\n### Demo video\n\nhttps:\/\/twitter.com\/arcbtc\/status\/1470541850566090757\n\n### Tutorial video\n\n<a href=\"https:\/\/www.youtube.com\/watch?v=Fg0UuuzsYXc&list=PLPj3KCksGbSYcLQoQbRGAtuHnQ4U4mXeL&index=38\" target=\"_blank\" ><img style=\"width:500px\" src=\"https:\/\/user-images.githubusercontent.com\/33088785\/146017455-5cda5ad7-ba7a-490b-8362-919102bde948.png\"><\/a>\n\n## Hardware\n\n![145817489-0223e99f-537b-4852-a8cb-26ceba8d4a5a](https:\/\/user-images.githubusercontent.com\/33088785\/145819968-96b2c263-cbf7-4b20-9237-aabe1fec5373.png)\n\n* Vending Machine. I use this excellent <a href=\"https:\/\/www.aliexpress.com\/item\/1005003681521257.html\">vending machine<\/a> \ud83e\udd29 (USE THIS PROMO CODE TO SAVE $45 **VSFPCZIIPKTM**)\n* ESP32 DEV MODULE\n* 12V to 5V Converter USB,3A\n* male\/male, female\/female, male\/female jumper wires\n* Keypad membrane\n* 1.4inch TFT ST7735\n* 12v battery (optional)\n* Wide breadboard (I used x2 normal breadboards stuck together)\n* 4 Channel Relay Module\n* Single relay module\n\n**Keypad membrane GPIO map:** \n12-> 32, last row (A,B,C,D) GND\n\n**TFT GPIO map:** \n[VCC - 5V (on the single relay), GND - GND, CS - GPIO5, Reset - GPIO16, AO (DC) - GPI17, SDA (MOSI) - GPIO23, SCK - GPIO18, LED - 3.3V (on the single relay)]\n\n![vending](https:\/\/user-images.githubusercontent.com\/33088785\/145814575-58988069-48b9-4e1d-8aa2-85be552be4c8.png)\n\n## Software\n\n### Arduino software install\n\n* Download\/install latest <a href=\"https:\/\/www.arduino.cc\/en\/software\">Arduino IDE<\/a>\n* Install ESP32 boards, using <a href=\"https:\/\/docs.espressif.com\/projects\/arduino-esp32\/en\/latest\/installing.html#installing-using-boards-manager\">boards manager<\/a>\n* Copy <a href=\"https:\/\/github.com\/arcbtc\/LNURLVend\/tree\/main\/libraries\">these libraries<\/a> into your Arduino IDE library folder\n* Plug in ESP32. From *Tools>Board>ESP32 Boards* select **ESP32 DEV MODULE**\n\n> *Note: You may need to roll your ESP32 boards back to an earlier version in the Arduino IDE, by using tools>boards>boards manager, searching for esp. I use v1.0.5(rc6), and have also used v1.0.4 which worked.*\n### LNbits extension\n\nTo make things easy (usually a few clicks on things like Raspiblitz), there is an <a href=\"https:\/\/github.com\/lnbits\/lnbits\/tree\/master\/lnbits\/extensions\/lnurlpos\">LNbits extension<\/a>.\nIf you want to make your own stand-alone server software that would be fairly easy to do, by replicating the lnurl.py file in the extension.\n\n### Future updates \nLooking forward to seeing this same project being used in a range of vending machines, all shapes and sizes.\n","173":"# Bitcoin-Keys-Generator\nPython module that generates private key, public key and wallet address from number\n\n# Usage\n\n`python generators 123` \n\nwithout any argument, script is converting number `1` by default. ","174":"Brainflayer\n===========\n\nBrainflayer is a Proof-of-Concept brainwallet cracking tool that uses\n[libsecp256k1](https:\/\/github.com\/bitcoin\/secp256k1) for pubkey generation.\nIt was originally released as part of my DEFCON talk about cracking brainwallets\n([slides](https:\/\/rya.nc\/dc23), [video](https:\/\/rya.nc\/b6), [why](https:\/\/rya.nc\/defcon-brainwallets.html)).\n\nThe name is a reference to [Mind Flayers](https:\/\/en.wikipedia.org\/wiki\/Illithid),\na race of monsters from the Dungeons & Dragons role-playing game. They eat\nbrains, psionically enslave people and look like lovecraftian horrors.\n\nThe current release is more than four times faster than the DEFCON release, and\nmany features have been added.\n\nIf brainflayer is useful to you, please get in touch to let me know. I'm very\ninterested in any research it's being used for, and I'm generally happy to\ncollaborate with academic groups.\n\nDisclaimer\n----------\nJust because you *can* steal someone's money doesn't mean you *should*.\nStealing would make you a jerk. Don't be a jerk.\n\nNo support will be provided at this time, and I may ignore or close issues\nrequesting support without responding.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nUsage\n-----\n\n### Basic\n\nPrecompute the bloom filter:\n\n`hex2blf example.hex example.blf`\n\nRun Brainflayer against it:\n\n`brainflayer -v -b example.blf -i phraselist.txt`\n\nor\n\n`your_generator | brainflayer -v -b example.blf`\n\n### Advanced\n\nBrainflayer's design is heavily influenced by [Unix philosophy](https:\/\/en.wikipedia.org\/wiki\/Unix_philosophy).\nIt (mostly) does one thing: hunt for tasty brainwallets. A major feature it\ndoes *not* have is generating candidate passwords\/passphrases. There are plenty\nof other great tools that do that, and brainflayer is happy to have you pipe\ntheir output to it.\n\nUnfortunately, brainflayer is not currently multithreaded. If you want to have\nit keep multiple cores busy, you'll have to come up with a way to distribute\nthe work yourself (brainflayer's -n and -k options may help). In my testing,\nbrainflayer benefits significantly from hyperthreading, so you may want to\nrun two copies per physical core. Also worth noting is that brainflayer mmaps\nits data files in shared memory, so additional brainflayer processes do not\nuse up that much additional RAM.\n\nWhile not strictly required, it is *highly* recommended to use the following\noptions:\n\n* `-m FILE` Load the ecmult table from `FILE` (generated with `ecmtabgen`)\n            rather than computing it on startup. This will allow multiple\n            brainflayer processes to share the same table in memory, and\n            signifigantly reduce startup time when using a large table.\n\n* `-f FILE` Verify check bloom filter matches against `FILE`, a list of all\n            hash160s generated with\n            `sort -u example.hex | xxd -r -p > example.bin`\n            Enough addresses exist on the Bitcoin network to cause false\n            positives in the bloom filter, this option will suppress them.\n\nBrainflayer supports a few other types of input via the `-t` option:\n\n* `-t keccak` passphrases to be hashed with keccak256 (some ethereum tools)\n\n* `-t priv` raw private keys - this can be used to support arbitrary\n            deterministic wallet schemes via an external program. Any trailing\n            data after the hex encoded private key will be included in\n            brainflayer's output as well, for reference. See also the `-I`\n            option if you want to crack a bunch of sequential keys, which has\n            special speed optimizations.\n\n* `-t warp` salts or passwords\/passphrases for WarpWallet\n\n* `-t bwio` salts or passwords\/passphrases for brainwallet.io\n\n* `-t bv2`  salts or passwords\/passphrases for brainv2 - this one is *very* slow\n            on CPU, however the parameter choices make it a great target for GPUs\n            and FPGAs.\n\n* `-t rush` passwords for password-protected rushwallets - pass the fragment (the\n            part of the url after the #) using `-r`. Almost all wrong passwords\n            will be rejected even without a bloom filter.\n\nAddress types can be specified with the `-c` option:\n\n* `-c u` uncompressed addresses\n\n* `-c c` compressed addresses\n\n* `-c e` ethereum addresses\n\n* `-c x` most signifigant bits of public point's x coordinate\n\nIt's possible to combine two or more of these, e.g. the default is `-c uc`.\n\nAn incremental private key brute force mode is available for fans of\n[directory.io](http:\/\/www.directory.io\/), try\n\n`brainflayer -v -I 0000000000000000000000000000000000000000000000000000000000000001 -b example.blf`\n\nSee the output of `brainflayer -h` for more detailed usage info.\n\nAlso included is `blfchk` - you can pipe it hex encoded hash160 to check a\nbloom filter file for. It's very fast - it can easily check millions of\nhash160s per second. Not entirely sure what this is good for but I'm sure\nyou'll come up with something.\n\nBuilding\n--------\n\nShould compile on Linux with `make` provided you have the required devel libs\ninstalled (at least openssl and gmp are required along with libsecp256k1's\nbuild dependencies). I really need to learn autotools. If you file an issue\nabout a build failure in libsecp256k1 I will close it.\n\nDependencies should install with\n\n```\napt install build-essential libgmp-dev libssl-dev\n```\n\nSupported build target is currently Ubuntu 20.04 on amd64\/x86_64. Issues with\nbuilding for other platforms probably won\u2019t be fixed. In particular, Kali Linux\nis *not* supported. Support for operating systems other than Linux would require\nextensive refactoring of Brainflayer's memory optimizations and is not happening.\n\nRedistribution of compiled `brainflayer` binaries is prohibited, and\nunauthorized binaries probably contain malware.\n\nAuthors\n-------\n\nThe bulk of Brainflayer was written by Ryan Castellucci. Nicolas Courtois and\nGuangyan Song contributed the code in `ec_pubkey_fast.c` which more than\ndoubles the speed of public key computations compared with the stock secp256k1\nlibrary from Bitcoin. This code uses a much larger table for ec multiplication\nand optimized routines for ec addition and doubling.\n","175":"# BUIDL Bootcamp\n\nIf you're on Windows, [watch this video](https:\/\/youtu.be\/qVQO7pezDWM). Otherwise:\n\n### Step 1: Git\n\nGit is the primary collaboration software for software development -- like Google Docs for programmers.\n\nTo check whether you have it installed go to your terminal, type \u201cgit\u201d and hit enter. If you don\u2019t see a bunch of instructions (see pic below), you don\u2019t have git installed and need to install [Git](https:\/\/git-scm.com\/book\/en\/v2\/Getting-Started-Installing-Git)\n\n![image](.\/images\/git.png)\n\n### Step 2: Github\n\n[Create a GitHub account](https:\/\/github.com\/join) if you don\u2019t already have one.\n\n### Step 3: Python\n\nGo to your terminal, type \u201cpython3\u201d and hit enter. If you don\u2019t see a \u201cpython prompt\u201d (see pic below) then you need to [install Python 3](https:\/\/docs.python-guide.org\/starting\/installation\/). Hit control-d or call the python `exit()` function to exit.\n\n![image](.\/images\/prompt.png)\n\n\n### Step 4: Clone the Project with Git, install dependencies, and run it\n\n```\ngit clone https:\/\/github.com\/justinmoon\/digital-cash.git\ncd digital-cash\npython3 -m venv venv\nsource venv\/bin\/activate\npython3 -m pip install -r requirements.txt\njupyter notebook\n```\n\nThis will open up your web browser to a page that looks like the image below. This is [Jupyter Notebook](http:\/\/jupyter.org\/), which is basically a little website that\u2019s run on only your computer.\n\nClick the \"PNGCoin Workbook.ipynb\" link to follow along with this first lesson.\n\n### Using Jupyter Notebook\n\nCheck out [this tutorial](https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tutorial\/) to learn more about using Jupyter Notebook.\n\nIf you stop Jupyter for any reason and later want to restart it:\n\n```\ncd digital-cash\nsource venv\/bin\/activate\njupyter notebook\n```\n","176":"BitcoinEmissions\n================\n\nA project to calculate CO2 emissions of mining bitcoin.\n\nMotivation\n==========\n\nWe wanted to understand how much energy was going into the computing the hashes in bitcoin and hence how much CO2 was being produced. \n\n\n\nAssumptions\n===========\n\nGenerating electricity releases 500 grams of CO2\/kWhe. Based on:  [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Electricity_generation#Environmental_concerns)\n\nThe average efficiency of the bitcoin miners in the system is 2000 Mhash\/J. Which is conservative. Source: [mining hardware comparison](https:\/\/en.bitcoin.it\/wiki\/Mining_hardware_comparison)\n\nWe have generated a function which fits the HashRate up to now - it assumes it's exponental.\n\nResults\n=======\n\nAccording to our calculations as of May 1st 2014 each bitcoin will release ~103 kg of CO2 into the atmosphere. That happens once every 24 seconds. \n\nIf efficiency of bitcoin miners stays the same. That number will reach ~1602 kg of CO2 by May 1st 2015. \n\nRunning the code\n================\n\nWe've provided the code which is Wolfram Mathematica (version 9). \n","177":"LndHub\n======\n\nWrapper for Lightning Network Daemon (lnd). It provides separate accounts with minimum trust for end users.\n\nINSTALLATION\n------------\n\nYou can use those guides or follow instructions below:\n\n* https:\/\/github.com\/dangeross\/guides\/blob\/master\/raspibolt\/raspibolt_6B_lndhub.md\n* https:\/\/medium.com\/@jpthor\/running-lndhub-on-mac-osx-5be6671b2e0c\n\n```\ngit clone git@github.com:BlueWallet\/LndHub.git\ncd LndHub\nnpm i\n```\n\nInstall `bitcoind`, `lnd`, and `redis`. Edit LndHub's `config.js` to set it up correctly.\nCopy the files `admin.macaroon` (for Bitcoin mainnet, usually stored in `~\/.lnd\/data\/chain\/bitcoin\/mainnet\/admin.macaroon`)\nand `tls.cert` (usually stored in `~\/.lnd\/tls.cert`) into the root folder of LndHub.\n\nLndHub expects LND's wallet to be unlocked, if not \u2014 it will attempt to unlock it with the password stored in `config.lnd.password`.\nDon't forget to configure disk-persistence for `redis` (e.g., you may want to set `appendonly` to  `yes` in `redis.conf` (see\nhttp:\/\/redis.io\/topics\/persistence for more information).\n\nIf you have no `bitcoind` instance, for example if you use neutrino, or you have no bitcoind wallet, \nfor example if you use LND for wallet managment, you can remove the bitcoind settings from `config.js`.\nPlease note that this feature is limited to Bitcoin, so you can't use it if you use any other cryptocurrency with LND (e.g., Litecoin).\n\n### Deploy to Heroku\n\nAdd config vars :\n* `CONFIG` : json serialized config object\n* `MACAROON`: hex-encoded `admin.macaroon`\n* `TLSCERT`: hex-encoded `tls.cert`\n\n### Run in docker\n\nLndHub is available on Docker Hub as [`bluewalletorganization\/lndhub`](https:\/\/hub.docker.com\/r\/bluewalletorganization\/lndhub).\nPlease note that this requires a separate instance of redis and LND and optionally, bitcoind.\nYou can also view Umbrel's implementation using docker-compose [here](https:\/\/github.com\/getumbrel\/umbrel\/blob\/280c87f0f323666b1b0552aeb24f60df94d1e43c\/apps\/lndhub\/docker-compose.yml).\n\n### Reference client implementation\n\nCan be used in ReactNative or Nodejs environment\n\n* https:\/\/github.com\/BlueWallet\/BlueWallet\/blob\/master\/class\/wallets\/lightning-custodian-wallet.js\n\n\n\n### Tests\n\nAcceptance tests are in https:\/\/github.com\/BlueWallet\/BlueWallet\/blob\/master\/tests\/integration\/lightning-custodian-wallet.test.js\n\n![image](https:\/\/user-images.githubusercontent.com\/1913337\/52418916-f30beb00-2ae6-11e9-9d63-17189dc1ae8c.png)\n\n\n\n## Responsible disclosure\n\nFound critical bugs\/vulnerabilities? Please email them to bluewallet@bluewallet.io\nThanks!\n","178":"","179":"# AI-Trader\n\nWe had some good codes going here but some new ideas have happened. They will be shown here (Different branch) and\nover at [TheDoctorAI\/edge-learner](https:\/\/github.com\/TheDoctorAI\/edge-learner)\n\n------------------------------------------------------------------\n\n---- Setting Up Locally:\n\n`pipenv sync`\n\n`pipenv shell`\n\n`python -m ipykernel install --user --name=aitrader`\n\n`jupyter notebook --ip=127.0.0.1`\n\n---- At this point you should be able to switch to your Pipenv's Python as kernel in notebook.\n\n------------------------------------------------------------------\n\nor...\n\nAll of the .ipynb scripts in this repo can be run on Google Colaboratory. There is a Colab button link on each of the script pages here on Github. For instance: https:\/\/github.com\/TheDoctorAI\/AI-Trader\/blob\/master\/lstm_forecaster.ipynb\n"}}